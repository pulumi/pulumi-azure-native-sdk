// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mission

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Action Performed by approver
type ActionPerformed string

const (
	// Action was Approved
	ActionPerformedApproved = ActionPerformed("Approved")
	// Action was Rejected
	ActionPerformedRejected = ActionPerformed("Rejected")
)

func (ActionPerformed) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionPerformed)(nil)).Elem()
}

func (e ActionPerformed) ToActionPerformedOutput() ActionPerformedOutput {
	return pulumi.ToOutput(e).(ActionPerformedOutput)
}

func (e ActionPerformed) ToActionPerformedOutputWithContext(ctx context.Context) ActionPerformedOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActionPerformedOutput)
}

func (e ActionPerformed) ToActionPerformedPtrOutput() ActionPerformedPtrOutput {
	return e.ToActionPerformedPtrOutputWithContext(context.Background())
}

func (e ActionPerformed) ToActionPerformedPtrOutputWithContext(ctx context.Context) ActionPerformedPtrOutput {
	return ActionPerformed(e).ToActionPerformedOutputWithContext(ctx).ToActionPerformedPtrOutputWithContext(ctx)
}

func (e ActionPerformed) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionPerformed) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionPerformed) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ActionPerformed) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActionPerformedOutput struct{ *pulumi.OutputState }

func (ActionPerformedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionPerformed)(nil)).Elem()
}

func (o ActionPerformedOutput) ToActionPerformedOutput() ActionPerformedOutput {
	return o
}

func (o ActionPerformedOutput) ToActionPerformedOutputWithContext(ctx context.Context) ActionPerformedOutput {
	return o
}

func (o ActionPerformedOutput) ToActionPerformedPtrOutput() ActionPerformedPtrOutput {
	return o.ToActionPerformedPtrOutputWithContext(context.Background())
}

func (o ActionPerformedOutput) ToActionPerformedPtrOutputWithContext(ctx context.Context) ActionPerformedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionPerformed) *ActionPerformed {
		return &v
	}).(ActionPerformedPtrOutput)
}

func (o ActionPerformedOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActionPerformedOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionPerformed) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActionPerformedOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionPerformedOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionPerformed) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActionPerformedPtrOutput struct{ *pulumi.OutputState }

func (ActionPerformedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionPerformed)(nil)).Elem()
}

func (o ActionPerformedPtrOutput) ToActionPerformedPtrOutput() ActionPerformedPtrOutput {
	return o
}

func (o ActionPerformedPtrOutput) ToActionPerformedPtrOutputWithContext(ctx context.Context) ActionPerformedPtrOutput {
	return o
}

func (o ActionPerformedPtrOutput) Elem() ActionPerformedOutput {
	return o.ApplyT(func(v *ActionPerformed) ActionPerformed {
		if v != nil {
			return *v
		}
		var ret ActionPerformed
		return ret
	}).(ActionPerformedOutput)
}

func (o ActionPerformedPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionPerformedPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ActionPerformed) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActionPerformedInput is an input type that accepts values of the ActionPerformed enum
// A concrete instance of `ActionPerformedInput` can be one of the following:
//
//	ActionPerformedApproved
//	ActionPerformedRejected
type ActionPerformedInput interface {
	pulumi.Input

	ToActionPerformedOutput() ActionPerformedOutput
	ToActionPerformedOutputWithContext(context.Context) ActionPerformedOutput
}

var actionPerformedPtrType = reflect.TypeOf((**ActionPerformed)(nil)).Elem()

type ActionPerformedPtrInput interface {
	pulumi.Input

	ToActionPerformedPtrOutput() ActionPerformedPtrOutput
	ToActionPerformedPtrOutputWithContext(context.Context) ActionPerformedPtrOutput
}

type actionPerformedPtr string

func ActionPerformedPtr(v string) ActionPerformedPtrInput {
	return (*actionPerformedPtr)(&v)
}

func (*actionPerformedPtr) ElementType() reflect.Type {
	return actionPerformedPtrType
}

func (in *actionPerformedPtr) ToActionPerformedPtrOutput() ActionPerformedPtrOutput {
	return pulumi.ToOutput(in).(ActionPerformedPtrOutput)
}

func (in *actionPerformedPtr) ToActionPerformedPtrOutputWithContext(ctx context.Context) ActionPerformedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActionPerformedPtrOutput)
}

// Approval required for deploying service catalog templates (Required or NotRequired).
type ApprovalPolicy string

const (
	// Approval will be required for the specified action.
	ApprovalPolicyRequired = ApprovalPolicy("Required")
	// Approval will not be required for the specified action.
	ApprovalPolicyNotRequired = ApprovalPolicy("NotRequired")
)

func (ApprovalPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalPolicy)(nil)).Elem()
}

func (e ApprovalPolicy) ToApprovalPolicyOutput() ApprovalPolicyOutput {
	return pulumi.ToOutput(e).(ApprovalPolicyOutput)
}

func (e ApprovalPolicy) ToApprovalPolicyOutputWithContext(ctx context.Context) ApprovalPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ApprovalPolicyOutput)
}

func (e ApprovalPolicy) ToApprovalPolicyPtrOutput() ApprovalPolicyPtrOutput {
	return e.ToApprovalPolicyPtrOutputWithContext(context.Background())
}

func (e ApprovalPolicy) ToApprovalPolicyPtrOutputWithContext(ctx context.Context) ApprovalPolicyPtrOutput {
	return ApprovalPolicy(e).ToApprovalPolicyOutputWithContext(ctx).ToApprovalPolicyPtrOutputWithContext(ctx)
}

func (e ApprovalPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApprovalPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApprovalPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ApprovalPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ApprovalPolicyOutput struct{ *pulumi.OutputState }

func (ApprovalPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalPolicy)(nil)).Elem()
}

func (o ApprovalPolicyOutput) ToApprovalPolicyOutput() ApprovalPolicyOutput {
	return o
}

func (o ApprovalPolicyOutput) ToApprovalPolicyOutputWithContext(ctx context.Context) ApprovalPolicyOutput {
	return o
}

func (o ApprovalPolicyOutput) ToApprovalPolicyPtrOutput() ApprovalPolicyPtrOutput {
	return o.ToApprovalPolicyPtrOutputWithContext(context.Background())
}

func (o ApprovalPolicyOutput) ToApprovalPolicyPtrOutputWithContext(ctx context.Context) ApprovalPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApprovalPolicy) *ApprovalPolicy {
		return &v
	}).(ApprovalPolicyPtrOutput)
}

func (o ApprovalPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ApprovalPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ApprovalPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ApprovalPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ApprovalPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ApprovalPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ApprovalPolicyPtrOutput struct{ *pulumi.OutputState }

func (ApprovalPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalPolicy)(nil)).Elem()
}

func (o ApprovalPolicyPtrOutput) ToApprovalPolicyPtrOutput() ApprovalPolicyPtrOutput {
	return o
}

func (o ApprovalPolicyPtrOutput) ToApprovalPolicyPtrOutputWithContext(ctx context.Context) ApprovalPolicyPtrOutput {
	return o
}

func (o ApprovalPolicyPtrOutput) Elem() ApprovalPolicyOutput {
	return o.ApplyT(func(v *ApprovalPolicy) ApprovalPolicy {
		if v != nil {
			return *v
		}
		var ret ApprovalPolicy
		return ret
	}).(ApprovalPolicyOutput)
}

func (o ApprovalPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ApprovalPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ApprovalPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ApprovalPolicyInput is an input type that accepts values of the ApprovalPolicy enum
// A concrete instance of `ApprovalPolicyInput` can be one of the following:
//
//	ApprovalPolicyRequired
//	ApprovalPolicyNotRequired
type ApprovalPolicyInput interface {
	pulumi.Input

	ToApprovalPolicyOutput() ApprovalPolicyOutput
	ToApprovalPolicyOutputWithContext(context.Context) ApprovalPolicyOutput
}

var approvalPolicyPtrType = reflect.TypeOf((**ApprovalPolicy)(nil)).Elem()

type ApprovalPolicyPtrInput interface {
	pulumi.Input

	ToApprovalPolicyPtrOutput() ApprovalPolicyPtrOutput
	ToApprovalPolicyPtrOutputWithContext(context.Context) ApprovalPolicyPtrOutput
}

type approvalPolicyPtr string

func ApprovalPolicyPtr(v string) ApprovalPolicyPtrInput {
	return (*approvalPolicyPtr)(&v)
}

func (*approvalPolicyPtr) ElementType() reflect.Type {
	return approvalPolicyPtrType
}

func (in *approvalPolicyPtr) ToApprovalPolicyPtrOutput() ApprovalPolicyPtrOutput {
	return pulumi.ToOutput(in).(ApprovalPolicyPtrOutput)
}

func (in *approvalPolicyPtr) ToApprovalPolicyPtrOutputWithContext(ctx context.Context) ApprovalPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ApprovalPolicyPtrOutput)
}

// Status of the approval. Uses ApprovalStatus enum.
type ApprovalStatus string

const (
	// ApprovalStatus Type Approved
	ApprovalStatusApproved = ApprovalStatus("Approved")
	// ApprovalStatus Type Rejected
	ApprovalStatusRejected = ApprovalStatus("Rejected")
	// ApprovalStatus Type Pending
	ApprovalStatusPending = ApprovalStatus("Pending")
	// ApprovalStatus Type Deleted
	ApprovalStatusDeleted = ApprovalStatus("Deleted")
	// ApprovalStatus Type Expired
	ApprovalStatusExpired = ApprovalStatus("Expired")
)

func (ApprovalStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStatus)(nil)).Elem()
}

func (e ApprovalStatus) ToApprovalStatusOutput() ApprovalStatusOutput {
	return pulumi.ToOutput(e).(ApprovalStatusOutput)
}

func (e ApprovalStatus) ToApprovalStatusOutputWithContext(ctx context.Context) ApprovalStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ApprovalStatusOutput)
}

func (e ApprovalStatus) ToApprovalStatusPtrOutput() ApprovalStatusPtrOutput {
	return e.ToApprovalStatusPtrOutputWithContext(context.Background())
}

func (e ApprovalStatus) ToApprovalStatusPtrOutputWithContext(ctx context.Context) ApprovalStatusPtrOutput {
	return ApprovalStatus(e).ToApprovalStatusOutputWithContext(ctx).ToApprovalStatusPtrOutputWithContext(ctx)
}

func (e ApprovalStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApprovalStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ApprovalStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ApprovalStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ApprovalStatusOutput struct{ *pulumi.OutputState }

func (ApprovalStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalStatus)(nil)).Elem()
}

func (o ApprovalStatusOutput) ToApprovalStatusOutput() ApprovalStatusOutput {
	return o
}

func (o ApprovalStatusOutput) ToApprovalStatusOutputWithContext(ctx context.Context) ApprovalStatusOutput {
	return o
}

func (o ApprovalStatusOutput) ToApprovalStatusPtrOutput() ApprovalStatusPtrOutput {
	return o.ToApprovalStatusPtrOutputWithContext(context.Background())
}

func (o ApprovalStatusOutput) ToApprovalStatusPtrOutputWithContext(ctx context.Context) ApprovalStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApprovalStatus) *ApprovalStatus {
		return &v
	}).(ApprovalStatusPtrOutput)
}

func (o ApprovalStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ApprovalStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ApprovalStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ApprovalStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ApprovalStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ApprovalStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ApprovalStatusPtrOutput struct{ *pulumi.OutputState }

func (ApprovalStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalStatus)(nil)).Elem()
}

func (o ApprovalStatusPtrOutput) ToApprovalStatusPtrOutput() ApprovalStatusPtrOutput {
	return o
}

func (o ApprovalStatusPtrOutput) ToApprovalStatusPtrOutputWithContext(ctx context.Context) ApprovalStatusPtrOutput {
	return o
}

func (o ApprovalStatusPtrOutput) Elem() ApprovalStatusOutput {
	return o.ApplyT(func(v *ApprovalStatus) ApprovalStatus {
		if v != nil {
			return *v
		}
		var ret ApprovalStatus
		return ret
	}).(ApprovalStatusOutput)
}

func (o ApprovalStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ApprovalStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ApprovalStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ApprovalStatusInput is an input type that accepts values of the ApprovalStatus enum
// A concrete instance of `ApprovalStatusInput` can be one of the following:
//
//	ApprovalStatusApproved
//	ApprovalStatusRejected
//	ApprovalStatusPending
//	ApprovalStatusDeleted
//	ApprovalStatusExpired
type ApprovalStatusInput interface {
	pulumi.Input

	ToApprovalStatusOutput() ApprovalStatusOutput
	ToApprovalStatusOutputWithContext(context.Context) ApprovalStatusOutput
}

var approvalStatusPtrType = reflect.TypeOf((**ApprovalStatus)(nil)).Elem()

type ApprovalStatusPtrInput interface {
	pulumi.Input

	ToApprovalStatusPtrOutput() ApprovalStatusPtrOutput
	ToApprovalStatusPtrOutputWithContext(context.Context) ApprovalStatusPtrOutput
}

type approvalStatusPtr string

func ApprovalStatusPtr(v string) ApprovalStatusPtrInput {
	return (*approvalStatusPtr)(&v)
}

func (*approvalStatusPtr) ElementType() reflect.Type {
	return approvalStatusPtrType
}

func (in *approvalStatusPtr) ToApprovalStatusPtrOutput() ApprovalStatusPtrOutput {
	return pulumi.ToOutput(in).(ApprovalStatusPtrOutput)
}

func (in *approvalStatusPtr) ToApprovalStatusPtrOutputWithContext(ctx context.Context) ApprovalStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ApprovalStatusPtrOutput)
}

// Community Endpoint Protocol Enum
type CommunityEndpointProtocol string

const (
	// CommunityEndpointProtocol Type ANY
	CommunityEndpointProtocolANY = CommunityEndpointProtocol("ANY")
	// CommunityEndpointProtocol Type TCP
	CommunityEndpointProtocolTCP = CommunityEndpointProtocol("TCP")
	// CommunityEndpointProtocol Type UDP
	CommunityEndpointProtocolUDP = CommunityEndpointProtocol("UDP")
	// CommunityEndpointProtocol Type ICMP
	CommunityEndpointProtocolICMP = CommunityEndpointProtocol("ICMP")
	// CommunityEndpointProtocol Type ESP
	CommunityEndpointProtocolESP = CommunityEndpointProtocol("ESP")
	// CommunityEndpointProtocol Type AH
	CommunityEndpointProtocolAH = CommunityEndpointProtocol("AH")
	// CommunityEndpointProtocol Type HTTPS
	CommunityEndpointProtocolHTTPS = CommunityEndpointProtocol("HTTPS")
	// CommunityEndpointProtocol Type HTTP
	CommunityEndpointProtocolHTTP = CommunityEndpointProtocol("HTTP")
)

func (CommunityEndpointProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityEndpointProtocol)(nil)).Elem()
}

func (e CommunityEndpointProtocol) ToCommunityEndpointProtocolOutput() CommunityEndpointProtocolOutput {
	return pulumi.ToOutput(e).(CommunityEndpointProtocolOutput)
}

func (e CommunityEndpointProtocol) ToCommunityEndpointProtocolOutputWithContext(ctx context.Context) CommunityEndpointProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CommunityEndpointProtocolOutput)
}

func (e CommunityEndpointProtocol) ToCommunityEndpointProtocolPtrOutput() CommunityEndpointProtocolPtrOutput {
	return e.ToCommunityEndpointProtocolPtrOutputWithContext(context.Background())
}

func (e CommunityEndpointProtocol) ToCommunityEndpointProtocolPtrOutputWithContext(ctx context.Context) CommunityEndpointProtocolPtrOutput {
	return CommunityEndpointProtocol(e).ToCommunityEndpointProtocolOutputWithContext(ctx).ToCommunityEndpointProtocolPtrOutputWithContext(ctx)
}

func (e CommunityEndpointProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CommunityEndpointProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CommunityEndpointProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CommunityEndpointProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CommunityEndpointProtocolOutput struct{ *pulumi.OutputState }

func (CommunityEndpointProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityEndpointProtocol)(nil)).Elem()
}

func (o CommunityEndpointProtocolOutput) ToCommunityEndpointProtocolOutput() CommunityEndpointProtocolOutput {
	return o
}

func (o CommunityEndpointProtocolOutput) ToCommunityEndpointProtocolOutputWithContext(ctx context.Context) CommunityEndpointProtocolOutput {
	return o
}

func (o CommunityEndpointProtocolOutput) ToCommunityEndpointProtocolPtrOutput() CommunityEndpointProtocolPtrOutput {
	return o.ToCommunityEndpointProtocolPtrOutputWithContext(context.Background())
}

func (o CommunityEndpointProtocolOutput) ToCommunityEndpointProtocolPtrOutputWithContext(ctx context.Context) CommunityEndpointProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommunityEndpointProtocol) *CommunityEndpointProtocol {
		return &v
	}).(CommunityEndpointProtocolPtrOutput)
}

func (o CommunityEndpointProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CommunityEndpointProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CommunityEndpointProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CommunityEndpointProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CommunityEndpointProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CommunityEndpointProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CommunityEndpointProtocolPtrOutput struct{ *pulumi.OutputState }

func (CommunityEndpointProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommunityEndpointProtocol)(nil)).Elem()
}

func (o CommunityEndpointProtocolPtrOutput) ToCommunityEndpointProtocolPtrOutput() CommunityEndpointProtocolPtrOutput {
	return o
}

func (o CommunityEndpointProtocolPtrOutput) ToCommunityEndpointProtocolPtrOutputWithContext(ctx context.Context) CommunityEndpointProtocolPtrOutput {
	return o
}

func (o CommunityEndpointProtocolPtrOutput) Elem() CommunityEndpointProtocolOutput {
	return o.ApplyT(func(v *CommunityEndpointProtocol) CommunityEndpointProtocol {
		if v != nil {
			return *v
		}
		var ret CommunityEndpointProtocol
		return ret
	}).(CommunityEndpointProtocolOutput)
}

func (o CommunityEndpointProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CommunityEndpointProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CommunityEndpointProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CommunityEndpointProtocolInput is an input type that accepts values of the CommunityEndpointProtocol enum
// A concrete instance of `CommunityEndpointProtocolInput` can be one of the following:
//
//	CommunityEndpointProtocolANY
//	CommunityEndpointProtocolTCP
//	CommunityEndpointProtocolUDP
//	CommunityEndpointProtocolICMP
//	CommunityEndpointProtocolESP
//	CommunityEndpointProtocolAH
//	CommunityEndpointProtocolHTTPS
//	CommunityEndpointProtocolHTTP
type CommunityEndpointProtocolInput interface {
	pulumi.Input

	ToCommunityEndpointProtocolOutput() CommunityEndpointProtocolOutput
	ToCommunityEndpointProtocolOutputWithContext(context.Context) CommunityEndpointProtocolOutput
}

var communityEndpointProtocolPtrType = reflect.TypeOf((**CommunityEndpointProtocol)(nil)).Elem()

type CommunityEndpointProtocolPtrInput interface {
	pulumi.Input

	ToCommunityEndpointProtocolPtrOutput() CommunityEndpointProtocolPtrOutput
	ToCommunityEndpointProtocolPtrOutputWithContext(context.Context) CommunityEndpointProtocolPtrOutput
}

type communityEndpointProtocolPtr string

func CommunityEndpointProtocolPtr(v string) CommunityEndpointProtocolPtrInput {
	return (*communityEndpointProtocolPtr)(&v)
}

func (*communityEndpointProtocolPtr) ElementType() reflect.Type {
	return communityEndpointProtocolPtrType
}

func (in *communityEndpointProtocolPtr) ToCommunityEndpointProtocolPtrOutput() CommunityEndpointProtocolPtrOutput {
	return pulumi.ToOutput(in).(CommunityEndpointProtocolPtrOutput)
}

func (in *communityEndpointProtocolPtr) ToCommunityEndpointProtocolPtrOutputWithContext(ctx context.Context) CommunityEndpointProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CommunityEndpointProtocolPtrOutput)
}

// Destination Type.
type DestinationType string

const (
	// DestinationType Type FQDN
	DestinationTypeFQDN = DestinationType("FQDN")
	// DestinationType Type FQDNTag
	DestinationTypeFQDNTag = DestinationType("FQDNTag")
	// DestinationType Type IPAddress
	DestinationTypeIPAddress = DestinationType("IPAddress")
	// DestinationType Type PrivateNetwork
	DestinationTypePrivateNetwork = DestinationType("PrivateNetwork")
)

func (DestinationType) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationType)(nil)).Elem()
}

func (e DestinationType) ToDestinationTypeOutput() DestinationTypeOutput {
	return pulumi.ToOutput(e).(DestinationTypeOutput)
}

func (e DestinationType) ToDestinationTypeOutputWithContext(ctx context.Context) DestinationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DestinationTypeOutput)
}

func (e DestinationType) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return e.ToDestinationTypePtrOutputWithContext(context.Background())
}

func (e DestinationType) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return DestinationType(e).ToDestinationTypeOutputWithContext(ctx).ToDestinationTypePtrOutputWithContext(ctx)
}

func (e DestinationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DestinationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DestinationTypeOutput struct{ *pulumi.OutputState }

func (DestinationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationType)(nil)).Elem()
}

func (o DestinationTypeOutput) ToDestinationTypeOutput() DestinationTypeOutput {
	return o
}

func (o DestinationTypeOutput) ToDestinationTypeOutputWithContext(ctx context.Context) DestinationTypeOutput {
	return o
}

func (o DestinationTypeOutput) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return o.ToDestinationTypePtrOutputWithContext(context.Background())
}

func (o DestinationTypeOutput) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationType) *DestinationType {
		return &v
	}).(DestinationTypePtrOutput)
}

func (o DestinationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DestinationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DestinationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DestinationTypePtrOutput struct{ *pulumi.OutputState }

func (DestinationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationType)(nil)).Elem()
}

func (o DestinationTypePtrOutput) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return o
}

func (o DestinationTypePtrOutput) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return o
}

func (o DestinationTypePtrOutput) Elem() DestinationTypeOutput {
	return o.ApplyT(func(v *DestinationType) DestinationType {
		if v != nil {
			return *v
		}
		var ret DestinationType
		return ret
	}).(DestinationTypeOutput)
}

func (o DestinationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DestinationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DestinationTypeInput is an input type that accepts values of the DestinationType enum
// A concrete instance of `DestinationTypeInput` can be one of the following:
//
//	DestinationTypeFQDN
//	DestinationTypeFQDNTag
//	DestinationTypeIPAddress
//	DestinationTypePrivateNetwork
type DestinationTypeInput interface {
	pulumi.Input

	ToDestinationTypeOutput() DestinationTypeOutput
	ToDestinationTypeOutputWithContext(context.Context) DestinationTypeOutput
}

var destinationTypePtrType = reflect.TypeOf((**DestinationType)(nil)).Elem()

type DestinationTypePtrInput interface {
	pulumi.Input

	ToDestinationTypePtrOutput() DestinationTypePtrOutput
	ToDestinationTypePtrOutputWithContext(context.Context) DestinationTypePtrOutput
}

type destinationTypePtr string

func DestinationTypePtr(v string) DestinationTypePtrInput {
	return (*destinationTypePtr)(&v)
}

func (*destinationTypePtr) ElementType() reflect.Type {
	return destinationTypePtrType
}

func (in *destinationTypePtr) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return pulumi.ToOutput(in).(DestinationTypePtrOutput)
}

func (in *destinationTypePtr) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DestinationTypePtrOutput)
}

// Diagnostic Destination.
type DiagnosticDestination string

const (
	// DiagnosticDestination Type CommunityOnly
	DiagnosticDestinationCommunityOnly = DiagnosticDestination("CommunityOnly")
	// DiagnosticDestination Type EnclaveOnly
	DiagnosticDestinationEnclaveOnly = DiagnosticDestination("EnclaveOnly")
	// DiagnosticDestination Type Both
	DiagnosticDestinationBoth = DiagnosticDestination("Both")
)

func (DiagnosticDestination) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticDestination)(nil)).Elem()
}

func (e DiagnosticDestination) ToDiagnosticDestinationOutput() DiagnosticDestinationOutput {
	return pulumi.ToOutput(e).(DiagnosticDestinationOutput)
}

func (e DiagnosticDestination) ToDiagnosticDestinationOutputWithContext(ctx context.Context) DiagnosticDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiagnosticDestinationOutput)
}

func (e DiagnosticDestination) ToDiagnosticDestinationPtrOutput() DiagnosticDestinationPtrOutput {
	return e.ToDiagnosticDestinationPtrOutputWithContext(context.Background())
}

func (e DiagnosticDestination) ToDiagnosticDestinationPtrOutputWithContext(ctx context.Context) DiagnosticDestinationPtrOutput {
	return DiagnosticDestination(e).ToDiagnosticDestinationOutputWithContext(ctx).ToDiagnosticDestinationPtrOutputWithContext(ctx)
}

func (e DiagnosticDestination) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiagnosticDestination) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiagnosticDestination) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiagnosticDestination) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiagnosticDestinationOutput struct{ *pulumi.OutputState }

func (DiagnosticDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticDestination)(nil)).Elem()
}

func (o DiagnosticDestinationOutput) ToDiagnosticDestinationOutput() DiagnosticDestinationOutput {
	return o
}

func (o DiagnosticDestinationOutput) ToDiagnosticDestinationOutputWithContext(ctx context.Context) DiagnosticDestinationOutput {
	return o
}

func (o DiagnosticDestinationOutput) ToDiagnosticDestinationPtrOutput() DiagnosticDestinationPtrOutput {
	return o.ToDiagnosticDestinationPtrOutputWithContext(context.Background())
}

func (o DiagnosticDestinationOutput) ToDiagnosticDestinationPtrOutputWithContext(ctx context.Context) DiagnosticDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiagnosticDestination) *DiagnosticDestination {
		return &v
	}).(DiagnosticDestinationPtrOutput)
}

func (o DiagnosticDestinationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiagnosticDestinationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiagnosticDestination) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiagnosticDestinationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiagnosticDestinationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiagnosticDestination) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiagnosticDestinationPtrOutput struct{ *pulumi.OutputState }

func (DiagnosticDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticDestination)(nil)).Elem()
}

func (o DiagnosticDestinationPtrOutput) ToDiagnosticDestinationPtrOutput() DiagnosticDestinationPtrOutput {
	return o
}

func (o DiagnosticDestinationPtrOutput) ToDiagnosticDestinationPtrOutputWithContext(ctx context.Context) DiagnosticDestinationPtrOutput {
	return o
}

func (o DiagnosticDestinationPtrOutput) Elem() DiagnosticDestinationOutput {
	return o.ApplyT(func(v *DiagnosticDestination) DiagnosticDestination {
		if v != nil {
			return *v
		}
		var ret DiagnosticDestination
		return ret
	}).(DiagnosticDestinationOutput)
}

func (o DiagnosticDestinationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiagnosticDestinationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiagnosticDestination) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiagnosticDestinationInput is an input type that accepts values of the DiagnosticDestination enum
// A concrete instance of `DiagnosticDestinationInput` can be one of the following:
//
//	DiagnosticDestinationCommunityOnly
//	DiagnosticDestinationEnclaveOnly
//	DiagnosticDestinationBoth
type DiagnosticDestinationInput interface {
	pulumi.Input

	ToDiagnosticDestinationOutput() DiagnosticDestinationOutput
	ToDiagnosticDestinationOutputWithContext(context.Context) DiagnosticDestinationOutput
}

var diagnosticDestinationPtrType = reflect.TypeOf((**DiagnosticDestination)(nil)).Elem()

type DiagnosticDestinationPtrInput interface {
	pulumi.Input

	ToDiagnosticDestinationPtrOutput() DiagnosticDestinationPtrOutput
	ToDiagnosticDestinationPtrOutputWithContext(context.Context) DiagnosticDestinationPtrOutput
}

type diagnosticDestinationPtr string

func DiagnosticDestinationPtr(v string) DiagnosticDestinationPtrInput {
	return (*diagnosticDestinationPtr)(&v)
}

func (*diagnosticDestinationPtr) ElementType() reflect.Type {
	return diagnosticDestinationPtrType
}

func (in *diagnosticDestinationPtr) ToDiagnosticDestinationPtrOutput() DiagnosticDestinationPtrOutput {
	return pulumi.ToOutput(in).(DiagnosticDestinationPtrOutput)
}

func (in *diagnosticDestinationPtr) ToDiagnosticDestinationPtrOutputWithContext(ctx context.Context) DiagnosticDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiagnosticDestinationPtrOutput)
}

// Enclave Endpoint Protocol Enum
type EnclaveEndpointProtocol string

const (
	// EndpointProtocol Type ANY
	EnclaveEndpointProtocolANY = EnclaveEndpointProtocol("ANY")
	// EndpointProtocol Type TCP
	EnclaveEndpointProtocolTCP = EnclaveEndpointProtocol("TCP")
	// EndpointProtocol Type UDP
	EnclaveEndpointProtocolUDP = EnclaveEndpointProtocol("UDP")
	// EndpointProtocol Type ICMP
	EnclaveEndpointProtocolICMP = EnclaveEndpointProtocol("ICMP")
	// EndpointProtocol Type ESP
	EnclaveEndpointProtocolESP = EnclaveEndpointProtocol("ESP")
	// EndpointProtocol Type AH
	EnclaveEndpointProtocolAH = EnclaveEndpointProtocol("AH")
)

func (EnclaveEndpointProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*EnclaveEndpointProtocol)(nil)).Elem()
}

func (e EnclaveEndpointProtocol) ToEnclaveEndpointProtocolOutput() EnclaveEndpointProtocolOutput {
	return pulumi.ToOutput(e).(EnclaveEndpointProtocolOutput)
}

func (e EnclaveEndpointProtocol) ToEnclaveEndpointProtocolOutputWithContext(ctx context.Context) EnclaveEndpointProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EnclaveEndpointProtocolOutput)
}

func (e EnclaveEndpointProtocol) ToEnclaveEndpointProtocolPtrOutput() EnclaveEndpointProtocolPtrOutput {
	return e.ToEnclaveEndpointProtocolPtrOutputWithContext(context.Background())
}

func (e EnclaveEndpointProtocol) ToEnclaveEndpointProtocolPtrOutputWithContext(ctx context.Context) EnclaveEndpointProtocolPtrOutput {
	return EnclaveEndpointProtocol(e).ToEnclaveEndpointProtocolOutputWithContext(ctx).ToEnclaveEndpointProtocolPtrOutputWithContext(ctx)
}

func (e EnclaveEndpointProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnclaveEndpointProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnclaveEndpointProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EnclaveEndpointProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EnclaveEndpointProtocolOutput struct{ *pulumi.OutputState }

func (EnclaveEndpointProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnclaveEndpointProtocol)(nil)).Elem()
}

func (o EnclaveEndpointProtocolOutput) ToEnclaveEndpointProtocolOutput() EnclaveEndpointProtocolOutput {
	return o
}

func (o EnclaveEndpointProtocolOutput) ToEnclaveEndpointProtocolOutputWithContext(ctx context.Context) EnclaveEndpointProtocolOutput {
	return o
}

func (o EnclaveEndpointProtocolOutput) ToEnclaveEndpointProtocolPtrOutput() EnclaveEndpointProtocolPtrOutput {
	return o.ToEnclaveEndpointProtocolPtrOutputWithContext(context.Background())
}

func (o EnclaveEndpointProtocolOutput) ToEnclaveEndpointProtocolPtrOutputWithContext(ctx context.Context) EnclaveEndpointProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnclaveEndpointProtocol) *EnclaveEndpointProtocol {
		return &v
	}).(EnclaveEndpointProtocolPtrOutput)
}

func (o EnclaveEndpointProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EnclaveEndpointProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnclaveEndpointProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EnclaveEndpointProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnclaveEndpointProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnclaveEndpointProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EnclaveEndpointProtocolPtrOutput struct{ *pulumi.OutputState }

func (EnclaveEndpointProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnclaveEndpointProtocol)(nil)).Elem()
}

func (o EnclaveEndpointProtocolPtrOutput) ToEnclaveEndpointProtocolPtrOutput() EnclaveEndpointProtocolPtrOutput {
	return o
}

func (o EnclaveEndpointProtocolPtrOutput) ToEnclaveEndpointProtocolPtrOutputWithContext(ctx context.Context) EnclaveEndpointProtocolPtrOutput {
	return o
}

func (o EnclaveEndpointProtocolPtrOutput) Elem() EnclaveEndpointProtocolOutput {
	return o.ApplyT(func(v *EnclaveEndpointProtocol) EnclaveEndpointProtocol {
		if v != nil {
			return *v
		}
		var ret EnclaveEndpointProtocol
		return ret
	}).(EnclaveEndpointProtocolOutput)
}

func (o EnclaveEndpointProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnclaveEndpointProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EnclaveEndpointProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EnclaveEndpointProtocolInput is an input type that accepts values of the EnclaveEndpointProtocol enum
// A concrete instance of `EnclaveEndpointProtocolInput` can be one of the following:
//
//	EnclaveEndpointProtocolANY
//	EnclaveEndpointProtocolTCP
//	EnclaveEndpointProtocolUDP
//	EnclaveEndpointProtocolICMP
//	EnclaveEndpointProtocolESP
//	EnclaveEndpointProtocolAH
type EnclaveEndpointProtocolInput interface {
	pulumi.Input

	ToEnclaveEndpointProtocolOutput() EnclaveEndpointProtocolOutput
	ToEnclaveEndpointProtocolOutputWithContext(context.Context) EnclaveEndpointProtocolOutput
}

var enclaveEndpointProtocolPtrType = reflect.TypeOf((**EnclaveEndpointProtocol)(nil)).Elem()

type EnclaveEndpointProtocolPtrInput interface {
	pulumi.Input

	ToEnclaveEndpointProtocolPtrOutput() EnclaveEndpointProtocolPtrOutput
	ToEnclaveEndpointProtocolPtrOutputWithContext(context.Context) EnclaveEndpointProtocolPtrOutput
}

type enclaveEndpointProtocolPtr string

func EnclaveEndpointProtocolPtr(v string) EnclaveEndpointProtocolPtrInput {
	return (*enclaveEndpointProtocolPtr)(&v)
}

func (*enclaveEndpointProtocolPtr) ElementType() reflect.Type {
	return enclaveEndpointProtocolPtrType
}

func (in *enclaveEndpointProtocolPtr) ToEnclaveEndpointProtocolPtrOutput() EnclaveEndpointProtocolPtrOutput {
	return pulumi.ToOutput(in).(EnclaveEndpointProtocolPtrOutput)
}

func (in *enclaveEndpointProtocolPtr) ToEnclaveEndpointProtocolPtrOutputWithContext(ctx context.Context) EnclaveEndpointProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EnclaveEndpointProtocolPtrOutput)
}

// Initiative enforcement (Enabled or Disabled).
type Enforcement string

const (
	EnforcementEnabled  = Enforcement("Enabled")
	EnforcementDisabled = Enforcement("Disabled")
)

func (Enforcement) ElementType() reflect.Type {
	return reflect.TypeOf((*Enforcement)(nil)).Elem()
}

func (e Enforcement) ToEnforcementOutput() EnforcementOutput {
	return pulumi.ToOutput(e).(EnforcementOutput)
}

func (e Enforcement) ToEnforcementOutputWithContext(ctx context.Context) EnforcementOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EnforcementOutput)
}

func (e Enforcement) ToEnforcementPtrOutput() EnforcementPtrOutput {
	return e.ToEnforcementPtrOutputWithContext(context.Background())
}

func (e Enforcement) ToEnforcementPtrOutputWithContext(ctx context.Context) EnforcementPtrOutput {
	return Enforcement(e).ToEnforcementOutputWithContext(ctx).ToEnforcementPtrOutputWithContext(ctx)
}

func (e Enforcement) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Enforcement) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Enforcement) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Enforcement) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EnforcementOutput struct{ *pulumi.OutputState }

func (EnforcementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Enforcement)(nil)).Elem()
}

func (o EnforcementOutput) ToEnforcementOutput() EnforcementOutput {
	return o
}

func (o EnforcementOutput) ToEnforcementOutputWithContext(ctx context.Context) EnforcementOutput {
	return o
}

func (o EnforcementOutput) ToEnforcementPtrOutput() EnforcementPtrOutput {
	return o.ToEnforcementPtrOutputWithContext(context.Background())
}

func (o EnforcementOutput) ToEnforcementPtrOutputWithContext(ctx context.Context) EnforcementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Enforcement) *Enforcement {
		return &v
	}).(EnforcementPtrOutput)
}

func (o EnforcementOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EnforcementOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Enforcement) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EnforcementOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnforcementOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Enforcement) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EnforcementPtrOutput struct{ *pulumi.OutputState }

func (EnforcementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Enforcement)(nil)).Elem()
}

func (o EnforcementPtrOutput) ToEnforcementPtrOutput() EnforcementPtrOutput {
	return o
}

func (o EnforcementPtrOutput) ToEnforcementPtrOutputWithContext(ctx context.Context) EnforcementPtrOutput {
	return o
}

func (o EnforcementPtrOutput) Elem() EnforcementOutput {
	return o.ApplyT(func(v *Enforcement) Enforcement {
		if v != nil {
			return *v
		}
		var ret Enforcement
		return ret
	}).(EnforcementOutput)
}

func (o EnforcementPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnforcementPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Enforcement) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EnforcementInput is an input type that accepts values of the Enforcement enum
// A concrete instance of `EnforcementInput` can be one of the following:
//
//	EnforcementEnabled
//	EnforcementDisabled
type EnforcementInput interface {
	pulumi.Input

	ToEnforcementOutput() EnforcementOutput
	ToEnforcementOutputWithContext(context.Context) EnforcementOutput
}

var enforcementPtrType = reflect.TypeOf((**Enforcement)(nil)).Elem()

type EnforcementPtrInput interface {
	pulumi.Input

	ToEnforcementPtrOutput() EnforcementPtrOutput
	ToEnforcementPtrOutputWithContext(context.Context) EnforcementPtrOutput
}

type enforcementPtr string

func EnforcementPtr(v string) EnforcementPtrInput {
	return (*enforcementPtr)(&v)
}

func (*enforcementPtr) ElementType() reflect.Type {
	return enforcementPtrType
}

func (in *enforcementPtr) ToEnforcementPtrOutput() EnforcementPtrOutput {
	return pulumi.ToOutput(in).(EnforcementPtrOutput)
}

func (in *enforcementPtr) ToEnforcementPtrOutputWithContext(ctx context.Context) EnforcementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EnforcementPtrOutput)
}

// SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
type FirewallSKU string

const (
	// FirewallSKU Basic
	FirewallSKUBasic = FirewallSKU("Basic")
	// FirwallSKU Standard
	FirewallSKUStandard = FirewallSKU("Standard")
	// FirewallSKU Premium
	FirewallSKUPremium = FirewallSKU("Premium")
)

func (FirewallSKU) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallSKU)(nil)).Elem()
}

func (e FirewallSKU) ToFirewallSKUOutput() FirewallSKUOutput {
	return pulumi.ToOutput(e).(FirewallSKUOutput)
}

func (e FirewallSKU) ToFirewallSKUOutputWithContext(ctx context.Context) FirewallSKUOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FirewallSKUOutput)
}

func (e FirewallSKU) ToFirewallSKUPtrOutput() FirewallSKUPtrOutput {
	return e.ToFirewallSKUPtrOutputWithContext(context.Background())
}

func (e FirewallSKU) ToFirewallSKUPtrOutputWithContext(ctx context.Context) FirewallSKUPtrOutput {
	return FirewallSKU(e).ToFirewallSKUOutputWithContext(ctx).ToFirewallSKUPtrOutputWithContext(ctx)
}

func (e FirewallSKU) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallSKU) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FirewallSKU) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FirewallSKU) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FirewallSKUOutput struct{ *pulumi.OutputState }

func (FirewallSKUOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallSKU)(nil)).Elem()
}

func (o FirewallSKUOutput) ToFirewallSKUOutput() FirewallSKUOutput {
	return o
}

func (o FirewallSKUOutput) ToFirewallSKUOutputWithContext(ctx context.Context) FirewallSKUOutput {
	return o
}

func (o FirewallSKUOutput) ToFirewallSKUPtrOutput() FirewallSKUPtrOutput {
	return o.ToFirewallSKUPtrOutputWithContext(context.Background())
}

func (o FirewallSKUOutput) ToFirewallSKUPtrOutputWithContext(ctx context.Context) FirewallSKUPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallSKU) *FirewallSKU {
		return &v
	}).(FirewallSKUPtrOutput)
}

func (o FirewallSKUOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FirewallSKUOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FirewallSKU) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FirewallSKUOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FirewallSKUOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FirewallSKU) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FirewallSKUPtrOutput struct{ *pulumi.OutputState }

func (FirewallSKUPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallSKU)(nil)).Elem()
}

func (o FirewallSKUPtrOutput) ToFirewallSKUPtrOutput() FirewallSKUPtrOutput {
	return o
}

func (o FirewallSKUPtrOutput) ToFirewallSKUPtrOutputWithContext(ctx context.Context) FirewallSKUPtrOutput {
	return o
}

func (o FirewallSKUPtrOutput) Elem() FirewallSKUOutput {
	return o.ApplyT(func(v *FirewallSKU) FirewallSKU {
		if v != nil {
			return *v
		}
		var ret FirewallSKU
		return ret
	}).(FirewallSKUOutput)
}

func (o FirewallSKUPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FirewallSKUPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FirewallSKU) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FirewallSKUInput is an input type that accepts values of the FirewallSKU enum
// A concrete instance of `FirewallSKUInput` can be one of the following:
//
//	FirewallSKUBasic
//	FirewallSKUStandard
//	FirewallSKUPremium
type FirewallSKUInput interface {
	pulumi.Input

	ToFirewallSKUOutput() FirewallSKUOutput
	ToFirewallSKUOutputWithContext(context.Context) FirewallSKUOutput
}

var firewallSKUPtrType = reflect.TypeOf((**FirewallSKU)(nil)).Elem()

type FirewallSKUPtrInput interface {
	pulumi.Input

	ToFirewallSKUPtrOutput() FirewallSKUPtrOutput
	ToFirewallSKUPtrOutputWithContext(context.Context) FirewallSKUPtrOutput
}

type firewallSKUPtr string

func FirewallSKUPtr(v string) FirewallSKUPtrInput {
	return (*firewallSKUPtr)(&v)
}

func (*firewallSKUPtr) ElementType() reflect.Type {
	return firewallSKUPtrType
}

func (in *firewallSKUPtr) ToFirewallSKUPtrOutput() FirewallSKUPtrOutput {
	return pulumi.ToOutput(in).(FirewallSKUPtrOutput)
}

func (in *firewallSKUPtr) ToFirewallSKUPtrOutputWithContext(ctx context.Context) FirewallSKUPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FirewallSKUPtrOutput)
}

// Justification for entering or exiting Maintenance Mode
type Justification string

const (
	JustificationNetworking = Justification("Networking")
	JustificationGovernance = Justification("Governance")
	JustificationOff        = Justification("Off")
)

func (Justification) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (e Justification) ToJustificationOutput() JustificationOutput {
	return pulumi.ToOutput(e).(JustificationOutput)
}

func (e Justification) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JustificationOutput)
}

func (e Justification) ToJustificationPtrOutput() JustificationPtrOutput {
	return e.ToJustificationPtrOutputWithContext(context.Background())
}

func (e Justification) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return Justification(e).ToJustificationOutputWithContext(ctx).ToJustificationPtrOutputWithContext(ctx)
}

func (e Justification) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Justification) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Justification) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Justification) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JustificationOutput struct{ *pulumi.OutputState }

func (JustificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Justification)(nil)).Elem()
}

func (o JustificationOutput) ToJustificationOutput() JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationOutputWithContext(ctx context.Context) JustificationOutput {
	return o
}

func (o JustificationOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o.ToJustificationPtrOutputWithContext(context.Background())
}

func (o JustificationOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Justification) *Justification {
		return &v
	}).(JustificationPtrOutput)
}

func (o JustificationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JustificationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Justification) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JustificationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JustificationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Justification) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JustificationPtrOutput struct{ *pulumi.OutputState }

func (JustificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Justification)(nil)).Elem()
}

func (o JustificationPtrOutput) ToJustificationPtrOutput() JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return o
}

func (o JustificationPtrOutput) Elem() JustificationOutput {
	return o.ApplyT(func(v *Justification) Justification {
		if v != nil {
			return *v
		}
		var ret Justification
		return ret
	}).(JustificationOutput)
}

func (o JustificationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JustificationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Justification) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JustificationInput is an input type that accepts values of the Justification enum
// A concrete instance of `JustificationInput` can be one of the following:
//
//	JustificationNetworking
//	JustificationGovernance
//	JustificationOff
type JustificationInput interface {
	pulumi.Input

	ToJustificationOutput() JustificationOutput
	ToJustificationOutputWithContext(context.Context) JustificationOutput
}

var justificationPtrType = reflect.TypeOf((**Justification)(nil)).Elem()

type JustificationPtrInput interface {
	pulumi.Input

	ToJustificationPtrOutput() JustificationPtrOutput
	ToJustificationPtrOutputWithContext(context.Context) JustificationPtrOutput
}

type justificationPtr string

func JustificationPtr(v string) JustificationPtrInput {
	return (*justificationPtr)(&v)
}

func (*justificationPtr) ElementType() reflect.Type {
	return justificationPtrType
}

func (in *justificationPtr) ToJustificationPtrOutput() JustificationPtrOutput {
	return pulumi.ToOutput(in).(JustificationPtrOutput)
}

func (in *justificationPtr) ToJustificationPtrOutputWithContext(ctx context.Context) JustificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JustificationPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned,UserAssigned")
)

func (ManagedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return e.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return ManagedServiceIdentityType(e).ToManagedServiceIdentityTypeOutputWithContext(ctx).ToManagedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentityType) *ManagedServiceIdentityType {
		return &v
	}).(ManagedServiceIdentityTypePtrOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) Elem() ManagedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityType) ManagedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityType
		return ret
	}).(ManagedServiceIdentityTypeOutput)
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedServiceIdentityTypeInput is an input type that accepts values of the ManagedServiceIdentityType enum
// A concrete instance of `ManagedServiceIdentityTypeInput` can be one of the following:
//
//	ManagedServiceIdentityTypeNone
//	ManagedServiceIdentityTypeSystemAssigned
//	ManagedServiceIdentityTypeUserAssigned
//	ManagedServiceIdentityType_SystemAssigned_UserAssigned
type ManagedServiceIdentityTypeInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput
	ToManagedServiceIdentityTypeOutputWithContext(context.Context) ManagedServiceIdentityTypeOutput
}

var managedServiceIdentityTypePtrType = reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()

type ManagedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput
	ToManagedServiceIdentityTypePtrOutputWithContext(context.Context) ManagedServiceIdentityTypePtrOutput
}

type managedServiceIdentityTypePtr string

func ManagedServiceIdentityTypePtr(v string) ManagedServiceIdentityTypePtrInput {
	return (*managedServiceIdentityTypePtr)(&v)
}

func (*managedServiceIdentityTypePtr) ElementType() reflect.Type {
	return managedServiceIdentityTypePtrType
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedServiceIdentityTypePtrOutput)
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedServiceIdentityTypePtrOutput)
}

// Current mode of Maintenance Mode Configuration
type Mode string

const (
	ModeOn           = Mode("On")
	ModeCanNotDelete = Mode("CanNotDelete")
	ModeOff          = Mode("Off")
	ModeGeneral      = Mode("General")
	ModeAdvanced     = Mode("Advanced")
)

func (Mode) ElementType() reflect.Type {
	return reflect.TypeOf((*Mode)(nil)).Elem()
}

func (e Mode) ToModeOutput() ModeOutput {
	return pulumi.ToOutput(e).(ModeOutput)
}

func (e Mode) ToModeOutputWithContext(ctx context.Context) ModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ModeOutput)
}

func (e Mode) ToModePtrOutput() ModePtrOutput {
	return e.ToModePtrOutputWithContext(context.Background())
}

func (e Mode) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return Mode(e).ToModeOutputWithContext(ctx).ToModePtrOutputWithContext(ctx)
}

func (e Mode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Mode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Mode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Mode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ModeOutput struct{ *pulumi.OutputState }

func (ModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mode)(nil)).Elem()
}

func (o ModeOutput) ToModeOutput() ModeOutput {
	return o
}

func (o ModeOutput) ToModeOutputWithContext(ctx context.Context) ModeOutput {
	return o
}

func (o ModeOutput) ToModePtrOutput() ModePtrOutput {
	return o.ToModePtrOutputWithContext(context.Background())
}

func (o ModeOutput) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mode) *Mode {
		return &v
	}).(ModePtrOutput)
}

func (o ModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Mode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Mode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ModePtrOutput struct{ *pulumi.OutputState }

func (ModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mode)(nil)).Elem()
}

func (o ModePtrOutput) ToModePtrOutput() ModePtrOutput {
	return o
}

func (o ModePtrOutput) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return o
}

func (o ModePtrOutput) Elem() ModeOutput {
	return o.ApplyT(func(v *Mode) Mode {
		if v != nil {
			return *v
		}
		var ret Mode
		return ret
	}).(ModeOutput)
}

func (o ModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Mode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ModeInput is an input type that accepts values of the Mode enum
// A concrete instance of `ModeInput` can be one of the following:
//
//	ModeOn
//	ModeCanNotDelete
//	ModeOff
//	ModeGeneral
//	ModeAdvanced
type ModeInput interface {
	pulumi.Input

	ToModeOutput() ModeOutput
	ToModeOutputWithContext(context.Context) ModeOutput
}

var modePtrType = reflect.TypeOf((**Mode)(nil)).Elem()

type ModePtrInput interface {
	pulumi.Input

	ToModePtrOutput() ModePtrOutput
	ToModePtrOutputWithContext(context.Context) ModePtrOutput
}

type modePtr string

func ModePtr(v string) ModePtrInput {
	return (*modePtr)(&v)
}

func (*modePtr) ElementType() reflect.Type {
	return modePtrType
}

func (in *modePtr) ToModePtrOutput() ModePtrOutput {
	return pulumi.ToOutput(in).(ModePtrOutput)
}

func (in *modePtr) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ModePtrOutput)
}

// Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
type Option string

const (
	OptionAllow         = Option("Allow")
	OptionDeny          = Option("Deny")
	OptionExceptionOnly = Option("ExceptionOnly")
	OptionNotApplicable = Option("NotApplicable")
)

func (Option) ElementType() reflect.Type {
	return reflect.TypeOf((*Option)(nil)).Elem()
}

func (e Option) ToOptionOutput() OptionOutput {
	return pulumi.ToOutput(e).(OptionOutput)
}

func (e Option) ToOptionOutputWithContext(ctx context.Context) OptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OptionOutput)
}

func (e Option) ToOptionPtrOutput() OptionPtrOutput {
	return e.ToOptionPtrOutputWithContext(context.Background())
}

func (e Option) ToOptionPtrOutputWithContext(ctx context.Context) OptionPtrOutput {
	return Option(e).ToOptionOutputWithContext(ctx).ToOptionPtrOutputWithContext(ctx)
}

func (e Option) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Option) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Option) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Option) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OptionOutput struct{ *pulumi.OutputState }

func (OptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Option)(nil)).Elem()
}

func (o OptionOutput) ToOptionOutput() OptionOutput {
	return o
}

func (o OptionOutput) ToOptionOutputWithContext(ctx context.Context) OptionOutput {
	return o
}

func (o OptionOutput) ToOptionPtrOutput() OptionPtrOutput {
	return o.ToOptionPtrOutputWithContext(context.Background())
}

func (o OptionOutput) ToOptionPtrOutputWithContext(ctx context.Context) OptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Option) *Option {
		return &v
	}).(OptionPtrOutput)
}

func (o OptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Option) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Option) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OptionPtrOutput struct{ *pulumi.OutputState }

func (OptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Option)(nil)).Elem()
}

func (o OptionPtrOutput) ToOptionPtrOutput() OptionPtrOutput {
	return o
}

func (o OptionPtrOutput) ToOptionPtrOutputWithContext(ctx context.Context) OptionPtrOutput {
	return o
}

func (o OptionPtrOutput) Elem() OptionOutput {
	return o.ApplyT(func(v *Option) Option {
		if v != nil {
			return *v
		}
		var ret Option
		return ret
	}).(OptionOutput)
}

func (o OptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Option) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OptionInput is an input type that accepts values of the Option enum
// A concrete instance of `OptionInput` can be one of the following:
//
//	OptionAllow
//	OptionDeny
//	OptionExceptionOnly
//	OptionNotApplicable
type OptionInput interface {
	pulumi.Input

	ToOptionOutput() OptionOutput
	ToOptionOutputWithContext(context.Context) OptionOutput
}

var optionPtrType = reflect.TypeOf((**Option)(nil)).Elem()

type OptionPtrInput interface {
	pulumi.Input

	ToOptionPtrOutput() OptionPtrOutput
	ToOptionPtrOutputWithContext(context.Context) OptionPtrOutput
}

type optionPtr string

func OptionPtr(v string) OptionPtrInput {
	return (*optionPtr)(&v)
}

func (*optionPtr) ElementType() reflect.Type {
	return optionPtrType
}

func (in *optionPtr) ToOptionPtrOutput() OptionPtrOutput {
	return pulumi.ToOutput(in).(OptionPtrOutput)
}

func (in *optionPtr) ToOptionPtrOutputWithContext(ctx context.Context) OptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OptionPtrOutput)
}

// Enforcement mode for policy. AuditOnly, Enforce, or None.
type PolicyAction string

const (
	PolicyActionAuditOnly = PolicyAction("AuditOnly")
	PolicyActionEnforce   = PolicyAction("Enforce")
	PolicyActionNone      = PolicyAction("None")
)

func (PolicyAction) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAction)(nil)).Elem()
}

func (e PolicyAction) ToPolicyActionOutput() PolicyActionOutput {
	return pulumi.ToOutput(e).(PolicyActionOutput)
}

func (e PolicyAction) ToPolicyActionOutputWithContext(ctx context.Context) PolicyActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyActionOutput)
}

func (e PolicyAction) ToPolicyActionPtrOutput() PolicyActionPtrOutput {
	return e.ToPolicyActionPtrOutputWithContext(context.Background())
}

func (e PolicyAction) ToPolicyActionPtrOutputWithContext(ctx context.Context) PolicyActionPtrOutput {
	return PolicyAction(e).ToPolicyActionOutputWithContext(ctx).ToPolicyActionPtrOutputWithContext(ctx)
}

func (e PolicyAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyActionOutput struct{ *pulumi.OutputState }

func (PolicyActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyAction)(nil)).Elem()
}

func (o PolicyActionOutput) ToPolicyActionOutput() PolicyActionOutput {
	return o
}

func (o PolicyActionOutput) ToPolicyActionOutputWithContext(ctx context.Context) PolicyActionOutput {
	return o
}

func (o PolicyActionOutput) ToPolicyActionPtrOutput() PolicyActionPtrOutput {
	return o.ToPolicyActionPtrOutputWithContext(context.Background())
}

func (o PolicyActionOutput) ToPolicyActionPtrOutputWithContext(ctx context.Context) PolicyActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyAction) *PolicyAction {
		return &v
	}).(PolicyActionPtrOutput)
}

func (o PolicyActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyActionPtrOutput struct{ *pulumi.OutputState }

func (PolicyActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyAction)(nil)).Elem()
}

func (o PolicyActionPtrOutput) ToPolicyActionPtrOutput() PolicyActionPtrOutput {
	return o
}

func (o PolicyActionPtrOutput) ToPolicyActionPtrOutputWithContext(ctx context.Context) PolicyActionPtrOutput {
	return o
}

func (o PolicyActionPtrOutput) Elem() PolicyActionOutput {
	return o.ApplyT(func(v *PolicyAction) PolicyAction {
		if v != nil {
			return *v
		}
		var ret PolicyAction
		return ret
	}).(PolicyActionOutput)
}

func (o PolicyActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyActionInput is an input type that accepts values of the PolicyAction enum
// A concrete instance of `PolicyActionInput` can be one of the following:
//
//	PolicyActionAuditOnly
//	PolicyActionEnforce
//	PolicyActionNone
type PolicyActionInput interface {
	pulumi.Input

	ToPolicyActionOutput() PolicyActionOutput
	ToPolicyActionOutputWithContext(context.Context) PolicyActionOutput
}

var policyActionPtrType = reflect.TypeOf((**PolicyAction)(nil)).Elem()

type PolicyActionPtrInput interface {
	pulumi.Input

	ToPolicyActionPtrOutput() PolicyActionPtrOutput
	ToPolicyActionPtrOutputWithContext(context.Context) PolicyActionPtrOutput
}

type policyActionPtr string

func PolicyActionPtr(v string) PolicyActionPtrInput {
	return (*policyActionPtr)(&v)
}

func (*policyActionPtr) ElementType() reflect.Type {
	return policyActionPtrType
}

func (in *policyActionPtr) ToPolicyActionPtrOutput() PolicyActionPtrOutput {
	return pulumi.ToOutput(in).(PolicyActionPtrOutput)
}

func (in *policyActionPtr) ToPolicyActionPtrOutputWithContext(ctx context.Context) PolicyActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyActionPtrOutput)
}

// Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
type PolicyOverride string

const (
	PolicyOverrideEnclave = PolicyOverride("Enclave")
	PolicyOverrideNone    = PolicyOverride("None")
)

func (PolicyOverride) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyOverride)(nil)).Elem()
}

func (e PolicyOverride) ToPolicyOverrideOutput() PolicyOverrideOutput {
	return pulumi.ToOutput(e).(PolicyOverrideOutput)
}

func (e PolicyOverride) ToPolicyOverrideOutputWithContext(ctx context.Context) PolicyOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyOverrideOutput)
}

func (e PolicyOverride) ToPolicyOverridePtrOutput() PolicyOverridePtrOutput {
	return e.ToPolicyOverridePtrOutputWithContext(context.Background())
}

func (e PolicyOverride) ToPolicyOverridePtrOutputWithContext(ctx context.Context) PolicyOverridePtrOutput {
	return PolicyOverride(e).ToPolicyOverrideOutputWithContext(ctx).ToPolicyOverridePtrOutputWithContext(ctx)
}

func (e PolicyOverride) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyOverride) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyOverride) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyOverride) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyOverrideOutput struct{ *pulumi.OutputState }

func (PolicyOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyOverride)(nil)).Elem()
}

func (o PolicyOverrideOutput) ToPolicyOverrideOutput() PolicyOverrideOutput {
	return o
}

func (o PolicyOverrideOutput) ToPolicyOverrideOutputWithContext(ctx context.Context) PolicyOverrideOutput {
	return o
}

func (o PolicyOverrideOutput) ToPolicyOverridePtrOutput() PolicyOverridePtrOutput {
	return o.ToPolicyOverridePtrOutputWithContext(context.Background())
}

func (o PolicyOverrideOutput) ToPolicyOverridePtrOutputWithContext(ctx context.Context) PolicyOverridePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyOverride) *PolicyOverride {
		return &v
	}).(PolicyOverridePtrOutput)
}

func (o PolicyOverrideOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyOverrideOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyOverride) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyOverrideOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyOverrideOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyOverride) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyOverridePtrOutput struct{ *pulumi.OutputState }

func (PolicyOverridePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyOverride)(nil)).Elem()
}

func (o PolicyOverridePtrOutput) ToPolicyOverridePtrOutput() PolicyOverridePtrOutput {
	return o
}

func (o PolicyOverridePtrOutput) ToPolicyOverridePtrOutputWithContext(ctx context.Context) PolicyOverridePtrOutput {
	return o
}

func (o PolicyOverridePtrOutput) Elem() PolicyOverrideOutput {
	return o.ApplyT(func(v *PolicyOverride) PolicyOverride {
		if v != nil {
			return *v
		}
		var ret PolicyOverride
		return ret
	}).(PolicyOverrideOutput)
}

func (o PolicyOverridePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyOverridePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyOverride) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyOverrideInput is an input type that accepts values of the PolicyOverride enum
// A concrete instance of `PolicyOverrideInput` can be one of the following:
//
//	PolicyOverrideEnclave
//	PolicyOverrideNone
type PolicyOverrideInput interface {
	pulumi.Input

	ToPolicyOverrideOutput() PolicyOverrideOutput
	ToPolicyOverrideOutputWithContext(context.Context) PolicyOverrideOutput
}

var policyOverridePtrType = reflect.TypeOf((**PolicyOverride)(nil)).Elem()

type PolicyOverridePtrInput interface {
	pulumi.Input

	ToPolicyOverridePtrOutput() PolicyOverridePtrOutput
	ToPolicyOverridePtrOutputWithContext(context.Context) PolicyOverridePtrOutput
}

type policyOverridePtr string

func PolicyOverridePtr(v string) PolicyOverridePtrInput {
	return (*policyOverridePtr)(&v)
}

func (*policyOverridePtr) ElementType() reflect.Type {
	return policyOverridePtrType
}

func (in *policyOverridePtr) ToPolicyOverridePtrOutput() PolicyOverridePtrOutput {
	return pulumi.ToOutput(in).(PolicyOverridePtrOutput)
}

func (in *policyOverridePtr) ToPolicyOverridePtrOutputWithContext(ctx context.Context) PolicyOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyOverridePtrOutput)
}

// Service ID
type ServiceIdentifier string

const (
	// Service identifier for AKS
	ServiceIdentifierAKS = ServiceIdentifier("AKS")
	// Service identifier for App Service
	ServiceIdentifierAppService = ServiceIdentifier("AppService")
	// Service identifier for Azure Firewalls
	ServiceIdentifierAzureFirewalls = ServiceIdentifier("AzureFirewalls")
	// Service identifier for Container Registry
	ServiceIdentifierContainerRegistry = ServiceIdentifier("ContainerRegistry")
	// Service identifier for CosmosDB
	ServiceIdentifierCosmosDB = ServiceIdentifier("CosmosDB")
	// Service identifier for Data Connectors
	ServiceIdentifierDataConnectors = ServiceIdentifier("DataConnectors")
	// Service identifier for Insights
	ServiceIdentifierInsights = ServiceIdentifier("Insights")
	// Service identifier for Key Vault
	ServiceIdentifierKeyVault = ServiceIdentifier("KeyVault")
	// Service identifier for Logic
	ServiceIdentifierLogic = ServiceIdentifier("Logic")
	// Service identifier for Microsoft SQL
	ServiceIdentifierMicrosoftSql = ServiceIdentifier("MicrosoftSQL")
	// Service identifier for Monitoring
	ServiceIdentifierMonitoring = ServiceIdentifier("Monitoring")
	// Service identifier for PostgreSQL
	ServiceIdentifierPostgreSql = ServiceIdentifier("PostgreSQL")
	// Service identifier for Private DNS Zones
	ServiceIdentifierPrivateDNSZones = ServiceIdentifier("PrivateDNSZones")
	// Service identifier for Service Bus
	ServiceIdentifierServiceBus = ServiceIdentifier("ServiceBus")
	// Service identifier for Storage
	ServiceIdentifierStorage = ServiceIdentifier("Storage")
)

func (ServiceIdentifier) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIdentifier)(nil)).Elem()
}

func (e ServiceIdentifier) ToServiceIdentifierOutput() ServiceIdentifierOutput {
	return pulumi.ToOutput(e).(ServiceIdentifierOutput)
}

func (e ServiceIdentifier) ToServiceIdentifierOutputWithContext(ctx context.Context) ServiceIdentifierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ServiceIdentifierOutput)
}

func (e ServiceIdentifier) ToServiceIdentifierPtrOutput() ServiceIdentifierPtrOutput {
	return e.ToServiceIdentifierPtrOutputWithContext(context.Background())
}

func (e ServiceIdentifier) ToServiceIdentifierPtrOutputWithContext(ctx context.Context) ServiceIdentifierPtrOutput {
	return ServiceIdentifier(e).ToServiceIdentifierOutputWithContext(ctx).ToServiceIdentifierPtrOutputWithContext(ctx)
}

func (e ServiceIdentifier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceIdentifier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceIdentifier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceIdentifier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServiceIdentifierOutput struct{ *pulumi.OutputState }

func (ServiceIdentifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIdentifier)(nil)).Elem()
}

func (o ServiceIdentifierOutput) ToServiceIdentifierOutput() ServiceIdentifierOutput {
	return o
}

func (o ServiceIdentifierOutput) ToServiceIdentifierOutputWithContext(ctx context.Context) ServiceIdentifierOutput {
	return o
}

func (o ServiceIdentifierOutput) ToServiceIdentifierPtrOutput() ServiceIdentifierPtrOutput {
	return o.ToServiceIdentifierPtrOutputWithContext(context.Background())
}

func (o ServiceIdentifierOutput) ToServiceIdentifierPtrOutputWithContext(ctx context.Context) ServiceIdentifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceIdentifier) *ServiceIdentifier {
		return &v
	}).(ServiceIdentifierPtrOutput)
}

func (o ServiceIdentifierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ServiceIdentifierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceIdentifier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ServiceIdentifierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceIdentifierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceIdentifier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ServiceIdentifierPtrOutput struct{ *pulumi.OutputState }

func (ServiceIdentifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceIdentifier)(nil)).Elem()
}

func (o ServiceIdentifierPtrOutput) ToServiceIdentifierPtrOutput() ServiceIdentifierPtrOutput {
	return o
}

func (o ServiceIdentifierPtrOutput) ToServiceIdentifierPtrOutputWithContext(ctx context.Context) ServiceIdentifierPtrOutput {
	return o
}

func (o ServiceIdentifierPtrOutput) Elem() ServiceIdentifierOutput {
	return o.ApplyT(func(v *ServiceIdentifier) ServiceIdentifier {
		if v != nil {
			return *v
		}
		var ret ServiceIdentifier
		return ret
	}).(ServiceIdentifierOutput)
}

func (o ServiceIdentifierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceIdentifierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ServiceIdentifier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ServiceIdentifierInput is an input type that accepts values of the ServiceIdentifier enum
// A concrete instance of `ServiceIdentifierInput` can be one of the following:
//
//	ServiceIdentifierAKS
//	ServiceIdentifierAppService
//	ServiceIdentifierAzureFirewalls
//	ServiceIdentifierContainerRegistry
//	ServiceIdentifierCosmosDB
//	ServiceIdentifierDataConnectors
//	ServiceIdentifierInsights
//	ServiceIdentifierKeyVault
//	ServiceIdentifierLogic
//	ServiceIdentifierMicrosoftSql
//	ServiceIdentifierMonitoring
//	ServiceIdentifierPostgreSql
//	ServiceIdentifierPrivateDNSZones
//	ServiceIdentifierServiceBus
//	ServiceIdentifierStorage
type ServiceIdentifierInput interface {
	pulumi.Input

	ToServiceIdentifierOutput() ServiceIdentifierOutput
	ToServiceIdentifierOutputWithContext(context.Context) ServiceIdentifierOutput
}

var serviceIdentifierPtrType = reflect.TypeOf((**ServiceIdentifier)(nil)).Elem()

type ServiceIdentifierPtrInput interface {
	pulumi.Input

	ToServiceIdentifierPtrOutput() ServiceIdentifierPtrOutput
	ToServiceIdentifierPtrOutputWithContext(context.Context) ServiceIdentifierPtrOutput
}

type serviceIdentifierPtr string

func ServiceIdentifierPtr(v string) ServiceIdentifierPtrInput {
	return (*serviceIdentifierPtr)(&v)
}

func (*serviceIdentifierPtr) ElementType() reflect.Type {
	return serviceIdentifierPtrType
}

func (in *serviceIdentifierPtr) ToServiceIdentifierPtrOutput() ServiceIdentifierPtrOutput {
	return pulumi.ToOutput(in).(ServiceIdentifierPtrOutput)
}

func (in *serviceIdentifierPtr) ToServiceIdentifierPtrOutputWithContext(ctx context.Context) ServiceIdentifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ServiceIdentifierPtrOutput)
}

// The state of the transitHub.
type TransitHubStateEnum string

const (
	// TransitHubState Type PendingApproval
	TransitHubStateEnumPendingApproval = TransitHubStateEnum("PendingApproval")
	// TransitHubState Type Approved
	TransitHubStateEnumApproved = TransitHubStateEnum("Approved")
	// TransitHubState Type PendingUpdate
	TransitHubStateEnumPendingUpdate = TransitHubStateEnum("PendingUpdate")
	// TransitHubState Type Active
	TransitHubStateEnumActive = TransitHubStateEnum("Active")
	// TransitHubState Type Failed
	TransitHubStateEnumFailed = TransitHubStateEnum("Failed")
)

func (TransitHubStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitHubStateEnum)(nil)).Elem()
}

func (e TransitHubStateEnum) ToTransitHubStateEnumOutput() TransitHubStateEnumOutput {
	return pulumi.ToOutput(e).(TransitHubStateEnumOutput)
}

func (e TransitHubStateEnum) ToTransitHubStateEnumOutputWithContext(ctx context.Context) TransitHubStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransitHubStateEnumOutput)
}

func (e TransitHubStateEnum) ToTransitHubStateEnumPtrOutput() TransitHubStateEnumPtrOutput {
	return e.ToTransitHubStateEnumPtrOutputWithContext(context.Background())
}

func (e TransitHubStateEnum) ToTransitHubStateEnumPtrOutputWithContext(ctx context.Context) TransitHubStateEnumPtrOutput {
	return TransitHubStateEnum(e).ToTransitHubStateEnumOutputWithContext(ctx).ToTransitHubStateEnumPtrOutputWithContext(ctx)
}

func (e TransitHubStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransitHubStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransitHubStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransitHubStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransitHubStateEnumOutput struct{ *pulumi.OutputState }

func (TransitHubStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitHubStateEnum)(nil)).Elem()
}

func (o TransitHubStateEnumOutput) ToTransitHubStateEnumOutput() TransitHubStateEnumOutput {
	return o
}

func (o TransitHubStateEnumOutput) ToTransitHubStateEnumOutputWithContext(ctx context.Context) TransitHubStateEnumOutput {
	return o
}

func (o TransitHubStateEnumOutput) ToTransitHubStateEnumPtrOutput() TransitHubStateEnumPtrOutput {
	return o.ToTransitHubStateEnumPtrOutputWithContext(context.Background())
}

func (o TransitHubStateEnumOutput) ToTransitHubStateEnumPtrOutputWithContext(ctx context.Context) TransitHubStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransitHubStateEnum) *TransitHubStateEnum {
		return &v
	}).(TransitHubStateEnumPtrOutput)
}

func (o TransitHubStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransitHubStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransitHubStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransitHubStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransitHubStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransitHubStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransitHubStateEnumPtrOutput struct{ *pulumi.OutputState }

func (TransitHubStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitHubStateEnum)(nil)).Elem()
}

func (o TransitHubStateEnumPtrOutput) ToTransitHubStateEnumPtrOutput() TransitHubStateEnumPtrOutput {
	return o
}

func (o TransitHubStateEnumPtrOutput) ToTransitHubStateEnumPtrOutputWithContext(ctx context.Context) TransitHubStateEnumPtrOutput {
	return o
}

func (o TransitHubStateEnumPtrOutput) Elem() TransitHubStateEnumOutput {
	return o.ApplyT(func(v *TransitHubStateEnum) TransitHubStateEnum {
		if v != nil {
			return *v
		}
		var ret TransitHubStateEnum
		return ret
	}).(TransitHubStateEnumOutput)
}

func (o TransitHubStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransitHubStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransitHubStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransitHubStateEnumInput is an input type that accepts values of the TransitHubStateEnum enum
// A concrete instance of `TransitHubStateEnumInput` can be one of the following:
//
//	TransitHubStateEnumPendingApproval
//	TransitHubStateEnumApproved
//	TransitHubStateEnumPendingUpdate
//	TransitHubStateEnumActive
//	TransitHubStateEnumFailed
type TransitHubStateEnumInput interface {
	pulumi.Input

	ToTransitHubStateEnumOutput() TransitHubStateEnumOutput
	ToTransitHubStateEnumOutputWithContext(context.Context) TransitHubStateEnumOutput
}

var transitHubStateEnumPtrType = reflect.TypeOf((**TransitHubStateEnum)(nil)).Elem()

type TransitHubStateEnumPtrInput interface {
	pulumi.Input

	ToTransitHubStateEnumPtrOutput() TransitHubStateEnumPtrOutput
	ToTransitHubStateEnumPtrOutputWithContext(context.Context) TransitHubStateEnumPtrOutput
}

type transitHubStateEnumPtr string

func TransitHubStateEnumPtr(v string) TransitHubStateEnumPtrInput {
	return (*transitHubStateEnumPtr)(&v)
}

func (*transitHubStateEnumPtr) ElementType() reflect.Type {
	return transitHubStateEnumPtrType
}

func (in *transitHubStateEnumPtr) ToTransitHubStateEnumPtrOutput() TransitHubStateEnumPtrOutput {
	return pulumi.ToOutput(in).(TransitHubStateEnumPtrOutput)
}

func (in *transitHubStateEnumPtr) ToTransitHubStateEnumPtrOutputWithContext(ctx context.Context) TransitHubStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransitHubStateEnumPtrOutput)
}

// Transit Option Type.
type TransitOptionType string

const (
	// TransitOptionType ExpressRoute
	TransitOptionTypeExpressRoute = TransitOptionType("ExpressRoute")
	// TransitOptionType Gateway
	TransitOptionTypeGateway = TransitOptionType("Gateway")
	// TransitOptionType Peering
	TransitOptionTypePeering = TransitOptionType("Peering")
)

func (TransitOptionType) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitOptionType)(nil)).Elem()
}

func (e TransitOptionType) ToTransitOptionTypeOutput() TransitOptionTypeOutput {
	return pulumi.ToOutput(e).(TransitOptionTypeOutput)
}

func (e TransitOptionType) ToTransitOptionTypeOutputWithContext(ctx context.Context) TransitOptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TransitOptionTypeOutput)
}

func (e TransitOptionType) ToTransitOptionTypePtrOutput() TransitOptionTypePtrOutput {
	return e.ToTransitOptionTypePtrOutputWithContext(context.Background())
}

func (e TransitOptionType) ToTransitOptionTypePtrOutputWithContext(ctx context.Context) TransitOptionTypePtrOutput {
	return TransitOptionType(e).ToTransitOptionTypeOutputWithContext(ctx).ToTransitOptionTypePtrOutputWithContext(ctx)
}

func (e TransitOptionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransitOptionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransitOptionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransitOptionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TransitOptionTypeOutput struct{ *pulumi.OutputState }

func (TransitOptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransitOptionType)(nil)).Elem()
}

func (o TransitOptionTypeOutput) ToTransitOptionTypeOutput() TransitOptionTypeOutput {
	return o
}

func (o TransitOptionTypeOutput) ToTransitOptionTypeOutputWithContext(ctx context.Context) TransitOptionTypeOutput {
	return o
}

func (o TransitOptionTypeOutput) ToTransitOptionTypePtrOutput() TransitOptionTypePtrOutput {
	return o.ToTransitOptionTypePtrOutputWithContext(context.Background())
}

func (o TransitOptionTypeOutput) ToTransitOptionTypePtrOutputWithContext(ctx context.Context) TransitOptionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TransitOptionType) *TransitOptionType {
		return &v
	}).(TransitOptionTypePtrOutput)
}

func (o TransitOptionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TransitOptionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransitOptionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TransitOptionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransitOptionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TransitOptionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TransitOptionTypePtrOutput struct{ *pulumi.OutputState }

func (TransitOptionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitOptionType)(nil)).Elem()
}

func (o TransitOptionTypePtrOutput) ToTransitOptionTypePtrOutput() TransitOptionTypePtrOutput {
	return o
}

func (o TransitOptionTypePtrOutput) ToTransitOptionTypePtrOutputWithContext(ctx context.Context) TransitOptionTypePtrOutput {
	return o
}

func (o TransitOptionTypePtrOutput) Elem() TransitOptionTypeOutput {
	return o.ApplyT(func(v *TransitOptionType) TransitOptionType {
		if v != nil {
			return *v
		}
		var ret TransitOptionType
		return ret
	}).(TransitOptionTypeOutput)
}

func (o TransitOptionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TransitOptionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TransitOptionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TransitOptionTypeInput is an input type that accepts values of the TransitOptionType enum
// A concrete instance of `TransitOptionTypeInput` can be one of the following:
//
//	TransitOptionTypeExpressRoute
//	TransitOptionTypeGateway
//	TransitOptionTypePeering
type TransitOptionTypeInput interface {
	pulumi.Input

	ToTransitOptionTypeOutput() TransitOptionTypeOutput
	ToTransitOptionTypeOutputWithContext(context.Context) TransitOptionTypeOutput
}

var transitOptionTypePtrType = reflect.TypeOf((**TransitOptionType)(nil)).Elem()

type TransitOptionTypePtrInput interface {
	pulumi.Input

	ToTransitOptionTypePtrOutput() TransitOptionTypePtrOutput
	ToTransitOptionTypePtrOutputWithContext(context.Context) TransitOptionTypePtrOutput
}

type transitOptionTypePtr string

func TransitOptionTypePtr(v string) TransitOptionTypePtrInput {
	return (*transitOptionTypePtr)(&v)
}

func (*transitOptionTypePtr) ElementType() reflect.Type {
	return transitOptionTypePtrType
}

func (in *transitOptionTypePtr) ToTransitOptionTypePtrOutput() TransitOptionTypePtrOutput {
	return pulumi.ToOutput(in).(TransitOptionTypePtrOutput)
}

func (in *transitOptionTypePtr) ToTransitOptionTypePtrOutputWithContext(ctx context.Context) TransitOptionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TransitOptionTypePtrOutput)
}

// The type of the object id. We currently allow users, groups, and service principals
type Type string

const (
	TypeUser             = Type("User")
	TypeGroup            = Type("Group")
	TypeServicePrincipal = Type("ServicePrincipal")
)

func (Type) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (e Type) ToTypeOutput() TypeOutput {
	return pulumi.ToOutput(e).(TypeOutput)
}

func (e Type) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TypeOutput)
}

func (e Type) ToTypePtrOutput() TypePtrOutput {
	return e.ToTypePtrOutputWithContext(context.Background())
}

func (e Type) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return Type(e).ToTypeOutputWithContext(ctx).ToTypePtrOutputWithContext(ctx)
}

func (e Type) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Type) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Type) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

func (o TypeOutput) ToTypePtrOutput() TypePtrOutput {
	return o.ToTypePtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Type) *Type {
		return &v
	}).(TypePtrOutput)
}

func (o TypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Type) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TypePtrOutput struct{ *pulumi.OutputState }

func (TypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (o TypePtrOutput) ToTypePtrOutput() TypePtrOutput {
	return o
}

func (o TypePtrOutput) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return o
}

func (o TypePtrOutput) Elem() TypeOutput {
	return o.ApplyT(func(v *Type) Type {
		if v != nil {
			return *v
		}
		var ret Type
		return ret
	}).(TypeOutput)
}

func (o TypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Type) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TypeInput is an input type that accepts values of the Type enum
// A concrete instance of `TypeInput` can be one of the following:
//
//	TypeUser
//	TypeGroup
//	TypeServicePrincipal
type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(context.Context) TypeOutput
}

var typePtrType = reflect.TypeOf((**Type)(nil)).Elem()

type TypePtrInput interface {
	pulumi.Input

	ToTypePtrOutput() TypePtrOutput
	ToTypePtrOutputWithContext(context.Context) TypePtrOutput
}

type typePtr string

func TypePtr(v string) TypePtrInput {
	return (*typePtr)(&v)
}

func (*typePtr) ElementType() reflect.Type {
	return typePtrType
}

func (in *typePtr) ToTypePtrOutput() TypePtrOutput {
	return pulumi.ToOutput(in).(TypePtrOutput)
}

func (in *typePtr) ToTypePtrOutputWithContext(ctx context.Context) TypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionPerformedOutput{})
	pulumi.RegisterOutputType(ActionPerformedPtrOutput{})
	pulumi.RegisterOutputType(ApprovalPolicyOutput{})
	pulumi.RegisterOutputType(ApprovalPolicyPtrOutput{})
	pulumi.RegisterOutputType(ApprovalStatusOutput{})
	pulumi.RegisterOutputType(ApprovalStatusPtrOutput{})
	pulumi.RegisterOutputType(CommunityEndpointProtocolOutput{})
	pulumi.RegisterOutputType(CommunityEndpointProtocolPtrOutput{})
	pulumi.RegisterOutputType(DestinationTypeOutput{})
	pulumi.RegisterOutputType(DestinationTypePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticDestinationOutput{})
	pulumi.RegisterOutputType(DiagnosticDestinationPtrOutput{})
	pulumi.RegisterOutputType(EnclaveEndpointProtocolOutput{})
	pulumi.RegisterOutputType(EnclaveEndpointProtocolPtrOutput{})
	pulumi.RegisterOutputType(EnforcementOutput{})
	pulumi.RegisterOutputType(EnforcementPtrOutput{})
	pulumi.RegisterOutputType(FirewallSKUOutput{})
	pulumi.RegisterOutputType(FirewallSKUPtrOutput{})
	pulumi.RegisterOutputType(JustificationOutput{})
	pulumi.RegisterOutputType(JustificationPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(ModeOutput{})
	pulumi.RegisterOutputType(ModePtrOutput{})
	pulumi.RegisterOutputType(OptionOutput{})
	pulumi.RegisterOutputType(OptionPtrOutput{})
	pulumi.RegisterOutputType(PolicyActionOutput{})
	pulumi.RegisterOutputType(PolicyActionPtrOutput{})
	pulumi.RegisterOutputType(PolicyOverrideOutput{})
	pulumi.RegisterOutputType(PolicyOverridePtrOutput{})
	pulumi.RegisterOutputType(ServiceIdentifierOutput{})
	pulumi.RegisterOutputType(ServiceIdentifierPtrOutput{})
	pulumi.RegisterOutputType(TransitHubStateEnumOutput{})
	pulumi.RegisterOutputType(TransitHubStateEnumPtrOutput{})
	pulumi.RegisterOutputType(TransitOptionTypeOutput{})
	pulumi.RegisterOutputType(TransitOptionTypePtrOutput{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypePtrOutput{})
}
