// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mission

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EnclaveEndpoint Model Resource
//
// Uses Azure REST API version 2025-05-01-preview.
//
// Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type EnclaveEndpoint struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning State.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// List of resource ids created by community endpoint.
	ResourceCollection pulumi.StringArrayOutput `pulumi:"resourceCollection"`
	// Enclave Endpoint Rule Collection.
	RuleCollection EnclaveEndpointDestinationRuleResponseArrayOutput `pulumi:"ruleCollection"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEnclaveEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEnclaveEndpoint(ctx *pulumi.Context,
	name string, args *EnclaveEndpointArgs, opts ...pulumi.ResourceOption) (*EnclaveEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.RuleCollection == nil {
		return nil, errors.New("invalid value for required argument 'RuleCollection'")
	}
	if args.VirtualEnclaveName == nil {
		return nil, errors.New("invalid value for required argument 'VirtualEnclaveName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:mission/v20240601preview:EnclaveEndpoint"),
		},
		{
			Type: pulumi.String("azure-native:mission/v20241201preview:EnclaveEndpoint"),
		},
		{
			Type: pulumi.String("azure-native:mission/v20250501preview:EnclaveEndpoint"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnclaveEndpoint
	err := ctx.RegisterResource("azure-native:mission:EnclaveEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnclaveEndpoint gets an existing EnclaveEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnclaveEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnclaveEndpointState, opts ...pulumi.ResourceOption) (*EnclaveEndpoint, error) {
	var resource EnclaveEndpoint
	err := ctx.ReadResource("azure-native:mission:EnclaveEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnclaveEndpoint resources.
type enclaveEndpointState struct {
}

type EnclaveEndpointState struct {
}

func (EnclaveEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*enclaveEndpointState)(nil)).Elem()
}

type enclaveEndpointArgs struct {
	// The name of the Enclave Endpoint Resource
	EnclaveEndpointName *string `pulumi:"enclaveEndpointName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Enclave Endpoint Rule Collection.
	RuleCollection []EnclaveEndpointDestinationRule `pulumi:"ruleCollection"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the enclaveResource Resource
	VirtualEnclaveName string `pulumi:"virtualEnclaveName"`
}

// The set of arguments for constructing a EnclaveEndpoint resource.
type EnclaveEndpointArgs struct {
	// The name of the Enclave Endpoint Resource
	EnclaveEndpointName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Enclave Endpoint Rule Collection.
	RuleCollection EnclaveEndpointDestinationRuleArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the enclaveResource Resource
	VirtualEnclaveName pulumi.StringInput
}

func (EnclaveEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enclaveEndpointArgs)(nil)).Elem()
}

type EnclaveEndpointInput interface {
	pulumi.Input

	ToEnclaveEndpointOutput() EnclaveEndpointOutput
	ToEnclaveEndpointOutputWithContext(ctx context.Context) EnclaveEndpointOutput
}

func (*EnclaveEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**EnclaveEndpoint)(nil)).Elem()
}

func (i *EnclaveEndpoint) ToEnclaveEndpointOutput() EnclaveEndpointOutput {
	return i.ToEnclaveEndpointOutputWithContext(context.Background())
}

func (i *EnclaveEndpoint) ToEnclaveEndpointOutputWithContext(ctx context.Context) EnclaveEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnclaveEndpointOutput)
}

type EnclaveEndpointOutput struct{ *pulumi.OutputState }

func (EnclaveEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnclaveEndpoint)(nil)).Elem()
}

func (o EnclaveEndpointOutput) ToEnclaveEndpointOutput() EnclaveEndpointOutput {
	return o
}

func (o EnclaveEndpointOutput) ToEnclaveEndpointOutputWithContext(ctx context.Context) EnclaveEndpointOutput {
	return o
}

// The Azure API version of the resource.
func (o EnclaveEndpointOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o EnclaveEndpointOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EnclaveEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning State.
func (o EnclaveEndpointOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// List of resource ids created by community endpoint.
func (o EnclaveEndpointOutput) ResourceCollection() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringArrayOutput { return v.ResourceCollection }).(pulumi.StringArrayOutput)
}

// Enclave Endpoint Rule Collection.
func (o EnclaveEndpointOutput) RuleCollection() EnclaveEndpointDestinationRuleResponseArrayOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) EnclaveEndpointDestinationRuleResponseArrayOutput { return v.RuleCollection }).(EnclaveEndpointDestinationRuleResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EnclaveEndpointOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EnclaveEndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EnclaveEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveEndpoint) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnclaveEndpointOutput{})
}
