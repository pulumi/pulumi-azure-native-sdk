// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mission

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Virtual Enclave Model Resource
//
// Uses Azure REST API version 2025-05-01-preview.
//
// Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type VirtualEnclave struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Deploy Bastion service (True or False).
	BastionEnabled pulumi.BoolPtrOutput `pulumi:"bastionEnabled"`
	// Community Resource Id.
	CommunityResourceId pulumi.StringOutput `pulumi:"communityResourceId"`
	// Enclave Address Spaces
	EnclaveAddressSpaces EnclaveAddressSpacesModelResponseOutput `pulumi:"enclaveAddressSpaces"`
	// Enclave default settings.
	EnclaveDefaultSettings EnclaveDefaultSettingsModelResponsePtrOutput `pulumi:"enclaveDefaultSettings"`
	// Enclave role assignments
	EnclaveRoleAssignments RoleAssignmentItemResponseArrayOutput `pulumi:"enclaveRoleAssignments"`
	// Virtual Network.
	EnclaveVirtualNetwork EnclaveVirtualNetworkModelResponseOutput `pulumi:"enclaveVirtualNetwork"`
	// Enclave specific policies
	GovernedServiceList GovernedServiceItemResponseArrayOutput `pulumi:"governedServiceList"`
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Maintenance Mode configuration.
	MaintenanceModeConfiguration MaintenanceModeConfigurationModelResponsePtrOutput `pulumi:"maintenanceModeConfiguration"`
	// Managed On Behalf Of Configuration.
	ManagedOnBehalfOfConfiguration ManagedOnBehalfOfConfigurationResponseOutput `pulumi:"managedOnBehalfOfConfiguration"`
	// Managed resource group name.
	ManagedResourceGroupName pulumi.StringOutput `pulumi:"managedResourceGroupName"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning State.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// List of resource ids created by Virtual Enclave.
	ResourceCollection pulumi.StringArrayOutput `pulumi:"resourceCollection"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Workload role assignments
	WorkloadRoleAssignments RoleAssignmentItemResponseArrayOutput `pulumi:"workloadRoleAssignments"`
}

// NewVirtualEnclave registers a new resource with the given unique name, arguments, and options.
func NewVirtualEnclave(ctx *pulumi.Context,
	name string, args *VirtualEnclaveArgs, opts ...pulumi.ResourceOption) (*VirtualEnclave, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommunityResourceId == nil {
		return nil, errors.New("invalid value for required argument 'CommunityResourceId'")
	}
	if args.EnclaveVirtualNetwork == nil {
		return nil, errors.New("invalid value for required argument 'EnclaveVirtualNetwork'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.BastionEnabled == nil {
		args.BastionEnabled = pulumi.BoolPtr(false)
	}
	if args.EnclaveDefaultSettings != nil {
		args.EnclaveDefaultSettings = args.EnclaveDefaultSettings.ToEnclaveDefaultSettingsModelPtrOutput().ApplyT(func(v *EnclaveDefaultSettingsModel) *EnclaveDefaultSettingsModel { return v.Defaults() }).(EnclaveDefaultSettingsModelPtrOutput)
	}
	args.EnclaveVirtualNetwork = args.EnclaveVirtualNetwork.ToEnclaveVirtualNetworkModelOutput().ApplyT(func(v EnclaveVirtualNetworkModel) EnclaveVirtualNetworkModel { return *v.Defaults() }).(EnclaveVirtualNetworkModelOutput)
	if args.MaintenanceModeConfiguration != nil {
		args.MaintenanceModeConfiguration = args.MaintenanceModeConfiguration.ToMaintenanceModeConfigurationModelPtrOutput().ApplyT(func(v *MaintenanceModeConfigurationModel) *MaintenanceModeConfigurationModel { return v.Defaults() }).(MaintenanceModeConfigurationModelPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:mission/v20240601preview:VirtualEnclave"),
		},
		{
			Type: pulumi.String("azure-native:mission/v20241201preview:VirtualEnclave"),
		},
		{
			Type: pulumi.String("azure-native:mission/v20250501preview:VirtualEnclave"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualEnclave
	err := ctx.RegisterResource("azure-native:mission:VirtualEnclave", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualEnclave gets an existing VirtualEnclave resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualEnclave(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualEnclaveState, opts ...pulumi.ResourceOption) (*VirtualEnclave, error) {
	var resource VirtualEnclave
	err := ctx.ReadResource("azure-native:mission:VirtualEnclave", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualEnclave resources.
type virtualEnclaveState struct {
}

type VirtualEnclaveState struct {
}

func (VirtualEnclaveState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualEnclaveState)(nil)).Elem()
}

type virtualEnclaveArgs struct {
	// Deploy Bastion service (True or False).
	BastionEnabled *bool `pulumi:"bastionEnabled"`
	// Community Resource Id.
	CommunityResourceId string `pulumi:"communityResourceId"`
	// Enclave default settings.
	EnclaveDefaultSettings *EnclaveDefaultSettingsModel `pulumi:"enclaveDefaultSettings"`
	// Enclave role assignments
	EnclaveRoleAssignments []RoleAssignmentItem `pulumi:"enclaveRoleAssignments"`
	// Virtual Network.
	EnclaveVirtualNetwork EnclaveVirtualNetworkModel `pulumi:"enclaveVirtualNetwork"`
	// Enclave specific policies
	GovernedServiceList []GovernedServiceItem `pulumi:"governedServiceList"`
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Maintenance Mode configuration.
	MaintenanceModeConfiguration *MaintenanceModeConfigurationModel `pulumi:"maintenanceModeConfiguration"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The name of the enclaveResource Resource
	VirtualEnclaveName *string `pulumi:"virtualEnclaveName"`
	// Workload role assignments
	WorkloadRoleAssignments []RoleAssignmentItem `pulumi:"workloadRoleAssignments"`
}

// The set of arguments for constructing a VirtualEnclave resource.
type VirtualEnclaveArgs struct {
	// Deploy Bastion service (True or False).
	BastionEnabled pulumi.BoolPtrInput
	// Community Resource Id.
	CommunityResourceId pulumi.StringInput
	// Enclave default settings.
	EnclaveDefaultSettings EnclaveDefaultSettingsModelPtrInput
	// Enclave role assignments
	EnclaveRoleAssignments RoleAssignmentItemArrayInput
	// Virtual Network.
	EnclaveVirtualNetwork EnclaveVirtualNetworkModelInput
	// Enclave specific policies
	GovernedServiceList GovernedServiceItemArrayInput
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Maintenance Mode configuration.
	MaintenanceModeConfiguration MaintenanceModeConfigurationModelPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// The name of the enclaveResource Resource
	VirtualEnclaveName pulumi.StringPtrInput
	// Workload role assignments
	WorkloadRoleAssignments RoleAssignmentItemArrayInput
}

func (VirtualEnclaveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualEnclaveArgs)(nil)).Elem()
}

type VirtualEnclaveInput interface {
	pulumi.Input

	ToVirtualEnclaveOutput() VirtualEnclaveOutput
	ToVirtualEnclaveOutputWithContext(ctx context.Context) VirtualEnclaveOutput
}

func (*VirtualEnclave) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualEnclave)(nil)).Elem()
}

func (i *VirtualEnclave) ToVirtualEnclaveOutput() VirtualEnclaveOutput {
	return i.ToVirtualEnclaveOutputWithContext(context.Background())
}

func (i *VirtualEnclave) ToVirtualEnclaveOutputWithContext(ctx context.Context) VirtualEnclaveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualEnclaveOutput)
}

type VirtualEnclaveOutput struct{ *pulumi.OutputState }

func (VirtualEnclaveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualEnclave)(nil)).Elem()
}

func (o VirtualEnclaveOutput) ToVirtualEnclaveOutput() VirtualEnclaveOutput {
	return o
}

func (o VirtualEnclaveOutput) ToVirtualEnclaveOutputWithContext(ctx context.Context) VirtualEnclaveOutput {
	return o
}

// The Azure API version of the resource.
func (o VirtualEnclaveOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Deploy Bastion service (True or False).
func (o VirtualEnclaveOutput) BastionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.BoolPtrOutput { return v.BastionEnabled }).(pulumi.BoolPtrOutput)
}

// Community Resource Id.
func (o VirtualEnclaveOutput) CommunityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.CommunityResourceId }).(pulumi.StringOutput)
}

// Enclave Address Spaces
func (o VirtualEnclaveOutput) EnclaveAddressSpaces() EnclaveAddressSpacesModelResponseOutput {
	return o.ApplyT(func(v *VirtualEnclave) EnclaveAddressSpacesModelResponseOutput { return v.EnclaveAddressSpaces }).(EnclaveAddressSpacesModelResponseOutput)
}

// Enclave default settings.
func (o VirtualEnclaveOutput) EnclaveDefaultSettings() EnclaveDefaultSettingsModelResponsePtrOutput {
	return o.ApplyT(func(v *VirtualEnclave) EnclaveDefaultSettingsModelResponsePtrOutput { return v.EnclaveDefaultSettings }).(EnclaveDefaultSettingsModelResponsePtrOutput)
}

// Enclave role assignments
func (o VirtualEnclaveOutput) EnclaveRoleAssignments() RoleAssignmentItemResponseArrayOutput {
	return o.ApplyT(func(v *VirtualEnclave) RoleAssignmentItemResponseArrayOutput { return v.EnclaveRoleAssignments }).(RoleAssignmentItemResponseArrayOutput)
}

// Virtual Network.
func (o VirtualEnclaveOutput) EnclaveVirtualNetwork() EnclaveVirtualNetworkModelResponseOutput {
	return o.ApplyT(func(v *VirtualEnclave) EnclaveVirtualNetworkModelResponseOutput { return v.EnclaveVirtualNetwork }).(EnclaveVirtualNetworkModelResponseOutput)
}

// Enclave specific policies
func (o VirtualEnclaveOutput) GovernedServiceList() GovernedServiceItemResponseArrayOutput {
	return o.ApplyT(func(v *VirtualEnclave) GovernedServiceItemResponseArrayOutput { return v.GovernedServiceList }).(GovernedServiceItemResponseArrayOutput)
}

// The managed service identities assigned to this resource.
func (o VirtualEnclaveOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *VirtualEnclave) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o VirtualEnclaveOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maintenance Mode configuration.
func (o VirtualEnclaveOutput) MaintenanceModeConfiguration() MaintenanceModeConfigurationModelResponsePtrOutput {
	return o.ApplyT(func(v *VirtualEnclave) MaintenanceModeConfigurationModelResponsePtrOutput {
		return v.MaintenanceModeConfiguration
	}).(MaintenanceModeConfigurationModelResponsePtrOutput)
}

// Managed On Behalf Of Configuration.
func (o VirtualEnclaveOutput) ManagedOnBehalfOfConfiguration() ManagedOnBehalfOfConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualEnclave) ManagedOnBehalfOfConfigurationResponseOutput {
		return v.ManagedOnBehalfOfConfiguration
	}).(ManagedOnBehalfOfConfigurationResponseOutput)
}

// Managed resource group name.
func (o VirtualEnclaveOutput) ManagedResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.ManagedResourceGroupName }).(pulumi.StringOutput)
}

// The name of the resource
func (o VirtualEnclaveOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning State.
func (o VirtualEnclaveOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// List of resource ids created by Virtual Enclave.
func (o VirtualEnclaveOutput) ResourceCollection() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringArrayOutput { return v.ResourceCollection }).(pulumi.StringArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o VirtualEnclaveOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *VirtualEnclave) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o VirtualEnclaveOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VirtualEnclaveOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualEnclave) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Workload role assignments
func (o VirtualEnclaveOutput) WorkloadRoleAssignments() RoleAssignmentItemResponseArrayOutput {
	return o.ApplyT(func(v *VirtualEnclave) RoleAssignmentItemResponseArrayOutput { return v.WorkloadRoleAssignments }).(RoleAssignmentItemResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualEnclaveOutput{})
}
