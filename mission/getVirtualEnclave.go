// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mission

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a EnclaveResource
//
// Uses Azure REST API version 2025-05-01-preview.
//
// Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupVirtualEnclave(ctx *pulumi.Context, args *LookupVirtualEnclaveArgs, opts ...pulumi.InvokeOption) (*LookupVirtualEnclaveResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualEnclaveResult
	err := ctx.Invoke("azure-native:mission:getVirtualEnclave", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupVirtualEnclaveArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the enclaveResource Resource
	VirtualEnclaveName string `pulumi:"virtualEnclaveName"`
}

// Virtual Enclave Model Resource
type LookupVirtualEnclaveResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Deploy Bastion service (True or False).
	BastionEnabled *bool `pulumi:"bastionEnabled"`
	// Community Resource Id.
	CommunityResourceId string `pulumi:"communityResourceId"`
	// Enclave Address Spaces
	EnclaveAddressSpaces EnclaveAddressSpacesModelResponse `pulumi:"enclaveAddressSpaces"`
	// Enclave default settings.
	EnclaveDefaultSettings *EnclaveDefaultSettingsModelResponse `pulumi:"enclaveDefaultSettings"`
	// Enclave role assignments
	EnclaveRoleAssignments []RoleAssignmentItemResponse `pulumi:"enclaveRoleAssignments"`
	// Virtual Network.
	EnclaveVirtualNetwork EnclaveVirtualNetworkModelResponse `pulumi:"enclaveVirtualNetwork"`
	// Enclave specific policies
	GovernedServiceList []GovernedServiceItemResponse `pulumi:"governedServiceList"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Maintenance Mode configuration.
	MaintenanceModeConfiguration *MaintenanceModeConfigurationModelResponse `pulumi:"maintenanceModeConfiguration"`
	// Managed On Behalf Of Configuration.
	ManagedOnBehalfOfConfiguration ManagedOnBehalfOfConfigurationResponse `pulumi:"managedOnBehalfOfConfiguration"`
	// Managed resource group name.
	ManagedResourceGroupName string `pulumi:"managedResourceGroupName"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Provisioning State.
	ProvisioningState string `pulumi:"provisioningState"`
	// List of resource ids created by Virtual Enclave.
	ResourceCollection []string `pulumi:"resourceCollection"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Workload role assignments
	WorkloadRoleAssignments []RoleAssignmentItemResponse `pulumi:"workloadRoleAssignments"`
}

// Defaults sets the appropriate defaults for LookupVirtualEnclaveResult
func (val *LookupVirtualEnclaveResult) Defaults() *LookupVirtualEnclaveResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BastionEnabled == nil {
		bastionEnabled_ := false
		tmp.BastionEnabled = &bastionEnabled_
	}
	tmp.EnclaveDefaultSettings = tmp.EnclaveDefaultSettings.Defaults()

	tmp.EnclaveVirtualNetwork = *tmp.EnclaveVirtualNetwork.Defaults()

	tmp.MaintenanceModeConfiguration = tmp.MaintenanceModeConfiguration.Defaults()

	return &tmp
}
func LookupVirtualEnclaveOutput(ctx *pulumi.Context, args LookupVirtualEnclaveOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualEnclaveResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVirtualEnclaveResultOutput, error) {
			args := v.(LookupVirtualEnclaveArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:mission:getVirtualEnclave", args, LookupVirtualEnclaveResultOutput{}, options).(LookupVirtualEnclaveResultOutput), nil
		}).(LookupVirtualEnclaveResultOutput)
}

type LookupVirtualEnclaveOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the enclaveResource Resource
	VirtualEnclaveName pulumi.StringInput `pulumi:"virtualEnclaveName"`
}

func (LookupVirtualEnclaveOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualEnclaveArgs)(nil)).Elem()
}

// Virtual Enclave Model Resource
type LookupVirtualEnclaveResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualEnclaveResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualEnclaveResult)(nil)).Elem()
}

func (o LookupVirtualEnclaveResultOutput) ToLookupVirtualEnclaveResultOutput() LookupVirtualEnclaveResultOutput {
	return o
}

func (o LookupVirtualEnclaveResultOutput) ToLookupVirtualEnclaveResultOutputWithContext(ctx context.Context) LookupVirtualEnclaveResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupVirtualEnclaveResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Deploy Bastion service (True or False).
func (o LookupVirtualEnclaveResultOutput) BastionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) *bool { return v.BastionEnabled }).(pulumi.BoolPtrOutput)
}

// Community Resource Id.
func (o LookupVirtualEnclaveResultOutput) CommunityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.CommunityResourceId }).(pulumi.StringOutput)
}

// Enclave Address Spaces
func (o LookupVirtualEnclaveResultOutput) EnclaveAddressSpaces() EnclaveAddressSpacesModelResponseOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) EnclaveAddressSpacesModelResponse { return v.EnclaveAddressSpaces }).(EnclaveAddressSpacesModelResponseOutput)
}

// Enclave default settings.
func (o LookupVirtualEnclaveResultOutput) EnclaveDefaultSettings() EnclaveDefaultSettingsModelResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) *EnclaveDefaultSettingsModelResponse {
		return v.EnclaveDefaultSettings
	}).(EnclaveDefaultSettingsModelResponsePtrOutput)
}

// Enclave role assignments
func (o LookupVirtualEnclaveResultOutput) EnclaveRoleAssignments() RoleAssignmentItemResponseArrayOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) []RoleAssignmentItemResponse { return v.EnclaveRoleAssignments }).(RoleAssignmentItemResponseArrayOutput)
}

// Virtual Network.
func (o LookupVirtualEnclaveResultOutput) EnclaveVirtualNetwork() EnclaveVirtualNetworkModelResponseOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) EnclaveVirtualNetworkModelResponse { return v.EnclaveVirtualNetwork }).(EnclaveVirtualNetworkModelResponseOutput)
}

// Enclave specific policies
func (o LookupVirtualEnclaveResultOutput) GovernedServiceList() GovernedServiceItemResponseArrayOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) []GovernedServiceItemResponse { return v.GovernedServiceList }).(GovernedServiceItemResponseArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupVirtualEnclaveResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.Id }).(pulumi.StringOutput)
}

// The managed service identities assigned to this resource.
func (o LookupVirtualEnclaveResultOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupVirtualEnclaveResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.Location }).(pulumi.StringOutput)
}

// Maintenance Mode configuration.
func (o LookupVirtualEnclaveResultOutput) MaintenanceModeConfiguration() MaintenanceModeConfigurationModelResponsePtrOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) *MaintenanceModeConfigurationModelResponse {
		return v.MaintenanceModeConfiguration
	}).(MaintenanceModeConfigurationModelResponsePtrOutput)
}

// Managed On Behalf Of Configuration.
func (o LookupVirtualEnclaveResultOutput) ManagedOnBehalfOfConfiguration() ManagedOnBehalfOfConfigurationResponseOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) ManagedOnBehalfOfConfigurationResponse {
		return v.ManagedOnBehalfOfConfiguration
	}).(ManagedOnBehalfOfConfigurationResponseOutput)
}

// Managed resource group name.
func (o LookupVirtualEnclaveResultOutput) ManagedResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.ManagedResourceGroupName }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupVirtualEnclaveResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning State.
func (o LookupVirtualEnclaveResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// List of resource ids created by Virtual Enclave.
func (o LookupVirtualEnclaveResultOutput) ResourceCollection() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) []string { return v.ResourceCollection }).(pulumi.StringArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupVirtualEnclaveResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupVirtualEnclaveResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupVirtualEnclaveResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) string { return v.Type }).(pulumi.StringOutput)
}

// Workload role assignments
func (o LookupVirtualEnclaveResultOutput) WorkloadRoleAssignments() RoleAssignmentItemResponseArrayOutput {
	return o.ApplyT(func(v LookupVirtualEnclaveResult) []RoleAssignmentItemResponse { return v.WorkloadRoleAssignments }).(RoleAssignmentItemResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualEnclaveResultOutput{})
}
