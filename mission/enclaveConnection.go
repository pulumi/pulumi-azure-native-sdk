// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mission

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// EnclaveConnection Model Resource
//
// Uses Azure REST API version 2025-05-01-preview.
//
// Other available API versions: 2024-06-01-preview, 2024-12-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native mission [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type EnclaveConnection struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Community Resource Id.
	CommunityResourceId pulumi.StringOutput `pulumi:"communityResourceId"`
	// Destination Endpoint Resource Id.
	DestinationEndpointId pulumi.StringOutput `pulumi:"destinationEndpointId"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning State.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// List of resource ids modified by enclave Connections.
	ResourceCollection pulumi.StringArrayOutput `pulumi:"resourceCollection"`
	// Source CIDR.
	SourceCidr pulumi.StringPtrOutput `pulumi:"sourceCidr"`
	// Source Resource Id.
	SourceResourceId pulumi.StringOutput `pulumi:"sourceResourceId"`
	// The state of the enclaveConnection.
	State pulumi.StringOutput `pulumi:"state"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEnclaveConnection registers a new resource with the given unique name, arguments, and options.
func NewEnclaveConnection(ctx *pulumi.Context,
	name string, args *EnclaveConnectionArgs, opts ...pulumi.ResourceOption) (*EnclaveConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommunityResourceId == nil {
		return nil, errors.New("invalid value for required argument 'CommunityResourceId'")
	}
	if args.DestinationEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationEndpointId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SourceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceResourceId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:mission/v20240601preview:EnclaveConnection"),
		},
		{
			Type: pulumi.String("azure-native:mission/v20241201preview:EnclaveConnection"),
		},
		{
			Type: pulumi.String("azure-native:mission/v20250501preview:EnclaveConnection"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnclaveConnection
	err := ctx.RegisterResource("azure-native:mission:EnclaveConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnclaveConnection gets an existing EnclaveConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnclaveConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnclaveConnectionState, opts ...pulumi.ResourceOption) (*EnclaveConnection, error) {
	var resource EnclaveConnection
	err := ctx.ReadResource("azure-native:mission:EnclaveConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnclaveConnection resources.
type enclaveConnectionState struct {
}

type EnclaveConnectionState struct {
}

func (EnclaveConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*enclaveConnectionState)(nil)).Elem()
}

type enclaveConnectionArgs struct {
	// Community Resource Id.
	CommunityResourceId string `pulumi:"communityResourceId"`
	// Destination Endpoint Resource Id.
	DestinationEndpointId string `pulumi:"destinationEndpointId"`
	// The name of the Enclave Connection Resource
	EnclaveConnectionName *string `pulumi:"enclaveConnectionName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Source CIDR.
	SourceCidr *string `pulumi:"sourceCidr"`
	// Source Resource Id.
	SourceResourceId string `pulumi:"sourceResourceId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EnclaveConnection resource.
type EnclaveConnectionArgs struct {
	// Community Resource Id.
	CommunityResourceId pulumi.StringInput
	// Destination Endpoint Resource Id.
	DestinationEndpointId pulumi.StringInput
	// The name of the Enclave Connection Resource
	EnclaveConnectionName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Source CIDR.
	SourceCidr pulumi.StringPtrInput
	// Source Resource Id.
	SourceResourceId pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (EnclaveConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enclaveConnectionArgs)(nil)).Elem()
}

type EnclaveConnectionInput interface {
	pulumi.Input

	ToEnclaveConnectionOutput() EnclaveConnectionOutput
	ToEnclaveConnectionOutputWithContext(ctx context.Context) EnclaveConnectionOutput
}

func (*EnclaveConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**EnclaveConnection)(nil)).Elem()
}

func (i *EnclaveConnection) ToEnclaveConnectionOutput() EnclaveConnectionOutput {
	return i.ToEnclaveConnectionOutputWithContext(context.Background())
}

func (i *EnclaveConnection) ToEnclaveConnectionOutputWithContext(ctx context.Context) EnclaveConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnclaveConnectionOutput)
}

type EnclaveConnectionOutput struct{ *pulumi.OutputState }

func (EnclaveConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnclaveConnection)(nil)).Elem()
}

func (o EnclaveConnectionOutput) ToEnclaveConnectionOutput() EnclaveConnectionOutput {
	return o
}

func (o EnclaveConnectionOutput) ToEnclaveConnectionOutputWithContext(ctx context.Context) EnclaveConnectionOutput {
	return o
}

// The Azure API version of the resource.
func (o EnclaveConnectionOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Community Resource Id.
func (o EnclaveConnectionOutput) CommunityResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.CommunityResourceId }).(pulumi.StringOutput)
}

// Destination Endpoint Resource Id.
func (o EnclaveConnectionOutput) DestinationEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.DestinationEndpointId }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o EnclaveConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EnclaveConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provisioning State.
func (o EnclaveConnectionOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// List of resource ids modified by enclave Connections.
func (o EnclaveConnectionOutput) ResourceCollection() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringArrayOutput { return v.ResourceCollection }).(pulumi.StringArrayOutput)
}

// Source CIDR.
func (o EnclaveConnectionOutput) SourceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringPtrOutput { return v.SourceCidr }).(pulumi.StringPtrOutput)
}

// Source Resource Id.
func (o EnclaveConnectionOutput) SourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.SourceResourceId }).(pulumi.StringOutput)
}

// The state of the enclaveConnection.
func (o EnclaveConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EnclaveConnectionOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EnclaveConnection) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EnclaveConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EnclaveConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnclaveConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnclaveConnectionOutput{})
}
