// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package orbital

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Microsoft Planetary Computer Pro GeoCatalog resource
//
// Uses Azure REST API version 2025-02-11-preview.
//
// Other available API versions: 2024-01-31-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native orbital [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type GeoCatalog struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties GeoCatalogPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGeoCatalog registers a new resource with the given unique name, arguments, and options.
func NewGeoCatalog(ctx *pulumi.Context,
	name string, args *GeoCatalogArgs, opts ...pulumi.ResourceOption) (*GeoCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Properties != nil {
		args.Properties = args.Properties.ToGeoCatalogPropertiesPtrOutput().ApplyT(func(v *GeoCatalogProperties) *GeoCatalogProperties { return v.Defaults() }).(GeoCatalogPropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:orbital/v20240131preview:GeoCatalog"),
		},
		{
			Type: pulumi.String("azure-native:orbital/v20250211preview:GeoCatalog"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GeoCatalog
	err := ctx.RegisterResource("azure-native:orbital:GeoCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeoCatalog gets an existing GeoCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeoCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeoCatalogState, opts ...pulumi.ResourceOption) (*GeoCatalog, error) {
	var resource GeoCatalog
	err := ctx.ReadResource("azure-native:orbital:GeoCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeoCatalog resources.
type geoCatalogState struct {
}

type GeoCatalogState struct {
}

func (GeoCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*geoCatalogState)(nil)).Elem()
}

type geoCatalogArgs struct {
	// The name of the catalog
	CatalogName *string `pulumi:"catalogName"`
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The resource-specific properties for this resource.
	Properties *GeoCatalogProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a GeoCatalog resource.
type GeoCatalogArgs struct {
	// The name of the catalog
	CatalogName pulumi.StringPtrInput
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties GeoCatalogPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (GeoCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*geoCatalogArgs)(nil)).Elem()
}

type GeoCatalogInput interface {
	pulumi.Input

	ToGeoCatalogOutput() GeoCatalogOutput
	ToGeoCatalogOutputWithContext(ctx context.Context) GeoCatalogOutput
}

func (*GeoCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**GeoCatalog)(nil)).Elem()
}

func (i *GeoCatalog) ToGeoCatalogOutput() GeoCatalogOutput {
	return i.ToGeoCatalogOutputWithContext(context.Background())
}

func (i *GeoCatalog) ToGeoCatalogOutputWithContext(ctx context.Context) GeoCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeoCatalogOutput)
}

type GeoCatalogOutput struct{ *pulumi.OutputState }

func (GeoCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeoCatalog)(nil)).Elem()
}

func (o GeoCatalogOutput) ToGeoCatalogOutput() GeoCatalogOutput {
	return o
}

func (o GeoCatalogOutput) ToGeoCatalogOutputWithContext(ctx context.Context) GeoCatalogOutput {
	return o
}

// The Azure API version of the resource.
func (o GeoCatalogOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GeoCatalog) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The managed service identities assigned to this resource.
func (o GeoCatalogOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *GeoCatalog) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o GeoCatalogOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GeoCatalog) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o GeoCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GeoCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o GeoCatalogOutput) Properties() GeoCatalogPropertiesResponseOutput {
	return o.ApplyT(func(v *GeoCatalog) GeoCatalogPropertiesResponseOutput { return v.Properties }).(GeoCatalogPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o GeoCatalogOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *GeoCatalog) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o GeoCatalogOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GeoCatalog) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o GeoCatalogOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GeoCatalog) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GeoCatalogOutput{})
}
