// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package computeschedule

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The action the scheduled action should perform in the resources
type ActionType string

const (
	// Perform a start action on the specified resources
	ActionTypeStart = ActionType("Start")
	// Perform a deallocate action on the specified resources
	ActionTypeDeallocate = ActionType("Deallocate")
	// Perform hibernate and deallocate on the specified resources
	ActionTypeHibernate = ActionType("Hibernate")
)

func (ActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionType)(nil)).Elem()
}

func (e ActionType) ToActionTypeOutput() ActionTypeOutput {
	return pulumi.ToOutput(e).(ActionTypeOutput)
}

func (e ActionType) ToActionTypeOutputWithContext(ctx context.Context) ActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActionTypeOutput)
}

func (e ActionType) ToActionTypePtrOutput() ActionTypePtrOutput {
	return e.ToActionTypePtrOutputWithContext(context.Background())
}

func (e ActionType) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return ActionType(e).ToActionTypeOutputWithContext(ctx).ToActionTypePtrOutputWithContext(ctx)
}

func (e ActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActionTypeOutput struct{ *pulumi.OutputState }

func (ActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionType)(nil)).Elem()
}

func (o ActionTypeOutput) ToActionTypeOutput() ActionTypeOutput {
	return o
}

func (o ActionTypeOutput) ToActionTypeOutputWithContext(ctx context.Context) ActionTypeOutput {
	return o
}

func (o ActionTypeOutput) ToActionTypePtrOutput() ActionTypePtrOutput {
	return o.ToActionTypePtrOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActionType) *ActionType {
		return &v
	}).(ActionTypePtrOutput)
}

func (o ActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActionTypePtrOutput struct{ *pulumi.OutputState }

func (ActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionType)(nil)).Elem()
}

func (o ActionTypePtrOutput) ToActionTypePtrOutput() ActionTypePtrOutput {
	return o
}

func (o ActionTypePtrOutput) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return o
}

func (o ActionTypePtrOutput) Elem() ActionTypeOutput {
	return o.ApplyT(func(v *ActionType) ActionType {
		if v != nil {
			return *v
		}
		var ret ActionType
		return ret
	}).(ActionTypeOutput)
}

func (o ActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActionTypeInput is an input type that accepts values of the ActionType enum
// A concrete instance of `ActionTypeInput` can be one of the following:
//
//	ActionTypeStart
//	ActionTypeDeallocate
//	ActionTypeHibernate
type ActionTypeInput interface {
	pulumi.Input

	ToActionTypeOutput() ActionTypeOutput
	ToActionTypeOutputWithContext(context.Context) ActionTypeOutput
}

var actionTypePtrType = reflect.TypeOf((**ActionType)(nil)).Elem()

type ActionTypePtrInput interface {
	pulumi.Input

	ToActionTypePtrOutput() ActionTypePtrOutput
	ToActionTypePtrOutputWithContext(context.Context) ActionTypePtrOutput
}

type actionTypePtr string

func ActionTypePtr(v string) ActionTypePtrInput {
	return (*actionTypePtr)(&v)
}

func (*actionTypePtr) ElementType() reflect.Type {
	return actionTypePtrType
}

func (in *actionTypePtr) ToActionTypePtrOutput() ActionTypePtrOutput {
	return pulumi.ToOutput(in).(ActionTypePtrOutput)
}

func (in *actionTypePtr) ToActionTypePtrOutputWithContext(ctx context.Context) ActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActionTypePtrOutput)
}

// The type of deadline the scheduled action is supposed to follow for the schedule. If no value is passed, it will default to InitiateAt.
type DeadlineType string

const (
	// Default value of Unknown.
	DeadlineTypeUnknown = DeadlineType("Unknown")
	// Initiate the operation at the given deadline.
	DeadlineTypeInitiateAt = DeadlineType("InitiateAt")
	// Complete the operation by the given deadline.
	DeadlineTypeCompleteBy = DeadlineType("CompleteBy")
)

func (DeadlineType) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadlineType)(nil)).Elem()
}

func (e DeadlineType) ToDeadlineTypeOutput() DeadlineTypeOutput {
	return pulumi.ToOutput(e).(DeadlineTypeOutput)
}

func (e DeadlineType) ToDeadlineTypeOutputWithContext(ctx context.Context) DeadlineTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DeadlineTypeOutput)
}

func (e DeadlineType) ToDeadlineTypePtrOutput() DeadlineTypePtrOutput {
	return e.ToDeadlineTypePtrOutputWithContext(context.Background())
}

func (e DeadlineType) ToDeadlineTypePtrOutputWithContext(ctx context.Context) DeadlineTypePtrOutput {
	return DeadlineType(e).ToDeadlineTypeOutputWithContext(ctx).ToDeadlineTypePtrOutputWithContext(ctx)
}

func (e DeadlineType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeadlineType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DeadlineType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DeadlineType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DeadlineTypeOutput struct{ *pulumi.OutputState }

func (DeadlineTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadlineType)(nil)).Elem()
}

func (o DeadlineTypeOutput) ToDeadlineTypeOutput() DeadlineTypeOutput {
	return o
}

func (o DeadlineTypeOutput) ToDeadlineTypeOutputWithContext(ctx context.Context) DeadlineTypeOutput {
	return o
}

func (o DeadlineTypeOutput) ToDeadlineTypePtrOutput() DeadlineTypePtrOutput {
	return o.ToDeadlineTypePtrOutputWithContext(context.Background())
}

func (o DeadlineTypeOutput) ToDeadlineTypePtrOutputWithContext(ctx context.Context) DeadlineTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeadlineType) *DeadlineType {
		return &v
	}).(DeadlineTypePtrOutput)
}

func (o DeadlineTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DeadlineTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeadlineType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DeadlineTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeadlineTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DeadlineType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DeadlineTypePtrOutput struct{ *pulumi.OutputState }

func (DeadlineTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadlineType)(nil)).Elem()
}

func (o DeadlineTypePtrOutput) ToDeadlineTypePtrOutput() DeadlineTypePtrOutput {
	return o
}

func (o DeadlineTypePtrOutput) ToDeadlineTypePtrOutputWithContext(ctx context.Context) DeadlineTypePtrOutput {
	return o
}

func (o DeadlineTypePtrOutput) Elem() DeadlineTypeOutput {
	return o.ApplyT(func(v *DeadlineType) DeadlineType {
		if v != nil {
			return *v
		}
		var ret DeadlineType
		return ret
	}).(DeadlineTypeOutput)
}

func (o DeadlineTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DeadlineTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DeadlineType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DeadlineTypeInput is an input type that accepts values of the DeadlineType enum
// A concrete instance of `DeadlineTypeInput` can be one of the following:
//
//	DeadlineTypeUnknown
//	DeadlineTypeInitiateAt
//	DeadlineTypeCompleteBy
type DeadlineTypeInput interface {
	pulumi.Input

	ToDeadlineTypeOutput() DeadlineTypeOutput
	ToDeadlineTypeOutputWithContext(context.Context) DeadlineTypeOutput
}

var deadlineTypePtrType = reflect.TypeOf((**DeadlineType)(nil)).Elem()

type DeadlineTypePtrInput interface {
	pulumi.Input

	ToDeadlineTypePtrOutput() DeadlineTypePtrOutput
	ToDeadlineTypePtrOutputWithContext(context.Context) DeadlineTypePtrOutput
}

type deadlineTypePtr string

func DeadlineTypePtr(v string) DeadlineTypePtrInput {
	return (*deadlineTypePtr)(&v)
}

func (*deadlineTypePtr) ElementType() reflect.Type {
	return deadlineTypePtrType
}

func (in *deadlineTypePtr) ToDeadlineTypePtrOutput() DeadlineTypePtrOutput {
	return pulumi.ToOutput(in).(DeadlineTypePtrOutput)
}

func (in *deadlineTypePtr) ToDeadlineTypePtrOutputWithContext(ctx context.Context) DeadlineTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DeadlineTypePtrOutput)
}

// The language the notification should be sent on.
type Language string

const (
	// American english language
	LanguageEnUs = Language("en-us")
)

func (Language) ElementType() reflect.Type {
	return reflect.TypeOf((*Language)(nil)).Elem()
}

func (e Language) ToLanguageOutput() LanguageOutput {
	return pulumi.ToOutput(e).(LanguageOutput)
}

func (e Language) ToLanguageOutputWithContext(ctx context.Context) LanguageOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LanguageOutput)
}

func (e Language) ToLanguagePtrOutput() LanguagePtrOutput {
	return e.ToLanguagePtrOutputWithContext(context.Background())
}

func (e Language) ToLanguagePtrOutputWithContext(ctx context.Context) LanguagePtrOutput {
	return Language(e).ToLanguageOutputWithContext(ctx).ToLanguagePtrOutputWithContext(ctx)
}

func (e Language) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Language) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Language) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Language) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LanguageOutput struct{ *pulumi.OutputState }

func (LanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Language)(nil)).Elem()
}

func (o LanguageOutput) ToLanguageOutput() LanguageOutput {
	return o
}

func (o LanguageOutput) ToLanguageOutputWithContext(ctx context.Context) LanguageOutput {
	return o
}

func (o LanguageOutput) ToLanguagePtrOutput() LanguagePtrOutput {
	return o.ToLanguagePtrOutputWithContext(context.Background())
}

func (o LanguageOutput) ToLanguagePtrOutputWithContext(ctx context.Context) LanguagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Language) *Language {
		return &v
	}).(LanguagePtrOutput)
}

func (o LanguageOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LanguageOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Language) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LanguageOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LanguageOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Language) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LanguagePtrOutput struct{ *pulumi.OutputState }

func (LanguagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Language)(nil)).Elem()
}

func (o LanguagePtrOutput) ToLanguagePtrOutput() LanguagePtrOutput {
	return o
}

func (o LanguagePtrOutput) ToLanguagePtrOutputWithContext(ctx context.Context) LanguagePtrOutput {
	return o
}

func (o LanguagePtrOutput) Elem() LanguageOutput {
	return o.ApplyT(func(v *Language) Language {
		if v != nil {
			return *v
		}
		var ret Language
		return ret
	}).(LanguageOutput)
}

func (o LanguagePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LanguagePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Language) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LanguageInput is an input type that accepts values of the Language enum
// A concrete instance of `LanguageInput` can be one of the following:
//
//	LanguageEnUs
type LanguageInput interface {
	pulumi.Input

	ToLanguageOutput() LanguageOutput
	ToLanguageOutputWithContext(context.Context) LanguageOutput
}

var languagePtrType = reflect.TypeOf((**Language)(nil)).Elem()

type LanguagePtrInput interface {
	pulumi.Input

	ToLanguagePtrOutput() LanguagePtrOutput
	ToLanguagePtrOutputWithContext(context.Context) LanguagePtrOutput
}

type languagePtr string

func LanguagePtr(v string) LanguagePtrInput {
	return (*languagePtr)(&v)
}

func (*languagePtr) ElementType() reflect.Type {
	return languagePtrType
}

func (in *languagePtr) ToLanguagePtrOutput() LanguagePtrOutput {
	return pulumi.ToOutput(in).(LanguagePtrOutput)
}

func (in *languagePtr) ToLanguagePtrOutputWithContext(ctx context.Context) LanguagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LanguagePtrOutput)
}

// Representation of the months available selection in a gregorian calendar
type Month string

const (
	// The January month.
	MonthJanuary = Month("January")
	// The February month.
	MonthFebruary = Month("February")
	// The March month.
	MonthMarch = Month("March")
	// The April month.
	MonthApril = Month("April")
	// The May month.
	MonthMay = Month("May")
	// The June month.
	MonthJune = Month("June")
	// The July month.
	MonthJuly = Month("July")
	// The August month.
	MonthAugust = Month("August")
	// The September month.
	MonthSeptember = Month("September")
	// The October month.
	MonthOctober = Month("October")
	// The November month.
	MonthNovember = Month("November")
	// The December month.
	MonthDecember = Month("December")
	// All months
	MonthAll = Month("All")
)

func (Month) ElementType() reflect.Type {
	return reflect.TypeOf((*Month)(nil)).Elem()
}

func (e Month) ToMonthOutput() MonthOutput {
	return pulumi.ToOutput(e).(MonthOutput)
}

func (e Month) ToMonthOutputWithContext(ctx context.Context) MonthOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MonthOutput)
}

func (e Month) ToMonthPtrOutput() MonthPtrOutput {
	return e.ToMonthPtrOutputWithContext(context.Background())
}

func (e Month) ToMonthPtrOutputWithContext(ctx context.Context) MonthPtrOutput {
	return Month(e).ToMonthOutputWithContext(ctx).ToMonthPtrOutputWithContext(ctx)
}

func (e Month) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Month) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Month) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Month) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MonthOutput struct{ *pulumi.OutputState }

func (MonthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Month)(nil)).Elem()
}

func (o MonthOutput) ToMonthOutput() MonthOutput {
	return o
}

func (o MonthOutput) ToMonthOutputWithContext(ctx context.Context) MonthOutput {
	return o
}

func (o MonthOutput) ToMonthPtrOutput() MonthPtrOutput {
	return o.ToMonthPtrOutputWithContext(context.Background())
}

func (o MonthOutput) ToMonthPtrOutputWithContext(ctx context.Context) MonthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Month) *Month {
		return &v
	}).(MonthPtrOutput)
}

func (o MonthOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MonthOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Month) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MonthOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonthOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Month) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MonthPtrOutput struct{ *pulumi.OutputState }

func (MonthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Month)(nil)).Elem()
}

func (o MonthPtrOutput) ToMonthPtrOutput() MonthPtrOutput {
	return o
}

func (o MonthPtrOutput) ToMonthPtrOutputWithContext(ctx context.Context) MonthPtrOutput {
	return o
}

func (o MonthPtrOutput) Elem() MonthOutput {
	return o.ApplyT(func(v *Month) Month {
		if v != nil {
			return *v
		}
		var ret Month
		return ret
	}).(MonthOutput)
}

func (o MonthPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonthPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Month) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MonthInput is an input type that accepts values of the Month enum
// A concrete instance of `MonthInput` can be one of the following:
//
//	MonthJanuary
//	MonthFebruary
//	MonthMarch
//	MonthApril
//	MonthMay
//	MonthJune
//	MonthJuly
//	MonthAugust
//	MonthSeptember
//	MonthOctober
//	MonthNovember
//	MonthDecember
//	MonthAll
type MonthInput interface {
	pulumi.Input

	ToMonthOutput() MonthOutput
	ToMonthOutputWithContext(context.Context) MonthOutput
}

var monthPtrType = reflect.TypeOf((**Month)(nil)).Elem()

type MonthPtrInput interface {
	pulumi.Input

	ToMonthPtrOutput() MonthPtrOutput
	ToMonthPtrOutputWithContext(context.Context) MonthPtrOutput
}

type monthPtr string

func MonthPtr(v string) MonthPtrInput {
	return (*monthPtr)(&v)
}

func (*monthPtr) ElementType() reflect.Type {
	return monthPtrType
}

func (in *monthPtr) ToMonthPtrOutput() MonthPtrOutput {
	return pulumi.ToOutput(in).(MonthPtrOutput)
}

func (in *monthPtr) ToMonthPtrOutputWithContext(ctx context.Context) MonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MonthPtrOutput)
}

// Type of notification to be sent.
type NotificationType string

const (
	// Notify through e-mail
	NotificationTypeEmail = NotificationType("Email")
)

func (NotificationType) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationType)(nil)).Elem()
}

func (e NotificationType) ToNotificationTypeOutput() NotificationTypeOutput {
	return pulumi.ToOutput(e).(NotificationTypeOutput)
}

func (e NotificationType) ToNotificationTypeOutputWithContext(ctx context.Context) NotificationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(NotificationTypeOutput)
}

func (e NotificationType) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return e.ToNotificationTypePtrOutputWithContext(context.Background())
}

func (e NotificationType) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return NotificationType(e).ToNotificationTypeOutputWithContext(ctx).ToNotificationTypePtrOutputWithContext(ctx)
}

func (e NotificationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NotificationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NotificationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NotificationTypeOutput struct{ *pulumi.OutputState }

func (NotificationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationType)(nil)).Elem()
}

func (o NotificationTypeOutput) ToNotificationTypeOutput() NotificationTypeOutput {
	return o
}

func (o NotificationTypeOutput) ToNotificationTypeOutputWithContext(ctx context.Context) NotificationTypeOutput {
	return o
}

func (o NotificationTypeOutput) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return o.ToNotificationTypePtrOutputWithContext(context.Background())
}

func (o NotificationTypeOutput) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationType) *NotificationType {
		return &v
	}).(NotificationTypePtrOutput)
}

func (o NotificationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o NotificationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o NotificationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e NotificationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type NotificationTypePtrOutput struct{ *pulumi.OutputState }

func (NotificationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationType)(nil)).Elem()
}

func (o NotificationTypePtrOutput) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return o
}

func (o NotificationTypePtrOutput) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return o
}

func (o NotificationTypePtrOutput) Elem() NotificationTypeOutput {
	return o.ApplyT(func(v *NotificationType) NotificationType {
		if v != nil {
			return *v
		}
		var ret NotificationType
		return ret
	}).(NotificationTypeOutput)
}

func (o NotificationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o NotificationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *NotificationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// NotificationTypeInput is an input type that accepts values of the NotificationType enum
// A concrete instance of `NotificationTypeInput` can be one of the following:
//
//	NotificationTypeEmail
type NotificationTypeInput interface {
	pulumi.Input

	ToNotificationTypeOutput() NotificationTypeOutput
	ToNotificationTypeOutputWithContext(context.Context) NotificationTypeOutput
}

var notificationTypePtrType = reflect.TypeOf((**NotificationType)(nil)).Elem()

type NotificationTypePtrInput interface {
	pulumi.Input

	ToNotificationTypePtrOutput() NotificationTypePtrOutput
	ToNotificationTypePtrOutputWithContext(context.Context) NotificationTypePtrOutput
}

type notificationTypePtr string

func NotificationTypePtr(v string) NotificationTypePtrInput {
	return (*notificationTypePtr)(&v)
}

func (*notificationTypePtr) ElementType() reflect.Type {
	return notificationTypePtrType
}

func (in *notificationTypePtr) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return pulumi.ToOutput(in).(NotificationTypePtrOutput)
}

func (in *notificationTypePtr) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(NotificationTypePtrOutput)
}

// Details that could optimize the user's request
type OptimizationPreference string

const (
	// Optimize while considering cost savings
	OptimizationPreferenceCost = OptimizationPreference("Cost")
	// Optimize while considering availability of resources
	OptimizationPreferenceAvailability = OptimizationPreference("Availability")
	// Optimize while considering a balance of cost and availability
	OptimizationPreferenceCostAvailabilityBalanced = OptimizationPreference("CostAvailabilityBalanced")
)

func (OptimizationPreference) ElementType() reflect.Type {
	return reflect.TypeOf((*OptimizationPreference)(nil)).Elem()
}

func (e OptimizationPreference) ToOptimizationPreferenceOutput() OptimizationPreferenceOutput {
	return pulumi.ToOutput(e).(OptimizationPreferenceOutput)
}

func (e OptimizationPreference) ToOptimizationPreferenceOutputWithContext(ctx context.Context) OptimizationPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OptimizationPreferenceOutput)
}

func (e OptimizationPreference) ToOptimizationPreferencePtrOutput() OptimizationPreferencePtrOutput {
	return e.ToOptimizationPreferencePtrOutputWithContext(context.Background())
}

func (e OptimizationPreference) ToOptimizationPreferencePtrOutputWithContext(ctx context.Context) OptimizationPreferencePtrOutput {
	return OptimizationPreference(e).ToOptimizationPreferenceOutputWithContext(ctx).ToOptimizationPreferencePtrOutputWithContext(ctx)
}

func (e OptimizationPreference) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OptimizationPreference) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OptimizationPreference) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OptimizationPreference) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OptimizationPreferenceOutput struct{ *pulumi.OutputState }

func (OptimizationPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptimizationPreference)(nil)).Elem()
}

func (o OptimizationPreferenceOutput) ToOptimizationPreferenceOutput() OptimizationPreferenceOutput {
	return o
}

func (o OptimizationPreferenceOutput) ToOptimizationPreferenceOutputWithContext(ctx context.Context) OptimizationPreferenceOutput {
	return o
}

func (o OptimizationPreferenceOutput) ToOptimizationPreferencePtrOutput() OptimizationPreferencePtrOutput {
	return o.ToOptimizationPreferencePtrOutputWithContext(context.Background())
}

func (o OptimizationPreferenceOutput) ToOptimizationPreferencePtrOutputWithContext(ctx context.Context) OptimizationPreferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OptimizationPreference) *OptimizationPreference {
		return &v
	}).(OptimizationPreferencePtrOutput)
}

func (o OptimizationPreferenceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OptimizationPreferenceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OptimizationPreference) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OptimizationPreferenceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OptimizationPreferenceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OptimizationPreference) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OptimizationPreferencePtrOutput struct{ *pulumi.OutputState }

func (OptimizationPreferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptimizationPreference)(nil)).Elem()
}

func (o OptimizationPreferencePtrOutput) ToOptimizationPreferencePtrOutput() OptimizationPreferencePtrOutput {
	return o
}

func (o OptimizationPreferencePtrOutput) ToOptimizationPreferencePtrOutputWithContext(ctx context.Context) OptimizationPreferencePtrOutput {
	return o
}

func (o OptimizationPreferencePtrOutput) Elem() OptimizationPreferenceOutput {
	return o.ApplyT(func(v *OptimizationPreference) OptimizationPreference {
		if v != nil {
			return *v
		}
		var ret OptimizationPreference
		return ret
	}).(OptimizationPreferenceOutput)
}

func (o OptimizationPreferencePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OptimizationPreferencePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OptimizationPreference) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OptimizationPreferenceInput is an input type that accepts values of the OptimizationPreference enum
// A concrete instance of `OptimizationPreferenceInput` can be one of the following:
//
//	OptimizationPreferenceCost
//	OptimizationPreferenceAvailability
//	OptimizationPreferenceCostAvailabilityBalanced
type OptimizationPreferenceInput interface {
	pulumi.Input

	ToOptimizationPreferenceOutput() OptimizationPreferenceOutput
	ToOptimizationPreferenceOutputWithContext(context.Context) OptimizationPreferenceOutput
}

var optimizationPreferencePtrType = reflect.TypeOf((**OptimizationPreference)(nil)).Elem()

type OptimizationPreferencePtrInput interface {
	pulumi.Input

	ToOptimizationPreferencePtrOutput() OptimizationPreferencePtrOutput
	ToOptimizationPreferencePtrOutputWithContext(context.Context) OptimizationPreferencePtrOutput
}

type optimizationPreferencePtr string

func OptimizationPreferencePtr(v string) OptimizationPreferencePtrInput {
	return (*optimizationPreferencePtr)(&v)
}

func (*optimizationPreferencePtr) ElementType() reflect.Type {
	return optimizationPreferencePtrType
}

func (in *optimizationPreferencePtr) ToOptimizationPreferencePtrOutput() OptimizationPreferencePtrOutput {
	return pulumi.ToOutput(in).(OptimizationPreferencePtrOutput)
}

func (in *optimizationPreferencePtr) ToOptimizationPreferencePtrOutputWithContext(ctx context.Context) OptimizationPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OptimizationPreferencePtrOutput)
}

// The type of resource the scheduled action is targeting
type ResourceType string

const (
	// Resources defined are Virtual Machines
	ResourceTypeVirtualMachine = ResourceType("VirtualMachine")
	// Resources defined are Virtual Machines Scale Sets
	ResourceTypeVirtualMachineScaleSet = ResourceType("VirtualMachineScaleSet")
)

func (ResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (e ResourceType) ToResourceTypeOutput() ResourceTypeOutput {
	return pulumi.ToOutput(e).(ResourceTypeOutput)
}

func (e ResourceType) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceTypeOutput)
}

func (e ResourceType) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return e.ToResourceTypePtrOutputWithContext(context.Background())
}

func (e ResourceType) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return ResourceType(e).ToResourceTypeOutputWithContext(ctx).ToResourceTypePtrOutputWithContext(ctx)
}

func (e ResourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceTypeOutput struct{ *pulumi.OutputState }

func (ResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (o ResourceTypeOutput) ToResourceTypeOutput() ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return o.ToResourceTypePtrOutputWithContext(context.Background())
}

func (o ResourceTypeOutput) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceType) *ResourceType {
		return &v
	}).(ResourceTypePtrOutput)
}

func (o ResourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceType)(nil)).Elem()
}

func (o ResourceTypePtrOutput) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return o
}

func (o ResourceTypePtrOutput) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return o
}

func (o ResourceTypePtrOutput) Elem() ResourceTypeOutput {
	return o.ApplyT(func(v *ResourceType) ResourceType {
		if v != nil {
			return *v
		}
		var ret ResourceType
		return ret
	}).(ResourceTypeOutput)
}

func (o ResourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceTypeInput is an input type that accepts values of the ResourceType enum
// A concrete instance of `ResourceTypeInput` can be one of the following:
//
//	ResourceTypeVirtualMachine
//	ResourceTypeVirtualMachineScaleSet
type ResourceTypeInput interface {
	pulumi.Input

	ToResourceTypeOutput() ResourceTypeOutput
	ToResourceTypeOutputWithContext(context.Context) ResourceTypeOutput
}

var resourceTypePtrType = reflect.TypeOf((**ResourceType)(nil)).Elem()

type ResourceTypePtrInput interface {
	pulumi.Input

	ToResourceTypePtrOutput() ResourceTypePtrOutput
	ToResourceTypePtrOutputWithContext(context.Context) ResourceTypePtrOutput
}

type resourceTypePtr string

func ResourceTypePtr(v string) ResourceTypePtrInput {
	return (*resourceTypePtr)(&v)
}

func (*resourceTypePtr) ElementType() reflect.Type {
	return resourceTypePtrType
}

func (in *resourceTypePtr) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceTypePtrOutput)
}

func (in *resourceTypePtr) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceTypePtrOutput)
}

// Representation of the possible selection of days in a week in a gregorian calendar
type WeekDay string

const (
	// Monday weekday.
	WeekDayMonday = WeekDay("Monday")
	// Tuesday weekday.
	WeekDayTuesday = WeekDay("Tuesday")
	// Wednesday weekday.
	WeekDayWednesday = WeekDay("Wednesday")
	// Thursday weekday.
	WeekDayThursday = WeekDay("Thursday")
	// Friday weekday.
	WeekDayFriday = WeekDay("Friday")
	// Saturday weekday.
	WeekDaySaturday = WeekDay("Saturday")
	// Sunday weekday.
	WeekDaySunday = WeekDay("Sunday")
	// All week days
	WeekDayAll = WeekDay("All")
)

func (WeekDay) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDay)(nil)).Elem()
}

func (e WeekDay) ToWeekDayOutput() WeekDayOutput {
	return pulumi.ToOutput(e).(WeekDayOutput)
}

func (e WeekDay) ToWeekDayOutputWithContext(ctx context.Context) WeekDayOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeekDayOutput)
}

func (e WeekDay) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return e.ToWeekDayPtrOutputWithContext(context.Background())
}

func (e WeekDay) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return WeekDay(e).ToWeekDayOutputWithContext(ctx).ToWeekDayPtrOutputWithContext(ctx)
}

func (e WeekDay) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDay) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekDay) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeekDay) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeekDayOutput struct{ *pulumi.OutputState }

func (WeekDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekDay)(nil)).Elem()
}

func (o WeekDayOutput) ToWeekDayOutput() WeekDayOutput {
	return o
}

func (o WeekDayOutput) ToWeekDayOutputWithContext(ctx context.Context) WeekDayOutput {
	return o
}

func (o WeekDayOutput) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return o.ToWeekDayPtrOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeekDay) *WeekDay {
		return &v
	}).(WeekDayPtrOutput)
}

func (o WeekDayOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDay) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeekDayOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekDay) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeekDayPtrOutput struct{ *pulumi.OutputState }

func (WeekDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekDay)(nil)).Elem()
}

func (o WeekDayPtrOutput) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return o
}

func (o WeekDayPtrOutput) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return o
}

func (o WeekDayPtrOutput) Elem() WeekDayOutput {
	return o.ApplyT(func(v *WeekDay) WeekDay {
		if v != nil {
			return *v
		}
		var ret WeekDay
		return ret
	}).(WeekDayOutput)
}

func (o WeekDayPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekDayPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeekDay) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeekDayInput is an input type that accepts values of the WeekDay enum
// A concrete instance of `WeekDayInput` can be one of the following:
//
//	WeekDayMonday
//	WeekDayTuesday
//	WeekDayWednesday
//	WeekDayThursday
//	WeekDayFriday
//	WeekDaySaturday
//	WeekDaySunday
//	WeekDayAll
type WeekDayInput interface {
	pulumi.Input

	ToWeekDayOutput() WeekDayOutput
	ToWeekDayOutputWithContext(context.Context) WeekDayOutput
}

var weekDayPtrType = reflect.TypeOf((**WeekDay)(nil)).Elem()

type WeekDayPtrInput interface {
	pulumi.Input

	ToWeekDayPtrOutput() WeekDayPtrOutput
	ToWeekDayPtrOutputWithContext(context.Context) WeekDayPtrOutput
}

type weekDayPtr string

func WeekDayPtr(v string) WeekDayPtrInput {
	return (*weekDayPtr)(&v)
}

func (*weekDayPtr) ElementType() reflect.Type {
	return weekDayPtrType
}

func (in *weekDayPtr) ToWeekDayPtrOutput() WeekDayPtrOutput {
	return pulumi.ToOutput(in).(WeekDayPtrOutput)
}

func (in *weekDayPtr) ToWeekDayPtrOutputWithContext(ctx context.Context) WeekDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeekDayPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionTypeOutput{})
	pulumi.RegisterOutputType(ActionTypePtrOutput{})
	pulumi.RegisterOutputType(DeadlineTypeOutput{})
	pulumi.RegisterOutputType(DeadlineTypePtrOutput{})
	pulumi.RegisterOutputType(LanguageOutput{})
	pulumi.RegisterOutputType(LanguagePtrOutput{})
	pulumi.RegisterOutputType(MonthOutput{})
	pulumi.RegisterOutputType(MonthPtrOutput{})
	pulumi.RegisterOutputType(NotificationTypeOutput{})
	pulumi.RegisterOutputType(NotificationTypePtrOutput{})
	pulumi.RegisterOutputType(OptimizationPreferenceOutput{})
	pulumi.RegisterOutputType(OptimizationPreferencePtrOutput{})
	pulumi.RegisterOutputType(ResourceTypeOutput{})
	pulumi.RegisterOutputType(ResourceTypePtrOutput{})
	pulumi.RegisterOutputType(WeekDayOutput{})
	pulumi.RegisterOutputType(WeekDayPtrOutput{})
}
