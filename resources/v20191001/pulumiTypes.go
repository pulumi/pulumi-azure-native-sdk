// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20191001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A dictionary of name and value pairs.
type Tags struct {
	Tags map[string]string `pulumi:"tags"`
}

// TagsInput is an input type that accepts TagsArgs and TagsOutput values.
// You can construct a concrete instance of `TagsInput` via:
//
//	TagsArgs{...}
type TagsInput interface {
	pulumi.Input

	ToTagsOutput() TagsOutput
	ToTagsOutputWithContext(context.Context) TagsOutput
}

// A dictionary of name and value pairs.
type TagsArgs struct {
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (TagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (i TagsArgs) ToTagsOutput() TagsOutput {
	return i.ToTagsOutputWithContext(context.Background())
}

func (i TagsArgs) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsOutput)
}

// A dictionary of name and value pairs.
type TagsOutput struct{ *pulumi.OutputState }

func (TagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tags)(nil)).Elem()
}

func (o TagsOutput) ToTagsOutput() TagsOutput {
	return o
}

func (o TagsOutput) ToTagsOutputWithContext(ctx context.Context) TagsOutput {
	return o
}

func (o TagsOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v Tags) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A dictionary of name and value pairs.
type TagsResponse struct {
	Tags map[string]string `pulumi:"tags"`
}

// A dictionary of name and value pairs.
type TagsResponseOutput struct{ *pulumi.OutputState }

func (TagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsResponse)(nil)).Elem()
}

func (o TagsResponseOutput) ToTagsResponseOutput() TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) ToTagsResponseOutputWithContext(ctx context.Context) TagsResponseOutput {
	return o
}

func (o TagsResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v TagsResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(TagsOutput{})
	pulumi.RegisterOutputType(TagsResponseOutput{})
}
