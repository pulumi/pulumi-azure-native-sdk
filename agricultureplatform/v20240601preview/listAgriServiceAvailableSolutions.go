// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the list of available agri solutions.
func ListAgriServiceAvailableSolutions(ctx *pulumi.Context, args *ListAgriServiceAvailableSolutionsArgs, opts ...pulumi.InvokeOption) (*ListAgriServiceAvailableSolutionsResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListAgriServiceAvailableSolutionsResult
	err := ctx.Invoke("azure-native:agricultureplatform/v20240601preview:listAgriServiceAvailableSolutions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListAgriServiceAvailableSolutionsArgs struct {
	// The name of the AgriService resource.
	AgriServiceResourceName string `pulumi:"agriServiceResourceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The list of available agri solutions.
type ListAgriServiceAvailableSolutionsResult struct {
	// Agri solutions list.
	Solutions []DataManagerForAgricultureSolutionResponse `pulumi:"solutions"`
}

func ListAgriServiceAvailableSolutionsOutput(ctx *pulumi.Context, args ListAgriServiceAvailableSolutionsOutputArgs, opts ...pulumi.InvokeOption) ListAgriServiceAvailableSolutionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (ListAgriServiceAvailableSolutionsResultOutput, error) {
			args := v.(ListAgriServiceAvailableSolutionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:agricultureplatform/v20240601preview:listAgriServiceAvailableSolutions", args, ListAgriServiceAvailableSolutionsResultOutput{}, options).(ListAgriServiceAvailableSolutionsResultOutput), nil
		}).(ListAgriServiceAvailableSolutionsResultOutput)
}

type ListAgriServiceAvailableSolutionsOutputArgs struct {
	// The name of the AgriService resource.
	AgriServiceResourceName pulumi.StringInput `pulumi:"agriServiceResourceName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (ListAgriServiceAvailableSolutionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListAgriServiceAvailableSolutionsArgs)(nil)).Elem()
}

// The list of available agri solutions.
type ListAgriServiceAvailableSolutionsResultOutput struct{ *pulumi.OutputState }

func (ListAgriServiceAvailableSolutionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListAgriServiceAvailableSolutionsResult)(nil)).Elem()
}

func (o ListAgriServiceAvailableSolutionsResultOutput) ToListAgriServiceAvailableSolutionsResultOutput() ListAgriServiceAvailableSolutionsResultOutput {
	return o
}

func (o ListAgriServiceAvailableSolutionsResultOutput) ToListAgriServiceAvailableSolutionsResultOutputWithContext(ctx context.Context) ListAgriServiceAvailableSolutionsResultOutput {
	return o
}

// Agri solutions list.
func (o ListAgriServiceAvailableSolutionsResultOutput) Solutions() DataManagerForAgricultureSolutionResponseArrayOutput {
	return o.ApplyT(func(v ListAgriServiceAvailableSolutionsResult) []DataManagerForAgricultureSolutionResponse {
		return v.Solutions
	}).(DataManagerForAgricultureSolutionResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListAgriServiceAvailableSolutionsResultOutput{})
}
