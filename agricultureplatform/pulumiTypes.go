// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package agricultureplatform

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Config of the AgriService resource instance.
type AgriServiceConfigResponse struct {
	// App service resource Id.
	AppServiceResourceId string `pulumi:"appServiceResourceId"`
	// Cosmos Db resource Id.
	CosmosDbResourceId string `pulumi:"cosmosDbResourceId"`
	// Instance URI of the AgriService instance.
	InstanceUri string `pulumi:"instanceUri"`
	// Key vault resource Id.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// Redis cache resource Id.
	RedisCacheResourceId string `pulumi:"redisCacheResourceId"`
	// Storage account resource Id.
	StorageAccountResourceId string `pulumi:"storageAccountResourceId"`
	// Version of AgriService instance.
	Version string `pulumi:"version"`
}

// Config of the AgriService resource instance.
type AgriServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (AgriServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgriServiceConfigResponse)(nil)).Elem()
}

func (o AgriServiceConfigResponseOutput) ToAgriServiceConfigResponseOutput() AgriServiceConfigResponseOutput {
	return o
}

func (o AgriServiceConfigResponseOutput) ToAgriServiceConfigResponseOutputWithContext(ctx context.Context) AgriServiceConfigResponseOutput {
	return o
}

// App service resource Id.
func (o AgriServiceConfigResponseOutput) AppServiceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.AppServiceResourceId }).(pulumi.StringOutput)
}

// Cosmos Db resource Id.
func (o AgriServiceConfigResponseOutput) CosmosDbResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.CosmosDbResourceId }).(pulumi.StringOutput)
}

// Instance URI of the AgriService instance.
func (o AgriServiceConfigResponseOutput) InstanceUri() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.InstanceUri }).(pulumi.StringOutput)
}

// Key vault resource Id.
func (o AgriServiceConfigResponseOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// Redis cache resource Id.
func (o AgriServiceConfigResponseOutput) RedisCacheResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.RedisCacheResourceId }).(pulumi.StringOutput)
}

// Storage account resource Id.
func (o AgriServiceConfigResponseOutput) StorageAccountResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.StorageAccountResourceId }).(pulumi.StringOutput)
}

// Version of AgriService instance.
func (o AgriServiceConfigResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceConfigResponse) string { return v.Version }).(pulumi.StringOutput)
}

type AgriServiceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AgriServiceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgriServiceConfigResponse)(nil)).Elem()
}

func (o AgriServiceConfigResponsePtrOutput) ToAgriServiceConfigResponsePtrOutput() AgriServiceConfigResponsePtrOutput {
	return o
}

func (o AgriServiceConfigResponsePtrOutput) ToAgriServiceConfigResponsePtrOutputWithContext(ctx context.Context) AgriServiceConfigResponsePtrOutput {
	return o
}

func (o AgriServiceConfigResponsePtrOutput) Elem() AgriServiceConfigResponseOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) AgriServiceConfigResponse {
		if v != nil {
			return *v
		}
		var ret AgriServiceConfigResponse
		return ret
	}).(AgriServiceConfigResponseOutput)
}

// App service resource Id.
func (o AgriServiceConfigResponsePtrOutput) AppServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppServiceResourceId
	}).(pulumi.StringPtrOutput)
}

// Cosmos Db resource Id.
func (o AgriServiceConfigResponsePtrOutput) CosmosDbResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CosmosDbResourceId
	}).(pulumi.StringPtrOutput)
}

// Instance URI of the AgriService instance.
func (o AgriServiceConfigResponsePtrOutput) InstanceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceUri
	}).(pulumi.StringPtrOutput)
}

// Key vault resource Id.
func (o AgriServiceConfigResponsePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Redis cache resource Id.
func (o AgriServiceConfigResponsePtrOutput) RedisCacheResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RedisCacheResourceId
	}).(pulumi.StringPtrOutput)
}

// Storage account resource Id.
func (o AgriServiceConfigResponsePtrOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountResourceId
	}).(pulumi.StringPtrOutput)
}

// Version of AgriService instance.
func (o AgriServiceConfigResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgriServiceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Details of the Agriculture AgriDataManager.
type AgriServiceResourceProperties struct {
	// Data connector credentials of AgriService instance.
	DataConnectorCredentials []DataConnectorCredentialMap `pulumi:"dataConnectorCredentials"`
	// AgriService installed solutions.
	InstalledSolutions []InstalledSolutionMap `pulumi:"installedSolutions"`
}

// AgriServiceResourcePropertiesInput is an input type that accepts AgriServiceResourcePropertiesArgs and AgriServiceResourcePropertiesOutput values.
// You can construct a concrete instance of `AgriServiceResourcePropertiesInput` via:
//
//	AgriServiceResourcePropertiesArgs{...}
type AgriServiceResourcePropertiesInput interface {
	pulumi.Input

	ToAgriServiceResourcePropertiesOutput() AgriServiceResourcePropertiesOutput
	ToAgriServiceResourcePropertiesOutputWithContext(context.Context) AgriServiceResourcePropertiesOutput
}

// Details of the Agriculture AgriDataManager.
type AgriServiceResourcePropertiesArgs struct {
	// Data connector credentials of AgriService instance.
	DataConnectorCredentials DataConnectorCredentialMapArrayInput `pulumi:"dataConnectorCredentials"`
	// AgriService installed solutions.
	InstalledSolutions InstalledSolutionMapArrayInput `pulumi:"installedSolutions"`
}

func (AgriServiceResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgriServiceResourceProperties)(nil)).Elem()
}

func (i AgriServiceResourcePropertiesArgs) ToAgriServiceResourcePropertiesOutput() AgriServiceResourcePropertiesOutput {
	return i.ToAgriServiceResourcePropertiesOutputWithContext(context.Background())
}

func (i AgriServiceResourcePropertiesArgs) ToAgriServiceResourcePropertiesOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgriServiceResourcePropertiesOutput)
}

func (i AgriServiceResourcePropertiesArgs) ToAgriServiceResourcePropertiesPtrOutput() AgriServiceResourcePropertiesPtrOutput {
	return i.ToAgriServiceResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i AgriServiceResourcePropertiesArgs) ToAgriServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgriServiceResourcePropertiesOutput).ToAgriServiceResourcePropertiesPtrOutputWithContext(ctx)
}

// AgriServiceResourcePropertiesPtrInput is an input type that accepts AgriServiceResourcePropertiesArgs, AgriServiceResourcePropertiesPtr and AgriServiceResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `AgriServiceResourcePropertiesPtrInput` via:
//
//	        AgriServiceResourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type AgriServiceResourcePropertiesPtrInput interface {
	pulumi.Input

	ToAgriServiceResourcePropertiesPtrOutput() AgriServiceResourcePropertiesPtrOutput
	ToAgriServiceResourcePropertiesPtrOutputWithContext(context.Context) AgriServiceResourcePropertiesPtrOutput
}

type agriServiceResourcePropertiesPtrType AgriServiceResourcePropertiesArgs

func AgriServiceResourcePropertiesPtr(v *AgriServiceResourcePropertiesArgs) AgriServiceResourcePropertiesPtrInput {
	return (*agriServiceResourcePropertiesPtrType)(v)
}

func (*agriServiceResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgriServiceResourceProperties)(nil)).Elem()
}

func (i *agriServiceResourcePropertiesPtrType) ToAgriServiceResourcePropertiesPtrOutput() AgriServiceResourcePropertiesPtrOutput {
	return i.ToAgriServiceResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *agriServiceResourcePropertiesPtrType) ToAgriServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgriServiceResourcePropertiesPtrOutput)
}

// Details of the Agriculture AgriDataManager.
type AgriServiceResourcePropertiesOutput struct{ *pulumi.OutputState }

func (AgriServiceResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgriServiceResourceProperties)(nil)).Elem()
}

func (o AgriServiceResourcePropertiesOutput) ToAgriServiceResourcePropertiesOutput() AgriServiceResourcePropertiesOutput {
	return o
}

func (o AgriServiceResourcePropertiesOutput) ToAgriServiceResourcePropertiesOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesOutput {
	return o
}

func (o AgriServiceResourcePropertiesOutput) ToAgriServiceResourcePropertiesPtrOutput() AgriServiceResourcePropertiesPtrOutput {
	return o.ToAgriServiceResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o AgriServiceResourcePropertiesOutput) ToAgriServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgriServiceResourceProperties) *AgriServiceResourceProperties {
		return &v
	}).(AgriServiceResourcePropertiesPtrOutput)
}

// Data connector credentials of AgriService instance.
func (o AgriServiceResourcePropertiesOutput) DataConnectorCredentials() DataConnectorCredentialMapArrayOutput {
	return o.ApplyT(func(v AgriServiceResourceProperties) []DataConnectorCredentialMap { return v.DataConnectorCredentials }).(DataConnectorCredentialMapArrayOutput)
}

// AgriService installed solutions.
func (o AgriServiceResourcePropertiesOutput) InstalledSolutions() InstalledSolutionMapArrayOutput {
	return o.ApplyT(func(v AgriServiceResourceProperties) []InstalledSolutionMap { return v.InstalledSolutions }).(InstalledSolutionMapArrayOutput)
}

type AgriServiceResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AgriServiceResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgriServiceResourceProperties)(nil)).Elem()
}

func (o AgriServiceResourcePropertiesPtrOutput) ToAgriServiceResourcePropertiesPtrOutput() AgriServiceResourcePropertiesPtrOutput {
	return o
}

func (o AgriServiceResourcePropertiesPtrOutput) ToAgriServiceResourcePropertiesPtrOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesPtrOutput {
	return o
}

func (o AgriServiceResourcePropertiesPtrOutput) Elem() AgriServiceResourcePropertiesOutput {
	return o.ApplyT(func(v *AgriServiceResourceProperties) AgriServiceResourceProperties {
		if v != nil {
			return *v
		}
		var ret AgriServiceResourceProperties
		return ret
	}).(AgriServiceResourcePropertiesOutput)
}

// Data connector credentials of AgriService instance.
func (o AgriServiceResourcePropertiesPtrOutput) DataConnectorCredentials() DataConnectorCredentialMapArrayOutput {
	return o.ApplyT(func(v *AgriServiceResourceProperties) []DataConnectorCredentialMap {
		if v == nil {
			return nil
		}
		return v.DataConnectorCredentials
	}).(DataConnectorCredentialMapArrayOutput)
}

// AgriService installed solutions.
func (o AgriServiceResourcePropertiesPtrOutput) InstalledSolutions() InstalledSolutionMapArrayOutput {
	return o.ApplyT(func(v *AgriServiceResourceProperties) []InstalledSolutionMap {
		if v == nil {
			return nil
		}
		return v.InstalledSolutions
	}).(InstalledSolutionMapArrayOutput)
}

// Details of the Agriculture AgriDataManager.
type AgriServiceResourcePropertiesResponse struct {
	// Config of the AgriService instance.
	Config *AgriServiceConfigResponse `pulumi:"config"`
	// Data connector credentials of AgriService instance.
	DataConnectorCredentials []DataConnectorCredentialMapResponse `pulumi:"dataConnectorCredentials"`
	// AgriService installed solutions.
	InstalledSolutions []InstalledSolutionMapResponse `pulumi:"installedSolutions"`
	// Managed On Behalf Of Configuration.
	ManagedOnBehalfOfConfiguration ManagedOnBehalfOfConfigurationResponse `pulumi:"managedOnBehalfOfConfiguration"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Details of the Agriculture AgriDataManager.
type AgriServiceResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AgriServiceResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgriServiceResourcePropertiesResponse)(nil)).Elem()
}

func (o AgriServiceResourcePropertiesResponseOutput) ToAgriServiceResourcePropertiesResponseOutput() AgriServiceResourcePropertiesResponseOutput {
	return o
}

func (o AgriServiceResourcePropertiesResponseOutput) ToAgriServiceResourcePropertiesResponseOutputWithContext(ctx context.Context) AgriServiceResourcePropertiesResponseOutput {
	return o
}

// Config of the AgriService instance.
func (o AgriServiceResourcePropertiesResponseOutput) Config() AgriServiceConfigResponsePtrOutput {
	return o.ApplyT(func(v AgriServiceResourcePropertiesResponse) *AgriServiceConfigResponse { return v.Config }).(AgriServiceConfigResponsePtrOutput)
}

// Data connector credentials of AgriService instance.
func (o AgriServiceResourcePropertiesResponseOutput) DataConnectorCredentials() DataConnectorCredentialMapResponseArrayOutput {
	return o.ApplyT(func(v AgriServiceResourcePropertiesResponse) []DataConnectorCredentialMapResponse {
		return v.DataConnectorCredentials
	}).(DataConnectorCredentialMapResponseArrayOutput)
}

// AgriService installed solutions.
func (o AgriServiceResourcePropertiesResponseOutput) InstalledSolutions() InstalledSolutionMapResponseArrayOutput {
	return o.ApplyT(func(v AgriServiceResourcePropertiesResponse) []InstalledSolutionMapResponse {
		return v.InstalledSolutions
	}).(InstalledSolutionMapResponseArrayOutput)
}

// Managed On Behalf Of Configuration.
func (o AgriServiceResourcePropertiesResponseOutput) ManagedOnBehalfOfConfiguration() ManagedOnBehalfOfConfigurationResponseOutput {
	return o.ApplyT(func(v AgriServiceResourcePropertiesResponse) ManagedOnBehalfOfConfigurationResponse {
		return v.ManagedOnBehalfOfConfiguration
	}).(ManagedOnBehalfOfConfigurationResponseOutput)
}

// The status of the last operation.
func (o AgriServiceResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AgriServiceResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Mapping of data connector credentials.
type DataConnectorCredentialMap struct {
	// The key representing the credential.
	Key string `pulumi:"key"`
	// The data connector credential value.
	Value DataConnectorCredentials `pulumi:"value"`
}

// DataConnectorCredentialMapInput is an input type that accepts DataConnectorCredentialMap and DataConnectorCredentialMapOutput values.
// You can construct a concrete instance of `DataConnectorCredentialMapInput` via:
//
//	DataConnectorCredentialMap{ "key": DataConnectorCredentialArgs{...} }
type DataConnectorCredentialMapInput interface {
	pulumi.Input

	ToDataConnectorCredentialMapOutput() DataConnectorCredentialMapOutput
	ToDataConnectorCredentialMapOutputWithContext(context.Context) DataConnectorCredentialMapOutput
}

// Mapping of data connector credentials.
type DataConnectorCredentialMapArgs struct {
	// The key representing the credential.
	Key pulumi.StringInput `pulumi:"key"`
	// The data connector credential value.
	Value DataConnectorCredentialsInput `pulumi:"value"`
}

func (DataConnectorCredentialMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorCredentialMap)(nil)).Elem()
}

func (i DataConnectorCredentialMapArgs) ToDataConnectorCredentialMapOutput() DataConnectorCredentialMapOutput {
	return i.ToDataConnectorCredentialMapOutputWithContext(context.Background())
}

func (i DataConnectorCredentialMapArgs) ToDataConnectorCredentialMapOutputWithContext(ctx context.Context) DataConnectorCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorCredentialMapOutput)
}

// DataConnectorCredentialMapArrayInput is an input type that accepts DataConnectorCredentialMapArray and DataConnectorCredentialMapArrayOutput values.
// You can construct a concrete instance of `DataConnectorCredentialMapArrayInput` via:
//
//	DataConnectorCredentialMapArray{ DataConnectorCredentialMapArgs{...} }
type DataConnectorCredentialMapArrayInput interface {
	pulumi.Input

	ToDataConnectorCredentialMapArrayOutput() DataConnectorCredentialMapArrayOutput
	ToDataConnectorCredentialMapArrayOutputWithContext(context.Context) DataConnectorCredentialMapArrayOutput
}

type DataConnectorCredentialMapArray []DataConnectorCredentialMapInput

func (DataConnectorCredentialMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataConnectorCredentialMap)(nil)).Elem()
}

func (i DataConnectorCredentialMapArray) ToDataConnectorCredentialMapArrayOutput() DataConnectorCredentialMapArrayOutput {
	return i.ToDataConnectorCredentialMapArrayOutputWithContext(context.Background())
}

func (i DataConnectorCredentialMapArray) ToDataConnectorCredentialMapArrayOutputWithContext(ctx context.Context) DataConnectorCredentialMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorCredentialMapArrayOutput)
}

// Mapping of data connector credentials.
type DataConnectorCredentialMapOutput struct{ *pulumi.OutputState }

func (DataConnectorCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorCredentialMap)(nil)).Elem()
}

func (o DataConnectorCredentialMapOutput) ToDataConnectorCredentialMapOutput() DataConnectorCredentialMapOutput {
	return o
}

func (o DataConnectorCredentialMapOutput) ToDataConnectorCredentialMapOutputWithContext(ctx context.Context) DataConnectorCredentialMapOutput {
	return o
}

// The key representing the credential.
func (o DataConnectorCredentialMapOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataConnectorCredentialMap) string { return v.Key }).(pulumi.StringOutput)
}

// The data connector credential value.
func (o DataConnectorCredentialMapOutput) Value() DataConnectorCredentialsOutput {
	return o.ApplyT(func(v DataConnectorCredentialMap) DataConnectorCredentials { return v.Value }).(DataConnectorCredentialsOutput)
}

type DataConnectorCredentialMapArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorCredentialMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataConnectorCredentialMap)(nil)).Elem()
}

func (o DataConnectorCredentialMapArrayOutput) ToDataConnectorCredentialMapArrayOutput() DataConnectorCredentialMapArrayOutput {
	return o
}

func (o DataConnectorCredentialMapArrayOutput) ToDataConnectorCredentialMapArrayOutputWithContext(ctx context.Context) DataConnectorCredentialMapArrayOutput {
	return o
}

func (o DataConnectorCredentialMapArrayOutput) Index(i pulumi.IntInput) DataConnectorCredentialMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataConnectorCredentialMap {
		return vs[0].([]DataConnectorCredentialMap)[vs[1].(int)]
	}).(DataConnectorCredentialMapOutput)
}

// Mapping of data connector credentials.
type DataConnectorCredentialMapResponse struct {
	// The key representing the credential.
	Key string `pulumi:"key"`
	// The data connector credential value.
	Value DataConnectorCredentialsResponse `pulumi:"value"`
}

// Mapping of data connector credentials.
type DataConnectorCredentialMapResponseOutput struct{ *pulumi.OutputState }

func (DataConnectorCredentialMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorCredentialMapResponse)(nil)).Elem()
}

func (o DataConnectorCredentialMapResponseOutput) ToDataConnectorCredentialMapResponseOutput() DataConnectorCredentialMapResponseOutput {
	return o
}

func (o DataConnectorCredentialMapResponseOutput) ToDataConnectorCredentialMapResponseOutputWithContext(ctx context.Context) DataConnectorCredentialMapResponseOutput {
	return o
}

// The key representing the credential.
func (o DataConnectorCredentialMapResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DataConnectorCredentialMapResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The data connector credential value.
func (o DataConnectorCredentialMapResponseOutput) Value() DataConnectorCredentialsResponseOutput {
	return o.ApplyT(func(v DataConnectorCredentialMapResponse) DataConnectorCredentialsResponse { return v.Value }).(DataConnectorCredentialsResponseOutput)
}

type DataConnectorCredentialMapResponseArrayOutput struct{ *pulumi.OutputState }

func (DataConnectorCredentialMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataConnectorCredentialMapResponse)(nil)).Elem()
}

func (o DataConnectorCredentialMapResponseArrayOutput) ToDataConnectorCredentialMapResponseArrayOutput() DataConnectorCredentialMapResponseArrayOutput {
	return o
}

func (o DataConnectorCredentialMapResponseArrayOutput) ToDataConnectorCredentialMapResponseArrayOutputWithContext(ctx context.Context) DataConnectorCredentialMapResponseArrayOutput {
	return o
}

func (o DataConnectorCredentialMapResponseArrayOutput) Index(i pulumi.IntInput) DataConnectorCredentialMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataConnectorCredentialMapResponse {
		return vs[0].([]DataConnectorCredentialMapResponse)[vs[1].(int)]
	}).(DataConnectorCredentialMapResponseOutput)
}

// The properties related to an AgriService data connector.
type DataConnectorCredentials struct {
	// Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
	ClientId *string `pulumi:"clientId"`
	// Name of the key vault key.
	KeyName *string `pulumi:"keyName"`
	// Uri of the key vault
	KeyVaultUri *string `pulumi:"keyVaultUri"`
	// Version of the key vault key.
	KeyVersion *string `pulumi:"keyVersion"`
	// Type of credential.
	Kind *string `pulumi:"kind"`
}

// DataConnectorCredentialsInput is an input type that accepts DataConnectorCredentialsArgs and DataConnectorCredentialsOutput values.
// You can construct a concrete instance of `DataConnectorCredentialsInput` via:
//
//	DataConnectorCredentialsArgs{...}
type DataConnectorCredentialsInput interface {
	pulumi.Input

	ToDataConnectorCredentialsOutput() DataConnectorCredentialsOutput
	ToDataConnectorCredentialsOutputWithContext(context.Context) DataConnectorCredentialsOutput
}

// The properties related to an AgriService data connector.
type DataConnectorCredentialsArgs struct {
	// Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Name of the key vault key.
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// Uri of the key vault
	KeyVaultUri pulumi.StringPtrInput `pulumi:"keyVaultUri"`
	// Version of the key vault key.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
	// Type of credential.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (DataConnectorCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorCredentials)(nil)).Elem()
}

func (i DataConnectorCredentialsArgs) ToDataConnectorCredentialsOutput() DataConnectorCredentialsOutput {
	return i.ToDataConnectorCredentialsOutputWithContext(context.Background())
}

func (i DataConnectorCredentialsArgs) ToDataConnectorCredentialsOutputWithContext(ctx context.Context) DataConnectorCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorCredentialsOutput)
}

// The properties related to an AgriService data connector.
type DataConnectorCredentialsOutput struct{ *pulumi.OutputState }

func (DataConnectorCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorCredentials)(nil)).Elem()
}

func (o DataConnectorCredentialsOutput) ToDataConnectorCredentialsOutput() DataConnectorCredentialsOutput {
	return o
}

func (o DataConnectorCredentialsOutput) ToDataConnectorCredentialsOutputWithContext(ctx context.Context) DataConnectorCredentialsOutput {
	return o
}

// Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
func (o DataConnectorCredentialsOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentials) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Name of the key vault key.
func (o DataConnectorCredentialsOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentials) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Uri of the key vault
func (o DataConnectorCredentialsOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentials) *string { return v.KeyVaultUri }).(pulumi.StringPtrOutput)
}

// Version of the key vault key.
func (o DataConnectorCredentialsOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentials) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// Type of credential.
func (o DataConnectorCredentialsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentials) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The properties related to an AgriService data connector.
type DataConnectorCredentialsResponse struct {
	// Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
	ClientId *string `pulumi:"clientId"`
	// Name of the key vault key.
	KeyName *string `pulumi:"keyName"`
	// Uri of the key vault
	KeyVaultUri *string `pulumi:"keyVaultUri"`
	// Version of the key vault key.
	KeyVersion *string `pulumi:"keyVersion"`
	// Type of credential.
	Kind *string `pulumi:"kind"`
}

// The properties related to an AgriService data connector.
type DataConnectorCredentialsResponseOutput struct{ *pulumi.OutputState }

func (DataConnectorCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorCredentialsResponse)(nil)).Elem()
}

func (o DataConnectorCredentialsResponseOutput) ToDataConnectorCredentialsResponseOutput() DataConnectorCredentialsResponseOutput {
	return o
}

func (o DataConnectorCredentialsResponseOutput) ToDataConnectorCredentialsResponseOutputWithContext(ctx context.Context) DataConnectorCredentialsResponseOutput {
	return o
}

// Client Id associated with the provider, if type of credentials is OAuthClientCredentials.
func (o DataConnectorCredentialsResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentialsResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Name of the key vault key.
func (o DataConnectorCredentialsResponseOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentialsResponse) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Uri of the key vault
func (o DataConnectorCredentialsResponseOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentialsResponse) *string { return v.KeyVaultUri }).(pulumi.StringPtrOutput)
}

// Version of the key vault key.
func (o DataConnectorCredentialsResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentialsResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// Type of credential.
func (o DataConnectorCredentialsResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataConnectorCredentialsResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Data Manager for Agriculture solution.
type DataManagerForAgricultureSolutionResponse struct {
	// Entra application Id used to access azure data manager for agriculture instance.
	AccessAzureDataManagerForAgricultureApplicationId string `pulumi:"accessAzureDataManagerForAgricultureApplicationId"`
	// Entra application name used to access azure data manager for agriculture instance.
	AccessAzureDataManagerForAgricultureApplicationName string `pulumi:"accessAzureDataManagerForAgricultureApplicationName"`
	// Data access scopes.
	DataAccessScopes []string `pulumi:"dataAccessScopes"`
	// Whether solution inference will validate input.
	IsValidateInput bool `pulumi:"isValidateInput"`
	// Marketplace offer details.
	MarketPlaceOfferDetails MarketPlaceOfferDetailsResponse `pulumi:"marketPlaceOfferDetails"`
	// Partner Id.
	PartnerId string `pulumi:"partnerId"`
	// Partner tenant Id.
	PartnerTenantId string `pulumi:"partnerTenantId"`
	// Saas application Id.
	SaasApplicationId string `pulumi:"saasApplicationId"`
	// Solution Id.
	SolutionId string `pulumi:"solutionId"`
}

// Data Manager for Agriculture solution.
type DataManagerForAgricultureSolutionResponseOutput struct{ *pulumi.OutputState }

func (DataManagerForAgricultureSolutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataManagerForAgricultureSolutionResponse)(nil)).Elem()
}

func (o DataManagerForAgricultureSolutionResponseOutput) ToDataManagerForAgricultureSolutionResponseOutput() DataManagerForAgricultureSolutionResponseOutput {
	return o
}

func (o DataManagerForAgricultureSolutionResponseOutput) ToDataManagerForAgricultureSolutionResponseOutputWithContext(ctx context.Context) DataManagerForAgricultureSolutionResponseOutput {
	return o
}

// Entra application Id used to access azure data manager for agriculture instance.
func (o DataManagerForAgricultureSolutionResponseOutput) AccessAzureDataManagerForAgricultureApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) string {
		return v.AccessAzureDataManagerForAgricultureApplicationId
	}).(pulumi.StringOutput)
}

// Entra application name used to access azure data manager for agriculture instance.
func (o DataManagerForAgricultureSolutionResponseOutput) AccessAzureDataManagerForAgricultureApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) string {
		return v.AccessAzureDataManagerForAgricultureApplicationName
	}).(pulumi.StringOutput)
}

// Data access scopes.
func (o DataManagerForAgricultureSolutionResponseOutput) DataAccessScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) []string { return v.DataAccessScopes }).(pulumi.StringArrayOutput)
}

// Whether solution inference will validate input.
func (o DataManagerForAgricultureSolutionResponseOutput) IsValidateInput() pulumi.BoolOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) bool { return v.IsValidateInput }).(pulumi.BoolOutput)
}

// Marketplace offer details.
func (o DataManagerForAgricultureSolutionResponseOutput) MarketPlaceOfferDetails() MarketPlaceOfferDetailsResponseOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) MarketPlaceOfferDetailsResponse {
		return v.MarketPlaceOfferDetails
	}).(MarketPlaceOfferDetailsResponseOutput)
}

// Partner Id.
func (o DataManagerForAgricultureSolutionResponseOutput) PartnerId() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) string { return v.PartnerId }).(pulumi.StringOutput)
}

// Partner tenant Id.
func (o DataManagerForAgricultureSolutionResponseOutput) PartnerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) string { return v.PartnerTenantId }).(pulumi.StringOutput)
}

// Saas application Id.
func (o DataManagerForAgricultureSolutionResponseOutput) SaasApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) string { return v.SaasApplicationId }).(pulumi.StringOutput)
}

// Solution Id.
func (o DataManagerForAgricultureSolutionResponseOutput) SolutionId() pulumi.StringOutput {
	return o.ApplyT(func(v DataManagerForAgricultureSolutionResponse) string { return v.SolutionId }).(pulumi.StringOutput)
}

type DataManagerForAgricultureSolutionResponseArrayOutput struct{ *pulumi.OutputState }

func (DataManagerForAgricultureSolutionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataManagerForAgricultureSolutionResponse)(nil)).Elem()
}

func (o DataManagerForAgricultureSolutionResponseArrayOutput) ToDataManagerForAgricultureSolutionResponseArrayOutput() DataManagerForAgricultureSolutionResponseArrayOutput {
	return o
}

func (o DataManagerForAgricultureSolutionResponseArrayOutput) ToDataManagerForAgricultureSolutionResponseArrayOutputWithContext(ctx context.Context) DataManagerForAgricultureSolutionResponseArrayOutput {
	return o
}

func (o DataManagerForAgricultureSolutionResponseArrayOutput) Index(i pulumi.IntInput) DataManagerForAgricultureSolutionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataManagerForAgricultureSolutionResponse {
		return vs[0].([]DataManagerForAgricultureSolutionResponse)[vs[1].(int)]
	}).(DataManagerForAgricultureSolutionResponseOutput)
}

// Mapping of installed solutions.
type InstalledSolutionMap struct {
	// The key representing the installed solution.
	Key string `pulumi:"key"`
	// The installed solution value.
	Value Solution `pulumi:"value"`
}

// InstalledSolutionMapInput is an input type that accepts InstalledSolutionMap and InstalledSolutionMapOutput values.
// You can construct a concrete instance of `InstalledSolutionMapInput` via:
//
//	InstalledSolutionMap{ "key": InstalledSolutionArgs{...} }
type InstalledSolutionMapInput interface {
	pulumi.Input

	ToInstalledSolutionMapOutput() InstalledSolutionMapOutput
	ToInstalledSolutionMapOutputWithContext(context.Context) InstalledSolutionMapOutput
}

// Mapping of installed solutions.
type InstalledSolutionMapArgs struct {
	// The key representing the installed solution.
	Key pulumi.StringInput `pulumi:"key"`
	// The installed solution value.
	Value SolutionInput `pulumi:"value"`
}

func (InstalledSolutionMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstalledSolutionMap)(nil)).Elem()
}

func (i InstalledSolutionMapArgs) ToInstalledSolutionMapOutput() InstalledSolutionMapOutput {
	return i.ToInstalledSolutionMapOutputWithContext(context.Background())
}

func (i InstalledSolutionMapArgs) ToInstalledSolutionMapOutputWithContext(ctx context.Context) InstalledSolutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstalledSolutionMapOutput)
}

// InstalledSolutionMapArrayInput is an input type that accepts InstalledSolutionMapArray and InstalledSolutionMapArrayOutput values.
// You can construct a concrete instance of `InstalledSolutionMapArrayInput` via:
//
//	InstalledSolutionMapArray{ InstalledSolutionMapArgs{...} }
type InstalledSolutionMapArrayInput interface {
	pulumi.Input

	ToInstalledSolutionMapArrayOutput() InstalledSolutionMapArrayOutput
	ToInstalledSolutionMapArrayOutputWithContext(context.Context) InstalledSolutionMapArrayOutput
}

type InstalledSolutionMapArray []InstalledSolutionMapInput

func (InstalledSolutionMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstalledSolutionMap)(nil)).Elem()
}

func (i InstalledSolutionMapArray) ToInstalledSolutionMapArrayOutput() InstalledSolutionMapArrayOutput {
	return i.ToInstalledSolutionMapArrayOutputWithContext(context.Background())
}

func (i InstalledSolutionMapArray) ToInstalledSolutionMapArrayOutputWithContext(ctx context.Context) InstalledSolutionMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstalledSolutionMapArrayOutput)
}

// Mapping of installed solutions.
type InstalledSolutionMapOutput struct{ *pulumi.OutputState }

func (InstalledSolutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstalledSolutionMap)(nil)).Elem()
}

func (o InstalledSolutionMapOutput) ToInstalledSolutionMapOutput() InstalledSolutionMapOutput {
	return o
}

func (o InstalledSolutionMapOutput) ToInstalledSolutionMapOutputWithContext(ctx context.Context) InstalledSolutionMapOutput {
	return o
}

// The key representing the installed solution.
func (o InstalledSolutionMapOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstalledSolutionMap) string { return v.Key }).(pulumi.StringOutput)
}

// The installed solution value.
func (o InstalledSolutionMapOutput) Value() SolutionOutput {
	return o.ApplyT(func(v InstalledSolutionMap) Solution { return v.Value }).(SolutionOutput)
}

type InstalledSolutionMapArrayOutput struct{ *pulumi.OutputState }

func (InstalledSolutionMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstalledSolutionMap)(nil)).Elem()
}

func (o InstalledSolutionMapArrayOutput) ToInstalledSolutionMapArrayOutput() InstalledSolutionMapArrayOutput {
	return o
}

func (o InstalledSolutionMapArrayOutput) ToInstalledSolutionMapArrayOutputWithContext(ctx context.Context) InstalledSolutionMapArrayOutput {
	return o
}

func (o InstalledSolutionMapArrayOutput) Index(i pulumi.IntInput) InstalledSolutionMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstalledSolutionMap {
		return vs[0].([]InstalledSolutionMap)[vs[1].(int)]
	}).(InstalledSolutionMapOutput)
}

// Mapping of installed solutions.
type InstalledSolutionMapResponse struct {
	// The key representing the installed solution.
	Key string `pulumi:"key"`
	// The installed solution value.
	Value SolutionResponse `pulumi:"value"`
}

// Mapping of installed solutions.
type InstalledSolutionMapResponseOutput struct{ *pulumi.OutputState }

func (InstalledSolutionMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstalledSolutionMapResponse)(nil)).Elem()
}

func (o InstalledSolutionMapResponseOutput) ToInstalledSolutionMapResponseOutput() InstalledSolutionMapResponseOutput {
	return o
}

func (o InstalledSolutionMapResponseOutput) ToInstalledSolutionMapResponseOutputWithContext(ctx context.Context) InstalledSolutionMapResponseOutput {
	return o
}

// The key representing the installed solution.
func (o InstalledSolutionMapResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstalledSolutionMapResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The installed solution value.
func (o InstalledSolutionMapResponseOutput) Value() SolutionResponseOutput {
	return o.ApplyT(func(v InstalledSolutionMapResponse) SolutionResponse { return v.Value }).(SolutionResponseOutput)
}

type InstalledSolutionMapResponseArrayOutput struct{ *pulumi.OutputState }

func (InstalledSolutionMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstalledSolutionMapResponse)(nil)).Elem()
}

func (o InstalledSolutionMapResponseArrayOutput) ToInstalledSolutionMapResponseArrayOutput() InstalledSolutionMapResponseArrayOutput {
	return o
}

func (o InstalledSolutionMapResponseArrayOutput) ToInstalledSolutionMapResponseArrayOutputWithContext(ctx context.Context) InstalledSolutionMapResponseArrayOutput {
	return o
}

func (o InstalledSolutionMapResponseArrayOutput) Index(i pulumi.IntInput) InstalledSolutionMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstalledSolutionMapResponse {
		return vs[0].([]InstalledSolutionMapResponse)[vs[1].(int)]
	}).(InstalledSolutionMapResponseOutput)
}

// Configuration of the managed on behalf of resource.
type ManagedOnBehalfOfConfigurationResponse struct {
	// Associated MoboBrokerResources.
	MoboBrokerResources []MoboBrokerResourceResponse `pulumi:"moboBrokerResources"`
}

// Configuration of the managed on behalf of resource.
type ManagedOnBehalfOfConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedOnBehalfOfConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnBehalfOfConfigurationResponse)(nil)).Elem()
}

func (o ManagedOnBehalfOfConfigurationResponseOutput) ToManagedOnBehalfOfConfigurationResponseOutput() ManagedOnBehalfOfConfigurationResponseOutput {
	return o
}

func (o ManagedOnBehalfOfConfigurationResponseOutput) ToManagedOnBehalfOfConfigurationResponseOutputWithContext(ctx context.Context) ManagedOnBehalfOfConfigurationResponseOutput {
	return o
}

// Associated MoboBrokerResources.
func (o ManagedOnBehalfOfConfigurationResponseOutput) MoboBrokerResources() MoboBrokerResourceResponseArrayOutput {
	return o.ApplyT(func(v ManagedOnBehalfOfConfigurationResponse) []MoboBrokerResourceResponse {
		return v.MoboBrokerResources
	}).(MoboBrokerResourceResponseArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Marketplace offer details of Agri solution.
type MarketPlaceOfferDetailsResponse struct {
	// Publisher Id.
	PublisherId string `pulumi:"publisherId"`
	// Saas offer Id.
	SaasOfferId string `pulumi:"saasOfferId"`
}

// Marketplace offer details of Agri solution.
type MarketPlaceOfferDetailsResponseOutput struct{ *pulumi.OutputState }

func (MarketPlaceOfferDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketPlaceOfferDetailsResponse)(nil)).Elem()
}

func (o MarketPlaceOfferDetailsResponseOutput) ToMarketPlaceOfferDetailsResponseOutput() MarketPlaceOfferDetailsResponseOutput {
	return o
}

func (o MarketPlaceOfferDetailsResponseOutput) ToMarketPlaceOfferDetailsResponseOutputWithContext(ctx context.Context) MarketPlaceOfferDetailsResponseOutput {
	return o
}

// Publisher Id.
func (o MarketPlaceOfferDetailsResponseOutput) PublisherId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketPlaceOfferDetailsResponse) string { return v.PublisherId }).(pulumi.StringOutput)
}

// Saas offer Id.
func (o MarketPlaceOfferDetailsResponseOutput) SaasOfferId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketPlaceOfferDetailsResponse) string { return v.SaasOfferId }).(pulumi.StringOutput)
}

// MoboBroker resource.
type MoboBrokerResourceResponse struct {
	// The fully qualified resource ID of the MoboBroker resource.
	// Example: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}`
	Id string `pulumi:"id"`
}

// MoboBroker resource.
type MoboBrokerResourceResponseOutput struct{ *pulumi.OutputState }

func (MoboBrokerResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MoboBrokerResourceResponse)(nil)).Elem()
}

func (o MoboBrokerResourceResponseOutput) ToMoboBrokerResourceResponseOutput() MoboBrokerResourceResponseOutput {
	return o
}

func (o MoboBrokerResourceResponseOutput) ToMoboBrokerResourceResponseOutputWithContext(ctx context.Context) MoboBrokerResourceResponseOutput {
	return o
}

// The fully qualified resource ID of the MoboBroker resource.
// Example: `/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}`
func (o MoboBrokerResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MoboBrokerResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

type MoboBrokerResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (MoboBrokerResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MoboBrokerResourceResponse)(nil)).Elem()
}

func (o MoboBrokerResourceResponseArrayOutput) ToMoboBrokerResourceResponseArrayOutput() MoboBrokerResourceResponseArrayOutput {
	return o
}

func (o MoboBrokerResourceResponseArrayOutput) ToMoboBrokerResourceResponseArrayOutputWithContext(ctx context.Context) MoboBrokerResourceResponseArrayOutput {
	return o
}

func (o MoboBrokerResourceResponseArrayOutput) Index(i pulumi.IntInput) MoboBrokerResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MoboBrokerResourceResponse {
		return vs[0].([]MoboBrokerResourceResponse)[vs[1].(int)]
	}).(MoboBrokerResourceResponseOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Installed data manager for Agriculture solution detail.
type Solution struct {
	// Application name of the solution.
	ApplicationName *string `pulumi:"applicationName"`
	// Marketplace publisher Id.
	MarketPlacePublisherId *string `pulumi:"marketPlacePublisherId"`
	// Partner Id.
	PartnerId *string `pulumi:"partnerId"`
	// Plan Id.
	PlanId *string `pulumi:"planId"`
	// Saas subscription Id.
	SaasSubscriptionId *string `pulumi:"saasSubscriptionId"`
	// Saas subscription name.
	SaasSubscriptionName *string `pulumi:"saasSubscriptionName"`
}

// SolutionInput is an input type that accepts SolutionArgs and SolutionOutput values.
// You can construct a concrete instance of `SolutionInput` via:
//
//	SolutionArgs{...}
type SolutionInput interface {
	pulumi.Input

	ToSolutionOutput() SolutionOutput
	ToSolutionOutputWithContext(context.Context) SolutionOutput
}

// Installed data manager for Agriculture solution detail.
type SolutionArgs struct {
	// Application name of the solution.
	ApplicationName pulumi.StringPtrInput `pulumi:"applicationName"`
	// Marketplace publisher Id.
	MarketPlacePublisherId pulumi.StringPtrInput `pulumi:"marketPlacePublisherId"`
	// Partner Id.
	PartnerId pulumi.StringPtrInput `pulumi:"partnerId"`
	// Plan Id.
	PlanId pulumi.StringPtrInput `pulumi:"planId"`
	// Saas subscription Id.
	SaasSubscriptionId pulumi.StringPtrInput `pulumi:"saasSubscriptionId"`
	// Saas subscription name.
	SaasSubscriptionName pulumi.StringPtrInput `pulumi:"saasSubscriptionName"`
}

func (SolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Solution)(nil)).Elem()
}

func (i SolutionArgs) ToSolutionOutput() SolutionOutput {
	return i.ToSolutionOutputWithContext(context.Background())
}

func (i SolutionArgs) ToSolutionOutputWithContext(ctx context.Context) SolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionOutput)
}

// Installed data manager for Agriculture solution detail.
type SolutionOutput struct{ *pulumi.OutputState }

func (SolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Solution)(nil)).Elem()
}

func (o SolutionOutput) ToSolutionOutput() SolutionOutput {
	return o
}

func (o SolutionOutput) ToSolutionOutputWithContext(ctx context.Context) SolutionOutput {
	return o
}

// Application name of the solution.
func (o SolutionOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Solution) *string { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// Marketplace publisher Id.
func (o SolutionOutput) MarketPlacePublisherId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Solution) *string { return v.MarketPlacePublisherId }).(pulumi.StringPtrOutput)
}

// Partner Id.
func (o SolutionOutput) PartnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Solution) *string { return v.PartnerId }).(pulumi.StringPtrOutput)
}

// Plan Id.
func (o SolutionOutput) PlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Solution) *string { return v.PlanId }).(pulumi.StringPtrOutput)
}

// Saas subscription Id.
func (o SolutionOutput) SaasSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Solution) *string { return v.SaasSubscriptionId }).(pulumi.StringPtrOutput)
}

// Saas subscription name.
func (o SolutionOutput) SaasSubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Solution) *string { return v.SaasSubscriptionName }).(pulumi.StringPtrOutput)
}

// Installed data manager for Agriculture solution detail.
type SolutionResponse struct {
	// Application name of the solution.
	ApplicationName *string `pulumi:"applicationName"`
	// Marketplace publisher Id.
	MarketPlacePublisherId *string `pulumi:"marketPlacePublisherId"`
	// Partner Id.
	PartnerId *string `pulumi:"partnerId"`
	// Plan Id.
	PlanId *string `pulumi:"planId"`
	// Saas subscription Id.
	SaasSubscriptionId *string `pulumi:"saasSubscriptionId"`
	// Saas subscription name.
	SaasSubscriptionName *string `pulumi:"saasSubscriptionName"`
}

// Installed data manager for Agriculture solution detail.
type SolutionResponseOutput struct{ *pulumi.OutputState }

func (SolutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SolutionResponse)(nil)).Elem()
}

func (o SolutionResponseOutput) ToSolutionResponseOutput() SolutionResponseOutput {
	return o
}

func (o SolutionResponseOutput) ToSolutionResponseOutputWithContext(ctx context.Context) SolutionResponseOutput {
	return o
}

// Application name of the solution.
func (o SolutionResponseOutput) ApplicationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionResponse) *string { return v.ApplicationName }).(pulumi.StringPtrOutput)
}

// Marketplace publisher Id.
func (o SolutionResponseOutput) MarketPlacePublisherId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionResponse) *string { return v.MarketPlacePublisherId }).(pulumi.StringPtrOutput)
}

// Partner Id.
func (o SolutionResponseOutput) PartnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionResponse) *string { return v.PartnerId }).(pulumi.StringPtrOutput)
}

// Plan Id.
func (o SolutionResponseOutput) PlanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionResponse) *string { return v.PlanId }).(pulumi.StringPtrOutput)
}

// Saas subscription Id.
func (o SolutionResponseOutput) SaasSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionResponse) *string { return v.SaasSubscriptionId }).(pulumi.StringPtrOutput)
}

// Saas subscription name.
func (o SolutionResponseOutput) SaasSubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SolutionResponse) *string { return v.SaasSubscriptionName }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AgriServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(AgriServiceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(AgriServiceResourcePropertiesOutput{})
	pulumi.RegisterOutputType(AgriServiceResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AgriServiceResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DataConnectorCredentialMapOutput{})
	pulumi.RegisterOutputType(DataConnectorCredentialMapArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorCredentialMapResponseOutput{})
	pulumi.RegisterOutputType(DataConnectorCredentialMapResponseArrayOutput{})
	pulumi.RegisterOutputType(DataConnectorCredentialsOutput{})
	pulumi.RegisterOutputType(DataConnectorCredentialsResponseOutput{})
	pulumi.RegisterOutputType(DataManagerForAgricultureSolutionResponseOutput{})
	pulumi.RegisterOutputType(DataManagerForAgricultureSolutionResponseArrayOutput{})
	pulumi.RegisterOutputType(InstalledSolutionMapOutput{})
	pulumi.RegisterOutputType(InstalledSolutionMapArrayOutput{})
	pulumi.RegisterOutputType(InstalledSolutionMapResponseOutput{})
	pulumi.RegisterOutputType(InstalledSolutionMapResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedOnBehalfOfConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MarketPlaceOfferDetailsResponseOutput{})
	pulumi.RegisterOutputType(MoboBrokerResourceResponseOutput{})
	pulumi.RegisterOutputType(MoboBrokerResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SolutionOutput{})
	pulumi.RegisterOutputType(SolutionResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
