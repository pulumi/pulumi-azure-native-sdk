// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbforpostgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a cluster.
//
// Uses Azure REST API version 2023-03-02-preview.
//
// Other available API versions: 2022-11-08. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dbforpostgresql [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type ServerGroupCluster struct {
	pulumi.CustomResourceState

	// Indicates whether the cluster was created using AAD authentication.
	AadAuthEnabled pulumi.StringOutput `pulumi:"aadAuthEnabled"`
	// The administrator's login name of the servers in the cluster.
	AdministratorLogin pulumi.StringOutput `pulumi:"administratorLogin"`
	// Authentication configuration of a cluster.
	AuthConfig AuthConfigResponsePtrOutput `pulumi:"authConfig"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The Citus extension version on all cluster servers.
	CitusVersion pulumi.StringPtrOutput `pulumi:"citusVersion"`
	// If public access is enabled on coordinator.
	CoordinatorEnablePublicIpAccess pulumi.BoolPtrOutput `pulumi:"coordinatorEnablePublicIpAccess"`
	// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
	CoordinatorServerEdition pulumi.StringPtrOutput `pulumi:"coordinatorServerEdition"`
	// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorStorageQuotaInMb pulumi.IntPtrOutput `pulumi:"coordinatorStorageQuotaInMb"`
	// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorVCores pulumi.IntPtrOutput `pulumi:"coordinatorVCores"`
	// The data encryption properties of a cluster.
	DataEncryption DataEncryptionResponsePtrOutput `pulumi:"dataEncryption"`
	// The database name of the cluster. Only one database per cluster is supported.
	DatabaseName pulumi.StringPtrOutput `pulumi:"databaseName"`
	// The earliest restore point time (ISO8601 format) for the cluster.
	EarliestRestoreTime pulumi.StringOutput `pulumi:"earliestRestoreTime"`
	// If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region. Enabled only at the time of cluster creation.
	EnableGeoBackup pulumi.BoolPtrOutput `pulumi:"enableGeoBackup"`
	// If high availability (HA) is enabled or not for the cluster.
	EnableHa pulumi.BoolPtrOutput `pulumi:"enableHa"`
	// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.
	EnableShardsOnCoordinator pulumi.BoolPtrOutput `pulumi:"enableShardsOnCoordinator"`
	// Describes the identity of the cluster.
	Identity IdentityPropertiesResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Maintenance window of a cluster.
	MaintenanceWindow MaintenanceWindowResponsePtrOutput `pulumi:"maintenanceWindow"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
	NodeCount pulumi.IntPtrOutput `pulumi:"nodeCount"`
	// If public access is enabled on worker nodes.
	NodeEnablePublicIpAccess pulumi.BoolPtrOutput `pulumi:"nodeEnablePublicIpAccess"`
	// The edition of a node server (default: MemoryOptimized).
	NodeServerEdition pulumi.StringPtrOutput `pulumi:"nodeServerEdition"`
	// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeStorageQuotaInMb pulumi.IntPtrOutput `pulumi:"nodeStorageQuotaInMb"`
	// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeVCores pulumi.IntPtrOutput `pulumi:"nodeVCores"`
	// Indicates whether the cluster was created with a password or using AAD authentication.
	PasswordEnabled pulumi.StringOutput `pulumi:"passwordEnabled"`
	// Date and time in UTC (ISO8601 format) for cluster restore.
	PointInTimeUTC pulumi.StringPtrOutput `pulumi:"pointInTimeUTC"`
	// The major PostgreSQL version on all cluster servers.
	PostgresqlVersion pulumi.StringPtrOutput `pulumi:"postgresqlVersion"`
	// Preferred primary availability zone (AZ) for all cluster servers.
	PreferredPrimaryZone pulumi.StringPtrOutput `pulumi:"preferredPrimaryZone"`
	// The private endpoint connections for a cluster.
	PrivateEndpointConnections SimplePrivateEndpointConnectionResponseArrayOutput `pulumi:"privateEndpointConnections"`
	// Provisioning state of the cluster
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The array of read replica clusters.
	ReadReplicas pulumi.StringArrayOutput `pulumi:"readReplicas"`
	// The list of server names in the cluster
	ServerNames ServerNameItemResponseArrayOutput `pulumi:"serverNames"`
	// The Azure region of source cluster for read replica clusters.
	SourceLocation pulumi.StringPtrOutput `pulumi:"sourceLocation"`
	// The resource id of source cluster for read replica clusters.
	SourceResourceId pulumi.StringPtrOutput `pulumi:"sourceResourceId"`
	// A state of a cluster/server that is visible to user.
	State pulumi.StringOutput `pulumi:"state"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServerGroupCluster registers a new resource with the given unique name, arguments, and options.
func NewServerGroupCluster(ctx *pulumi.Context,
	name string, args *ServerGroupClusterArgs, opts ...pulumi.ResourceOption) (*ServerGroupCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.AuthConfig != nil {
		args.AuthConfig = args.AuthConfig.ToAuthConfigPtrOutput().ApplyT(func(v *AuthConfig) *AuthConfig { return v.Defaults() }).(AuthConfigPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroup"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20201005privatepreview:ServerGroupCluster"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20221108:Cluster"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20221108:ServerGroupCluster"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20230302preview:Cluster"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20230302preview:ServerGroupCluster"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql:Cluster"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServerGroupCluster
	err := ctx.RegisterResource("azure-native:dbforpostgresql:ServerGroupCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroupCluster gets an existing ServerGroupCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroupCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupClusterState, opts ...pulumi.ResourceOption) (*ServerGroupCluster, error) {
	var resource ServerGroupCluster
	err := ctx.ReadResource("azure-native:dbforpostgresql:ServerGroupCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroupCluster resources.
type serverGroupClusterState struct {
}

type ServerGroupClusterState struct {
}

func (ServerGroupClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupClusterState)(nil)).Elem()
}

type serverGroupClusterArgs struct {
	// The password of the administrator login. Required for creation.
	AdministratorLoginPassword *string `pulumi:"administratorLoginPassword"`
	// Authentication configuration of a cluster.
	AuthConfig *AuthConfig `pulumi:"authConfig"`
	// The Citus extension version on all cluster servers.
	CitusVersion *string `pulumi:"citusVersion"`
	// The name of the cluster.
	ClusterName *string `pulumi:"clusterName"`
	// If public access is enabled on coordinator.
	CoordinatorEnablePublicIpAccess *bool `pulumi:"coordinatorEnablePublicIpAccess"`
	// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
	CoordinatorServerEdition *string `pulumi:"coordinatorServerEdition"`
	// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorStorageQuotaInMb *int `pulumi:"coordinatorStorageQuotaInMb"`
	// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorVCores *int `pulumi:"coordinatorVCores"`
	// The data encryption properties of a cluster.
	DataEncryption *DataEncryption `pulumi:"dataEncryption"`
	// The database name of the cluster. Only one database per cluster is supported.
	DatabaseName *string `pulumi:"databaseName"`
	// If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region. Enabled only at the time of cluster creation.
	EnableGeoBackup *bool `pulumi:"enableGeoBackup"`
	// If high availability (HA) is enabled or not for the cluster.
	EnableHa *bool `pulumi:"enableHa"`
	// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.
	EnableShardsOnCoordinator *bool `pulumi:"enableShardsOnCoordinator"`
	// Describes the identity of the cluster.
	Identity *IdentityProperties `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Maintenance window of a cluster.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
	NodeCount *int `pulumi:"nodeCount"`
	// If public access is enabled on worker nodes.
	NodeEnablePublicIpAccess *bool `pulumi:"nodeEnablePublicIpAccess"`
	// The edition of a node server (default: MemoryOptimized).
	NodeServerEdition *string `pulumi:"nodeServerEdition"`
	// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeStorageQuotaInMb *int `pulumi:"nodeStorageQuotaInMb"`
	// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeVCores *int `pulumi:"nodeVCores"`
	// Date and time in UTC (ISO8601 format) for cluster restore.
	PointInTimeUTC *string `pulumi:"pointInTimeUTC"`
	// The major PostgreSQL version on all cluster servers.
	PostgresqlVersion *string `pulumi:"postgresqlVersion"`
	// Preferred primary availability zone (AZ) for all cluster servers.
	PreferredPrimaryZone *string `pulumi:"preferredPrimaryZone"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Azure region of source cluster for read replica clusters.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The resource id of source cluster for read replica clusters.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ServerGroupCluster resource.
type ServerGroupClusterArgs struct {
	// The password of the administrator login. Required for creation.
	AdministratorLoginPassword pulumi.StringPtrInput
	// Authentication configuration of a cluster.
	AuthConfig AuthConfigPtrInput
	// The Citus extension version on all cluster servers.
	CitusVersion pulumi.StringPtrInput
	// The name of the cluster.
	ClusterName pulumi.StringPtrInput
	// If public access is enabled on coordinator.
	CoordinatorEnablePublicIpAccess pulumi.BoolPtrInput
	// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
	CoordinatorServerEdition pulumi.StringPtrInput
	// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorStorageQuotaInMb pulumi.IntPtrInput
	// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorVCores pulumi.IntPtrInput
	// The data encryption properties of a cluster.
	DataEncryption DataEncryptionPtrInput
	// The database name of the cluster. Only one database per cluster is supported.
	DatabaseName pulumi.StringPtrInput
	// If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region. Enabled only at the time of cluster creation.
	EnableGeoBackup pulumi.BoolPtrInput
	// If high availability (HA) is enabled or not for the cluster.
	EnableHa pulumi.BoolPtrInput
	// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.
	EnableShardsOnCoordinator pulumi.BoolPtrInput
	// Describes the identity of the cluster.
	Identity IdentityPropertiesPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Maintenance window of a cluster.
	MaintenanceWindow MaintenanceWindowPtrInput
	// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
	NodeCount pulumi.IntPtrInput
	// If public access is enabled on worker nodes.
	NodeEnablePublicIpAccess pulumi.BoolPtrInput
	// The edition of a node server (default: MemoryOptimized).
	NodeServerEdition pulumi.StringPtrInput
	// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeStorageQuotaInMb pulumi.IntPtrInput
	// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeVCores pulumi.IntPtrInput
	// Date and time in UTC (ISO8601 format) for cluster restore.
	PointInTimeUTC pulumi.StringPtrInput
	// The major PostgreSQL version on all cluster servers.
	PostgresqlVersion pulumi.StringPtrInput
	// Preferred primary availability zone (AZ) for all cluster servers.
	PreferredPrimaryZone pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The Azure region of source cluster for read replica clusters.
	SourceLocation pulumi.StringPtrInput
	// The resource id of source cluster for read replica clusters.
	SourceResourceId pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ServerGroupClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupClusterArgs)(nil)).Elem()
}

type ServerGroupClusterInput interface {
	pulumi.Input

	ToServerGroupClusterOutput() ServerGroupClusterOutput
	ToServerGroupClusterOutputWithContext(ctx context.Context) ServerGroupClusterOutput
}

func (*ServerGroupCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupCluster)(nil)).Elem()
}

func (i *ServerGroupCluster) ToServerGroupClusterOutput() ServerGroupClusterOutput {
	return i.ToServerGroupClusterOutputWithContext(context.Background())
}

func (i *ServerGroupCluster) ToServerGroupClusterOutputWithContext(ctx context.Context) ServerGroupClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupClusterOutput)
}

type ServerGroupClusterOutput struct{ *pulumi.OutputState }

func (ServerGroupClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroupCluster)(nil)).Elem()
}

func (o ServerGroupClusterOutput) ToServerGroupClusterOutput() ServerGroupClusterOutput {
	return o
}

func (o ServerGroupClusterOutput) ToServerGroupClusterOutputWithContext(ctx context.Context) ServerGroupClusterOutput {
	return o
}

// Indicates whether the cluster was created using AAD authentication.
func (o ServerGroupClusterOutput) AadAuthEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.AadAuthEnabled }).(pulumi.StringOutput)
}

// The administrator's login name of the servers in the cluster.
func (o ServerGroupClusterOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Authentication configuration of a cluster.
func (o ServerGroupClusterOutput) AuthConfig() AuthConfigResponsePtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) AuthConfigResponsePtrOutput { return v.AuthConfig }).(AuthConfigResponsePtrOutput)
}

// The Azure API version of the resource.
func (o ServerGroupClusterOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The Citus extension version on all cluster servers.
func (o ServerGroupClusterOutput) CitusVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.CitusVersion }).(pulumi.StringPtrOutput)
}

// If public access is enabled on coordinator.
func (o ServerGroupClusterOutput) CoordinatorEnablePublicIpAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.BoolPtrOutput { return v.CoordinatorEnablePublicIpAccess }).(pulumi.BoolPtrOutput)
}

// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
func (o ServerGroupClusterOutput) CoordinatorServerEdition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.CoordinatorServerEdition }).(pulumi.StringPtrOutput)
}

// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o ServerGroupClusterOutput) CoordinatorStorageQuotaInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.IntPtrOutput { return v.CoordinatorStorageQuotaInMb }).(pulumi.IntPtrOutput)
}

// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o ServerGroupClusterOutput) CoordinatorVCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.IntPtrOutput { return v.CoordinatorVCores }).(pulumi.IntPtrOutput)
}

// The data encryption properties of a cluster.
func (o ServerGroupClusterOutput) DataEncryption() DataEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) DataEncryptionResponsePtrOutput { return v.DataEncryption }).(DataEncryptionResponsePtrOutput)
}

// The database name of the cluster. Only one database per cluster is supported.
func (o ServerGroupClusterOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The earliest restore point time (ISO8601 format) for the cluster.
func (o ServerGroupClusterOutput) EarliestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.EarliestRestoreTime }).(pulumi.StringOutput)
}

// If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region. Enabled only at the time of cluster creation.
func (o ServerGroupClusterOutput) EnableGeoBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.BoolPtrOutput { return v.EnableGeoBackup }).(pulumi.BoolPtrOutput)
}

// If high availability (HA) is enabled or not for the cluster.
func (o ServerGroupClusterOutput) EnableHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.BoolPtrOutput { return v.EnableHa }).(pulumi.BoolPtrOutput)
}

// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.
func (o ServerGroupClusterOutput) EnableShardsOnCoordinator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.BoolPtrOutput { return v.EnableShardsOnCoordinator }).(pulumi.BoolPtrOutput)
}

// Describes the identity of the cluster.
func (o ServerGroupClusterOutput) Identity() IdentityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) IdentityPropertiesResponsePtrOutput { return v.Identity }).(IdentityPropertiesResponsePtrOutput)
}

// The geo-location where the resource lives
func (o ServerGroupClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Maintenance window of a cluster.
func (o ServerGroupClusterOutput) MaintenanceWindow() MaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) MaintenanceWindowResponsePtrOutput { return v.MaintenanceWindow }).(MaintenanceWindowResponsePtrOutput)
}

// The name of the resource
func (o ServerGroupClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
func (o ServerGroupClusterOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.IntPtrOutput { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// If public access is enabled on worker nodes.
func (o ServerGroupClusterOutput) NodeEnablePublicIpAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.BoolPtrOutput { return v.NodeEnablePublicIpAccess }).(pulumi.BoolPtrOutput)
}

// The edition of a node server (default: MemoryOptimized).
func (o ServerGroupClusterOutput) NodeServerEdition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.NodeServerEdition }).(pulumi.StringPtrOutput)
}

// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o ServerGroupClusterOutput) NodeStorageQuotaInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.IntPtrOutput { return v.NodeStorageQuotaInMb }).(pulumi.IntPtrOutput)
}

// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o ServerGroupClusterOutput) NodeVCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.IntPtrOutput { return v.NodeVCores }).(pulumi.IntPtrOutput)
}

// Indicates whether the cluster was created with a password or using AAD authentication.
func (o ServerGroupClusterOutput) PasswordEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.PasswordEnabled }).(pulumi.StringOutput)
}

// Date and time in UTC (ISO8601 format) for cluster restore.
func (o ServerGroupClusterOutput) PointInTimeUTC() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.PointInTimeUTC }).(pulumi.StringPtrOutput)
}

// The major PostgreSQL version on all cluster servers.
func (o ServerGroupClusterOutput) PostgresqlVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.PostgresqlVersion }).(pulumi.StringPtrOutput)
}

// Preferred primary availability zone (AZ) for all cluster servers.
func (o ServerGroupClusterOutput) PreferredPrimaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.PreferredPrimaryZone }).(pulumi.StringPtrOutput)
}

// The private endpoint connections for a cluster.
func (o ServerGroupClusterOutput) PrivateEndpointConnections() SimplePrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v *ServerGroupCluster) SimplePrivateEndpointConnectionResponseArrayOutput {
		return v.PrivateEndpointConnections
	}).(SimplePrivateEndpointConnectionResponseArrayOutput)
}

// Provisioning state of the cluster
func (o ServerGroupClusterOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The array of read replica clusters.
func (o ServerGroupClusterOutput) ReadReplicas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringArrayOutput { return v.ReadReplicas }).(pulumi.StringArrayOutput)
}

// The list of server names in the cluster
func (o ServerGroupClusterOutput) ServerNames() ServerNameItemResponseArrayOutput {
	return o.ApplyT(func(v *ServerGroupCluster) ServerNameItemResponseArrayOutput { return v.ServerNames }).(ServerNameItemResponseArrayOutput)
}

// The Azure region of source cluster for read replica clusters.
func (o ServerGroupClusterOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The resource id of source cluster for read replica clusters.
func (o ServerGroupClusterOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringPtrOutput { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// A state of a cluster/server that is visible to user.
func (o ServerGroupClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ServerGroupClusterOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ServerGroupCluster) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ServerGroupClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ServerGroupClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroupCluster) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerGroupClusterOutput{})
}
