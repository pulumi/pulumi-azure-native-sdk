// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbforpostgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a Database.
//
// Uses Azure REST API version 2017-12-01.
type SingleServerDatabase struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The charset of the database.
	Charset pulumi.StringPtrOutput `pulumi:"charset"`
	// The collation of the database.
	Collation pulumi.StringPtrOutput `pulumi:"collation"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSingleServerDatabase registers a new resource with the given unique name, arguments, and options.
func NewSingleServerDatabase(ctx *pulumi.Context,
	name string, args *SingleServerDatabaseArgs, opts ...pulumi.ResourceOption) (*SingleServerDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201:Database"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201:SingleServerDatabase"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201preview:SingleServerDatabase"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SingleServerDatabase
	err := ctx.RegisterResource("azure-native:dbforpostgresql:SingleServerDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSingleServerDatabase gets an existing SingleServerDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleServerDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SingleServerDatabaseState, opts ...pulumi.ResourceOption) (*SingleServerDatabase, error) {
	var resource SingleServerDatabase
	err := ctx.ReadResource("azure-native:dbforpostgresql:SingleServerDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SingleServerDatabase resources.
type singleServerDatabaseState struct {
}

type SingleServerDatabaseState struct {
}

func (SingleServerDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerDatabaseState)(nil)).Elem()
}

type singleServerDatabaseArgs struct {
	// The charset of the database.
	Charset *string `pulumi:"charset"`
	// The collation of the database.
	Collation *string `pulumi:"collation"`
	// The name of the database.
	DatabaseName *string `pulumi:"databaseName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// The set of arguments for constructing a SingleServerDatabase resource.
type SingleServerDatabaseArgs struct {
	// The charset of the database.
	Charset pulumi.StringPtrInput
	// The collation of the database.
	Collation pulumi.StringPtrInput
	// The name of the database.
	DatabaseName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
}

func (SingleServerDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerDatabaseArgs)(nil)).Elem()
}

type SingleServerDatabaseInput interface {
	pulumi.Input

	ToSingleServerDatabaseOutput() SingleServerDatabaseOutput
	ToSingleServerDatabaseOutputWithContext(ctx context.Context) SingleServerDatabaseOutput
}

func (*SingleServerDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerDatabase)(nil)).Elem()
}

func (i *SingleServerDatabase) ToSingleServerDatabaseOutput() SingleServerDatabaseOutput {
	return i.ToSingleServerDatabaseOutputWithContext(context.Background())
}

func (i *SingleServerDatabase) ToSingleServerDatabaseOutputWithContext(ctx context.Context) SingleServerDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerDatabaseOutput)
}

type SingleServerDatabaseOutput struct{ *pulumi.OutputState }

func (SingleServerDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerDatabase)(nil)).Elem()
}

func (o SingleServerDatabaseOutput) ToSingleServerDatabaseOutput() SingleServerDatabaseOutput {
	return o
}

func (o SingleServerDatabaseOutput) ToSingleServerDatabaseOutputWithContext(ctx context.Context) SingleServerDatabaseOutput {
	return o
}

// The Azure API version of the resource.
func (o SingleServerDatabaseOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerDatabase) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The charset of the database.
func (o SingleServerDatabaseOutput) Charset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerDatabase) pulumi.StringPtrOutput { return v.Charset }).(pulumi.StringPtrOutput)
}

// The collation of the database.
func (o SingleServerDatabaseOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerDatabase) pulumi.StringPtrOutput { return v.Collation }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o SingleServerDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SingleServerDatabaseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerDatabase) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SingleServerDatabaseOutput{})
}
