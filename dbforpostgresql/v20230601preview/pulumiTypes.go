// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Server admin credentials.
type AdminCredentials struct {
	// Password for source server.
	SourceServerPassword string `pulumi:"sourceServerPassword"`
	// Password for target server.
	TargetServerPassword string `pulumi:"targetServerPassword"`
}

// AdminCredentialsInput is an input type that accepts AdminCredentialsArgs and AdminCredentialsOutput values.
// You can construct a concrete instance of `AdminCredentialsInput` via:
//
//	AdminCredentialsArgs{...}
type AdminCredentialsInput interface {
	pulumi.Input

	ToAdminCredentialsOutput() AdminCredentialsOutput
	ToAdminCredentialsOutputWithContext(context.Context) AdminCredentialsOutput
}

// Server admin credentials.
type AdminCredentialsArgs struct {
	// Password for source server.
	SourceServerPassword pulumi.StringInput `pulumi:"sourceServerPassword"`
	// Password for target server.
	TargetServerPassword pulumi.StringInput `pulumi:"targetServerPassword"`
}

func (AdminCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminCredentials)(nil)).Elem()
}

func (i AdminCredentialsArgs) ToAdminCredentialsOutput() AdminCredentialsOutput {
	return i.ToAdminCredentialsOutputWithContext(context.Background())
}

func (i AdminCredentialsArgs) ToAdminCredentialsOutputWithContext(ctx context.Context) AdminCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminCredentialsOutput)
}

func (i AdminCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[AdminCredentials] {
	return pulumix.Output[AdminCredentials]{
		OutputState: i.ToAdminCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i AdminCredentialsArgs) ToAdminCredentialsPtrOutput() AdminCredentialsPtrOutput {
	return i.ToAdminCredentialsPtrOutputWithContext(context.Background())
}

func (i AdminCredentialsArgs) ToAdminCredentialsPtrOutputWithContext(ctx context.Context) AdminCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminCredentialsOutput).ToAdminCredentialsPtrOutputWithContext(ctx)
}

// AdminCredentialsPtrInput is an input type that accepts AdminCredentialsArgs, AdminCredentialsPtr and AdminCredentialsPtrOutput values.
// You can construct a concrete instance of `AdminCredentialsPtrInput` via:
//
//	        AdminCredentialsArgs{...}
//
//	or:
//
//	        nil
type AdminCredentialsPtrInput interface {
	pulumi.Input

	ToAdminCredentialsPtrOutput() AdminCredentialsPtrOutput
	ToAdminCredentialsPtrOutputWithContext(context.Context) AdminCredentialsPtrOutput
}

type adminCredentialsPtrType AdminCredentialsArgs

func AdminCredentialsPtr(v *AdminCredentialsArgs) AdminCredentialsPtrInput {
	return (*adminCredentialsPtrType)(v)
}

func (*adminCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminCredentials)(nil)).Elem()
}

func (i *adminCredentialsPtrType) ToAdminCredentialsPtrOutput() AdminCredentialsPtrOutput {
	return i.ToAdminCredentialsPtrOutputWithContext(context.Background())
}

func (i *adminCredentialsPtrType) ToAdminCredentialsPtrOutputWithContext(ctx context.Context) AdminCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminCredentialsPtrOutput)
}

func (i *adminCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AdminCredentials] {
	return pulumix.Output[*AdminCredentials]{
		OutputState: i.ToAdminCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

// Server admin credentials.
type AdminCredentialsOutput struct{ *pulumi.OutputState }

func (AdminCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminCredentials)(nil)).Elem()
}

func (o AdminCredentialsOutput) ToAdminCredentialsOutput() AdminCredentialsOutput {
	return o
}

func (o AdminCredentialsOutput) ToAdminCredentialsOutputWithContext(ctx context.Context) AdminCredentialsOutput {
	return o
}

func (o AdminCredentialsOutput) ToAdminCredentialsPtrOutput() AdminCredentialsPtrOutput {
	return o.ToAdminCredentialsPtrOutputWithContext(context.Background())
}

func (o AdminCredentialsOutput) ToAdminCredentialsPtrOutputWithContext(ctx context.Context) AdminCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdminCredentials) *AdminCredentials {
		return &v
	}).(AdminCredentialsPtrOutput)
}

func (o AdminCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[AdminCredentials] {
	return pulumix.Output[AdminCredentials]{
		OutputState: o.OutputState,
	}
}

// Password for source server.
func (o AdminCredentialsOutput) SourceServerPassword() pulumi.StringOutput {
	return o.ApplyT(func(v AdminCredentials) string { return v.SourceServerPassword }).(pulumi.StringOutput)
}

// Password for target server.
func (o AdminCredentialsOutput) TargetServerPassword() pulumi.StringOutput {
	return o.ApplyT(func(v AdminCredentials) string { return v.TargetServerPassword }).(pulumi.StringOutput)
}

type AdminCredentialsPtrOutput struct{ *pulumi.OutputState }

func (AdminCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminCredentials)(nil)).Elem()
}

func (o AdminCredentialsPtrOutput) ToAdminCredentialsPtrOutput() AdminCredentialsPtrOutput {
	return o
}

func (o AdminCredentialsPtrOutput) ToAdminCredentialsPtrOutputWithContext(ctx context.Context) AdminCredentialsPtrOutput {
	return o
}

func (o AdminCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AdminCredentials] {
	return pulumix.Output[*AdminCredentials]{
		OutputState: o.OutputState,
	}
}

func (o AdminCredentialsPtrOutput) Elem() AdminCredentialsOutput {
	return o.ApplyT(func(v *AdminCredentials) AdminCredentials {
		if v != nil {
			return *v
		}
		var ret AdminCredentials
		return ret
	}).(AdminCredentialsOutput)
}

// Password for source server.
func (o AdminCredentialsPtrOutput) SourceServerPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.SourceServerPassword
	}).(pulumi.StringPtrOutput)
}

// Password for target server.
func (o AdminCredentialsPtrOutput) TargetServerPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.TargetServerPassword
	}).(pulumi.StringPtrOutput)
}

// Authentication configuration properties of a server
type AuthConfig struct {
	// If Enabled, Azure Active Directory authentication is enabled.
	ActiveDirectoryAuth *string `pulumi:"activeDirectoryAuth"`
	// If Enabled, Password authentication is enabled.
	PasswordAuth *string `pulumi:"passwordAuth"`
	// Tenant id of the server.
	TenantId *string `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for AuthConfig
func (val *AuthConfig) Defaults() *AuthConfig {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PasswordAuth == nil {
		passwordAuth_ := "Enabled"
		tmp.PasswordAuth = &passwordAuth_
	}
	if tmp.TenantId == nil {
		tenantId_ := ""
		tmp.TenantId = &tenantId_
	}
	return &tmp
}

// AuthConfigInput is an input type that accepts AuthConfigArgs and AuthConfigOutput values.
// You can construct a concrete instance of `AuthConfigInput` via:
//
//	AuthConfigArgs{...}
type AuthConfigInput interface {
	pulumi.Input

	ToAuthConfigOutput() AuthConfigOutput
	ToAuthConfigOutputWithContext(context.Context) AuthConfigOutput
}

// Authentication configuration properties of a server
type AuthConfigArgs struct {
	// If Enabled, Azure Active Directory authentication is enabled.
	ActiveDirectoryAuth pulumi.StringPtrInput `pulumi:"activeDirectoryAuth"`
	// If Enabled, Password authentication is enabled.
	PasswordAuth pulumi.StringPtrInput `pulumi:"passwordAuth"`
	// Tenant id of the server.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for AuthConfigArgs
func (val *AuthConfigArgs) Defaults() *AuthConfigArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PasswordAuth == nil {
		tmp.PasswordAuth = pulumi.StringPtr("Enabled")
	}
	if tmp.TenantId == nil {
		tmp.TenantId = pulumi.StringPtr("")
	}
	return &tmp
}
func (AuthConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfig)(nil)).Elem()
}

func (i AuthConfigArgs) ToAuthConfigOutput() AuthConfigOutput {
	return i.ToAuthConfigOutputWithContext(context.Background())
}

func (i AuthConfigArgs) ToAuthConfigOutputWithContext(ctx context.Context) AuthConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigOutput)
}

func (i AuthConfigArgs) ToOutput(ctx context.Context) pulumix.Output[AuthConfig] {
	return pulumix.Output[AuthConfig]{
		OutputState: i.ToAuthConfigOutputWithContext(ctx).OutputState,
	}
}

func (i AuthConfigArgs) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return i.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (i AuthConfigArgs) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigOutput).ToAuthConfigPtrOutputWithContext(ctx)
}

// AuthConfigPtrInput is an input type that accepts AuthConfigArgs, AuthConfigPtr and AuthConfigPtrOutput values.
// You can construct a concrete instance of `AuthConfigPtrInput` via:
//
//	        AuthConfigArgs{...}
//
//	or:
//
//	        nil
type AuthConfigPtrInput interface {
	pulumi.Input

	ToAuthConfigPtrOutput() AuthConfigPtrOutput
	ToAuthConfigPtrOutputWithContext(context.Context) AuthConfigPtrOutput
}

type authConfigPtrType AuthConfigArgs

func AuthConfigPtr(v *AuthConfigArgs) AuthConfigPtrInput {
	return (*authConfigPtrType)(v)
}

func (*authConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfig)(nil)).Elem()
}

func (i *authConfigPtrType) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return i.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (i *authConfigPtrType) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthConfigPtrOutput)
}

func (i *authConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*AuthConfig] {
	return pulumix.Output[*AuthConfig]{
		OutputState: i.ToAuthConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Authentication configuration properties of a server
type AuthConfigOutput struct{ *pulumi.OutputState }

func (AuthConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfig)(nil)).Elem()
}

func (o AuthConfigOutput) ToAuthConfigOutput() AuthConfigOutput {
	return o
}

func (o AuthConfigOutput) ToAuthConfigOutputWithContext(ctx context.Context) AuthConfigOutput {
	return o
}

func (o AuthConfigOutput) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return o.ToAuthConfigPtrOutputWithContext(context.Background())
}

func (o AuthConfigOutput) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthConfig) *AuthConfig {
		return &v
	}).(AuthConfigPtrOutput)
}

func (o AuthConfigOutput) ToOutput(ctx context.Context) pulumix.Output[AuthConfig] {
	return pulumix.Output[AuthConfig]{
		OutputState: o.OutputState,
	}
}

// If Enabled, Azure Active Directory authentication is enabled.
func (o AuthConfigOutput) ActiveDirectoryAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfig) *string { return v.ActiveDirectoryAuth }).(pulumi.StringPtrOutput)
}

// If Enabled, Password authentication is enabled.
func (o AuthConfigOutput) PasswordAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfig) *string { return v.PasswordAuth }).(pulumi.StringPtrOutput)
}

// Tenant id of the server.
func (o AuthConfigOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfig) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AuthConfigPtrOutput struct{ *pulumi.OutputState }

func (AuthConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfig)(nil)).Elem()
}

func (o AuthConfigPtrOutput) ToAuthConfigPtrOutput() AuthConfigPtrOutput {
	return o
}

func (o AuthConfigPtrOutput) ToAuthConfigPtrOutputWithContext(ctx context.Context) AuthConfigPtrOutput {
	return o
}

func (o AuthConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthConfig] {
	return pulumix.Output[*AuthConfig]{
		OutputState: o.OutputState,
	}
}

func (o AuthConfigPtrOutput) Elem() AuthConfigOutput {
	return o.ApplyT(func(v *AuthConfig) AuthConfig {
		if v != nil {
			return *v
		}
		var ret AuthConfig
		return ret
	}).(AuthConfigOutput)
}

// If Enabled, Azure Active Directory authentication is enabled.
func (o AuthConfigPtrOutput) ActiveDirectoryAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAuth
	}).(pulumi.StringPtrOutput)
}

// If Enabled, Password authentication is enabled.
func (o AuthConfigPtrOutput) PasswordAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.PasswordAuth
	}).(pulumi.StringPtrOutput)
}

// Tenant id of the server.
func (o AuthConfigPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfig) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Authentication configuration properties of a server
type AuthConfigResponse struct {
	// If Enabled, Azure Active Directory authentication is enabled.
	ActiveDirectoryAuth *string `pulumi:"activeDirectoryAuth"`
	// If Enabled, Password authentication is enabled.
	PasswordAuth *string `pulumi:"passwordAuth"`
	// Tenant id of the server.
	TenantId *string `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for AuthConfigResponse
func (val *AuthConfigResponse) Defaults() *AuthConfigResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PasswordAuth == nil {
		passwordAuth_ := "Enabled"
		tmp.PasswordAuth = &passwordAuth_
	}
	if tmp.TenantId == nil {
		tenantId_ := ""
		tmp.TenantId = &tenantId_
	}
	return &tmp
}

// Authentication configuration properties of a server
type AuthConfigResponseOutput struct{ *pulumi.OutputState }

func (AuthConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthConfigResponse)(nil)).Elem()
}

func (o AuthConfigResponseOutput) ToAuthConfigResponseOutput() AuthConfigResponseOutput {
	return o
}

func (o AuthConfigResponseOutput) ToAuthConfigResponseOutputWithContext(ctx context.Context) AuthConfigResponseOutput {
	return o
}

func (o AuthConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuthConfigResponse] {
	return pulumix.Output[AuthConfigResponse]{
		OutputState: o.OutputState,
	}
}

// If Enabled, Azure Active Directory authentication is enabled.
func (o AuthConfigResponseOutput) ActiveDirectoryAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfigResponse) *string { return v.ActiveDirectoryAuth }).(pulumi.StringPtrOutput)
}

// If Enabled, Password authentication is enabled.
func (o AuthConfigResponseOutput) PasswordAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfigResponse) *string { return v.PasswordAuth }).(pulumi.StringPtrOutput)
}

// Tenant id of the server.
func (o AuthConfigResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthConfigResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AuthConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthConfigResponse)(nil)).Elem()
}

func (o AuthConfigResponsePtrOutput) ToAuthConfigResponsePtrOutput() AuthConfigResponsePtrOutput {
	return o
}

func (o AuthConfigResponsePtrOutput) ToAuthConfigResponsePtrOutputWithContext(ctx context.Context) AuthConfigResponsePtrOutput {
	return o
}

func (o AuthConfigResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthConfigResponse] {
	return pulumix.Output[*AuthConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuthConfigResponsePtrOutput) Elem() AuthConfigResponseOutput {
	return o.ApplyT(func(v *AuthConfigResponse) AuthConfigResponse {
		if v != nil {
			return *v
		}
		var ret AuthConfigResponse
		return ret
	}).(AuthConfigResponseOutput)
}

// If Enabled, Azure Active Directory authentication is enabled.
func (o AuthConfigResponsePtrOutput) ActiveDirectoryAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryAuth
	}).(pulumi.StringPtrOutput)
}

// If Enabled, Password authentication is enabled.
func (o AuthConfigResponsePtrOutput) PasswordAuth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.PasswordAuth
	}).(pulumi.StringPtrOutput)
}

// Tenant id of the server.
func (o AuthConfigResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Backup properties of a server
type Backup struct {
	// Backup retention days for the server.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// A value indicating whether Geo-Redundant backup is enabled on the server.
	GeoRedundantBackup *string `pulumi:"geoRedundantBackup"`
}

// Defaults sets the appropriate defaults for Backup
func (val *Backup) Defaults() *Backup {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BackupRetentionDays == nil {
		backupRetentionDays_ := 7
		tmp.BackupRetentionDays = &backupRetentionDays_
	}
	if tmp.GeoRedundantBackup == nil {
		geoRedundantBackup_ := "Disabled"
		tmp.GeoRedundantBackup = &geoRedundantBackup_
	}
	return &tmp
}

// BackupInput is an input type that accepts BackupArgs and BackupOutput values.
// You can construct a concrete instance of `BackupInput` via:
//
//	BackupArgs{...}
type BackupInput interface {
	pulumi.Input

	ToBackupOutput() BackupOutput
	ToBackupOutputWithContext(context.Context) BackupOutput
}

// Backup properties of a server
type BackupArgs struct {
	// Backup retention days for the server.
	BackupRetentionDays pulumi.IntPtrInput `pulumi:"backupRetentionDays"`
	// A value indicating whether Geo-Redundant backup is enabled on the server.
	GeoRedundantBackup pulumi.StringPtrInput `pulumi:"geoRedundantBackup"`
}

// Defaults sets the appropriate defaults for BackupArgs
func (val *BackupArgs) Defaults() *BackupArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BackupRetentionDays == nil {
		tmp.BackupRetentionDays = pulumi.IntPtr(7)
	}
	if tmp.GeoRedundantBackup == nil {
		tmp.GeoRedundantBackup = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Backup)(nil)).Elem()
}

func (i BackupArgs) ToBackupOutput() BackupOutput {
	return i.ToBackupOutputWithContext(context.Background())
}

func (i BackupArgs) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput)
}

func (i BackupArgs) ToOutput(ctx context.Context) pulumix.Output[Backup] {
	return pulumix.Output[Backup]{
		OutputState: i.ToBackupOutputWithContext(ctx).OutputState,
	}
}

func (i BackupArgs) ToBackupPtrOutput() BackupPtrOutput {
	return i.ToBackupPtrOutputWithContext(context.Background())
}

func (i BackupArgs) ToBackupPtrOutputWithContext(ctx context.Context) BackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput).ToBackupPtrOutputWithContext(ctx)
}

// BackupPtrInput is an input type that accepts BackupArgs, BackupPtr and BackupPtrOutput values.
// You can construct a concrete instance of `BackupPtrInput` via:
//
//	        BackupArgs{...}
//
//	or:
//
//	        nil
type BackupPtrInput interface {
	pulumi.Input

	ToBackupPtrOutput() BackupPtrOutput
	ToBackupPtrOutputWithContext(context.Context) BackupPtrOutput
}

type backupPtrType BackupArgs

func BackupPtr(v *BackupArgs) BackupPtrInput {
	return (*backupPtrType)(v)
}

func (*backupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (i *backupPtrType) ToBackupPtrOutput() BackupPtrOutput {
	return i.ToBackupPtrOutputWithContext(context.Background())
}

func (i *backupPtrType) ToBackupPtrOutputWithContext(ctx context.Context) BackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPtrOutput)
}

func (i *backupPtrType) ToOutput(ctx context.Context) pulumix.Output[*Backup] {
	return pulumix.Output[*Backup]{
		OutputState: i.ToBackupPtrOutputWithContext(ctx).OutputState,
	}
}

// Backup properties of a server
type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

func (o BackupOutput) ToBackupPtrOutput() BackupPtrOutput {
	return o.ToBackupPtrOutputWithContext(context.Background())
}

func (o BackupOutput) ToBackupPtrOutputWithContext(ctx context.Context) BackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Backup) *Backup {
		return &v
	}).(BackupPtrOutput)
}

func (o BackupOutput) ToOutput(ctx context.Context) pulumix.Output[Backup] {
	return pulumix.Output[Backup]{
		OutputState: o.OutputState,
	}
}

// Backup retention days for the server.
func (o BackupOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Backup) *int { return v.BackupRetentionDays }).(pulumi.IntPtrOutput)
}

// A value indicating whether Geo-Redundant backup is enabled on the server.
func (o BackupOutput) GeoRedundantBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Backup) *string { return v.GeoRedundantBackup }).(pulumi.StringPtrOutput)
}

type BackupPtrOutput struct{ *pulumi.OutputState }

func (BackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (o BackupPtrOutput) ToBackupPtrOutput() BackupPtrOutput {
	return o
}

func (o BackupPtrOutput) ToBackupPtrOutputWithContext(ctx context.Context) BackupPtrOutput {
	return o
}

func (o BackupPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Backup] {
	return pulumix.Output[*Backup]{
		OutputState: o.OutputState,
	}
}

func (o BackupPtrOutput) Elem() BackupOutput {
	return o.ApplyT(func(v *Backup) Backup {
		if v != nil {
			return *v
		}
		var ret Backup
		return ret
	}).(BackupOutput)
}

// Backup retention days for the server.
func (o BackupPtrOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Backup) *int {
		if v == nil {
			return nil
		}
		return v.BackupRetentionDays
	}).(pulumi.IntPtrOutput)
}

// A value indicating whether Geo-Redundant backup is enabled on the server.
func (o BackupPtrOutput) GeoRedundantBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Backup) *string {
		if v == nil {
			return nil
		}
		return v.GeoRedundantBackup
	}).(pulumi.StringPtrOutput)
}

// Backup properties of a server
type BackupResponse struct {
	// Backup retention days for the server.
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// The earliest restore point time (ISO8601 format) for server.
	EarliestRestoreDate string `pulumi:"earliestRestoreDate"`
	// A value indicating whether Geo-Redundant backup is enabled on the server.
	GeoRedundantBackup *string `pulumi:"geoRedundantBackup"`
}

// Defaults sets the appropriate defaults for BackupResponse
func (val *BackupResponse) Defaults() *BackupResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BackupRetentionDays == nil {
		backupRetentionDays_ := 7
		tmp.BackupRetentionDays = &backupRetentionDays_
	}
	if tmp.GeoRedundantBackup == nil {
		geoRedundantBackup_ := "Disabled"
		tmp.GeoRedundantBackup = &geoRedundantBackup_
	}
	return &tmp
}

// Backup properties of a server
type BackupResponseOutput struct{ *pulumi.OutputState }

func (BackupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupResponse)(nil)).Elem()
}

func (o BackupResponseOutput) ToBackupResponseOutput() BackupResponseOutput {
	return o
}

func (o BackupResponseOutput) ToBackupResponseOutputWithContext(ctx context.Context) BackupResponseOutput {
	return o
}

func (o BackupResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BackupResponse] {
	return pulumix.Output[BackupResponse]{
		OutputState: o.OutputState,
	}
}

// Backup retention days for the server.
func (o BackupResponseOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupResponse) *int { return v.BackupRetentionDays }).(pulumi.IntPtrOutput)
}

// The earliest restore point time (ISO8601 format) for server.
func (o BackupResponseOutput) EarliestRestoreDate() pulumi.StringOutput {
	return o.ApplyT(func(v BackupResponse) string { return v.EarliestRestoreDate }).(pulumi.StringOutput)
}

// A value indicating whether Geo-Redundant backup is enabled on the server.
func (o BackupResponseOutput) GeoRedundantBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupResponse) *string { return v.GeoRedundantBackup }).(pulumi.StringPtrOutput)
}

type BackupResponsePtrOutput struct{ *pulumi.OutputState }

func (BackupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupResponse)(nil)).Elem()
}

func (o BackupResponsePtrOutput) ToBackupResponsePtrOutput() BackupResponsePtrOutput {
	return o
}

func (o BackupResponsePtrOutput) ToBackupResponsePtrOutputWithContext(ctx context.Context) BackupResponsePtrOutput {
	return o
}

func (o BackupResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BackupResponse] {
	return pulumix.Output[*BackupResponse]{
		OutputState: o.OutputState,
	}
}

func (o BackupResponsePtrOutput) Elem() BackupResponseOutput {
	return o.ApplyT(func(v *BackupResponse) BackupResponse {
		if v != nil {
			return *v
		}
		var ret BackupResponse
		return ret
	}).(BackupResponseOutput)
}

// Backup retention days for the server.
func (o BackupResponsePtrOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupResponse) *int {
		if v == nil {
			return nil
		}
		return v.BackupRetentionDays
	}).(pulumi.IntPtrOutput)
}

// The earliest restore point time (ISO8601 format) for server.
func (o BackupResponsePtrOutput) EarliestRestoreDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EarliestRestoreDate
	}).(pulumi.StringPtrOutput)
}

// A value indicating whether Geo-Redundant backup is enabled on the server.
func (o BackupResponsePtrOutput) GeoRedundantBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupResponse) *string {
		if v == nil {
			return nil
		}
		return v.GeoRedundantBackup
	}).(pulumi.StringPtrOutput)
}

// Data encryption properties of a server
type DataEncryption struct {
	// Geo-backup encryption key status for Data encryption enabled server.
	GeoBackupEncryptionKeyStatus *string `pulumi:"geoBackupEncryptionKeyStatus"`
	// URI for the key in keyvault for data encryption for geo-backup of server.
	GeoBackupKeyURI *string `pulumi:"geoBackupKeyURI"`
	// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
	GeoBackupUserAssignedIdentityId *string `pulumi:"geoBackupUserAssignedIdentityId"`
	// Primary encryption key status for Data encryption enabled server.
	PrimaryEncryptionKeyStatus *string `pulumi:"primaryEncryptionKeyStatus"`
	// URI for the key in keyvault for data encryption of the primary server.
	PrimaryKeyURI *string `pulumi:"primaryKeyURI"`
	// Resource Id for the User assigned identity to be used for data encryption of the primary server.
	PrimaryUserAssignedIdentityId *string `pulumi:"primaryUserAssignedIdentityId"`
	// Data encryption type to depict if it is System Managed vs Azure Key vault.
	Type *string `pulumi:"type"`
}

// DataEncryptionInput is an input type that accepts DataEncryptionArgs and DataEncryptionOutput values.
// You can construct a concrete instance of `DataEncryptionInput` via:
//
//	DataEncryptionArgs{...}
type DataEncryptionInput interface {
	pulumi.Input

	ToDataEncryptionOutput() DataEncryptionOutput
	ToDataEncryptionOutputWithContext(context.Context) DataEncryptionOutput
}

// Data encryption properties of a server
type DataEncryptionArgs struct {
	// Geo-backup encryption key status for Data encryption enabled server.
	GeoBackupEncryptionKeyStatus pulumi.StringPtrInput `pulumi:"geoBackupEncryptionKeyStatus"`
	// URI for the key in keyvault for data encryption for geo-backup of server.
	GeoBackupKeyURI pulumi.StringPtrInput `pulumi:"geoBackupKeyURI"`
	// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
	GeoBackupUserAssignedIdentityId pulumi.StringPtrInput `pulumi:"geoBackupUserAssignedIdentityId"`
	// Primary encryption key status for Data encryption enabled server.
	PrimaryEncryptionKeyStatus pulumi.StringPtrInput `pulumi:"primaryEncryptionKeyStatus"`
	// URI for the key in keyvault for data encryption of the primary server.
	PrimaryKeyURI pulumi.StringPtrInput `pulumi:"primaryKeyURI"`
	// Resource Id for the User assigned identity to be used for data encryption of the primary server.
	PrimaryUserAssignedIdentityId pulumi.StringPtrInput `pulumi:"primaryUserAssignedIdentityId"`
	// Data encryption type to depict if it is System Managed vs Azure Key vault.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataEncryption)(nil)).Elem()
}

func (i DataEncryptionArgs) ToDataEncryptionOutput() DataEncryptionOutput {
	return i.ToDataEncryptionOutputWithContext(context.Background())
}

func (i DataEncryptionArgs) ToDataEncryptionOutputWithContext(ctx context.Context) DataEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataEncryptionOutput)
}

func (i DataEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[DataEncryption] {
	return pulumix.Output[DataEncryption]{
		OutputState: i.ToDataEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i DataEncryptionArgs) ToDataEncryptionPtrOutput() DataEncryptionPtrOutput {
	return i.ToDataEncryptionPtrOutputWithContext(context.Background())
}

func (i DataEncryptionArgs) ToDataEncryptionPtrOutputWithContext(ctx context.Context) DataEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataEncryptionOutput).ToDataEncryptionPtrOutputWithContext(ctx)
}

// DataEncryptionPtrInput is an input type that accepts DataEncryptionArgs, DataEncryptionPtr and DataEncryptionPtrOutput values.
// You can construct a concrete instance of `DataEncryptionPtrInput` via:
//
//	        DataEncryptionArgs{...}
//
//	or:
//
//	        nil
type DataEncryptionPtrInput interface {
	pulumi.Input

	ToDataEncryptionPtrOutput() DataEncryptionPtrOutput
	ToDataEncryptionPtrOutputWithContext(context.Context) DataEncryptionPtrOutput
}

type dataEncryptionPtrType DataEncryptionArgs

func DataEncryptionPtr(v *DataEncryptionArgs) DataEncryptionPtrInput {
	return (*dataEncryptionPtrType)(v)
}

func (*dataEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataEncryption)(nil)).Elem()
}

func (i *dataEncryptionPtrType) ToDataEncryptionPtrOutput() DataEncryptionPtrOutput {
	return i.ToDataEncryptionPtrOutputWithContext(context.Background())
}

func (i *dataEncryptionPtrType) ToDataEncryptionPtrOutputWithContext(ctx context.Context) DataEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataEncryptionPtrOutput)
}

func (i *dataEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataEncryption] {
	return pulumix.Output[*DataEncryption]{
		OutputState: i.ToDataEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

// Data encryption properties of a server
type DataEncryptionOutput struct{ *pulumi.OutputState }

func (DataEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataEncryption)(nil)).Elem()
}

func (o DataEncryptionOutput) ToDataEncryptionOutput() DataEncryptionOutput {
	return o
}

func (o DataEncryptionOutput) ToDataEncryptionOutputWithContext(ctx context.Context) DataEncryptionOutput {
	return o
}

func (o DataEncryptionOutput) ToDataEncryptionPtrOutput() DataEncryptionPtrOutput {
	return o.ToDataEncryptionPtrOutputWithContext(context.Background())
}

func (o DataEncryptionOutput) ToDataEncryptionPtrOutputWithContext(ctx context.Context) DataEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataEncryption) *DataEncryption {
		return &v
	}).(DataEncryptionPtrOutput)
}

func (o DataEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[DataEncryption] {
	return pulumix.Output[DataEncryption]{
		OutputState: o.OutputState,
	}
}

// Geo-backup encryption key status for Data encryption enabled server.
func (o DataEncryptionOutput) GeoBackupEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.GeoBackupEncryptionKeyStatus }).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption for geo-backup of server.
func (o DataEncryptionOutput) GeoBackupKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.GeoBackupKeyURI }).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
func (o DataEncryptionOutput) GeoBackupUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.GeoBackupUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

// Primary encryption key status for Data encryption enabled server.
func (o DataEncryptionOutput) PrimaryEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.PrimaryEncryptionKeyStatus }).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption of the primary server.
func (o DataEncryptionOutput) PrimaryKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.PrimaryKeyURI }).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption of the primary server.
func (o DataEncryptionOutput) PrimaryUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.PrimaryUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

// Data encryption type to depict if it is System Managed vs Azure Key vault.
func (o DataEncryptionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryption) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataEncryptionPtrOutput struct{ *pulumi.OutputState }

func (DataEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataEncryption)(nil)).Elem()
}

func (o DataEncryptionPtrOutput) ToDataEncryptionPtrOutput() DataEncryptionPtrOutput {
	return o
}

func (o DataEncryptionPtrOutput) ToDataEncryptionPtrOutputWithContext(ctx context.Context) DataEncryptionPtrOutput {
	return o
}

func (o DataEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataEncryption] {
	return pulumix.Output[*DataEncryption]{
		OutputState: o.OutputState,
	}
}

func (o DataEncryptionPtrOutput) Elem() DataEncryptionOutput {
	return o.ApplyT(func(v *DataEncryption) DataEncryption {
		if v != nil {
			return *v
		}
		var ret DataEncryption
		return ret
	}).(DataEncryptionOutput)
}

// Geo-backup encryption key status for Data encryption enabled server.
func (o DataEncryptionPtrOutput) GeoBackupEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupEncryptionKeyStatus
	}).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption for geo-backup of server.
func (o DataEncryptionPtrOutput) GeoBackupKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupKeyURI
	}).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
func (o DataEncryptionPtrOutput) GeoBackupUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupUserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

// Primary encryption key status for Data encryption enabled server.
func (o DataEncryptionPtrOutput) PrimaryEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryEncryptionKeyStatus
	}).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption of the primary server.
func (o DataEncryptionPtrOutput) PrimaryKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKeyURI
	}).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption of the primary server.
func (o DataEncryptionPtrOutput) PrimaryUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryUserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

// Data encryption type to depict if it is System Managed vs Azure Key vault.
func (o DataEncryptionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryption) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Data encryption properties of a server
type DataEncryptionResponse struct {
	// Geo-backup encryption key status for Data encryption enabled server.
	GeoBackupEncryptionKeyStatus *string `pulumi:"geoBackupEncryptionKeyStatus"`
	// URI for the key in keyvault for data encryption for geo-backup of server.
	GeoBackupKeyURI *string `pulumi:"geoBackupKeyURI"`
	// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
	GeoBackupUserAssignedIdentityId *string `pulumi:"geoBackupUserAssignedIdentityId"`
	// Primary encryption key status for Data encryption enabled server.
	PrimaryEncryptionKeyStatus *string `pulumi:"primaryEncryptionKeyStatus"`
	// URI for the key in keyvault for data encryption of the primary server.
	PrimaryKeyURI *string `pulumi:"primaryKeyURI"`
	// Resource Id for the User assigned identity to be used for data encryption of the primary server.
	PrimaryUserAssignedIdentityId *string `pulumi:"primaryUserAssignedIdentityId"`
	// Data encryption type to depict if it is System Managed vs Azure Key vault.
	Type *string `pulumi:"type"`
}

// Data encryption properties of a server
type DataEncryptionResponseOutput struct{ *pulumi.OutputState }

func (DataEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataEncryptionResponse)(nil)).Elem()
}

func (o DataEncryptionResponseOutput) ToDataEncryptionResponseOutput() DataEncryptionResponseOutput {
	return o
}

func (o DataEncryptionResponseOutput) ToDataEncryptionResponseOutputWithContext(ctx context.Context) DataEncryptionResponseOutput {
	return o
}

func (o DataEncryptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DataEncryptionResponse] {
	return pulumix.Output[DataEncryptionResponse]{
		OutputState: o.OutputState,
	}
}

// Geo-backup encryption key status for Data encryption enabled server.
func (o DataEncryptionResponseOutput) GeoBackupEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.GeoBackupEncryptionKeyStatus }).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption for geo-backup of server.
func (o DataEncryptionResponseOutput) GeoBackupKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.GeoBackupKeyURI }).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
func (o DataEncryptionResponseOutput) GeoBackupUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.GeoBackupUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

// Primary encryption key status for Data encryption enabled server.
func (o DataEncryptionResponseOutput) PrimaryEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.PrimaryEncryptionKeyStatus }).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption of the primary server.
func (o DataEncryptionResponseOutput) PrimaryKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.PrimaryKeyURI }).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption of the primary server.
func (o DataEncryptionResponseOutput) PrimaryUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.PrimaryUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

// Data encryption type to depict if it is System Managed vs Azure Key vault.
func (o DataEncryptionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataEncryptionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (DataEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataEncryptionResponse)(nil)).Elem()
}

func (o DataEncryptionResponsePtrOutput) ToDataEncryptionResponsePtrOutput() DataEncryptionResponsePtrOutput {
	return o
}

func (o DataEncryptionResponsePtrOutput) ToDataEncryptionResponsePtrOutputWithContext(ctx context.Context) DataEncryptionResponsePtrOutput {
	return o
}

func (o DataEncryptionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataEncryptionResponse] {
	return pulumix.Output[*DataEncryptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o DataEncryptionResponsePtrOutput) Elem() DataEncryptionResponseOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) DataEncryptionResponse {
		if v != nil {
			return *v
		}
		var ret DataEncryptionResponse
		return ret
	}).(DataEncryptionResponseOutput)
}

// Geo-backup encryption key status for Data encryption enabled server.
func (o DataEncryptionResponsePtrOutput) GeoBackupEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupEncryptionKeyStatus
	}).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption for geo-backup of server.
func (o DataEncryptionResponsePtrOutput) GeoBackupKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupKeyURI
	}).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption for geo-backup of server.
func (o DataEncryptionResponsePtrOutput) GeoBackupUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.GeoBackupUserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

// Primary encryption key status for Data encryption enabled server.
func (o DataEncryptionResponsePtrOutput) PrimaryEncryptionKeyStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryEncryptionKeyStatus
	}).(pulumi.StringPtrOutput)
}

// URI for the key in keyvault for data encryption of the primary server.
func (o DataEncryptionResponsePtrOutput) PrimaryKeyURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKeyURI
	}).(pulumi.StringPtrOutput)
}

// Resource Id for the User assigned identity to be used for data encryption of the primary server.
func (o DataEncryptionResponsePtrOutput) PrimaryUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryUserAssignedIdentityId
	}).(pulumi.StringPtrOutput)
}

// Data encryption type to depict if it is System Managed vs Azure Key vault.
func (o DataEncryptionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Validation status summary for an individual database
type DbLevelValidationStatusResponse struct {
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// End date-time of a database level validation
	EndedOn *string `pulumi:"endedOn"`
	// Start date-time of a database level validation
	StartedOn *string `pulumi:"startedOn"`
	// Summary of database level validations
	Summary []ValidationSummaryItemResponse `pulumi:"summary"`
}

// Validation status summary for an individual database
type DbLevelValidationStatusResponseOutput struct{ *pulumi.OutputState }

func (DbLevelValidationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbLevelValidationStatusResponse)(nil)).Elem()
}

func (o DbLevelValidationStatusResponseOutput) ToDbLevelValidationStatusResponseOutput() DbLevelValidationStatusResponseOutput {
	return o
}

func (o DbLevelValidationStatusResponseOutput) ToDbLevelValidationStatusResponseOutputWithContext(ctx context.Context) DbLevelValidationStatusResponseOutput {
	return o
}

func (o DbLevelValidationStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DbLevelValidationStatusResponse] {
	return pulumix.Output[DbLevelValidationStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the database
func (o DbLevelValidationStatusResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbLevelValidationStatusResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// End date-time of a database level validation
func (o DbLevelValidationStatusResponseOutput) EndedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbLevelValidationStatusResponse) *string { return v.EndedOn }).(pulumi.StringPtrOutput)
}

// Start date-time of a database level validation
func (o DbLevelValidationStatusResponseOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbLevelValidationStatusResponse) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

// Summary of database level validations
func (o DbLevelValidationStatusResponseOutput) Summary() ValidationSummaryItemResponseArrayOutput {
	return o.ApplyT(func(v DbLevelValidationStatusResponse) []ValidationSummaryItemResponse { return v.Summary }).(ValidationSummaryItemResponseArrayOutput)
}

type DbLevelValidationStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (DbLevelValidationStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DbLevelValidationStatusResponse)(nil)).Elem()
}

func (o DbLevelValidationStatusResponseArrayOutput) ToDbLevelValidationStatusResponseArrayOutput() DbLevelValidationStatusResponseArrayOutput {
	return o
}

func (o DbLevelValidationStatusResponseArrayOutput) ToDbLevelValidationStatusResponseArrayOutputWithContext(ctx context.Context) DbLevelValidationStatusResponseArrayOutput {
	return o
}

func (o DbLevelValidationStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DbLevelValidationStatusResponse] {
	return pulumix.Output[[]DbLevelValidationStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o DbLevelValidationStatusResponseArrayOutput) Index(i pulumi.IntInput) DbLevelValidationStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DbLevelValidationStatusResponse {
		return vs[0].([]DbLevelValidationStatusResponse)[vs[1].(int)]
	}).(DbLevelValidationStatusResponseOutput)
}

// Migration status of an individual database
type DbMigrationStatusResponse struct {
	// CDC applied changes counter
	AppliedChanges *int `pulumi:"appliedChanges"`
	// CDC delete counter
	CdcDeleteCounter *int `pulumi:"cdcDeleteCounter"`
	// CDC insert counter
	CdcInsertCounter *int `pulumi:"cdcInsertCounter"`
	// CDC update counter
	CdcUpdateCounter *int `pulumi:"cdcUpdateCounter"`
	// Name of the database
	DatabaseName *string `pulumi:"databaseName"`
	// End date-time of a migration state
	EndedOn *string `pulumi:"endedOn"`
	// Number of tables loaded during the migration of a DB
	FullLoadCompletedTables *int `pulumi:"fullLoadCompletedTables"`
	// Number of tables errored out during the migration of a DB
	FullLoadErroredTables *int `pulumi:"fullLoadErroredTables"`
	// Number of tables loading during the migration of a DB
	FullLoadLoadingTables *int `pulumi:"fullLoadLoadingTables"`
	// Number of tables queued for the migration of a DB
	FullLoadQueuedTables *int `pulumi:"fullLoadQueuedTables"`
	// CDC incoming changes counter
	IncomingChanges *int `pulumi:"incomingChanges"`
	// Lag in seconds between source and target during online phase
	Latency *int `pulumi:"latency"`
	// Error message, if any, for the migration state
	Message *string `pulumi:"message"`
	// Migration operation of an individual database
	MigrationOperation *string `pulumi:"migrationOperation"`
	// Migration db state of an individual database
	MigrationState *string `pulumi:"migrationState"`
	// Start date-time of a migration state
	StartedOn *string `pulumi:"startedOn"`
}

// Migration status of an individual database
type DbMigrationStatusResponseOutput struct{ *pulumi.OutputState }

func (DbMigrationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbMigrationStatusResponse)(nil)).Elem()
}

func (o DbMigrationStatusResponseOutput) ToDbMigrationStatusResponseOutput() DbMigrationStatusResponseOutput {
	return o
}

func (o DbMigrationStatusResponseOutput) ToDbMigrationStatusResponseOutputWithContext(ctx context.Context) DbMigrationStatusResponseOutput {
	return o
}

func (o DbMigrationStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DbMigrationStatusResponse] {
	return pulumix.Output[DbMigrationStatusResponse]{
		OutputState: o.OutputState,
	}
}

// CDC applied changes counter
func (o DbMigrationStatusResponseOutput) AppliedChanges() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.AppliedChanges }).(pulumi.IntPtrOutput)
}

// CDC delete counter
func (o DbMigrationStatusResponseOutput) CdcDeleteCounter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.CdcDeleteCounter }).(pulumi.IntPtrOutput)
}

// CDC insert counter
func (o DbMigrationStatusResponseOutput) CdcInsertCounter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.CdcInsertCounter }).(pulumi.IntPtrOutput)
}

// CDC update counter
func (o DbMigrationStatusResponseOutput) CdcUpdateCounter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.CdcUpdateCounter }).(pulumi.IntPtrOutput)
}

// Name of the database
func (o DbMigrationStatusResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// End date-time of a migration state
func (o DbMigrationStatusResponseOutput) EndedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *string { return v.EndedOn }).(pulumi.StringPtrOutput)
}

// Number of tables loaded during the migration of a DB
func (o DbMigrationStatusResponseOutput) FullLoadCompletedTables() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.FullLoadCompletedTables }).(pulumi.IntPtrOutput)
}

// Number of tables errored out during the migration of a DB
func (o DbMigrationStatusResponseOutput) FullLoadErroredTables() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.FullLoadErroredTables }).(pulumi.IntPtrOutput)
}

// Number of tables loading during the migration of a DB
func (o DbMigrationStatusResponseOutput) FullLoadLoadingTables() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.FullLoadLoadingTables }).(pulumi.IntPtrOutput)
}

// Number of tables queued for the migration of a DB
func (o DbMigrationStatusResponseOutput) FullLoadQueuedTables() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.FullLoadQueuedTables }).(pulumi.IntPtrOutput)
}

// CDC incoming changes counter
func (o DbMigrationStatusResponseOutput) IncomingChanges() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.IncomingChanges }).(pulumi.IntPtrOutput)
}

// Lag in seconds between source and target during online phase
func (o DbMigrationStatusResponseOutput) Latency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *int { return v.Latency }).(pulumi.IntPtrOutput)
}

// Error message, if any, for the migration state
func (o DbMigrationStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Migration operation of an individual database
func (o DbMigrationStatusResponseOutput) MigrationOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *string { return v.MigrationOperation }).(pulumi.StringPtrOutput)
}

// Migration db state of an individual database
func (o DbMigrationStatusResponseOutput) MigrationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *string { return v.MigrationState }).(pulumi.StringPtrOutput)
}

// Start date-time of a migration state
func (o DbMigrationStatusResponseOutput) StartedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbMigrationStatusResponse) *string { return v.StartedOn }).(pulumi.StringPtrOutput)
}

type DbMigrationStatusResponseMapOutput struct{ *pulumi.OutputState }

func (DbMigrationStatusResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DbMigrationStatusResponse)(nil)).Elem()
}

func (o DbMigrationStatusResponseMapOutput) ToDbMigrationStatusResponseMapOutput() DbMigrationStatusResponseMapOutput {
	return o
}

func (o DbMigrationStatusResponseMapOutput) ToDbMigrationStatusResponseMapOutputWithContext(ctx context.Context) DbMigrationStatusResponseMapOutput {
	return o
}

func (o DbMigrationStatusResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]DbMigrationStatusResponse] {
	return pulumix.Output[map[string]DbMigrationStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o DbMigrationStatusResponseMapOutput) MapIndex(k pulumi.StringInput) DbMigrationStatusResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DbMigrationStatusResponse {
		return vs[0].(map[string]DbMigrationStatusResponse)[vs[1].(string)]
	}).(DbMigrationStatusResponseOutput)
}

// Database server metadata.
type DbServerMetadataResponse struct {
	// Location of database server
	Location string `pulumi:"location"`
	// SKU for the database server. This object is empty for PG single server
	Sku *ServerSkuResponse `pulumi:"sku"`
	// Storage size in MB for database server
	StorageMb *int `pulumi:"storageMb"`
	// Version for database engine
	Version *string `pulumi:"version"`
}

// Database server metadata.
type DbServerMetadataResponseOutput struct{ *pulumi.OutputState }

func (DbServerMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DbServerMetadataResponse)(nil)).Elem()
}

func (o DbServerMetadataResponseOutput) ToDbServerMetadataResponseOutput() DbServerMetadataResponseOutput {
	return o
}

func (o DbServerMetadataResponseOutput) ToDbServerMetadataResponseOutputWithContext(ctx context.Context) DbServerMetadataResponseOutput {
	return o
}

func (o DbServerMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DbServerMetadataResponse] {
	return pulumix.Output[DbServerMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// Location of database server
func (o DbServerMetadataResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DbServerMetadataResponse) string { return v.Location }).(pulumi.StringOutput)
}

// SKU for the database server. This object is empty for PG single server
func (o DbServerMetadataResponseOutput) Sku() ServerSkuResponsePtrOutput {
	return o.ApplyT(func(v DbServerMetadataResponse) *ServerSkuResponse { return v.Sku }).(ServerSkuResponsePtrOutput)
}

// Storage size in MB for database server
func (o DbServerMetadataResponseOutput) StorageMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DbServerMetadataResponse) *int { return v.StorageMb }).(pulumi.IntPtrOutput)
}

// Version for database engine
func (o DbServerMetadataResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DbServerMetadataResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// High availability properties of a server
type HighAvailability struct {
	// The HA mode for the server.
	Mode *string `pulumi:"mode"`
	// availability zone information of the standby.
	StandbyAvailabilityZone *string `pulumi:"standbyAvailabilityZone"`
}

// Defaults sets the appropriate defaults for HighAvailability
func (val *HighAvailability) Defaults() *HighAvailability {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "Disabled"
		tmp.Mode = &mode_
	}
	if tmp.StandbyAvailabilityZone == nil {
		standbyAvailabilityZone_ := ""
		tmp.StandbyAvailabilityZone = &standbyAvailabilityZone_
	}
	return &tmp
}

// HighAvailabilityInput is an input type that accepts HighAvailabilityArgs and HighAvailabilityOutput values.
// You can construct a concrete instance of `HighAvailabilityInput` via:
//
//	HighAvailabilityArgs{...}
type HighAvailabilityInput interface {
	pulumi.Input

	ToHighAvailabilityOutput() HighAvailabilityOutput
	ToHighAvailabilityOutputWithContext(context.Context) HighAvailabilityOutput
}

// High availability properties of a server
type HighAvailabilityArgs struct {
	// The HA mode for the server.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// availability zone information of the standby.
	StandbyAvailabilityZone pulumi.StringPtrInput `pulumi:"standbyAvailabilityZone"`
}

// Defaults sets the appropriate defaults for HighAvailabilityArgs
func (val *HighAvailabilityArgs) Defaults() *HighAvailabilityArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("Disabled")
	}
	if tmp.StandbyAvailabilityZone == nil {
		tmp.StandbyAvailabilityZone = pulumi.StringPtr("")
	}
	return &tmp
}
func (HighAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailability)(nil)).Elem()
}

func (i HighAvailabilityArgs) ToHighAvailabilityOutput() HighAvailabilityOutput {
	return i.ToHighAvailabilityOutputWithContext(context.Background())
}

func (i HighAvailabilityArgs) ToHighAvailabilityOutputWithContext(ctx context.Context) HighAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilityOutput)
}

func (i HighAvailabilityArgs) ToOutput(ctx context.Context) pulumix.Output[HighAvailability] {
	return pulumix.Output[HighAvailability]{
		OutputState: i.ToHighAvailabilityOutputWithContext(ctx).OutputState,
	}
}

func (i HighAvailabilityArgs) ToHighAvailabilityPtrOutput() HighAvailabilityPtrOutput {
	return i.ToHighAvailabilityPtrOutputWithContext(context.Background())
}

func (i HighAvailabilityArgs) ToHighAvailabilityPtrOutputWithContext(ctx context.Context) HighAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilityOutput).ToHighAvailabilityPtrOutputWithContext(ctx)
}

// HighAvailabilityPtrInput is an input type that accepts HighAvailabilityArgs, HighAvailabilityPtr and HighAvailabilityPtrOutput values.
// You can construct a concrete instance of `HighAvailabilityPtrInput` via:
//
//	        HighAvailabilityArgs{...}
//
//	or:
//
//	        nil
type HighAvailabilityPtrInput interface {
	pulumi.Input

	ToHighAvailabilityPtrOutput() HighAvailabilityPtrOutput
	ToHighAvailabilityPtrOutputWithContext(context.Context) HighAvailabilityPtrOutput
}

type highAvailabilityPtrType HighAvailabilityArgs

func HighAvailabilityPtr(v *HighAvailabilityArgs) HighAvailabilityPtrInput {
	return (*highAvailabilityPtrType)(v)
}

func (*highAvailabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailability)(nil)).Elem()
}

func (i *highAvailabilityPtrType) ToHighAvailabilityPtrOutput() HighAvailabilityPtrOutput {
	return i.ToHighAvailabilityPtrOutputWithContext(context.Background())
}

func (i *highAvailabilityPtrType) ToHighAvailabilityPtrOutputWithContext(ctx context.Context) HighAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilityPtrOutput)
}

func (i *highAvailabilityPtrType) ToOutput(ctx context.Context) pulumix.Output[*HighAvailability] {
	return pulumix.Output[*HighAvailability]{
		OutputState: i.ToHighAvailabilityPtrOutputWithContext(ctx).OutputState,
	}
}

// High availability properties of a server
type HighAvailabilityOutput struct{ *pulumi.OutputState }

func (HighAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailability)(nil)).Elem()
}

func (o HighAvailabilityOutput) ToHighAvailabilityOutput() HighAvailabilityOutput {
	return o
}

func (o HighAvailabilityOutput) ToHighAvailabilityOutputWithContext(ctx context.Context) HighAvailabilityOutput {
	return o
}

func (o HighAvailabilityOutput) ToHighAvailabilityPtrOutput() HighAvailabilityPtrOutput {
	return o.ToHighAvailabilityPtrOutputWithContext(context.Background())
}

func (o HighAvailabilityOutput) ToHighAvailabilityPtrOutputWithContext(ctx context.Context) HighAvailabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HighAvailability) *HighAvailability {
		return &v
	}).(HighAvailabilityPtrOutput)
}

func (o HighAvailabilityOutput) ToOutput(ctx context.Context) pulumix.Output[HighAvailability] {
	return pulumix.Output[HighAvailability]{
		OutputState: o.OutputState,
	}
}

// The HA mode for the server.
func (o HighAvailabilityOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HighAvailability) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// availability zone information of the standby.
func (o HighAvailabilityOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HighAvailability) *string { return v.StandbyAvailabilityZone }).(pulumi.StringPtrOutput)
}

type HighAvailabilityPtrOutput struct{ *pulumi.OutputState }

func (HighAvailabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailability)(nil)).Elem()
}

func (o HighAvailabilityPtrOutput) ToHighAvailabilityPtrOutput() HighAvailabilityPtrOutput {
	return o
}

func (o HighAvailabilityPtrOutput) ToHighAvailabilityPtrOutputWithContext(ctx context.Context) HighAvailabilityPtrOutput {
	return o
}

func (o HighAvailabilityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HighAvailability] {
	return pulumix.Output[*HighAvailability]{
		OutputState: o.OutputState,
	}
}

func (o HighAvailabilityPtrOutput) Elem() HighAvailabilityOutput {
	return o.ApplyT(func(v *HighAvailability) HighAvailability {
		if v != nil {
			return *v
		}
		var ret HighAvailability
		return ret
	}).(HighAvailabilityOutput)
}

// The HA mode for the server.
func (o HighAvailabilityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailability) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// availability zone information of the standby.
func (o HighAvailabilityPtrOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailability) *string {
		if v == nil {
			return nil
		}
		return v.StandbyAvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// High availability properties of a server
type HighAvailabilityResponse struct {
	// The HA mode for the server.
	Mode *string `pulumi:"mode"`
	// availability zone information of the standby.
	StandbyAvailabilityZone *string `pulumi:"standbyAvailabilityZone"`
	// A state of a HA server that is visible to user.
	State string `pulumi:"state"`
}

// Defaults sets the appropriate defaults for HighAvailabilityResponse
func (val *HighAvailabilityResponse) Defaults() *HighAvailabilityResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "Disabled"
		tmp.Mode = &mode_
	}
	if tmp.StandbyAvailabilityZone == nil {
		standbyAvailabilityZone_ := ""
		tmp.StandbyAvailabilityZone = &standbyAvailabilityZone_
	}
	return &tmp
}

// High availability properties of a server
type HighAvailabilityResponseOutput struct{ *pulumi.OutputState }

func (HighAvailabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilityResponse)(nil)).Elem()
}

func (o HighAvailabilityResponseOutput) ToHighAvailabilityResponseOutput() HighAvailabilityResponseOutput {
	return o
}

func (o HighAvailabilityResponseOutput) ToHighAvailabilityResponseOutputWithContext(ctx context.Context) HighAvailabilityResponseOutput {
	return o
}

func (o HighAvailabilityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HighAvailabilityResponse] {
	return pulumix.Output[HighAvailabilityResponse]{
		OutputState: o.OutputState,
	}
}

// The HA mode for the server.
func (o HighAvailabilityResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HighAvailabilityResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// availability zone information of the standby.
func (o HighAvailabilityResponseOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HighAvailabilityResponse) *string { return v.StandbyAvailabilityZone }).(pulumi.StringPtrOutput)
}

// A state of a HA server that is visible to user.
func (o HighAvailabilityResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilityResponse) string { return v.State }).(pulumi.StringOutput)
}

type HighAvailabilityResponsePtrOutput struct{ *pulumi.OutputState }

func (HighAvailabilityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilityResponse)(nil)).Elem()
}

func (o HighAvailabilityResponsePtrOutput) ToHighAvailabilityResponsePtrOutput() HighAvailabilityResponsePtrOutput {
	return o
}

func (o HighAvailabilityResponsePtrOutput) ToHighAvailabilityResponsePtrOutputWithContext(ctx context.Context) HighAvailabilityResponsePtrOutput {
	return o
}

func (o HighAvailabilityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HighAvailabilityResponse] {
	return pulumix.Output[*HighAvailabilityResponse]{
		OutputState: o.OutputState,
	}
}

func (o HighAvailabilityResponsePtrOutput) Elem() HighAvailabilityResponseOutput {
	return o.ApplyT(func(v *HighAvailabilityResponse) HighAvailabilityResponse {
		if v != nil {
			return *v
		}
		var ret HighAvailabilityResponse
		return ret
	}).(HighAvailabilityResponseOutput)
}

// The HA mode for the server.
func (o HighAvailabilityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// availability zone information of the standby.
func (o HighAvailabilityResponsePtrOutput) StandbyAvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilityResponse) *string {
		if v == nil {
			return nil
		}
		return v.StandbyAvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// A state of a HA server that is visible to user.
func (o HighAvailabilityResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Maintenance window properties of a server.
type MaintenanceWindow struct {
	// indicates whether custom window is enabled or disabled
	CustomWindow *string `pulumi:"customWindow"`
	// day of week for maintenance window
	DayOfWeek *int `pulumi:"dayOfWeek"`
	// start hour for maintenance window
	StartHour *int `pulumi:"startHour"`
	// start minute for maintenance window
	StartMinute *int `pulumi:"startMinute"`
}

// Defaults sets the appropriate defaults for MaintenanceWindow
func (val *MaintenanceWindow) Defaults() *MaintenanceWindow {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CustomWindow == nil {
		customWindow_ := "Disabled"
		tmp.CustomWindow = &customWindow_
	}
	if tmp.DayOfWeek == nil {
		dayOfWeek_ := 0
		tmp.DayOfWeek = &dayOfWeek_
	}
	if tmp.StartHour == nil {
		startHour_ := 0
		tmp.StartHour = &startHour_
	}
	if tmp.StartMinute == nil {
		startMinute_ := 0
		tmp.StartMinute = &startMinute_
	}
	return &tmp
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//	MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Maintenance window properties of a server.
type MaintenanceWindowArgs struct {
	// indicates whether custom window is enabled or disabled
	CustomWindow pulumi.StringPtrInput `pulumi:"customWindow"`
	// day of week for maintenance window
	DayOfWeek pulumi.IntPtrInput `pulumi:"dayOfWeek"`
	// start hour for maintenance window
	StartHour pulumi.IntPtrInput `pulumi:"startHour"`
	// start minute for maintenance window
	StartMinute pulumi.IntPtrInput `pulumi:"startMinute"`
}

// Defaults sets the appropriate defaults for MaintenanceWindowArgs
func (val *MaintenanceWindowArgs) Defaults() *MaintenanceWindowArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CustomWindow == nil {
		tmp.CustomWindow = pulumi.StringPtr("Disabled")
	}
	if tmp.DayOfWeek == nil {
		tmp.DayOfWeek = pulumi.IntPtr(0)
	}
	if tmp.StartHour == nil {
		tmp.StartHour = pulumi.IntPtr(0)
	}
	if tmp.StartMinute == nil {
		tmp.StartMinute = pulumi.IntPtr(0)
	}
	return &tmp
}
func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: i.ToMaintenanceWindowOutputWithContext(ctx).OutputState,
	}
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//	        MaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

func (i *maintenanceWindowPtrType) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindow] {
	return pulumix.Output[*MaintenanceWindow]{
		OutputState: i.ToMaintenanceWindowPtrOutputWithContext(ctx).OutputState,
	}
}

// Maintenance window properties of a server.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

func (o MaintenanceWindowOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

// indicates whether custom window is enabled or disabled
func (o MaintenanceWindowOutput) CustomWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.CustomWindow }).(pulumi.StringPtrOutput)
}

// day of week for maintenance window
func (o MaintenanceWindowOutput) DayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.DayOfWeek }).(pulumi.IntPtrOutput)
}

// start hour for maintenance window
func (o MaintenanceWindowOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.StartHour }).(pulumi.IntPtrOutput)
}

// start minute for maintenance window
func (o MaintenanceWindowOutput) StartMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.StartMinute }).(pulumi.IntPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindow] {
	return pulumix.Output[*MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// indicates whether custom window is enabled or disabled
func (o MaintenanceWindowPtrOutput) CustomWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.CustomWindow
	}).(pulumi.StringPtrOutput)
}

// day of week for maintenance window
func (o MaintenanceWindowPtrOutput) DayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.IntPtrOutput)
}

// start hour for maintenance window
func (o MaintenanceWindowPtrOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.StartHour
	}).(pulumi.IntPtrOutput)
}

// start minute for maintenance window
func (o MaintenanceWindowPtrOutput) StartMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.StartMinute
	}).(pulumi.IntPtrOutput)
}

// Maintenance window properties of a server.
type MaintenanceWindowResponse struct {
	// indicates whether custom window is enabled or disabled
	CustomWindow *string `pulumi:"customWindow"`
	// day of week for maintenance window
	DayOfWeek *int `pulumi:"dayOfWeek"`
	// start hour for maintenance window
	StartHour *int `pulumi:"startHour"`
	// start minute for maintenance window
	StartMinute *int `pulumi:"startMinute"`
}

// Defaults sets the appropriate defaults for MaintenanceWindowResponse
func (val *MaintenanceWindowResponse) Defaults() *MaintenanceWindowResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CustomWindow == nil {
		customWindow_ := "Disabled"
		tmp.CustomWindow = &customWindow_
	}
	if tmp.DayOfWeek == nil {
		dayOfWeek_ := 0
		tmp.DayOfWeek = &dayOfWeek_
	}
	if tmp.StartHour == nil {
		startHour_ := 0
		tmp.StartHour = &startHour_
	}
	if tmp.StartMinute == nil {
		startMinute_ := 0
		tmp.StartMinute = &startMinute_
	}
	return &tmp
}

// Maintenance window properties of a server.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowResponse] {
	return pulumix.Output[MaintenanceWindowResponse]{
		OutputState: o.OutputState,
	}
}

// indicates whether custom window is enabled or disabled
func (o MaintenanceWindowResponseOutput) CustomWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *string { return v.CustomWindow }).(pulumi.StringPtrOutput)
}

// day of week for maintenance window
func (o MaintenanceWindowResponseOutput) DayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *int { return v.DayOfWeek }).(pulumi.IntPtrOutput)
}

// start hour for maintenance window
func (o MaintenanceWindowResponseOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *int { return v.StartHour }).(pulumi.IntPtrOutput)
}

// start minute for maintenance window
func (o MaintenanceWindowResponseOutput) StartMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) *int { return v.StartMinute }).(pulumi.IntPtrOutput)
}

type MaintenanceWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponsePtrOutput) ToMaintenanceWindowResponsePtrOutput() MaintenanceWindowResponsePtrOutput {
	return o
}

func (o MaintenanceWindowResponsePtrOutput) ToMaintenanceWindowResponsePtrOutputWithContext(ctx context.Context) MaintenanceWindowResponsePtrOutput {
	return o
}

func (o MaintenanceWindowResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindowResponse] {
	return pulumix.Output[*MaintenanceWindowResponse]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceWindowResponsePtrOutput) Elem() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) MaintenanceWindowResponse {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindowResponse
		return ret
	}).(MaintenanceWindowResponseOutput)
}

// indicates whether custom window is enabled or disabled
func (o MaintenanceWindowResponsePtrOutput) CustomWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomWindow
	}).(pulumi.StringPtrOutput)
}

// day of week for maintenance window
func (o MaintenanceWindowResponsePtrOutput) DayOfWeek() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *int {
		if v == nil {
			return nil
		}
		return v.DayOfWeek
	}).(pulumi.IntPtrOutput)
}

// start hour for maintenance window
func (o MaintenanceWindowResponsePtrOutput) StartHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *int {
		if v == nil {
			return nil
		}
		return v.StartHour
	}).(pulumi.IntPtrOutput)
}

// start minute for maintenance window
func (o MaintenanceWindowResponsePtrOutput) StartMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindowResponse) *int {
		if v == nil {
			return nil
		}
		return v.StartMinute
	}).(pulumi.IntPtrOutput)
}

// Migration secret parameters.
type MigrationSecretParameters struct {
	// Admin credentials for source and target servers
	AdminCredentials AdminCredentials `pulumi:"adminCredentials"`
	// Gets or sets the username for the source server. This user need not be an admin.
	SourceServerUsername *string `pulumi:"sourceServerUsername"`
	// Gets or sets the username for the target server. This user need not be an admin.
	TargetServerUsername *string `pulumi:"targetServerUsername"`
}

// MigrationSecretParametersInput is an input type that accepts MigrationSecretParametersArgs and MigrationSecretParametersOutput values.
// You can construct a concrete instance of `MigrationSecretParametersInput` via:
//
//	MigrationSecretParametersArgs{...}
type MigrationSecretParametersInput interface {
	pulumi.Input

	ToMigrationSecretParametersOutput() MigrationSecretParametersOutput
	ToMigrationSecretParametersOutputWithContext(context.Context) MigrationSecretParametersOutput
}

// Migration secret parameters.
type MigrationSecretParametersArgs struct {
	// Admin credentials for source and target servers
	AdminCredentials AdminCredentialsInput `pulumi:"adminCredentials"`
	// Gets or sets the username for the source server. This user need not be an admin.
	SourceServerUsername pulumi.StringPtrInput `pulumi:"sourceServerUsername"`
	// Gets or sets the username for the target server. This user need not be an admin.
	TargetServerUsername pulumi.StringPtrInput `pulumi:"targetServerUsername"`
}

func (MigrationSecretParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationSecretParameters)(nil)).Elem()
}

func (i MigrationSecretParametersArgs) ToMigrationSecretParametersOutput() MigrationSecretParametersOutput {
	return i.ToMigrationSecretParametersOutputWithContext(context.Background())
}

func (i MigrationSecretParametersArgs) ToMigrationSecretParametersOutputWithContext(ctx context.Context) MigrationSecretParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationSecretParametersOutput)
}

func (i MigrationSecretParametersArgs) ToOutput(ctx context.Context) pulumix.Output[MigrationSecretParameters] {
	return pulumix.Output[MigrationSecretParameters]{
		OutputState: i.ToMigrationSecretParametersOutputWithContext(ctx).OutputState,
	}
}

func (i MigrationSecretParametersArgs) ToMigrationSecretParametersPtrOutput() MigrationSecretParametersPtrOutput {
	return i.ToMigrationSecretParametersPtrOutputWithContext(context.Background())
}

func (i MigrationSecretParametersArgs) ToMigrationSecretParametersPtrOutputWithContext(ctx context.Context) MigrationSecretParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationSecretParametersOutput).ToMigrationSecretParametersPtrOutputWithContext(ctx)
}

// MigrationSecretParametersPtrInput is an input type that accepts MigrationSecretParametersArgs, MigrationSecretParametersPtr and MigrationSecretParametersPtrOutput values.
// You can construct a concrete instance of `MigrationSecretParametersPtrInput` via:
//
//	        MigrationSecretParametersArgs{...}
//
//	or:
//
//	        nil
type MigrationSecretParametersPtrInput interface {
	pulumi.Input

	ToMigrationSecretParametersPtrOutput() MigrationSecretParametersPtrOutput
	ToMigrationSecretParametersPtrOutputWithContext(context.Context) MigrationSecretParametersPtrOutput
}

type migrationSecretParametersPtrType MigrationSecretParametersArgs

func MigrationSecretParametersPtr(v *MigrationSecretParametersArgs) MigrationSecretParametersPtrInput {
	return (*migrationSecretParametersPtrType)(v)
}

func (*migrationSecretParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationSecretParameters)(nil)).Elem()
}

func (i *migrationSecretParametersPtrType) ToMigrationSecretParametersPtrOutput() MigrationSecretParametersPtrOutput {
	return i.ToMigrationSecretParametersPtrOutputWithContext(context.Background())
}

func (i *migrationSecretParametersPtrType) ToMigrationSecretParametersPtrOutputWithContext(ctx context.Context) MigrationSecretParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationSecretParametersPtrOutput)
}

func (i *migrationSecretParametersPtrType) ToOutput(ctx context.Context) pulumix.Output[*MigrationSecretParameters] {
	return pulumix.Output[*MigrationSecretParameters]{
		OutputState: i.ToMigrationSecretParametersPtrOutputWithContext(ctx).OutputState,
	}
}

// Migration secret parameters.
type MigrationSecretParametersOutput struct{ *pulumi.OutputState }

func (MigrationSecretParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationSecretParameters)(nil)).Elem()
}

func (o MigrationSecretParametersOutput) ToMigrationSecretParametersOutput() MigrationSecretParametersOutput {
	return o
}

func (o MigrationSecretParametersOutput) ToMigrationSecretParametersOutputWithContext(ctx context.Context) MigrationSecretParametersOutput {
	return o
}

func (o MigrationSecretParametersOutput) ToMigrationSecretParametersPtrOutput() MigrationSecretParametersPtrOutput {
	return o.ToMigrationSecretParametersPtrOutputWithContext(context.Background())
}

func (o MigrationSecretParametersOutput) ToMigrationSecretParametersPtrOutputWithContext(ctx context.Context) MigrationSecretParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MigrationSecretParameters) *MigrationSecretParameters {
		return &v
	}).(MigrationSecretParametersPtrOutput)
}

func (o MigrationSecretParametersOutput) ToOutput(ctx context.Context) pulumix.Output[MigrationSecretParameters] {
	return pulumix.Output[MigrationSecretParameters]{
		OutputState: o.OutputState,
	}
}

// Admin credentials for source and target servers
func (o MigrationSecretParametersOutput) AdminCredentials() AdminCredentialsOutput {
	return o.ApplyT(func(v MigrationSecretParameters) AdminCredentials { return v.AdminCredentials }).(AdminCredentialsOutput)
}

// Gets or sets the username for the source server. This user need not be an admin.
func (o MigrationSecretParametersOutput) SourceServerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationSecretParameters) *string { return v.SourceServerUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the username for the target server. This user need not be an admin.
func (o MigrationSecretParametersOutput) TargetServerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MigrationSecretParameters) *string { return v.TargetServerUsername }).(pulumi.StringPtrOutput)
}

type MigrationSecretParametersPtrOutput struct{ *pulumi.OutputState }

func (MigrationSecretParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MigrationSecretParameters)(nil)).Elem()
}

func (o MigrationSecretParametersPtrOutput) ToMigrationSecretParametersPtrOutput() MigrationSecretParametersPtrOutput {
	return o
}

func (o MigrationSecretParametersPtrOutput) ToMigrationSecretParametersPtrOutputWithContext(ctx context.Context) MigrationSecretParametersPtrOutput {
	return o
}

func (o MigrationSecretParametersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MigrationSecretParameters] {
	return pulumix.Output[*MigrationSecretParameters]{
		OutputState: o.OutputState,
	}
}

func (o MigrationSecretParametersPtrOutput) Elem() MigrationSecretParametersOutput {
	return o.ApplyT(func(v *MigrationSecretParameters) MigrationSecretParameters {
		if v != nil {
			return *v
		}
		var ret MigrationSecretParameters
		return ret
	}).(MigrationSecretParametersOutput)
}

// Admin credentials for source and target servers
func (o MigrationSecretParametersPtrOutput) AdminCredentials() AdminCredentialsPtrOutput {
	return o.ApplyT(func(v *MigrationSecretParameters) *AdminCredentials {
		if v == nil {
			return nil
		}
		return &v.AdminCredentials
	}).(AdminCredentialsPtrOutput)
}

// Gets or sets the username for the source server. This user need not be an admin.
func (o MigrationSecretParametersPtrOutput) SourceServerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationSecretParameters) *string {
		if v == nil {
			return nil
		}
		return v.SourceServerUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the username for the target server. This user need not be an admin.
func (o MigrationSecretParametersPtrOutput) TargetServerUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MigrationSecretParameters) *string {
		if v == nil {
			return nil
		}
		return v.TargetServerUsername
	}).(pulumi.StringPtrOutput)
}

// Migration status.
type MigrationStatusResponse struct {
	// Current Migration sub state details.
	CurrentSubStateDetails MigrationSubStateDetailsResponse `pulumi:"currentSubStateDetails"`
	// Error message, if any, for the migration state
	Error string `pulumi:"error"`
	// State of migration
	State string `pulumi:"state"`
}

// Migration status.
type MigrationStatusResponseOutput struct{ *pulumi.OutputState }

func (MigrationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationStatusResponse)(nil)).Elem()
}

func (o MigrationStatusResponseOutput) ToMigrationStatusResponseOutput() MigrationStatusResponseOutput {
	return o
}

func (o MigrationStatusResponseOutput) ToMigrationStatusResponseOutputWithContext(ctx context.Context) MigrationStatusResponseOutput {
	return o
}

func (o MigrationStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MigrationStatusResponse] {
	return pulumix.Output[MigrationStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Current Migration sub state details.
func (o MigrationStatusResponseOutput) CurrentSubStateDetails() MigrationSubStateDetailsResponseOutput {
	return o.ApplyT(func(v MigrationStatusResponse) MigrationSubStateDetailsResponse { return v.CurrentSubStateDetails }).(MigrationSubStateDetailsResponseOutput)
}

// Error message, if any, for the migration state
func (o MigrationStatusResponseOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationStatusResponse) string { return v.Error }).(pulumi.StringOutput)
}

// State of migration
func (o MigrationStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Migration sub state details.
type MigrationSubStateDetailsResponse struct {
	// Migration sub state.
	CurrentSubState string                               `pulumi:"currentSubState"`
	DbDetails       map[string]DbMigrationStatusResponse `pulumi:"dbDetails"`
	// Details for the validation for migration
	ValidationDetails *ValidationDetailsResponse `pulumi:"validationDetails"`
}

// Migration sub state details.
type MigrationSubStateDetailsResponseOutput struct{ *pulumi.OutputState }

func (MigrationSubStateDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MigrationSubStateDetailsResponse)(nil)).Elem()
}

func (o MigrationSubStateDetailsResponseOutput) ToMigrationSubStateDetailsResponseOutput() MigrationSubStateDetailsResponseOutput {
	return o
}

func (o MigrationSubStateDetailsResponseOutput) ToMigrationSubStateDetailsResponseOutputWithContext(ctx context.Context) MigrationSubStateDetailsResponseOutput {
	return o
}

func (o MigrationSubStateDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MigrationSubStateDetailsResponse] {
	return pulumix.Output[MigrationSubStateDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// Migration sub state.
func (o MigrationSubStateDetailsResponseOutput) CurrentSubState() pulumi.StringOutput {
	return o.ApplyT(func(v MigrationSubStateDetailsResponse) string { return v.CurrentSubState }).(pulumi.StringOutput)
}

func (o MigrationSubStateDetailsResponseOutput) DbDetails() DbMigrationStatusResponseMapOutput {
	return o.ApplyT(func(v MigrationSubStateDetailsResponse) map[string]DbMigrationStatusResponse { return v.DbDetails }).(DbMigrationStatusResponseMapOutput)
}

// Details for the validation for migration
func (o MigrationSubStateDetailsResponseOutput) ValidationDetails() ValidationDetailsResponsePtrOutput {
	return o.ApplyT(func(v MigrationSubStateDetailsResponse) *ValidationDetailsResponse { return v.ValidationDetails }).(ValidationDetailsResponsePtrOutput)
}

// Network properties of a server.
type Network struct {
	// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
	DelegatedSubnetResourceId *string `pulumi:"delegatedSubnetResourceId"`
	// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
	PrivateDnsZoneArmResourceId *string `pulumi:"privateDnsZoneArmResourceId"`
	// public network access is enabled or not
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// NetworkInput is an input type that accepts NetworkArgs and NetworkOutput values.
// You can construct a concrete instance of `NetworkInput` via:
//
//	NetworkArgs{...}
type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(context.Context) NetworkOutput
}

// Network properties of a server.
type NetworkArgs struct {
	// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
	DelegatedSubnetResourceId pulumi.StringPtrInput `pulumi:"delegatedSubnetResourceId"`
	// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
	PrivateDnsZoneArmResourceId pulumi.StringPtrInput `pulumi:"privateDnsZoneArmResourceId"`
	// public network access is enabled or not
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (i NetworkArgs) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

func (i NetworkArgs) ToOutput(ctx context.Context) pulumix.Output[Network] {
	return pulumix.Output[Network]{
		OutputState: i.ToNetworkOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkArgs) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput).ToNetworkPtrOutputWithContext(ctx)
}

// NetworkPtrInput is an input type that accepts NetworkArgs, NetworkPtr and NetworkPtrOutput values.
// You can construct a concrete instance of `NetworkPtrInput` via:
//
//	        NetworkArgs{...}
//
//	or:
//
//	        nil
type NetworkPtrInput interface {
	pulumi.Input

	ToNetworkPtrOutput() NetworkPtrOutput
	ToNetworkPtrOutputWithContext(context.Context) NetworkPtrOutput
}

type networkPtrType NetworkArgs

func NetworkPtr(v *NetworkArgs) NetworkPtrInput {
	return (*networkPtrType)(v)
}

func (*networkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *networkPtrType) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i *networkPtrType) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPtrOutput)
}

func (i *networkPtrType) ToOutput(ctx context.Context) pulumix.Output[*Network] {
	return pulumix.Output[*Network]{
		OutputState: i.ToNetworkPtrOutputWithContext(ctx).OutputState,
	}
}

// Network properties of a server.
type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o.ToNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Network) *Network {
		return &v
	}).(NetworkPtrOutput)
}

func (o NetworkOutput) ToOutput(ctx context.Context) pulumix.Output[Network] {
	return pulumix.Output[Network]{
		OutputState: o.OutputState,
	}
}

// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkOutput) DelegatedSubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.DelegatedSubnetResourceId }).(pulumi.StringPtrOutput)
}

// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkOutput) PrivateDnsZoneArmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.PrivateDnsZoneArmResourceId }).(pulumi.StringPtrOutput)
}

// public network access is enabled or not
func (o NetworkOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type NetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkPtrOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Network] {
	return pulumix.Output[*Network]{
		OutputState: o.OutputState,
	}
}

func (o NetworkPtrOutput) Elem() NetworkOutput {
	return o.ApplyT(func(v *Network) Network {
		if v != nil {
			return *v
		}
		var ret Network
		return ret
	}).(NetworkOutput)
}

// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkPtrOutput) DelegatedSubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.DelegatedSubnetResourceId
	}).(pulumi.StringPtrOutput)
}

// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkPtrOutput) PrivateDnsZoneArmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.PrivateDnsZoneArmResourceId
	}).(pulumi.StringPtrOutput)
}

// public network access is enabled or not
func (o NetworkPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Network properties of a server.
type NetworkResponse struct {
	// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
	DelegatedSubnetResourceId *string `pulumi:"delegatedSubnetResourceId"`
	// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
	PrivateDnsZoneArmResourceId *string `pulumi:"privateDnsZoneArmResourceId"`
	// public network access is enabled or not
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// Network properties of a server.
type NetworkResponseOutput struct{ *pulumi.OutputState }

func (NetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkResponse)(nil)).Elem()
}

func (o NetworkResponseOutput) ToNetworkResponseOutput() NetworkResponseOutput {
	return o
}

func (o NetworkResponseOutput) ToNetworkResponseOutputWithContext(ctx context.Context) NetworkResponseOutput {
	return o
}

func (o NetworkResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkResponse] {
	return pulumix.Output[NetworkResponse]{
		OutputState: o.OutputState,
	}
}

// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkResponseOutput) DelegatedSubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkResponse) *string { return v.DelegatedSubnetResourceId }).(pulumi.StringPtrOutput)
}

// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkResponseOutput) PrivateDnsZoneArmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkResponse) *string { return v.PrivateDnsZoneArmResourceId }).(pulumi.StringPtrOutput)
}

// public network access is enabled or not
func (o NetworkResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type NetworkResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkResponse)(nil)).Elem()
}

func (o NetworkResponsePtrOutput) ToNetworkResponsePtrOutput() NetworkResponsePtrOutput {
	return o
}

func (o NetworkResponsePtrOutput) ToNetworkResponsePtrOutputWithContext(ctx context.Context) NetworkResponsePtrOutput {
	return o
}

func (o NetworkResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkResponse] {
	return pulumix.Output[*NetworkResponse]{
		OutputState: o.OutputState,
	}
}

func (o NetworkResponsePtrOutput) Elem() NetworkResponseOutput {
	return o.ApplyT(func(v *NetworkResponse) NetworkResponse {
		if v != nil {
			return *v
		}
		var ret NetworkResponse
		return ret
	}).(NetworkResponseOutput)
}

// Delegated subnet arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkResponsePtrOutput) DelegatedSubnetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkResponse) *string {
		if v == nil {
			return nil
		}
		return v.DelegatedSubnetResourceId
	}).(pulumi.StringPtrOutput)
}

// Private dns zone arm resource id. This is required to be passed during create, in case we want the server to be VNET injected, i.e. Private access server. During update, pass this only if we want to update the value for Private DNS zone.
func (o NetworkResponsePtrOutput) PrivateDnsZoneArmResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateDnsZoneArmResourceId
	}).(pulumi.StringPtrOutput)
}

// public network access is enabled or not
func (o NetworkResponsePtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// The private endpoint connection resource.
type PrivateEndpointConnectionResponse struct {
	// The group ids for the private endpoint resource.
	GroupIds []string `pulumi:"groupIds"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The private endpoint resource.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The private endpoint connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateEndpointConnectionResponse] {
	return pulumix.Output[PrivateEndpointConnectionResponse]{
		OutputState: o.OutputState,
	}
}

// The group ids for the private endpoint resource.
func (o PrivateEndpointConnectionResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The private endpoint resource.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrivateEndpointConnectionResponse] {
	return pulumix.Output[[]PrivateEndpointConnectionResponse]{
		OutputState: o.OutputState,
	}
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The private endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for private endpoint.
	Id string `pulumi:"id"`
}

// The private endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateEndpointResponse] {
	return pulumix.Output[PrivateEndpointResponse]{
		OutputState: o.OutputState,
	}
}

// The ARM identifier for private endpoint.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateEndpointResponse] {
	return pulumix.Output[*PrivateEndpointResponse]{
		OutputState: o.OutputState,
	}
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for private endpoint.
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkServiceConnectionState] {
	return pulumix.Output[PrivateLinkServiceConnectionState]{
		OutputState: i.ToPrivateLinkServiceConnectionStateOutputWithContext(ctx).OutputState,
	}
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkServiceConnectionState] {
	return pulumix.Output[PrivateLinkServiceConnectionState]{
		OutputState: o.OutputState,
	}
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkServiceConnectionStateResponse] {
	return pulumix.Output[PrivateLinkServiceConnectionStateResponse]{
		OutputState: o.OutputState,
	}
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Replica properties of a server
type Replica struct {
	// Sets the promote mode for a replica server. This is a write only property.
	PromoteMode *string `pulumi:"promoteMode"`
	// Sets the promote options for a replica server. This is a write only property.
	PromoteOption *string `pulumi:"promoteOption"`
	// Used to indicate role of the server in replication set.
	Role *string `pulumi:"role"`
}

// ReplicaInput is an input type that accepts ReplicaArgs and ReplicaOutput values.
// You can construct a concrete instance of `ReplicaInput` via:
//
//	ReplicaArgs{...}
type ReplicaInput interface {
	pulumi.Input

	ToReplicaOutput() ReplicaOutput
	ToReplicaOutputWithContext(context.Context) ReplicaOutput
}

// Replica properties of a server
type ReplicaArgs struct {
	// Sets the promote mode for a replica server. This is a write only property.
	PromoteMode pulumi.StringPtrInput `pulumi:"promoteMode"`
	// Sets the promote options for a replica server. This is a write only property.
	PromoteOption pulumi.StringPtrInput `pulumi:"promoteOption"`
	// Used to indicate role of the server in replication set.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Replica)(nil)).Elem()
}

func (i ReplicaArgs) ToReplicaOutput() ReplicaOutput {
	return i.ToReplicaOutputWithContext(context.Background())
}

func (i ReplicaArgs) ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaOutput)
}

func (i ReplicaArgs) ToOutput(ctx context.Context) pulumix.Output[Replica] {
	return pulumix.Output[Replica]{
		OutputState: i.ToReplicaOutputWithContext(ctx).OutputState,
	}
}

func (i ReplicaArgs) ToReplicaPtrOutput() ReplicaPtrOutput {
	return i.ToReplicaPtrOutputWithContext(context.Background())
}

func (i ReplicaArgs) ToReplicaPtrOutputWithContext(ctx context.Context) ReplicaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaOutput).ToReplicaPtrOutputWithContext(ctx)
}

// ReplicaPtrInput is an input type that accepts ReplicaArgs, ReplicaPtr and ReplicaPtrOutput values.
// You can construct a concrete instance of `ReplicaPtrInput` via:
//
//	        ReplicaArgs{...}
//
//	or:
//
//	        nil
type ReplicaPtrInput interface {
	pulumi.Input

	ToReplicaPtrOutput() ReplicaPtrOutput
	ToReplicaPtrOutputWithContext(context.Context) ReplicaPtrOutput
}

type replicaPtrType ReplicaArgs

func ReplicaPtr(v *ReplicaArgs) ReplicaPtrInput {
	return (*replicaPtrType)(v)
}

func (*replicaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Replica)(nil)).Elem()
}

func (i *replicaPtrType) ToReplicaPtrOutput() ReplicaPtrOutput {
	return i.ToReplicaPtrOutputWithContext(context.Background())
}

func (i *replicaPtrType) ToReplicaPtrOutputWithContext(ctx context.Context) ReplicaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaPtrOutput)
}

func (i *replicaPtrType) ToOutput(ctx context.Context) pulumix.Output[*Replica] {
	return pulumix.Output[*Replica]{
		OutputState: i.ToReplicaPtrOutputWithContext(ctx).OutputState,
	}
}

// Replica properties of a server
type ReplicaOutput struct{ *pulumi.OutputState }

func (ReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Replica)(nil)).Elem()
}

func (o ReplicaOutput) ToReplicaOutput() ReplicaOutput {
	return o
}

func (o ReplicaOutput) ToReplicaOutputWithContext(ctx context.Context) ReplicaOutput {
	return o
}

func (o ReplicaOutput) ToReplicaPtrOutput() ReplicaPtrOutput {
	return o.ToReplicaPtrOutputWithContext(context.Background())
}

func (o ReplicaOutput) ToReplicaPtrOutputWithContext(ctx context.Context) ReplicaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Replica) *Replica {
		return &v
	}).(ReplicaPtrOutput)
}

func (o ReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[Replica] {
	return pulumix.Output[Replica]{
		OutputState: o.OutputState,
	}
}

// Sets the promote mode for a replica server. This is a write only property.
func (o ReplicaOutput) PromoteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Replica) *string { return v.PromoteMode }).(pulumi.StringPtrOutput)
}

// Sets the promote options for a replica server. This is a write only property.
func (o ReplicaOutput) PromoteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Replica) *string { return v.PromoteOption }).(pulumi.StringPtrOutput)
}

// Used to indicate role of the server in replication set.
func (o ReplicaOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Replica) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ReplicaPtrOutput struct{ *pulumi.OutputState }

func (ReplicaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Replica)(nil)).Elem()
}

func (o ReplicaPtrOutput) ToReplicaPtrOutput() ReplicaPtrOutput {
	return o
}

func (o ReplicaPtrOutput) ToReplicaPtrOutputWithContext(ctx context.Context) ReplicaPtrOutput {
	return o
}

func (o ReplicaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Replica] {
	return pulumix.Output[*Replica]{
		OutputState: o.OutputState,
	}
}

func (o ReplicaPtrOutput) Elem() ReplicaOutput {
	return o.ApplyT(func(v *Replica) Replica {
		if v != nil {
			return *v
		}
		var ret Replica
		return ret
	}).(ReplicaOutput)
}

// Sets the promote mode for a replica server. This is a write only property.
func (o ReplicaPtrOutput) PromoteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Replica) *string {
		if v == nil {
			return nil
		}
		return v.PromoteMode
	}).(pulumi.StringPtrOutput)
}

// Sets the promote options for a replica server. This is a write only property.
func (o ReplicaPtrOutput) PromoteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Replica) *string {
		if v == nil {
			return nil
		}
		return v.PromoteOption
	}).(pulumi.StringPtrOutput)
}

// Used to indicate role of the server in replication set.
func (o ReplicaPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Replica) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Replica properties of a server
type ReplicaResponse struct {
	// Replicas allowed for a server.
	Capacity int `pulumi:"capacity"`
	// Gets the replication state of a replica server. This property is returned only for replicas api call. Supported values are Active, Catchup, Provisioning, Updating, Broken, Reconfiguring
	ReplicationState string `pulumi:"replicationState"`
	// Used to indicate role of the server in replication set.
	Role *string `pulumi:"role"`
}

// Replica properties of a server
type ReplicaResponseOutput struct{ *pulumi.OutputState }

func (ReplicaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaResponse)(nil)).Elem()
}

func (o ReplicaResponseOutput) ToReplicaResponseOutput() ReplicaResponseOutput {
	return o
}

func (o ReplicaResponseOutput) ToReplicaResponseOutputWithContext(ctx context.Context) ReplicaResponseOutput {
	return o
}

func (o ReplicaResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicaResponse] {
	return pulumix.Output[ReplicaResponse]{
		OutputState: o.OutputState,
	}
}

// Replicas allowed for a server.
func (o ReplicaResponseOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v ReplicaResponse) int { return v.Capacity }).(pulumi.IntOutput)
}

// Gets the replication state of a replica server. This property is returned only for replicas api call. Supported values are Active, Catchup, Provisioning, Updating, Broken, Reconfiguring
func (o ReplicaResponseOutput) ReplicationState() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaResponse) string { return v.ReplicationState }).(pulumi.StringOutput)
}

// Used to indicate role of the server in replication set.
func (o ReplicaResponseOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaResponse) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ReplicaResponsePtrOutput struct{ *pulumi.OutputState }

func (ReplicaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaResponse)(nil)).Elem()
}

func (o ReplicaResponsePtrOutput) ToReplicaResponsePtrOutput() ReplicaResponsePtrOutput {
	return o
}

func (o ReplicaResponsePtrOutput) ToReplicaResponsePtrOutputWithContext(ctx context.Context) ReplicaResponsePtrOutput {
	return o
}

func (o ReplicaResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReplicaResponse] {
	return pulumix.Output[*ReplicaResponse]{
		OutputState: o.OutputState,
	}
}

func (o ReplicaResponsePtrOutput) Elem() ReplicaResponseOutput {
	return o.ApplyT(func(v *ReplicaResponse) ReplicaResponse {
		if v != nil {
			return *v
		}
		var ret ReplicaResponse
		return ret
	}).(ReplicaResponseOutput)
}

// Replicas allowed for a server.
func (o ReplicaResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ReplicaResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Gets the replication state of a replica server. This property is returned only for replicas api call. Supported values are Active, Catchup, Provisioning, Updating, Broken, Reconfiguring
func (o ReplicaResponsePtrOutput) ReplicationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicaResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationState
	}).(pulumi.StringPtrOutput)
}

// Used to indicate role of the server in replication set.
func (o ReplicaResponsePtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicaResponse) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Sku information related properties of a server.
type ServerSkuResponse struct {
	// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
	Name *string `pulumi:"name"`
	// The tier of the particular SKU, e.g. Burstable.
	Tier *string `pulumi:"tier"`
}

// Sku information related properties of a server.
type ServerSkuResponseOutput struct{ *pulumi.OutputState }

func (ServerSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerSkuResponse)(nil)).Elem()
}

func (o ServerSkuResponseOutput) ToServerSkuResponseOutput() ServerSkuResponseOutput {
	return o
}

func (o ServerSkuResponseOutput) ToServerSkuResponseOutputWithContext(ctx context.Context) ServerSkuResponseOutput {
	return o
}

func (o ServerSkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServerSkuResponse] {
	return pulumix.Output[ServerSkuResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
func (o ServerSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The tier of the particular SKU, e.g. Burstable.
func (o ServerSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ServerSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerSkuResponse)(nil)).Elem()
}

func (o ServerSkuResponsePtrOutput) ToServerSkuResponsePtrOutput() ServerSkuResponsePtrOutput {
	return o
}

func (o ServerSkuResponsePtrOutput) ToServerSkuResponsePtrOutputWithContext(ctx context.Context) ServerSkuResponsePtrOutput {
	return o
}

func (o ServerSkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServerSkuResponse] {
	return pulumix.Output[*ServerSkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServerSkuResponsePtrOutput) Elem() ServerSkuResponseOutput {
	return o.ApplyT(func(v *ServerSkuResponse) ServerSkuResponse {
		if v != nil {
			return *v
		}
		var ret ServerSkuResponse
		return ret
	}).(ServerSkuResponseOutput)
}

// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
func (o ServerSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of the particular SKU, e.g. Burstable.
func (o ServerSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Sku information related properties of a server.
type Sku struct {
	// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
	Name string `pulumi:"name"`
	// The tier of the particular SKU, e.g. Burstable.
	Tier string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// Sku information related properties of a server.
type SkuArgs struct {
	// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
	Name pulumi.StringInput `pulumi:"name"`
	// The tier of the particular SKU, e.g. Burstable.
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: i.ToSkuOutputWithContext(ctx).OutputState,
	}
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

func (i *skuPtrType) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: i.ToSkuPtrOutputWithContext(ctx).OutputState,
	}
}

// Sku information related properties of a server.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

func (o SkuOutput) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: o.OutputState,
	}
}

// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of the particular SKU, e.g. Burstable.
func (o SkuOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: o.OutputState,
	}
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of the particular SKU, e.g. Burstable.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Sku information related properties of a server.
type SkuResponse struct {
	// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
	Name string `pulumi:"name"`
	// The tier of the particular SKU, e.g. Burstable.
	Tier string `pulumi:"tier"`
}

// Sku information related properties of a server.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SkuResponse] {
	return pulumix.Output[SkuResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The tier of the particular SKU, e.g. Burstable.
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SkuResponse] {
	return pulumix.Output[*SkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The tier of the particular SKU, e.g. Burstable.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Storage properties of a server
type Storage struct {
	// Flag to enable / disable Storage Auto grow for flexible server.
	AutoGrow *string `pulumi:"autoGrow"`
	// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
	Iops *int `pulumi:"iops"`
	// Max storage allowed for a server.
	StorageSizeGB *int `pulumi:"storageSizeGB"`
	// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
	Throughput *int `pulumi:"throughput"`
	// Name of storage tier for IOPS.
	Tier *string `pulumi:"tier"`
	// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
	Type *string `pulumi:"type"`
}

// StorageInput is an input type that accepts StorageArgs and StorageOutput values.
// You can construct a concrete instance of `StorageInput` via:
//
//	StorageArgs{...}
type StorageInput interface {
	pulumi.Input

	ToStorageOutput() StorageOutput
	ToStorageOutputWithContext(context.Context) StorageOutput
}

// Storage properties of a server
type StorageArgs struct {
	// Flag to enable / disable Storage Auto grow for flexible server.
	AutoGrow pulumi.StringPtrInput `pulumi:"autoGrow"`
	// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
	Iops pulumi.IntPtrInput `pulumi:"iops"`
	// Max storage allowed for a server.
	StorageSizeGB pulumi.IntPtrInput `pulumi:"storageSizeGB"`
	// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
	Throughput pulumi.IntPtrInput `pulumi:"throughput"`
	// Name of storage tier for IOPS.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
	// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (StorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Storage)(nil)).Elem()
}

func (i StorageArgs) ToStorageOutput() StorageOutput {
	return i.ToStorageOutputWithContext(context.Background())
}

func (i StorageArgs) ToStorageOutputWithContext(ctx context.Context) StorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOutput)
}

func (i StorageArgs) ToOutput(ctx context.Context) pulumix.Output[Storage] {
	return pulumix.Output[Storage]{
		OutputState: i.ToStorageOutputWithContext(ctx).OutputState,
	}
}

func (i StorageArgs) ToStoragePtrOutput() StoragePtrOutput {
	return i.ToStoragePtrOutputWithContext(context.Background())
}

func (i StorageArgs) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOutput).ToStoragePtrOutputWithContext(ctx)
}

// StoragePtrInput is an input type that accepts StorageArgs, StoragePtr and StoragePtrOutput values.
// You can construct a concrete instance of `StoragePtrInput` via:
//
//	        StorageArgs{...}
//
//	or:
//
//	        nil
type StoragePtrInput interface {
	pulumi.Input

	ToStoragePtrOutput() StoragePtrOutput
	ToStoragePtrOutputWithContext(context.Context) StoragePtrOutput
}

type storagePtrType StorageArgs

func StoragePtr(v *StorageArgs) StoragePtrInput {
	return (*storagePtrType)(v)
}

func (*storagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Storage)(nil)).Elem()
}

func (i *storagePtrType) ToStoragePtrOutput() StoragePtrOutput {
	return i.ToStoragePtrOutputWithContext(context.Background())
}

func (i *storagePtrType) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoragePtrOutput)
}

func (i *storagePtrType) ToOutput(ctx context.Context) pulumix.Output[*Storage] {
	return pulumix.Output[*Storage]{
		OutputState: i.ToStoragePtrOutputWithContext(ctx).OutputState,
	}
}

// Storage properties of a server
type StorageOutput struct{ *pulumi.OutputState }

func (StorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Storage)(nil)).Elem()
}

func (o StorageOutput) ToStorageOutput() StorageOutput {
	return o
}

func (o StorageOutput) ToStorageOutputWithContext(ctx context.Context) StorageOutput {
	return o
}

func (o StorageOutput) ToStoragePtrOutput() StoragePtrOutput {
	return o.ToStoragePtrOutputWithContext(context.Background())
}

func (o StorageOutput) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Storage) *Storage {
		return &v
	}).(StoragePtrOutput)
}

func (o StorageOutput) ToOutput(ctx context.Context) pulumix.Output[Storage] {
	return pulumix.Output[Storage]{
		OutputState: o.OutputState,
	}
}

// Flag to enable / disable Storage Auto grow for flexible server.
func (o StorageOutput) AutoGrow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Storage) *string { return v.AutoGrow }).(pulumi.StringPtrOutput)
}

// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
func (o StorageOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Storage) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Max storage allowed for a server.
func (o StorageOutput) StorageSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Storage) *int { return v.StorageSizeGB }).(pulumi.IntPtrOutput)
}

// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
func (o StorageOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Storage) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Name of storage tier for IOPS.
func (o StorageOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Storage) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
func (o StorageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Storage) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StoragePtrOutput struct{ *pulumi.OutputState }

func (StoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Storage)(nil)).Elem()
}

func (o StoragePtrOutput) ToStoragePtrOutput() StoragePtrOutput {
	return o
}

func (o StoragePtrOutput) ToStoragePtrOutputWithContext(ctx context.Context) StoragePtrOutput {
	return o
}

func (o StoragePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Storage] {
	return pulumix.Output[*Storage]{
		OutputState: o.OutputState,
	}
}

func (o StoragePtrOutput) Elem() StorageOutput {
	return o.ApplyT(func(v *Storage) Storage {
		if v != nil {
			return *v
		}
		var ret Storage
		return ret
	}).(StorageOutput)
}

// Flag to enable / disable Storage Auto grow for flexible server.
func (o StoragePtrOutput) AutoGrow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Storage) *string {
		if v == nil {
			return nil
		}
		return v.AutoGrow
	}).(pulumi.StringPtrOutput)
}

// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
func (o StoragePtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Storage) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// Max storage allowed for a server.
func (o StoragePtrOutput) StorageSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Storage) *int {
		if v == nil {
			return nil
		}
		return v.StorageSizeGB
	}).(pulumi.IntPtrOutput)
}

// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
func (o StoragePtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Storage) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// Name of storage tier for IOPS.
func (o StoragePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Storage) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
func (o StoragePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Storage) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Storage properties of a server
type StorageResponse struct {
	// Flag to enable / disable Storage Auto grow for flexible server.
	AutoGrow *string `pulumi:"autoGrow"`
	// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
	Iops *int `pulumi:"iops"`
	// Max storage allowed for a server.
	StorageSizeGB *int `pulumi:"storageSizeGB"`
	// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
	Throughput *int `pulumi:"throughput"`
	// Name of storage tier for IOPS.
	Tier *string `pulumi:"tier"`
	// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
	Type *string `pulumi:"type"`
}

// Storage properties of a server
type StorageResponseOutput struct{ *pulumi.OutputState }

func (StorageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageResponse)(nil)).Elem()
}

func (o StorageResponseOutput) ToStorageResponseOutput() StorageResponseOutput {
	return o
}

func (o StorageResponseOutput) ToStorageResponseOutputWithContext(ctx context.Context) StorageResponseOutput {
	return o
}

func (o StorageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StorageResponse] {
	return pulumix.Output[StorageResponse]{
		OutputState: o.OutputState,
	}
}

// Flag to enable / disable Storage Auto grow for flexible server.
func (o StorageResponseOutput) AutoGrow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageResponse) *string { return v.AutoGrow }).(pulumi.StringPtrOutput)
}

// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
func (o StorageResponseOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StorageResponse) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

// Max storage allowed for a server.
func (o StorageResponseOutput) StorageSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StorageResponse) *int { return v.StorageSizeGB }).(pulumi.IntPtrOutput)
}

// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
func (o StorageResponseOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StorageResponse) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

// Name of storage tier for IOPS.
func (o StorageResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
func (o StorageResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type StorageResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageResponse)(nil)).Elem()
}

func (o StorageResponsePtrOutput) ToStorageResponsePtrOutput() StorageResponsePtrOutput {
	return o
}

func (o StorageResponsePtrOutput) ToStorageResponsePtrOutputWithContext(ctx context.Context) StorageResponsePtrOutput {
	return o
}

func (o StorageResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*StorageResponse] {
	return pulumix.Output[*StorageResponse]{
		OutputState: o.OutputState,
	}
}

func (o StorageResponsePtrOutput) Elem() StorageResponseOutput {
	return o.ApplyT(func(v *StorageResponse) StorageResponse {
		if v != nil {
			return *v
		}
		var ret StorageResponse
		return ret
	}).(StorageResponseOutput)
}

// Flag to enable / disable Storage Auto grow for flexible server.
func (o StorageResponsePtrOutput) AutoGrow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoGrow
	}).(pulumi.StringPtrOutput)
}

// Storage tier IOPS quantity. This property is required to be set for storage Type PremiumV2_LRS
func (o StorageResponsePtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StorageResponse) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

// Max storage allowed for a server.
func (o StorageResponsePtrOutput) StorageSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StorageResponse) *int {
		if v == nil {
			return nil
		}
		return v.StorageSizeGB
	}).(pulumi.IntPtrOutput)
}

// Storage throughput for the server. This is required to be set for storage Type PremiumV2_LRS
func (o StorageResponsePtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StorageResponse) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

// Name of storage tier for IOPS.
func (o StorageResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Storage type for the server. Allowed values are Premium_LRS and PremiumV2_LRS, and default is Premium_LRS if not specified
func (o StorageResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Information describing the identities associated with this application.
type UserAssignedIdentity struct {
	// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
	Type string `pulumi:"type"`
	// represents user assigned identities map.
	UserAssignedIdentities map[string]UserIdentity `pulumi:"userAssignedIdentities"`
}

// UserAssignedIdentityInput is an input type that accepts UserAssignedIdentityArgs and UserAssignedIdentityOutput values.
// You can construct a concrete instance of `UserAssignedIdentityInput` via:
//
//	UserAssignedIdentityArgs{...}
type UserAssignedIdentityInput interface {
	pulumi.Input

	ToUserAssignedIdentityOutput() UserAssignedIdentityOutput
	ToUserAssignedIdentityOutputWithContext(context.Context) UserAssignedIdentityOutput
}

// Information describing the identities associated with this application.
type UserAssignedIdentityArgs struct {
	// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
	Type pulumi.StringInput `pulumi:"type"`
	// represents user assigned identities map.
	UserAssignedIdentities UserIdentityMapInput `pulumi:"userAssignedIdentities"`
}

func (UserAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return i.ToUserAssignedIdentityOutputWithContext(context.Background())
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityOutput)
}

func (i UserAssignedIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentity] {
	return pulumix.Output[UserAssignedIdentity]{
		OutputState: i.ToUserAssignedIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityPtrOutput() UserAssignedIdentityPtrOutput {
	return i.ToUserAssignedIdentityPtrOutputWithContext(context.Background())
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityOutput).ToUserAssignedIdentityPtrOutputWithContext(ctx)
}

// UserAssignedIdentityPtrInput is an input type that accepts UserAssignedIdentityArgs, UserAssignedIdentityPtr and UserAssignedIdentityPtrOutput values.
// You can construct a concrete instance of `UserAssignedIdentityPtrInput` via:
//
//	        UserAssignedIdentityArgs{...}
//
//	or:
//
//	        nil
type UserAssignedIdentityPtrInput interface {
	pulumi.Input

	ToUserAssignedIdentityPtrOutput() UserAssignedIdentityPtrOutput
	ToUserAssignedIdentityPtrOutputWithContext(context.Context) UserAssignedIdentityPtrOutput
}

type userAssignedIdentityPtrType UserAssignedIdentityArgs

func UserAssignedIdentityPtr(v *UserAssignedIdentityArgs) UserAssignedIdentityPtrInput {
	return (*userAssignedIdentityPtrType)(v)
}

func (*userAssignedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentity)(nil)).Elem()
}

func (i *userAssignedIdentityPtrType) ToUserAssignedIdentityPtrOutput() UserAssignedIdentityPtrOutput {
	return i.ToUserAssignedIdentityPtrOutputWithContext(context.Background())
}

func (i *userAssignedIdentityPtrType) ToUserAssignedIdentityPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityPtrOutput)
}

func (i *userAssignedIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserAssignedIdentity] {
	return pulumix.Output[*UserAssignedIdentity]{
		OutputState: i.ToUserAssignedIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Information describing the identities associated with this application.
type UserAssignedIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return o
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return o
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityPtrOutput() UserAssignedIdentityPtrOutput {
	return o.ToUserAssignedIdentityPtrOutputWithContext(context.Background())
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAssignedIdentity) *UserAssignedIdentity {
		return &v
	}).(UserAssignedIdentityPtrOutput)
}

func (o UserAssignedIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentity] {
	return pulumix.Output[UserAssignedIdentity]{
		OutputState: o.OutputState,
	}
}

// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
func (o UserAssignedIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// represents user assigned identities map.
func (o UserAssignedIdentityOutput) UserAssignedIdentities() UserIdentityMapOutput {
	return o.ApplyT(func(v UserAssignedIdentity) map[string]UserIdentity { return v.UserAssignedIdentities }).(UserIdentityMapOutput)
}

type UserAssignedIdentityPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityPtrOutput) ToUserAssignedIdentityPtrOutput() UserAssignedIdentityPtrOutput {
	return o
}

func (o UserAssignedIdentityPtrOutput) ToUserAssignedIdentityPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPtrOutput {
	return o
}

func (o UserAssignedIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserAssignedIdentity] {
	return pulumix.Output[*UserAssignedIdentity]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityPtrOutput) Elem() UserAssignedIdentityOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) UserAssignedIdentity {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentity
		return ret
	}).(UserAssignedIdentityOutput)
}

// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
func (o UserAssignedIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// represents user assigned identities map.
func (o UserAssignedIdentityPtrOutput) UserAssignedIdentities() UserIdentityMapOutput {
	return o.ApplyT(func(v *UserAssignedIdentity) map[string]UserIdentity {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityMapOutput)
}

// Information describing the identities associated with this application.
type UserAssignedIdentityResponse struct {
	// Tenant id of the server.
	TenantId string `pulumi:"tenantId"`
	// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
	Type string `pulumi:"type"`
	// represents user assigned identities map.
	UserAssignedIdentities map[string]UserIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Information describing the identities associated with this application.
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// Tenant id of the server.
func (o UserAssignedIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
func (o UserAssignedIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// represents user assigned identities map.
func (o UserAssignedIdentityResponseOutput) UserAssignedIdentities() UserIdentityResponseMapOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) map[string]UserIdentityResponse { return v.UserAssignedIdentities }).(UserIdentityResponseMapOutput)
}

type UserAssignedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponsePtrOutput) ToUserAssignedIdentityResponsePtrOutput() UserAssignedIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityResponsePtrOutput) ToUserAssignedIdentityResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserAssignedIdentityResponse] {
	return pulumix.Output[*UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponsePtrOutput) Elem() UserAssignedIdentityResponseOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) UserAssignedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentityResponse
		return ret
	}).(UserAssignedIdentityResponseOutput)
}

// Tenant id of the server.
func (o UserAssignedIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// the types of identities associated with this resource; currently restricted to 'None and UserAssigned'
func (o UserAssignedIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// represents user assigned identities map.
func (o UserAssignedIdentityResponsePtrOutput) UserAssignedIdentities() UserIdentityResponseMapOutput {
	return o.ApplyT(func(v *UserAssignedIdentityResponse) map[string]UserIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityResponseMapOutput)
}

// Describes a single user-assigned identity associated with the application.
type UserIdentity struct {
	// the client identifier of the Service Principal which this identity represents.
	ClientId *string `pulumi:"clientId"`
	// the object identifier of the Service Principal which this identity represents.
	PrincipalId *string `pulumi:"principalId"`
}

// UserIdentityInput is an input type that accepts UserIdentityArgs and UserIdentityOutput values.
// You can construct a concrete instance of `UserIdentityInput` via:
//
//	UserIdentityArgs{...}
type UserIdentityInput interface {
	pulumi.Input

	ToUserIdentityOutput() UserIdentityOutput
	ToUserIdentityOutputWithContext(context.Context) UserIdentityOutput
}

// Describes a single user-assigned identity associated with the application.
type UserIdentityArgs struct {
	// the client identifier of the Service Principal which this identity represents.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// the object identifier of the Service Principal which this identity represents.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (UserIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (i UserIdentityArgs) ToUserIdentityOutput() UserIdentityOutput {
	return i.ToUserIdentityOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput)
}

func (i UserIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[UserIdentity] {
	return pulumix.Output[UserIdentity]{
		OutputState: i.ToUserIdentityOutputWithContext(ctx).OutputState,
	}
}

// UserIdentityMapInput is an input type that accepts UserIdentityMap and UserIdentityMapOutput values.
// You can construct a concrete instance of `UserIdentityMapInput` via:
//
//	UserIdentityMap{ "key": UserIdentityArgs{...} }
type UserIdentityMapInput interface {
	pulumi.Input

	ToUserIdentityMapOutput() UserIdentityMapOutput
	ToUserIdentityMapOutputWithContext(context.Context) UserIdentityMapOutput
}

type UserIdentityMap map[string]UserIdentityInput

func (UserIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentity)(nil)).Elem()
}

func (i UserIdentityMap) ToUserIdentityMapOutput() UserIdentityMapOutput {
	return i.ToUserIdentityMapOutputWithContext(context.Background())
}

func (i UserIdentityMap) ToUserIdentityMapOutputWithContext(ctx context.Context) UserIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityMapOutput)
}

func (i UserIdentityMap) ToOutput(ctx context.Context) pulumix.Output[map[string]UserIdentity] {
	return pulumix.Output[map[string]UserIdentity]{
		OutputState: i.ToUserIdentityMapOutputWithContext(ctx).OutputState,
	}
}

// Describes a single user-assigned identity associated with the application.
type UserIdentityOutput struct{ *pulumi.OutputState }

func (UserIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (o UserIdentityOutput) ToUserIdentityOutput() UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[UserIdentity] {
	return pulumix.Output[UserIdentity]{
		OutputState: o.OutputState,
	}
}

// the client identifier of the Service Principal which this identity represents.
func (o UserIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// the object identifier of the Service Principal which this identity represents.
func (o UserIdentityOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentity) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityMapOutput struct{ *pulumi.OutputState }

func (UserIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentity)(nil)).Elem()
}

func (o UserIdentityMapOutput) ToUserIdentityMapOutput() UserIdentityMapOutput {
	return o
}

func (o UserIdentityMapOutput) ToUserIdentityMapOutputWithContext(ctx context.Context) UserIdentityMapOutput {
	return o
}

func (o UserIdentityMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserIdentity] {
	return pulumix.Output[map[string]UserIdentity]{
		OutputState: o.OutputState,
	}
}

func (o UserIdentityMapOutput) MapIndex(k pulumi.StringInput) UserIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentity {
		return vs[0].(map[string]UserIdentity)[vs[1].(string)]
	}).(UserIdentityOutput)
}

// Describes a single user-assigned identity associated with the application.
type UserIdentityResponse struct {
	// the client identifier of the Service Principal which this identity represents.
	ClientId *string `pulumi:"clientId"`
	// the object identifier of the Service Principal which this identity represents.
	PrincipalId *string `pulumi:"principalId"`
}

// Describes a single user-assigned identity associated with the application.
type UserIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserIdentityResponse] {
	return pulumix.Output[UserIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// the client identifier of the Service Principal which this identity represents.
func (o UserIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// the object identifier of the Service Principal which this identity represents.
func (o UserIdentityResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIdentityResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseMapOutput) ToUserIdentityResponseMapOutput() UserIdentityResponseMapOutput {
	return o
}

func (o UserIdentityResponseMapOutput) ToUserIdentityResponseMapOutputWithContext(ctx context.Context) UserIdentityResponseMapOutput {
	return o
}

func (o UserIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserIdentityResponse] {
	return pulumix.Output[map[string]UserIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityResponse {
		return vs[0].(map[string]UserIdentityResponse)[vs[1].(string)]
	}).(UserIdentityResponseOutput)
}

// Details for the validation for migration
type ValidationDetailsResponse struct {
	// Details of server level validations
	DbLevelValidationDetails []DbLevelValidationStatusResponse `pulumi:"dbLevelValidationDetails"`
	// Details of server level validations
	ServerLevelValidationDetails []ValidationSummaryItemResponse `pulumi:"serverLevelValidationDetails"`
	// Validation status for migration
	Status *string `pulumi:"status"`
	// Validation End date-time in UTC
	ValidationEndTimeInUtc *string `pulumi:"validationEndTimeInUtc"`
	// Validation Start date-time in UTC
	ValidationStartTimeInUtc *string `pulumi:"validationStartTimeInUtc"`
}

// Details for the validation for migration
type ValidationDetailsResponseOutput struct{ *pulumi.OutputState }

func (ValidationDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationDetailsResponse)(nil)).Elem()
}

func (o ValidationDetailsResponseOutput) ToValidationDetailsResponseOutput() ValidationDetailsResponseOutput {
	return o
}

func (o ValidationDetailsResponseOutput) ToValidationDetailsResponseOutputWithContext(ctx context.Context) ValidationDetailsResponseOutput {
	return o
}

func (o ValidationDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ValidationDetailsResponse] {
	return pulumix.Output[ValidationDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// Details of server level validations
func (o ValidationDetailsResponseOutput) DbLevelValidationDetails() DbLevelValidationStatusResponseArrayOutput {
	return o.ApplyT(func(v ValidationDetailsResponse) []DbLevelValidationStatusResponse { return v.DbLevelValidationDetails }).(DbLevelValidationStatusResponseArrayOutput)
}

// Details of server level validations
func (o ValidationDetailsResponseOutput) ServerLevelValidationDetails() ValidationSummaryItemResponseArrayOutput {
	return o.ApplyT(func(v ValidationDetailsResponse) []ValidationSummaryItemResponse {
		return v.ServerLevelValidationDetails
	}).(ValidationSummaryItemResponseArrayOutput)
}

// Validation status for migration
func (o ValidationDetailsResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationDetailsResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Validation End date-time in UTC
func (o ValidationDetailsResponseOutput) ValidationEndTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationDetailsResponse) *string { return v.ValidationEndTimeInUtc }).(pulumi.StringPtrOutput)
}

// Validation Start date-time in UTC
func (o ValidationDetailsResponseOutput) ValidationStartTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationDetailsResponse) *string { return v.ValidationStartTimeInUtc }).(pulumi.StringPtrOutput)
}

type ValidationDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidationDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationDetailsResponse)(nil)).Elem()
}

func (o ValidationDetailsResponsePtrOutput) ToValidationDetailsResponsePtrOutput() ValidationDetailsResponsePtrOutput {
	return o
}

func (o ValidationDetailsResponsePtrOutput) ToValidationDetailsResponsePtrOutputWithContext(ctx context.Context) ValidationDetailsResponsePtrOutput {
	return o
}

func (o ValidationDetailsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ValidationDetailsResponse] {
	return pulumix.Output[*ValidationDetailsResponse]{
		OutputState: o.OutputState,
	}
}

func (o ValidationDetailsResponsePtrOutput) Elem() ValidationDetailsResponseOutput {
	return o.ApplyT(func(v *ValidationDetailsResponse) ValidationDetailsResponse {
		if v != nil {
			return *v
		}
		var ret ValidationDetailsResponse
		return ret
	}).(ValidationDetailsResponseOutput)
}

// Details of server level validations
func (o ValidationDetailsResponsePtrOutput) DbLevelValidationDetails() DbLevelValidationStatusResponseArrayOutput {
	return o.ApplyT(func(v *ValidationDetailsResponse) []DbLevelValidationStatusResponse {
		if v == nil {
			return nil
		}
		return v.DbLevelValidationDetails
	}).(DbLevelValidationStatusResponseArrayOutput)
}

// Details of server level validations
func (o ValidationDetailsResponsePtrOutput) ServerLevelValidationDetails() ValidationSummaryItemResponseArrayOutput {
	return o.ApplyT(func(v *ValidationDetailsResponse) []ValidationSummaryItemResponse {
		if v == nil {
			return nil
		}
		return v.ServerLevelValidationDetails
	}).(ValidationSummaryItemResponseArrayOutput)
}

// Validation status for migration
func (o ValidationDetailsResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Validation End date-time in UTC
func (o ValidationDetailsResponsePtrOutput) ValidationEndTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationEndTimeInUtc
	}).(pulumi.StringPtrOutput)
}

// Validation Start date-time in UTC
func (o ValidationDetailsResponsePtrOutput) ValidationStartTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationStartTimeInUtc
	}).(pulumi.StringPtrOutput)
}

// Validation message object
type ValidationMessageResponse struct {
	// Validation message string
	Message *string `pulumi:"message"`
	// Severity of validation message
	State *string `pulumi:"state"`
}

// Validation message object
type ValidationMessageResponseOutput struct{ *pulumi.OutputState }

func (ValidationMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationMessageResponse)(nil)).Elem()
}

func (o ValidationMessageResponseOutput) ToValidationMessageResponseOutput() ValidationMessageResponseOutput {
	return o
}

func (o ValidationMessageResponseOutput) ToValidationMessageResponseOutputWithContext(ctx context.Context) ValidationMessageResponseOutput {
	return o
}

func (o ValidationMessageResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ValidationMessageResponse] {
	return pulumix.Output[ValidationMessageResponse]{
		OutputState: o.OutputState,
	}
}

// Validation message string
func (o ValidationMessageResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationMessageResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Severity of validation message
func (o ValidationMessageResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationMessageResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type ValidationMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidationMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationMessageResponse)(nil)).Elem()
}

func (o ValidationMessageResponseArrayOutput) ToValidationMessageResponseArrayOutput() ValidationMessageResponseArrayOutput {
	return o
}

func (o ValidationMessageResponseArrayOutput) ToValidationMessageResponseArrayOutputWithContext(ctx context.Context) ValidationMessageResponseArrayOutput {
	return o
}

func (o ValidationMessageResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ValidationMessageResponse] {
	return pulumix.Output[[]ValidationMessageResponse]{
		OutputState: o.OutputState,
	}
}

func (o ValidationMessageResponseArrayOutput) Index(i pulumi.IntInput) ValidationMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationMessageResponse {
		return vs[0].([]ValidationMessageResponse)[vs[1].(int)]
	}).(ValidationMessageResponseOutput)
}

// Validation summary object
type ValidationSummaryItemResponse struct {
	// Validation messages
	Messages []ValidationMessageResponse `pulumi:"messages"`
	// Validation status for migration
	State *string `pulumi:"state"`
	// Validation type
	Type *string `pulumi:"type"`
}

// Validation summary object
type ValidationSummaryItemResponseOutput struct{ *pulumi.OutputState }

func (ValidationSummaryItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationSummaryItemResponse)(nil)).Elem()
}

func (o ValidationSummaryItemResponseOutput) ToValidationSummaryItemResponseOutput() ValidationSummaryItemResponseOutput {
	return o
}

func (o ValidationSummaryItemResponseOutput) ToValidationSummaryItemResponseOutputWithContext(ctx context.Context) ValidationSummaryItemResponseOutput {
	return o
}

func (o ValidationSummaryItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ValidationSummaryItemResponse] {
	return pulumix.Output[ValidationSummaryItemResponse]{
		OutputState: o.OutputState,
	}
}

// Validation messages
func (o ValidationSummaryItemResponseOutput) Messages() ValidationMessageResponseArrayOutput {
	return o.ApplyT(func(v ValidationSummaryItemResponse) []ValidationMessageResponse { return v.Messages }).(ValidationMessageResponseArrayOutput)
}

// Validation status for migration
func (o ValidationSummaryItemResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationSummaryItemResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Validation type
func (o ValidationSummaryItemResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValidationSummaryItemResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ValidationSummaryItemResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidationSummaryItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationSummaryItemResponse)(nil)).Elem()
}

func (o ValidationSummaryItemResponseArrayOutput) ToValidationSummaryItemResponseArrayOutput() ValidationSummaryItemResponseArrayOutput {
	return o
}

func (o ValidationSummaryItemResponseArrayOutput) ToValidationSummaryItemResponseArrayOutputWithContext(ctx context.Context) ValidationSummaryItemResponseArrayOutput {
	return o
}

func (o ValidationSummaryItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ValidationSummaryItemResponse] {
	return pulumix.Output[[]ValidationSummaryItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o ValidationSummaryItemResponseArrayOutput) Index(i pulumi.IntInput) ValidationSummaryItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationSummaryItemResponse {
		return vs[0].([]ValidationSummaryItemResponse)[vs[1].(int)]
	}).(ValidationSummaryItemResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AdminCredentialsOutput{})
	pulumi.RegisterOutputType(AdminCredentialsPtrOutput{})
	pulumi.RegisterOutputType(AuthConfigOutput{})
	pulumi.RegisterOutputType(AuthConfigPtrOutput{})
	pulumi.RegisterOutputType(AuthConfigResponseOutput{})
	pulumi.RegisterOutputType(AuthConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupPtrOutput{})
	pulumi.RegisterOutputType(BackupResponseOutput{})
	pulumi.RegisterOutputType(BackupResponsePtrOutput{})
	pulumi.RegisterOutputType(DataEncryptionOutput{})
	pulumi.RegisterOutputType(DataEncryptionPtrOutput{})
	pulumi.RegisterOutputType(DataEncryptionResponseOutput{})
	pulumi.RegisterOutputType(DataEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(DbLevelValidationStatusResponseOutput{})
	pulumi.RegisterOutputType(DbLevelValidationStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(DbMigrationStatusResponseOutput{})
	pulumi.RegisterOutputType(DbMigrationStatusResponseMapOutput{})
	pulumi.RegisterOutputType(DbServerMetadataResponseOutput{})
	pulumi.RegisterOutputType(HighAvailabilityOutput{})
	pulumi.RegisterOutputType(HighAvailabilityPtrOutput{})
	pulumi.RegisterOutputType(HighAvailabilityResponseOutput{})
	pulumi.RegisterOutputType(HighAvailabilityResponsePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(MigrationSecretParametersOutput{})
	pulumi.RegisterOutputType(MigrationSecretParametersPtrOutput{})
	pulumi.RegisterOutputType(MigrationStatusResponseOutput{})
	pulumi.RegisterOutputType(MigrationSubStateDetailsResponseOutput{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkPtrOutput{})
	pulumi.RegisterOutputType(NetworkResponseOutput{})
	pulumi.RegisterOutputType(NetworkResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(ReplicaOutput{})
	pulumi.RegisterOutputType(ReplicaPtrOutput{})
	pulumi.RegisterOutputType(ReplicaResponseOutput{})
	pulumi.RegisterOutputType(ReplicaResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerSkuResponseOutput{})
	pulumi.RegisterOutputType(ServerSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageOutput{})
	pulumi.RegisterOutputType(StoragePtrOutput{})
	pulumi.RegisterOutputType(StorageResponseOutput{})
	pulumi.RegisterOutputType(StorageResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(UserIdentityOutput{})
	pulumi.RegisterOutputType(UserIdentityMapOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(ValidationDetailsResponseOutput{})
	pulumi.RegisterOutputType(ValidationDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidationMessageResponseOutput{})
	pulumi.RegisterOutputType(ValidationMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationSummaryItemResponseOutput{})
	pulumi.RegisterOutputType(ValidationSummaryItemResponseArrayOutput{})
}
