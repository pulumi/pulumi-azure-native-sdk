// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbforpostgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a Configuration.
//
// Uses Azure REST API version 2017-12-01.
type SingleServerConfiguration struct {
	pulumi.CustomResourceState

	// Allowed values of the configuration.
	AllowedValues pulumi.StringOutput `pulumi:"allowedValues"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Data type of the configuration.
	DataType pulumi.StringOutput `pulumi:"dataType"`
	// Default value of the configuration.
	DefaultValue pulumi.StringOutput `pulumi:"defaultValue"`
	// Description of the configuration.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Source of the configuration.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Value of the configuration.
	Value pulumi.StringPtrOutput `pulumi:"value"`
}

// NewSingleServerConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSingleServerConfiguration(ctx *pulumi.Context,
	name string, args *SingleServerConfigurationArgs, opts ...pulumi.ResourceOption) (*SingleServerConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201:Configuration"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201:SingleServerConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201preview:SingleServerConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SingleServerConfiguration
	err := ctx.RegisterResource("azure-native:dbforpostgresql:SingleServerConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSingleServerConfiguration gets an existing SingleServerConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleServerConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SingleServerConfigurationState, opts ...pulumi.ResourceOption) (*SingleServerConfiguration, error) {
	var resource SingleServerConfiguration
	err := ctx.ReadResource("azure-native:dbforpostgresql:SingleServerConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SingleServerConfiguration resources.
type singleServerConfigurationState struct {
}

type SingleServerConfigurationState struct {
}

func (SingleServerConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerConfigurationState)(nil)).Elem()
}

type singleServerConfigurationArgs struct {
	// The name of the server configuration.
	ConfigurationName *string `pulumi:"configurationName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// Source of the configuration.
	Source *string `pulumi:"source"`
	// Value of the configuration.
	Value *string `pulumi:"value"`
}

// The set of arguments for constructing a SingleServerConfiguration resource.
type SingleServerConfigurationArgs struct {
	// The name of the server configuration.
	ConfigurationName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// Source of the configuration.
	Source pulumi.StringPtrInput
	// Value of the configuration.
	Value pulumi.StringPtrInput
}

func (SingleServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerConfigurationArgs)(nil)).Elem()
}

type SingleServerConfigurationInput interface {
	pulumi.Input

	ToSingleServerConfigurationOutput() SingleServerConfigurationOutput
	ToSingleServerConfigurationOutputWithContext(ctx context.Context) SingleServerConfigurationOutput
}

func (*SingleServerConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerConfiguration)(nil)).Elem()
}

func (i *SingleServerConfiguration) ToSingleServerConfigurationOutput() SingleServerConfigurationOutput {
	return i.ToSingleServerConfigurationOutputWithContext(context.Background())
}

func (i *SingleServerConfiguration) ToSingleServerConfigurationOutputWithContext(ctx context.Context) SingleServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerConfigurationOutput)
}

type SingleServerConfigurationOutput struct{ *pulumi.OutputState }

func (SingleServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerConfiguration)(nil)).Elem()
}

func (o SingleServerConfigurationOutput) ToSingleServerConfigurationOutput() SingleServerConfigurationOutput {
	return o
}

func (o SingleServerConfigurationOutput) ToSingleServerConfigurationOutputWithContext(ctx context.Context) SingleServerConfigurationOutput {
	return o
}

// Allowed values of the configuration.
func (o SingleServerConfigurationOutput) AllowedValues() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.AllowedValues }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o SingleServerConfigurationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Data type of the configuration.
func (o SingleServerConfigurationOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.DataType }).(pulumi.StringOutput)
}

// Default value of the configuration.
func (o SingleServerConfigurationOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.DefaultValue }).(pulumi.StringOutput)
}

// Description of the configuration.
func (o SingleServerConfigurationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the resource
func (o SingleServerConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Source of the configuration.
func (o SingleServerConfigurationOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SingleServerConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Value of the configuration.
func (o SingleServerConfigurationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) pulumi.StringPtrOutput { return v.Value }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SingleServerConfigurationOutput{})
}
