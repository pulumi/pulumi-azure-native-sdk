// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220501preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a migration resource.
type Migration struct {
	pulumi.CustomResourceState

	// To trigger cancel for entire migration we need to send this flag as true
	Cancel pulumi.BoolPtrOutput `pulumi:"cancel"`
	// Migration status.
	CurrentStatus MigrationStatusResponseOutput `pulumi:"currentStatus"`
	// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
	DBsToCancelMigrationOn pulumi.StringArrayOutput `pulumi:"dBsToCancelMigrationOn"`
	DBsToMigrate           pulumi.StringArrayOutput `pulumi:"dBsToMigrate"`
	// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
	DBsToTiggerCutoverOn pulumi.StringArrayOutput `pulumi:"dBsToTiggerCutoverOn"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Migration details level.
	MigrationDetailsLevel pulumi.StringOutput `pulumi:"migrationDetailsLevel"`
	MigrationId           pulumi.StringOutput `pulumi:"migrationId"`
	// There are two types of migration modes Online and Offline
	MigrationMode                 pulumi.StringPtrOutput `pulumi:"migrationMode"`
	MigrationWindowStartTimeInUtc pulumi.StringPtrOutput `pulumi:"migrationWindowStartTimeInUtc"`
	// The name of the resource
	Name                                      pulumi.StringOutput    `pulumi:"name"`
	OverwriteDBsInTarget                      pulumi.BoolPtrOutput   `pulumi:"overwriteDBsInTarget"`
	SetupLogicalReplicationOnSourceDBIfNeeded pulumi.BoolPtrOutput   `pulumi:"setupLogicalReplicationOnSourceDBIfNeeded"`
	SourceDBServerFullyQualifiedDomainName    pulumi.StringPtrOutput `pulumi:"sourceDBServerFullyQualifiedDomainName"`
	// Database server metadata.
	SourceDBServerMetadata   DBServerMetadataResponseOutput `pulumi:"sourceDBServerMetadata"`
	SourceDBServerResourceId pulumi.StringPtrOutput         `pulumi:"sourceDBServerResourceId"`
	StartDataMigration       pulumi.BoolPtrOutput           `pulumi:"startDataMigration"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags                                   pulumi.StringMapOutput `pulumi:"tags"`
	TargetDBServerFullyQualifiedDomainName pulumi.StringPtrOutput `pulumi:"targetDBServerFullyQualifiedDomainName"`
	// Database server metadata.
	TargetDBServerMetadata   DBServerMetadataResponseOutput `pulumi:"targetDBServerMetadata"`
	TargetDBServerResourceId pulumi.StringOutput            `pulumi:"targetDBServerResourceId"`
	// To trigger cutover for entire migration we need to send this flag as true
	TriggerCutover pulumi.BoolPtrOutput `pulumi:"triggerCutover"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMigration registers a new resource with the given unique name, arguments, and options.
func NewMigration(ctx *pulumi.Context,
	name string, args *MigrationArgs, opts ...pulumi.ResourceOption) (*Migration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TargetDBServerName == nil {
		return nil, errors.New("invalid value for required argument 'TargetDBServerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dbforpostgresql:Migration"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20210615privatepreview:Migration"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20230301preview:Migration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Migration
	err := ctx.RegisterResource("azure-native:dbforpostgresql/v20220501preview:Migration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMigration gets an existing Migration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMigration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MigrationState, opts ...pulumi.ResourceOption) (*Migration, error) {
	var resource Migration
	err := ctx.ReadResource("azure-native:dbforpostgresql/v20220501preview:Migration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Migration resources.
type migrationState struct {
}

type MigrationState struct {
}

func (MigrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationState)(nil)).Elem()
}

type migrationArgs struct {
	// To trigger cancel for entire migration we need to send this flag as true
	Cancel *bool `pulumi:"cancel"`
	// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
	DBsToCancelMigrationOn []string `pulumi:"dBsToCancelMigrationOn"`
	DBsToMigrate           []string `pulumi:"dBsToMigrate"`
	// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
	DBsToTiggerCutoverOn []string `pulumi:"dBsToTiggerCutoverOn"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// There are two types of migration modes Online and Offline
	MigrationMode *string `pulumi:"migrationMode"`
	// The name of the migration.
	MigrationName                 *string `pulumi:"migrationName"`
	MigrationWindowStartTimeInUtc *string `pulumi:"migrationWindowStartTimeInUtc"`
	OverwriteDBsInTarget          *bool   `pulumi:"overwriteDBsInTarget"`
	// The resource group name of the target database server.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Migration secret parameters.
	SecretParameters                          *MigrationSecretParameters `pulumi:"secretParameters"`
	SetupLogicalReplicationOnSourceDBIfNeeded *bool                      `pulumi:"setupLogicalReplicationOnSourceDBIfNeeded"`
	SourceDBServerFullyQualifiedDomainName    *string                    `pulumi:"sourceDBServerFullyQualifiedDomainName"`
	SourceDBServerResourceId                  *string                    `pulumi:"sourceDBServerResourceId"`
	StartDataMigration                        *bool                      `pulumi:"startDataMigration"`
	// The subscription ID of the target database server.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Resource tags.
	Tags                                   map[string]string `pulumi:"tags"`
	TargetDBServerFullyQualifiedDomainName *string           `pulumi:"targetDBServerFullyQualifiedDomainName"`
	// The name of the target database server.
	TargetDBServerName string `pulumi:"targetDBServerName"`
	// To trigger cutover for entire migration we need to send this flag as true
	TriggerCutover *bool `pulumi:"triggerCutover"`
}

// The set of arguments for constructing a Migration resource.
type MigrationArgs struct {
	// To trigger cancel for entire migration we need to send this flag as true
	Cancel pulumi.BoolPtrInput
	// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
	DBsToCancelMigrationOn pulumi.StringArrayInput
	DBsToMigrate           pulumi.StringArrayInput
	// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
	DBsToTiggerCutoverOn pulumi.StringArrayInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// There are two types of migration modes Online and Offline
	MigrationMode pulumi.StringPtrInput
	// The name of the migration.
	MigrationName                 pulumi.StringPtrInput
	MigrationWindowStartTimeInUtc pulumi.StringPtrInput
	OverwriteDBsInTarget          pulumi.BoolPtrInput
	// The resource group name of the target database server.
	ResourceGroupName pulumi.StringInput
	// Migration secret parameters.
	SecretParameters                          MigrationSecretParametersPtrInput
	SetupLogicalReplicationOnSourceDBIfNeeded pulumi.BoolPtrInput
	SourceDBServerFullyQualifiedDomainName    pulumi.StringPtrInput
	SourceDBServerResourceId                  pulumi.StringPtrInput
	StartDataMigration                        pulumi.BoolPtrInput
	// The subscription ID of the target database server.
	SubscriptionId pulumi.StringPtrInput
	// Resource tags.
	Tags                                   pulumi.StringMapInput
	TargetDBServerFullyQualifiedDomainName pulumi.StringPtrInput
	// The name of the target database server.
	TargetDBServerName pulumi.StringInput
	// To trigger cutover for entire migration we need to send this flag as true
	TriggerCutover pulumi.BoolPtrInput
}

func (MigrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*migrationArgs)(nil)).Elem()
}

type MigrationInput interface {
	pulumi.Input

	ToMigrationOutput() MigrationOutput
	ToMigrationOutputWithContext(ctx context.Context) MigrationOutput
}

func (*Migration) ElementType() reflect.Type {
	return reflect.TypeOf((**Migration)(nil)).Elem()
}

func (i *Migration) ToMigrationOutput() MigrationOutput {
	return i.ToMigrationOutputWithContext(context.Background())
}

func (i *Migration) ToMigrationOutputWithContext(ctx context.Context) MigrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MigrationOutput)
}

type MigrationOutput struct{ *pulumi.OutputState }

func (MigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Migration)(nil)).Elem()
}

func (o MigrationOutput) ToMigrationOutput() MigrationOutput {
	return o
}

func (o MigrationOutput) ToMigrationOutputWithContext(ctx context.Context) MigrationOutput {
	return o
}

// To trigger cancel for entire migration we need to send this flag as true
func (o MigrationOutput) Cancel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.BoolPtrOutput { return v.Cancel }).(pulumi.BoolPtrOutput)
}

// Migration status.
func (o MigrationOutput) CurrentStatus() MigrationStatusResponseOutput {
	return o.ApplyT(func(v *Migration) MigrationStatusResponseOutput { return v.CurrentStatus }).(MigrationStatusResponseOutput)
}

// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
func (o MigrationOutput) DBsToCancelMigrationOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringArrayOutput { return v.DBsToCancelMigrationOn }).(pulumi.StringArrayOutput)
}

func (o MigrationOutput) DBsToMigrate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringArrayOutput { return v.DBsToMigrate }).(pulumi.StringArrayOutput)
}

// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
func (o MigrationOutput) DBsToTiggerCutoverOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringArrayOutput { return v.DBsToTiggerCutoverOn }).(pulumi.StringArrayOutput)
}

// The geo-location where the resource lives
func (o MigrationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Migration details level.
func (o MigrationOutput) MigrationDetailsLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringOutput { return v.MigrationDetailsLevel }).(pulumi.StringOutput)
}

func (o MigrationOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringOutput { return v.MigrationId }).(pulumi.StringOutput)
}

// There are two types of migration modes Online and Offline
func (o MigrationOutput) MigrationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringPtrOutput { return v.MigrationMode }).(pulumi.StringPtrOutput)
}

func (o MigrationOutput) MigrationWindowStartTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringPtrOutput { return v.MigrationWindowStartTimeInUtc }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o MigrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MigrationOutput) OverwriteDBsInTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.BoolPtrOutput { return v.OverwriteDBsInTarget }).(pulumi.BoolPtrOutput)
}

func (o MigrationOutput) SetupLogicalReplicationOnSourceDBIfNeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.BoolPtrOutput { return v.SetupLogicalReplicationOnSourceDBIfNeeded }).(pulumi.BoolPtrOutput)
}

func (o MigrationOutput) SourceDBServerFullyQualifiedDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringPtrOutput { return v.SourceDBServerFullyQualifiedDomainName }).(pulumi.StringPtrOutput)
}

// Database server metadata.
func (o MigrationOutput) SourceDBServerMetadata() DBServerMetadataResponseOutput {
	return o.ApplyT(func(v *Migration) DBServerMetadataResponseOutput { return v.SourceDBServerMetadata }).(DBServerMetadataResponseOutput)
}

func (o MigrationOutput) SourceDBServerResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringPtrOutput { return v.SourceDBServerResourceId }).(pulumi.StringPtrOutput)
}

func (o MigrationOutput) StartDataMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.BoolPtrOutput { return v.StartDataMigration }).(pulumi.BoolPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o MigrationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Migration) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o MigrationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o MigrationOutput) TargetDBServerFullyQualifiedDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringPtrOutput { return v.TargetDBServerFullyQualifiedDomainName }).(pulumi.StringPtrOutput)
}

// Database server metadata.
func (o MigrationOutput) TargetDBServerMetadata() DBServerMetadataResponseOutput {
	return o.ApplyT(func(v *Migration) DBServerMetadataResponseOutput { return v.TargetDBServerMetadata }).(DBServerMetadataResponseOutput)
}

func (o MigrationOutput) TargetDBServerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringOutput { return v.TargetDBServerResourceId }).(pulumi.StringOutput)
}

// To trigger cutover for entire migration we need to send this flag as true
func (o MigrationOutput) TriggerCutover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Migration) pulumi.BoolPtrOutput { return v.TriggerCutover }).(pulumi.BoolPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o MigrationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Migration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MigrationOutput{})
}
