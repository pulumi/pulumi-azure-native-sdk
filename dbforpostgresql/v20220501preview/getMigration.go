// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a migration.
func LookupMigration(ctx *pulumi.Context, args *LookupMigrationArgs, opts ...pulumi.InvokeOption) (*LookupMigrationResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupMigrationResult
	err := ctx.Invoke("azure-native:dbforpostgresql/v20220501preview:getMigration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupMigrationArgs struct {
	// The name of the migration.
	MigrationName string `pulumi:"migrationName"`
	// The resource group name of the target database server.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The subscription ID of the target database server.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The name of the target database server.
	TargetDBServerName string `pulumi:"targetDBServerName"`
}

// Represents a migration resource.
type LookupMigrationResult struct {
	// To trigger cancel for entire migration we need to send this flag as true
	Cancel *bool `pulumi:"cancel"`
	// Migration status.
	CurrentStatus MigrationStatusResponse `pulumi:"currentStatus"`
	// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
	DBsToCancelMigrationOn []string `pulumi:"dBsToCancelMigrationOn"`
	DBsToMigrate           []string `pulumi:"dBsToMigrate"`
	// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
	DBsToTiggerCutoverOn []string `pulumi:"dBsToTiggerCutoverOn"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Migration details level.
	MigrationDetailsLevel string `pulumi:"migrationDetailsLevel"`
	MigrationId           string `pulumi:"migrationId"`
	// There are two types of migration modes Online and Offline
	MigrationMode                 *string `pulumi:"migrationMode"`
	MigrationWindowStartTimeInUtc *string `pulumi:"migrationWindowStartTimeInUtc"`
	// The name of the resource
	Name                                      string  `pulumi:"name"`
	OverwriteDBsInTarget                      *bool   `pulumi:"overwriteDBsInTarget"`
	SetupLogicalReplicationOnSourceDBIfNeeded *bool   `pulumi:"setupLogicalReplicationOnSourceDBIfNeeded"`
	SourceDBServerFullyQualifiedDomainName    *string `pulumi:"sourceDBServerFullyQualifiedDomainName"`
	// Database server metadata.
	SourceDBServerMetadata   DBServerMetadataResponse `pulumi:"sourceDBServerMetadata"`
	SourceDBServerResourceId *string                  `pulumi:"sourceDBServerResourceId"`
	StartDataMigration       *bool                    `pulumi:"startDataMigration"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags                                   map[string]string `pulumi:"tags"`
	TargetDBServerFullyQualifiedDomainName *string           `pulumi:"targetDBServerFullyQualifiedDomainName"`
	// Database server metadata.
	TargetDBServerMetadata   DBServerMetadataResponse `pulumi:"targetDBServerMetadata"`
	TargetDBServerResourceId string                   `pulumi:"targetDBServerResourceId"`
	// To trigger cutover for entire migration we need to send this flag as true
	TriggerCutover *bool `pulumi:"triggerCutover"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupMigrationOutput(ctx *pulumi.Context, args LookupMigrationOutputArgs, opts ...pulumi.InvokeOption) LookupMigrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMigrationResult, error) {
			args := v.(LookupMigrationArgs)
			r, err := LookupMigration(ctx, &args, opts...)
			var s LookupMigrationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMigrationResultOutput)
}

type LookupMigrationOutputArgs struct {
	// The name of the migration.
	MigrationName pulumi.StringInput `pulumi:"migrationName"`
	// The resource group name of the target database server.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The subscription ID of the target database server.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// The name of the target database server.
	TargetDBServerName pulumi.StringInput `pulumi:"targetDBServerName"`
}

func (LookupMigrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMigrationArgs)(nil)).Elem()
}

// Represents a migration resource.
type LookupMigrationResultOutput struct{ *pulumi.OutputState }

func (LookupMigrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMigrationResult)(nil)).Elem()
}

func (o LookupMigrationResultOutput) ToLookupMigrationResultOutput() LookupMigrationResultOutput {
	return o
}

func (o LookupMigrationResultOutput) ToLookupMigrationResultOutputWithContext(ctx context.Context) LookupMigrationResultOutput {
	return o
}

func (o LookupMigrationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMigrationResult] {
	return pulumix.Output[LookupMigrationResult]{
		OutputState: o.OutputState,
	}
}

// To trigger cancel for entire migration we need to send this flag as true
func (o LookupMigrationResultOutput) Cancel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *bool { return v.Cancel }).(pulumi.BoolPtrOutput)
}

// Migration status.
func (o LookupMigrationResultOutput) CurrentStatus() MigrationStatusResponseOutput {
	return o.ApplyT(func(v LookupMigrationResult) MigrationStatusResponse { return v.CurrentStatus }).(MigrationStatusResponseOutput)
}

// When you want to trigger cancel for specific databases send triggerCutover flag as true and database names in this array
func (o LookupMigrationResultOutput) DBsToCancelMigrationOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMigrationResult) []string { return v.DBsToCancelMigrationOn }).(pulumi.StringArrayOutput)
}

func (o LookupMigrationResultOutput) DBsToMigrate() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMigrationResult) []string { return v.DBsToMigrate }).(pulumi.StringArrayOutput)
}

// When you want to trigger cutover for specific databases send triggerCutover flag as true and database names in this array
func (o LookupMigrationResultOutput) DBsToTiggerCutoverOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMigrationResult) []string { return v.DBsToTiggerCutoverOn }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupMigrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupMigrationResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.Location }).(pulumi.StringOutput)
}

// Migration details level.
func (o LookupMigrationResultOutput) MigrationDetailsLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.MigrationDetailsLevel }).(pulumi.StringOutput)
}

func (o LookupMigrationResultOutput) MigrationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.MigrationId }).(pulumi.StringOutput)
}

// There are two types of migration modes Online and Offline
func (o LookupMigrationResultOutput) MigrationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *string { return v.MigrationMode }).(pulumi.StringPtrOutput)
}

func (o LookupMigrationResultOutput) MigrationWindowStartTimeInUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *string { return v.MigrationWindowStartTimeInUtc }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupMigrationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMigrationResultOutput) OverwriteDBsInTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *bool { return v.OverwriteDBsInTarget }).(pulumi.BoolPtrOutput)
}

func (o LookupMigrationResultOutput) SetupLogicalReplicationOnSourceDBIfNeeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *bool { return v.SetupLogicalReplicationOnSourceDBIfNeeded }).(pulumi.BoolPtrOutput)
}

func (o LookupMigrationResultOutput) SourceDBServerFullyQualifiedDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *string { return v.SourceDBServerFullyQualifiedDomainName }).(pulumi.StringPtrOutput)
}

// Database server metadata.
func (o LookupMigrationResultOutput) SourceDBServerMetadata() DBServerMetadataResponseOutput {
	return o.ApplyT(func(v LookupMigrationResult) DBServerMetadataResponse { return v.SourceDBServerMetadata }).(DBServerMetadataResponseOutput)
}

func (o LookupMigrationResultOutput) SourceDBServerResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *string { return v.SourceDBServerResourceId }).(pulumi.StringPtrOutput)
}

func (o LookupMigrationResultOutput) StartDataMigration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *bool { return v.StartDataMigration }).(pulumi.BoolPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupMigrationResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupMigrationResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupMigrationResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupMigrationResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupMigrationResultOutput) TargetDBServerFullyQualifiedDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *string { return v.TargetDBServerFullyQualifiedDomainName }).(pulumi.StringPtrOutput)
}

// Database server metadata.
func (o LookupMigrationResultOutput) TargetDBServerMetadata() DBServerMetadataResponseOutput {
	return o.ApplyT(func(v LookupMigrationResult) DBServerMetadataResponse { return v.TargetDBServerMetadata }).(DBServerMetadataResponseOutput)
}

func (o LookupMigrationResultOutput) TargetDBServerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.TargetDBServerResourceId }).(pulumi.StringOutput)
}

// To trigger cutover for entire migration we need to send this flag as true
func (o LookupMigrationResultOutput) TriggerCutover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupMigrationResult) *bool { return v.TriggerCutover }).(pulumi.BoolPtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupMigrationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMigrationResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMigrationResultOutput{})
}
