// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbforpostgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a AAD server administrator.
// Azure REST API version: 2017-12-01.
func LookupSingleServerServerAdministrator(ctx *pulumi.Context, args *LookupSingleServerServerAdministratorArgs, opts ...pulumi.InvokeOption) (*LookupSingleServerServerAdministratorResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSingleServerServerAdministratorResult
	err := ctx.Invoke("azure-native:dbforpostgresql:getSingleServerServerAdministrator", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSingleServerServerAdministratorArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
}

// Represents a and external administrator to be created.
type LookupSingleServerServerAdministratorResult struct {
	// The type of administrator.
	AdministratorType string `pulumi:"administratorType"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The server administrator login account name.
	Login string `pulumi:"login"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The server administrator Sid (Secure ID).
	Sid string `pulumi:"sid"`
	// The server Active Directory Administrator tenant id.
	TenantId string `pulumi:"tenantId"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupSingleServerServerAdministratorOutput(ctx *pulumi.Context, args LookupSingleServerServerAdministratorOutputArgs, opts ...pulumi.InvokeOption) LookupSingleServerServerAdministratorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSingleServerServerAdministratorResultOutput, error) {
			args := v.(LookupSingleServerServerAdministratorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:dbforpostgresql:getSingleServerServerAdministrator", args, LookupSingleServerServerAdministratorResultOutput{}, options).(LookupSingleServerServerAdministratorResultOutput), nil
		}).(LookupSingleServerServerAdministratorResultOutput)
}

type LookupSingleServerServerAdministratorOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName pulumi.StringInput `pulumi:"serverName"`
}

func (LookupSingleServerServerAdministratorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSingleServerServerAdministratorArgs)(nil)).Elem()
}

// Represents a and external administrator to be created.
type LookupSingleServerServerAdministratorResultOutput struct{ *pulumi.OutputState }

func (LookupSingleServerServerAdministratorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSingleServerServerAdministratorResult)(nil)).Elem()
}

func (o LookupSingleServerServerAdministratorResultOutput) ToLookupSingleServerServerAdministratorResultOutput() LookupSingleServerServerAdministratorResultOutput {
	return o
}

func (o LookupSingleServerServerAdministratorResultOutput) ToLookupSingleServerServerAdministratorResultOutputWithContext(ctx context.Context) LookupSingleServerServerAdministratorResultOutput {
	return o
}

// The type of administrator.
func (o LookupSingleServerServerAdministratorResultOutput) AdministratorType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.AdministratorType }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o LookupSingleServerServerAdministratorResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupSingleServerServerAdministratorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The server administrator login account name.
func (o LookupSingleServerServerAdministratorResultOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.Login }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSingleServerServerAdministratorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.Name }).(pulumi.StringOutput)
}

// The server administrator Sid (Secure ID).
func (o LookupSingleServerServerAdministratorResultOutput) Sid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.Sid }).(pulumi.StringOutput)
}

// The server Active Directory Administrator tenant id.
func (o LookupSingleServerServerAdministratorResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSingleServerServerAdministratorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSingleServerServerAdministratorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSingleServerServerAdministratorResultOutput{})
}
