// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbforpostgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A virtual network rule.
//
// Uses Azure REST API version 2017-12-01.
type SingleServerVirtualNetworkRule struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint pulumi.BoolPtrOutput `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Virtual Network Rule State
	State pulumi.StringOutput `pulumi:"state"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The ARM resource id of the virtual network subnet.
	VirtualNetworkSubnetId pulumi.StringOutput `pulumi:"virtualNetworkSubnetId"`
}

// NewSingleServerVirtualNetworkRule registers a new resource with the given unique name, arguments, and options.
func NewSingleServerVirtualNetworkRule(ctx *pulumi.Context,
	name string, args *SingleServerVirtualNetworkRuleArgs, opts ...pulumi.ResourceOption) (*SingleServerVirtualNetworkRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServerName == nil {
		return nil, errors.New("invalid value for required argument 'ServerName'")
	}
	if args.VirtualNetworkSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualNetworkSubnetId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201:SingleServerVirtualNetworkRule"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201:VirtualNetworkRule"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201preview:SingleServerVirtualNetworkRule"),
		},
		{
			Type: pulumi.String("azure-native:dbforpostgresql/v20171201preview:VirtualNetworkRule"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SingleServerVirtualNetworkRule
	err := ctx.RegisterResource("azure-native:dbforpostgresql:SingleServerVirtualNetworkRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSingleServerVirtualNetworkRule gets an existing SingleServerVirtualNetworkRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSingleServerVirtualNetworkRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SingleServerVirtualNetworkRuleState, opts ...pulumi.ResourceOption) (*SingleServerVirtualNetworkRule, error) {
	var resource SingleServerVirtualNetworkRule
	err := ctx.ReadResource("azure-native:dbforpostgresql:SingleServerVirtualNetworkRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SingleServerVirtualNetworkRule resources.
type singleServerVirtualNetworkRuleState struct {
}

type SingleServerVirtualNetworkRuleState struct {
}

func (SingleServerVirtualNetworkRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerVirtualNetworkRuleState)(nil)).Elem()
}

type singleServerVirtualNetworkRuleArgs struct {
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint *bool `pulumi:"ignoreMissingVnetServiceEndpoint"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the server.
	ServerName string `pulumi:"serverName"`
	// The name of the virtual network rule.
	VirtualNetworkRuleName *string `pulumi:"virtualNetworkRuleName"`
	// The ARM resource id of the virtual network subnet.
	VirtualNetworkSubnetId string `pulumi:"virtualNetworkSubnetId"`
}

// The set of arguments for constructing a SingleServerVirtualNetworkRule resource.
type SingleServerVirtualNetworkRuleArgs struct {
	// Create firewall rule before the virtual network has vnet service endpoint enabled.
	IgnoreMissingVnetServiceEndpoint pulumi.BoolPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the server.
	ServerName pulumi.StringInput
	// The name of the virtual network rule.
	VirtualNetworkRuleName pulumi.StringPtrInput
	// The ARM resource id of the virtual network subnet.
	VirtualNetworkSubnetId pulumi.StringInput
}

func (SingleServerVirtualNetworkRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*singleServerVirtualNetworkRuleArgs)(nil)).Elem()
}

type SingleServerVirtualNetworkRuleInput interface {
	pulumi.Input

	ToSingleServerVirtualNetworkRuleOutput() SingleServerVirtualNetworkRuleOutput
	ToSingleServerVirtualNetworkRuleOutputWithContext(ctx context.Context) SingleServerVirtualNetworkRuleOutput
}

func (*SingleServerVirtualNetworkRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerVirtualNetworkRule)(nil)).Elem()
}

func (i *SingleServerVirtualNetworkRule) ToSingleServerVirtualNetworkRuleOutput() SingleServerVirtualNetworkRuleOutput {
	return i.ToSingleServerVirtualNetworkRuleOutputWithContext(context.Background())
}

func (i *SingleServerVirtualNetworkRule) ToSingleServerVirtualNetworkRuleOutputWithContext(ctx context.Context) SingleServerVirtualNetworkRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerVirtualNetworkRuleOutput)
}

type SingleServerVirtualNetworkRuleOutput struct{ *pulumi.OutputState }

func (SingleServerVirtualNetworkRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerVirtualNetworkRule)(nil)).Elem()
}

func (o SingleServerVirtualNetworkRuleOutput) ToSingleServerVirtualNetworkRuleOutput() SingleServerVirtualNetworkRuleOutput {
	return o
}

func (o SingleServerVirtualNetworkRuleOutput) ToSingleServerVirtualNetworkRuleOutputWithContext(ctx context.Context) SingleServerVirtualNetworkRuleOutput {
	return o
}

// The Azure API version of the resource.
func (o SingleServerVirtualNetworkRuleOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerVirtualNetworkRule) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Create firewall rule before the virtual network has vnet service endpoint enabled.
func (o SingleServerVirtualNetworkRuleOutput) IgnoreMissingVnetServiceEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SingleServerVirtualNetworkRule) pulumi.BoolPtrOutput {
		return v.IgnoreMissingVnetServiceEndpoint
	}).(pulumi.BoolPtrOutput)
}

// The name of the resource
func (o SingleServerVirtualNetworkRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerVirtualNetworkRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Virtual Network Rule State
func (o SingleServerVirtualNetworkRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerVirtualNetworkRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SingleServerVirtualNetworkRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerVirtualNetworkRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ARM resource id of the virtual network subnet.
func (o SingleServerVirtualNetworkRuleOutput) VirtualNetworkSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SingleServerVirtualNetworkRule) pulumi.StringOutput { return v.VirtualNetworkSubnetId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SingleServerVirtualNetworkRuleOutput{})
}
