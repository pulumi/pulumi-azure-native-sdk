// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbforpostgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a cluster such as compute and storage configuration and cluster lifecycle metadata such as cluster creation date and time.
//
// Uses Azure REST API version 2023-03-02-preview.
//
// Other available API versions: 2022-11-08. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native dbforpostgresql [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupServerGroupCluster(ctx *pulumi.Context, args *LookupServerGroupClusterArgs, opts ...pulumi.InvokeOption) (*LookupServerGroupClusterResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupServerGroupClusterResult
	err := ctx.Invoke("azure-native:dbforpostgresql:getServerGroupCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupServerGroupClusterArgs struct {
	// The name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Represents a cluster.
type LookupServerGroupClusterResult struct {
	// Indicates whether the cluster was created using AAD authentication.
	AadAuthEnabled string `pulumi:"aadAuthEnabled"`
	// The administrator's login name of the servers in the cluster.
	AdministratorLogin string `pulumi:"administratorLogin"`
	// Authentication configuration of a cluster.
	AuthConfig *AuthConfigResponse `pulumi:"authConfig"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// The Citus extension version on all cluster servers.
	CitusVersion *string `pulumi:"citusVersion"`
	// If public access is enabled on coordinator.
	CoordinatorEnablePublicIpAccess *bool `pulumi:"coordinatorEnablePublicIpAccess"`
	// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
	CoordinatorServerEdition *string `pulumi:"coordinatorServerEdition"`
	// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorStorageQuotaInMb *int `pulumi:"coordinatorStorageQuotaInMb"`
	// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	CoordinatorVCores *int `pulumi:"coordinatorVCores"`
	// The data encryption properties of a cluster.
	DataEncryption *DataEncryptionResponse `pulumi:"dataEncryption"`
	// The database name of the cluster. Only one database per cluster is supported.
	DatabaseName *string `pulumi:"databaseName"`
	// The earliest restore point time (ISO8601 format) for the cluster.
	EarliestRestoreTime string `pulumi:"earliestRestoreTime"`
	// If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region. Enabled only at the time of cluster creation.
	EnableGeoBackup *bool `pulumi:"enableGeoBackup"`
	// If high availability (HA) is enabled or not for the cluster.
	EnableHa *bool `pulumi:"enableHa"`
	// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.
	EnableShardsOnCoordinator *bool `pulumi:"enableShardsOnCoordinator"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Describes the identity of the cluster.
	Identity *IdentityPropertiesResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Maintenance window of a cluster.
	MaintenanceWindow *MaintenanceWindowResponse `pulumi:"maintenanceWindow"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
	NodeCount *int `pulumi:"nodeCount"`
	// If public access is enabled on worker nodes.
	NodeEnablePublicIpAccess *bool `pulumi:"nodeEnablePublicIpAccess"`
	// The edition of a node server (default: MemoryOptimized).
	NodeServerEdition *string `pulumi:"nodeServerEdition"`
	// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeStorageQuotaInMb *int `pulumi:"nodeStorageQuotaInMb"`
	// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
	NodeVCores *int `pulumi:"nodeVCores"`
	// Indicates whether the cluster was created with a password or using AAD authentication.
	PasswordEnabled string `pulumi:"passwordEnabled"`
	// Date and time in UTC (ISO8601 format) for cluster restore.
	PointInTimeUTC *string `pulumi:"pointInTimeUTC"`
	// The major PostgreSQL version on all cluster servers.
	PostgresqlVersion *string `pulumi:"postgresqlVersion"`
	// Preferred primary availability zone (AZ) for all cluster servers.
	PreferredPrimaryZone *string `pulumi:"preferredPrimaryZone"`
	// The private endpoint connections for a cluster.
	PrivateEndpointConnections []SimplePrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// Provisioning state of the cluster
	ProvisioningState string `pulumi:"provisioningState"`
	// The array of read replica clusters.
	ReadReplicas []string `pulumi:"readReplicas"`
	// The list of server names in the cluster
	ServerNames []ServerNameItemResponse `pulumi:"serverNames"`
	// The Azure region of source cluster for read replica clusters.
	SourceLocation *string `pulumi:"sourceLocation"`
	// The resource id of source cluster for read replica clusters.
	SourceResourceId *string `pulumi:"sourceResourceId"`
	// A state of a cluster/server that is visible to user.
	State string `pulumi:"state"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupServerGroupClusterResult
func (val *LookupServerGroupClusterResult) Defaults() *LookupServerGroupClusterResult {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AuthConfig = tmp.AuthConfig.Defaults()

	return &tmp
}
func LookupServerGroupClusterOutput(ctx *pulumi.Context, args LookupServerGroupClusterOutputArgs, opts ...pulumi.InvokeOption) LookupServerGroupClusterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupServerGroupClusterResultOutput, error) {
			args := v.(LookupServerGroupClusterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:dbforpostgresql:getServerGroupCluster", args, LookupServerGroupClusterResultOutput{}, options).(LookupServerGroupClusterResultOutput), nil
		}).(LookupServerGroupClusterResultOutput)
}

type LookupServerGroupClusterOutputArgs struct {
	// The name of the cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupServerGroupClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerGroupClusterArgs)(nil)).Elem()
}

// Represents a cluster.
type LookupServerGroupClusterResultOutput struct{ *pulumi.OutputState }

func (LookupServerGroupClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerGroupClusterResult)(nil)).Elem()
}

func (o LookupServerGroupClusterResultOutput) ToLookupServerGroupClusterResultOutput() LookupServerGroupClusterResultOutput {
	return o
}

func (o LookupServerGroupClusterResultOutput) ToLookupServerGroupClusterResultOutputWithContext(ctx context.Context) LookupServerGroupClusterResultOutput {
	return o
}

// Indicates whether the cluster was created using AAD authentication.
func (o LookupServerGroupClusterResultOutput) AadAuthEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.AadAuthEnabled }).(pulumi.StringOutput)
}

// The administrator's login name of the servers in the cluster.
func (o LookupServerGroupClusterResultOutput) AdministratorLogin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.AdministratorLogin }).(pulumi.StringOutput)
}

// Authentication configuration of a cluster.
func (o LookupServerGroupClusterResultOutput) AuthConfig() AuthConfigResponsePtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *AuthConfigResponse { return v.AuthConfig }).(AuthConfigResponsePtrOutput)
}

// The Azure API version of the resource.
func (o LookupServerGroupClusterResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The Citus extension version on all cluster servers.
func (o LookupServerGroupClusterResultOutput) CitusVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.CitusVersion }).(pulumi.StringPtrOutput)
}

// If public access is enabled on coordinator.
func (o LookupServerGroupClusterResultOutput) CoordinatorEnablePublicIpAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *bool { return v.CoordinatorEnablePublicIpAccess }).(pulumi.BoolPtrOutput)
}

// The edition of a coordinator server (default: GeneralPurpose). Required for creation.
func (o LookupServerGroupClusterResultOutput) CoordinatorServerEdition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.CoordinatorServerEdition }).(pulumi.StringPtrOutput)
}

// The storage of a server in MB. Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o LookupServerGroupClusterResultOutput) CoordinatorStorageQuotaInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *int { return v.CoordinatorStorageQuotaInMb }).(pulumi.IntPtrOutput)
}

// The vCores count of a server (max: 96). Required for creation. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o LookupServerGroupClusterResultOutput) CoordinatorVCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *int { return v.CoordinatorVCores }).(pulumi.IntPtrOutput)
}

// The data encryption properties of a cluster.
func (o LookupServerGroupClusterResultOutput) DataEncryption() DataEncryptionResponsePtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *DataEncryptionResponse { return v.DataEncryption }).(DataEncryptionResponsePtrOutput)
}

// The database name of the cluster. Only one database per cluster is supported.
func (o LookupServerGroupClusterResultOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The earliest restore point time (ISO8601 format) for the cluster.
func (o LookupServerGroupClusterResultOutput) EarliestRestoreTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.EarliestRestoreTime }).(pulumi.StringOutput)
}

// If cluster backup is stored in another Azure region in addition to the copy of the backup stored in the cluster's region. Enabled only at the time of cluster creation.
func (o LookupServerGroupClusterResultOutput) EnableGeoBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *bool { return v.EnableGeoBackup }).(pulumi.BoolPtrOutput)
}

// If high availability (HA) is enabled or not for the cluster.
func (o LookupServerGroupClusterResultOutput) EnableHa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *bool { return v.EnableHa }).(pulumi.BoolPtrOutput)
}

// If distributed tables are placed on coordinator or not. Should be set to 'true' on single node clusters. Requires shard rebalancing after value is changed.
func (o LookupServerGroupClusterResultOutput) EnableShardsOnCoordinator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *bool { return v.EnableShardsOnCoordinator }).(pulumi.BoolPtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupServerGroupClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Describes the identity of the cluster.
func (o LookupServerGroupClusterResultOutput) Identity() IdentityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *IdentityPropertiesResponse { return v.Identity }).(IdentityPropertiesResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupServerGroupClusterResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.Location }).(pulumi.StringOutput)
}

// Maintenance window of a cluster.
func (o LookupServerGroupClusterResultOutput) MaintenanceWindow() MaintenanceWindowResponsePtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *MaintenanceWindowResponse { return v.MaintenanceWindow }).(MaintenanceWindowResponsePtrOutput)
}

// The name of the resource
func (o LookupServerGroupClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// Worker node count of the cluster. When node count is 0, it represents a single node configuration with the ability to create distributed tables on that node. 2 or more worker nodes represent multi-node configuration. Node count value cannot be 1. Required for creation.
func (o LookupServerGroupClusterResultOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// If public access is enabled on worker nodes.
func (o LookupServerGroupClusterResultOutput) NodeEnablePublicIpAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *bool { return v.NodeEnablePublicIpAccess }).(pulumi.BoolPtrOutput)
}

// The edition of a node server (default: MemoryOptimized).
func (o LookupServerGroupClusterResultOutput) NodeServerEdition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.NodeServerEdition }).(pulumi.StringPtrOutput)
}

// The storage in MB on each worker node. See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o LookupServerGroupClusterResultOutput) NodeStorageQuotaInMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *int { return v.NodeStorageQuotaInMb }).(pulumi.IntPtrOutput)
}

// The compute in vCores on each worker node (max: 104). See https://learn.microsoft.com/azure/cosmos-db/postgresql/resources-compute for more information.
func (o LookupServerGroupClusterResultOutput) NodeVCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *int { return v.NodeVCores }).(pulumi.IntPtrOutput)
}

// Indicates whether the cluster was created with a password or using AAD authentication.
func (o LookupServerGroupClusterResultOutput) PasswordEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.PasswordEnabled }).(pulumi.StringOutput)
}

// Date and time in UTC (ISO8601 format) for cluster restore.
func (o LookupServerGroupClusterResultOutput) PointInTimeUTC() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.PointInTimeUTC }).(pulumi.StringPtrOutput)
}

// The major PostgreSQL version on all cluster servers.
func (o LookupServerGroupClusterResultOutput) PostgresqlVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.PostgresqlVersion }).(pulumi.StringPtrOutput)
}

// Preferred primary availability zone (AZ) for all cluster servers.
func (o LookupServerGroupClusterResultOutput) PreferredPrimaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.PreferredPrimaryZone }).(pulumi.StringPtrOutput)
}

// The private endpoint connections for a cluster.
func (o LookupServerGroupClusterResultOutput) PrivateEndpointConnections() SimplePrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) []SimplePrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(SimplePrivateEndpointConnectionResponseArrayOutput)
}

// Provisioning state of the cluster
func (o LookupServerGroupClusterResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The array of read replica clusters.
func (o LookupServerGroupClusterResultOutput) ReadReplicas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) []string { return v.ReadReplicas }).(pulumi.StringArrayOutput)
}

// The list of server names in the cluster
func (o LookupServerGroupClusterResultOutput) ServerNames() ServerNameItemResponseArrayOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) []ServerNameItemResponse { return v.ServerNames }).(ServerNameItemResponseArrayOutput)
}

// The Azure region of source cluster for read replica clusters.
func (o LookupServerGroupClusterResultOutput) SourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.SourceLocation }).(pulumi.StringPtrOutput)
}

// The resource id of source cluster for read replica clusters.
func (o LookupServerGroupClusterResultOutput) SourceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) *string { return v.SourceResourceId }).(pulumi.StringPtrOutput)
}

// A state of a cluster/server that is visible to user.
func (o LookupServerGroupClusterResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.State }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupServerGroupClusterResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupServerGroupClusterResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupServerGroupClusterResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupClusterResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerGroupClusterResultOutput{})
}
