// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230502preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidation struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
}

// AllowedAudiencesValidationInput is an input type that accepts AllowedAudiencesValidationArgs and AllowedAudiencesValidationOutput values.
// You can construct a concrete instance of `AllowedAudiencesValidationInput` via:
//
//	AllowedAudiencesValidationArgs{...}
type AllowedAudiencesValidationInput interface {
	pulumi.Input

	ToAllowedAudiencesValidationOutput() AllowedAudiencesValidationOutput
	ToAllowedAudiencesValidationOutputWithContext(context.Context) AllowedAudiencesValidationOutput
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationArgs struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences pulumi.StringArrayInput `pulumi:"allowedAudiences"`
}

func (AllowedAudiencesValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedAudiencesValidation)(nil)).Elem()
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationOutput() AllowedAudiencesValidationOutput {
	return i.ToAllowedAudiencesValidationOutputWithContext(context.Background())
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationOutputWithContext(ctx context.Context) AllowedAudiencesValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedAudiencesValidationOutput)
}

func (i AllowedAudiencesValidationArgs) ToOutput(ctx context.Context) pulumix.Output[AllowedAudiencesValidation] {
	return pulumix.Output[AllowedAudiencesValidation]{
		OutputState: i.ToAllowedAudiencesValidationOutputWithContext(ctx).OutputState,
	}
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return i.ToAllowedAudiencesValidationPtrOutputWithContext(context.Background())
}

func (i AllowedAudiencesValidationArgs) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedAudiencesValidationOutput).ToAllowedAudiencesValidationPtrOutputWithContext(ctx)
}

// AllowedAudiencesValidationPtrInput is an input type that accepts AllowedAudiencesValidationArgs, AllowedAudiencesValidationPtr and AllowedAudiencesValidationPtrOutput values.
// You can construct a concrete instance of `AllowedAudiencesValidationPtrInput` via:
//
//	        AllowedAudiencesValidationArgs{...}
//
//	or:
//
//	        nil
type AllowedAudiencesValidationPtrInput interface {
	pulumi.Input

	ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput
	ToAllowedAudiencesValidationPtrOutputWithContext(context.Context) AllowedAudiencesValidationPtrOutput
}

type allowedAudiencesValidationPtrType AllowedAudiencesValidationArgs

func AllowedAudiencesValidationPtr(v *AllowedAudiencesValidationArgs) AllowedAudiencesValidationPtrInput {
	return (*allowedAudiencesValidationPtrType)(v)
}

func (*allowedAudiencesValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedAudiencesValidation)(nil)).Elem()
}

func (i *allowedAudiencesValidationPtrType) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return i.ToAllowedAudiencesValidationPtrOutputWithContext(context.Background())
}

func (i *allowedAudiencesValidationPtrType) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedAudiencesValidationPtrOutput)
}

func (i *allowedAudiencesValidationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AllowedAudiencesValidation] {
	return pulumix.Output[*AllowedAudiencesValidation]{
		OutputState: i.ToAllowedAudiencesValidationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedAudiencesValidation)(nil)).Elem()
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationOutput() AllowedAudiencesValidationOutput {
	return o
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationOutputWithContext(ctx context.Context) AllowedAudiencesValidationOutput {
	return o
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return o.ToAllowedAudiencesValidationPtrOutputWithContext(context.Background())
}

func (o AllowedAudiencesValidationOutput) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllowedAudiencesValidation) *AllowedAudiencesValidation {
		return &v
	}).(AllowedAudiencesValidationPtrOutput)
}

func (o AllowedAudiencesValidationOutput) ToOutput(ctx context.Context) pulumix.Output[AllowedAudiencesValidation] {
	return pulumix.Output[AllowedAudiencesValidation]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedAudiencesValidation) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

type AllowedAudiencesValidationPtrOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedAudiencesValidation)(nil)).Elem()
}

func (o AllowedAudiencesValidationPtrOutput) ToAllowedAudiencesValidationPtrOutput() AllowedAudiencesValidationPtrOutput {
	return o
}

func (o AllowedAudiencesValidationPtrOutput) ToAllowedAudiencesValidationPtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationPtrOutput {
	return o
}

func (o AllowedAudiencesValidationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AllowedAudiencesValidation] {
	return pulumix.Output[*AllowedAudiencesValidation]{
		OutputState: o.OutputState,
	}
}

func (o AllowedAudiencesValidationPtrOutput) Elem() AllowedAudiencesValidationOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidation) AllowedAudiencesValidation {
		if v != nil {
			return *v
		}
		var ret AllowedAudiencesValidation
		return ret
	}).(AllowedAudiencesValidationOutput)
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationPtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidation) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationResponse struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
}

// The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidationResponseOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedAudiencesValidationResponse)(nil)).Elem()
}

func (o AllowedAudiencesValidationResponseOutput) ToAllowedAudiencesValidationResponseOutput() AllowedAudiencesValidationResponseOutput {
	return o
}

func (o AllowedAudiencesValidationResponseOutput) ToAllowedAudiencesValidationResponseOutputWithContext(ctx context.Context) AllowedAudiencesValidationResponseOutput {
	return o
}

func (o AllowedAudiencesValidationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AllowedAudiencesValidationResponse] {
	return pulumix.Output[AllowedAudiencesValidationResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationResponseOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedAudiencesValidationResponse) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

type AllowedAudiencesValidationResponsePtrOutput struct{ *pulumi.OutputState }

func (AllowedAudiencesValidationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedAudiencesValidationResponse)(nil)).Elem()
}

func (o AllowedAudiencesValidationResponsePtrOutput) ToAllowedAudiencesValidationResponsePtrOutput() AllowedAudiencesValidationResponsePtrOutput {
	return o
}

func (o AllowedAudiencesValidationResponsePtrOutput) ToAllowedAudiencesValidationResponsePtrOutputWithContext(ctx context.Context) AllowedAudiencesValidationResponsePtrOutput {
	return o
}

func (o AllowedAudiencesValidationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AllowedAudiencesValidationResponse] {
	return pulumix.Output[*AllowedAudiencesValidationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AllowedAudiencesValidationResponsePtrOutput) Elem() AllowedAudiencesValidationResponseOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidationResponse) AllowedAudiencesValidationResponse {
		if v != nil {
			return *v
		}
		var ret AllowedAudiencesValidationResponse
		return ret
	}).(AllowedAudiencesValidationResponseOutput)
}

// The configuration settings of the allowed list of audiences from which to validate the JWT token.
func (o AllowedAudiencesValidationResponsePtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedAudiencesValidationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipals struct {
	// The list of the allowed groups.
	Groups []string `pulumi:"groups"`
	// The list of the allowed identities.
	Identities []string `pulumi:"identities"`
}

// AllowedPrincipalsInput is an input type that accepts AllowedPrincipalsArgs and AllowedPrincipalsOutput values.
// You can construct a concrete instance of `AllowedPrincipalsInput` via:
//
//	AllowedPrincipalsArgs{...}
type AllowedPrincipalsInput interface {
	pulumi.Input

	ToAllowedPrincipalsOutput() AllowedPrincipalsOutput
	ToAllowedPrincipalsOutputWithContext(context.Context) AllowedPrincipalsOutput
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsArgs struct {
	// The list of the allowed groups.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// The list of the allowed identities.
	Identities pulumi.StringArrayInput `pulumi:"identities"`
}

func (AllowedPrincipalsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedPrincipals)(nil)).Elem()
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsOutput() AllowedPrincipalsOutput {
	return i.ToAllowedPrincipalsOutputWithContext(context.Background())
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsOutputWithContext(ctx context.Context) AllowedPrincipalsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedPrincipalsOutput)
}

func (i AllowedPrincipalsArgs) ToOutput(ctx context.Context) pulumix.Output[AllowedPrincipals] {
	return pulumix.Output[AllowedPrincipals]{
		OutputState: i.ToAllowedPrincipalsOutputWithContext(ctx).OutputState,
	}
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return i.ToAllowedPrincipalsPtrOutputWithContext(context.Background())
}

func (i AllowedPrincipalsArgs) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedPrincipalsOutput).ToAllowedPrincipalsPtrOutputWithContext(ctx)
}

// AllowedPrincipalsPtrInput is an input type that accepts AllowedPrincipalsArgs, AllowedPrincipalsPtr and AllowedPrincipalsPtrOutput values.
// You can construct a concrete instance of `AllowedPrincipalsPtrInput` via:
//
//	        AllowedPrincipalsArgs{...}
//
//	or:
//
//	        nil
type AllowedPrincipalsPtrInput interface {
	pulumi.Input

	ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput
	ToAllowedPrincipalsPtrOutputWithContext(context.Context) AllowedPrincipalsPtrOutput
}

type allowedPrincipalsPtrType AllowedPrincipalsArgs

func AllowedPrincipalsPtr(v *AllowedPrincipalsArgs) AllowedPrincipalsPtrInput {
	return (*allowedPrincipalsPtrType)(v)
}

func (*allowedPrincipalsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedPrincipals)(nil)).Elem()
}

func (i *allowedPrincipalsPtrType) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return i.ToAllowedPrincipalsPtrOutputWithContext(context.Background())
}

func (i *allowedPrincipalsPtrType) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowedPrincipalsPtrOutput)
}

func (i *allowedPrincipalsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AllowedPrincipals] {
	return pulumix.Output[*AllowedPrincipals]{
		OutputState: i.ToAllowedPrincipalsPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedPrincipals)(nil)).Elem()
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsOutput() AllowedPrincipalsOutput {
	return o
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsOutputWithContext(ctx context.Context) AllowedPrincipalsOutput {
	return o
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return o.ToAllowedPrincipalsPtrOutputWithContext(context.Background())
}

func (o AllowedPrincipalsOutput) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllowedPrincipals) *AllowedPrincipals {
		return &v
	}).(AllowedPrincipalsPtrOutput)
}

func (o AllowedPrincipalsOutput) ToOutput(ctx context.Context) pulumix.Output[AllowedPrincipals] {
	return pulumix.Output[AllowedPrincipals]{
		OutputState: o.OutputState,
	}
}

// The list of the allowed groups.
func (o AllowedPrincipalsOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipals) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipals) []string { return v.Identities }).(pulumi.StringArrayOutput)
}

type AllowedPrincipalsPtrOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedPrincipals)(nil)).Elem()
}

func (o AllowedPrincipalsPtrOutput) ToAllowedPrincipalsPtrOutput() AllowedPrincipalsPtrOutput {
	return o
}

func (o AllowedPrincipalsPtrOutput) ToAllowedPrincipalsPtrOutputWithContext(ctx context.Context) AllowedPrincipalsPtrOutput {
	return o
}

func (o AllowedPrincipalsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AllowedPrincipals] {
	return pulumix.Output[*AllowedPrincipals]{
		OutputState: o.OutputState,
	}
}

func (o AllowedPrincipalsPtrOutput) Elem() AllowedPrincipalsOutput {
	return o.ApplyT(func(v *AllowedPrincipals) AllowedPrincipals {
		if v != nil {
			return *v
		}
		var ret AllowedPrincipals
		return ret
	}).(AllowedPrincipalsOutput)
}

// The list of the allowed groups.
func (o AllowedPrincipalsPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipals) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsPtrOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipals) []string {
		if v == nil {
			return nil
		}
		return v.Identities
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsResponse struct {
	// The list of the allowed groups.
	Groups []string `pulumi:"groups"`
	// The list of the allowed identities.
	Identities []string `pulumi:"identities"`
}

// The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipalsResponseOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowedPrincipalsResponse)(nil)).Elem()
}

func (o AllowedPrincipalsResponseOutput) ToAllowedPrincipalsResponseOutput() AllowedPrincipalsResponseOutput {
	return o
}

func (o AllowedPrincipalsResponseOutput) ToAllowedPrincipalsResponseOutputWithContext(ctx context.Context) AllowedPrincipalsResponseOutput {
	return o
}

func (o AllowedPrincipalsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AllowedPrincipalsResponse] {
	return pulumix.Output[AllowedPrincipalsResponse]{
		OutputState: o.OutputState,
	}
}

// The list of the allowed groups.
func (o AllowedPrincipalsResponseOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipalsResponse) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsResponseOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowedPrincipalsResponse) []string { return v.Identities }).(pulumi.StringArrayOutput)
}

type AllowedPrincipalsResponsePtrOutput struct{ *pulumi.OutputState }

func (AllowedPrincipalsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowedPrincipalsResponse)(nil)).Elem()
}

func (o AllowedPrincipalsResponsePtrOutput) ToAllowedPrincipalsResponsePtrOutput() AllowedPrincipalsResponsePtrOutput {
	return o
}

func (o AllowedPrincipalsResponsePtrOutput) ToAllowedPrincipalsResponsePtrOutputWithContext(ctx context.Context) AllowedPrincipalsResponsePtrOutput {
	return o
}

func (o AllowedPrincipalsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AllowedPrincipalsResponse] {
	return pulumix.Output[*AllowedPrincipalsResponse]{
		OutputState: o.OutputState,
	}
}

func (o AllowedPrincipalsResponsePtrOutput) Elem() AllowedPrincipalsResponseOutput {
	return o.ApplyT(func(v *AllowedPrincipalsResponse) AllowedPrincipalsResponse {
		if v != nil {
			return *v
		}
		var ret AllowedPrincipalsResponse
		return ret
	}).(AllowedPrincipalsResponseOutput)
}

// The list of the allowed groups.
func (o AllowedPrincipalsResponsePtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipalsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed identities.
func (o AllowedPrincipalsResponsePtrOutput) Identities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllowedPrincipalsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Identities
	}).(pulumi.StringArrayOutput)
}

// Configuration of application logs
type AppLogsConfiguration struct {
	// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
	Destination *string `pulumi:"destination"`
	// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
	LogAnalyticsConfiguration *LogAnalyticsConfiguration `pulumi:"logAnalyticsConfiguration"`
}

// AppLogsConfigurationInput is an input type that accepts AppLogsConfigurationArgs and AppLogsConfigurationOutput values.
// You can construct a concrete instance of `AppLogsConfigurationInput` via:
//
//	AppLogsConfigurationArgs{...}
type AppLogsConfigurationInput interface {
	pulumi.Input

	ToAppLogsConfigurationOutput() AppLogsConfigurationOutput
	ToAppLogsConfigurationOutputWithContext(context.Context) AppLogsConfigurationOutput
}

// Configuration of application logs
type AppLogsConfigurationArgs struct {
	// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
	LogAnalyticsConfiguration LogAnalyticsConfigurationPtrInput `pulumi:"logAnalyticsConfiguration"`
}

func (AppLogsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLogsConfiguration)(nil)).Elem()
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationOutput() AppLogsConfigurationOutput {
	return i.ToAppLogsConfigurationOutputWithContext(context.Background())
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationOutputWithContext(ctx context.Context) AppLogsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLogsConfigurationOutput)
}

func (i AppLogsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AppLogsConfiguration] {
	return pulumix.Output[AppLogsConfiguration]{
		OutputState: i.ToAppLogsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return i.ToAppLogsConfigurationPtrOutputWithContext(context.Background())
}

func (i AppLogsConfigurationArgs) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLogsConfigurationOutput).ToAppLogsConfigurationPtrOutputWithContext(ctx)
}

// AppLogsConfigurationPtrInput is an input type that accepts AppLogsConfigurationArgs, AppLogsConfigurationPtr and AppLogsConfigurationPtrOutput values.
// You can construct a concrete instance of `AppLogsConfigurationPtrInput` via:
//
//	        AppLogsConfigurationArgs{...}
//
//	or:
//
//	        nil
type AppLogsConfigurationPtrInput interface {
	pulumi.Input

	ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput
	ToAppLogsConfigurationPtrOutputWithContext(context.Context) AppLogsConfigurationPtrOutput
}

type appLogsConfigurationPtrType AppLogsConfigurationArgs

func AppLogsConfigurationPtr(v *AppLogsConfigurationArgs) AppLogsConfigurationPtrInput {
	return (*appLogsConfigurationPtrType)(v)
}

func (*appLogsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppLogsConfiguration)(nil)).Elem()
}

func (i *appLogsConfigurationPtrType) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return i.ToAppLogsConfigurationPtrOutputWithContext(context.Background())
}

func (i *appLogsConfigurationPtrType) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppLogsConfigurationPtrOutput)
}

func (i *appLogsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AppLogsConfiguration] {
	return pulumix.Output[*AppLogsConfiguration]{
		OutputState: i.ToAppLogsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration of application logs
type AppLogsConfigurationOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLogsConfiguration)(nil)).Elem()
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationOutput() AppLogsConfigurationOutput {
	return o
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationOutputWithContext(ctx context.Context) AppLogsConfigurationOutput {
	return o
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return o.ToAppLogsConfigurationPtrOutputWithContext(context.Background())
}

func (o AppLogsConfigurationOutput) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppLogsConfiguration) *AppLogsConfiguration {
		return &v
	}).(AppLogsConfigurationPtrOutput)
}

func (o AppLogsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AppLogsConfiguration] {
	return pulumix.Output[AppLogsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
func (o AppLogsConfigurationOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppLogsConfiguration) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
func (o AppLogsConfigurationOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationPtrOutput {
	return o.ApplyT(func(v AppLogsConfiguration) *LogAnalyticsConfiguration { return v.LogAnalyticsConfiguration }).(LogAnalyticsConfigurationPtrOutput)
}

type AppLogsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppLogsConfiguration)(nil)).Elem()
}

func (o AppLogsConfigurationPtrOutput) ToAppLogsConfigurationPtrOutput() AppLogsConfigurationPtrOutput {
	return o
}

func (o AppLogsConfigurationPtrOutput) ToAppLogsConfigurationPtrOutputWithContext(ctx context.Context) AppLogsConfigurationPtrOutput {
	return o
}

func (o AppLogsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppLogsConfiguration] {
	return pulumix.Output[*AppLogsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AppLogsConfigurationPtrOutput) Elem() AppLogsConfigurationOutput {
	return o.ApplyT(func(v *AppLogsConfiguration) AppLogsConfiguration {
		if v != nil {
			return *v
		}
		var ret AppLogsConfiguration
		return ret
	}).(AppLogsConfigurationOutput)
}

// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
func (o AppLogsConfigurationPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppLogsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
func (o AppLogsConfigurationPtrOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationPtrOutput {
	return o.ApplyT(func(v *AppLogsConfiguration) *LogAnalyticsConfiguration {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsConfiguration
	}).(LogAnalyticsConfigurationPtrOutput)
}

// Configuration of application logs
type AppLogsConfigurationResponse struct {
	// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
	Destination *string `pulumi:"destination"`
	// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
	LogAnalyticsConfiguration *LogAnalyticsConfigurationResponse `pulumi:"logAnalyticsConfiguration"`
}

// Configuration of application logs
type AppLogsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppLogsConfigurationResponse)(nil)).Elem()
}

func (o AppLogsConfigurationResponseOutput) ToAppLogsConfigurationResponseOutput() AppLogsConfigurationResponseOutput {
	return o
}

func (o AppLogsConfigurationResponseOutput) ToAppLogsConfigurationResponseOutputWithContext(ctx context.Context) AppLogsConfigurationResponseOutput {
	return o
}

func (o AppLogsConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AppLogsConfigurationResponse] {
	return pulumix.Output[AppLogsConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
func (o AppLogsConfigurationResponseOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppLogsConfigurationResponse) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
func (o AppLogsConfigurationResponseOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AppLogsConfigurationResponse) *LogAnalyticsConfigurationResponse {
		return v.LogAnalyticsConfiguration
	}).(LogAnalyticsConfigurationResponsePtrOutput)
}

type AppLogsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppLogsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppLogsConfigurationResponse)(nil)).Elem()
}

func (o AppLogsConfigurationResponsePtrOutput) ToAppLogsConfigurationResponsePtrOutput() AppLogsConfigurationResponsePtrOutput {
	return o
}

func (o AppLogsConfigurationResponsePtrOutput) ToAppLogsConfigurationResponsePtrOutputWithContext(ctx context.Context) AppLogsConfigurationResponsePtrOutput {
	return o
}

func (o AppLogsConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppLogsConfigurationResponse] {
	return pulumix.Output[*AppLogsConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AppLogsConfigurationResponsePtrOutput) Elem() AppLogsConfigurationResponseOutput {
	return o.ApplyT(func(v *AppLogsConfigurationResponse) AppLogsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AppLogsConfigurationResponse
		return ret
	}).(AppLogsConfigurationResponseOutput)
}

// Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'
func (o AppLogsConfigurationResponsePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppLogsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
func (o AppLogsConfigurationResponsePtrOutput) LogAnalyticsConfiguration() LogAnalyticsConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AppLogsConfigurationResponse) *LogAnalyticsConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalyticsConfiguration
	}).(LogAnalyticsConfigurationResponsePtrOutput)
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistration struct {
	// The App ID of the app used for login.
	AppId *string `pulumi:"appId"`
	// The app setting name that contains the app secret.
	AppSecretSettingName *string `pulumi:"appSecretSettingName"`
}

// AppRegistrationInput is an input type that accepts AppRegistrationArgs and AppRegistrationOutput values.
// You can construct a concrete instance of `AppRegistrationInput` via:
//
//	AppRegistrationArgs{...}
type AppRegistrationInput interface {
	pulumi.Input

	ToAppRegistrationOutput() AppRegistrationOutput
	ToAppRegistrationOutputWithContext(context.Context) AppRegistrationOutput
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationArgs struct {
	// The App ID of the app used for login.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// The app setting name that contains the app secret.
	AppSecretSettingName pulumi.StringPtrInput `pulumi:"appSecretSettingName"`
}

func (AppRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRegistration)(nil)).Elem()
}

func (i AppRegistrationArgs) ToAppRegistrationOutput() AppRegistrationOutput {
	return i.ToAppRegistrationOutputWithContext(context.Background())
}

func (i AppRegistrationArgs) ToAppRegistrationOutputWithContext(ctx context.Context) AppRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRegistrationOutput)
}

func (i AppRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[AppRegistration] {
	return pulumix.Output[AppRegistration]{
		OutputState: i.ToAppRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i AppRegistrationArgs) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return i.ToAppRegistrationPtrOutputWithContext(context.Background())
}

func (i AppRegistrationArgs) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRegistrationOutput).ToAppRegistrationPtrOutputWithContext(ctx)
}

// AppRegistrationPtrInput is an input type that accepts AppRegistrationArgs, AppRegistrationPtr and AppRegistrationPtrOutput values.
// You can construct a concrete instance of `AppRegistrationPtrInput` via:
//
//	        AppRegistrationArgs{...}
//
//	or:
//
//	        nil
type AppRegistrationPtrInput interface {
	pulumi.Input

	ToAppRegistrationPtrOutput() AppRegistrationPtrOutput
	ToAppRegistrationPtrOutputWithContext(context.Context) AppRegistrationPtrOutput
}

type appRegistrationPtrType AppRegistrationArgs

func AppRegistrationPtr(v *AppRegistrationArgs) AppRegistrationPtrInput {
	return (*appRegistrationPtrType)(v)
}

func (*appRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRegistration)(nil)).Elem()
}

func (i *appRegistrationPtrType) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return i.ToAppRegistrationPtrOutputWithContext(context.Background())
}

func (i *appRegistrationPtrType) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRegistrationPtrOutput)
}

func (i *appRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AppRegistration] {
	return pulumix.Output[*AppRegistration]{
		OutputState: i.ToAppRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationOutput struct{ *pulumi.OutputState }

func (AppRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRegistration)(nil)).Elem()
}

func (o AppRegistrationOutput) ToAppRegistrationOutput() AppRegistrationOutput {
	return o
}

func (o AppRegistrationOutput) ToAppRegistrationOutputWithContext(ctx context.Context) AppRegistrationOutput {
	return o
}

func (o AppRegistrationOutput) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return o.ToAppRegistrationPtrOutputWithContext(context.Background())
}

func (o AppRegistrationOutput) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppRegistration) *AppRegistration {
		return &v
	}).(AppRegistrationPtrOutput)
}

func (o AppRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[AppRegistration] {
	return pulumix.Output[AppRegistration]{
		OutputState: o.OutputState,
	}
}

// The App ID of the app used for login.
func (o AppRegistrationOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistration) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistration) *string { return v.AppSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AppRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRegistration)(nil)).Elem()
}

func (o AppRegistrationPtrOutput) ToAppRegistrationPtrOutput() AppRegistrationPtrOutput {
	return o
}

func (o AppRegistrationPtrOutput) ToAppRegistrationPtrOutputWithContext(ctx context.Context) AppRegistrationPtrOutput {
	return o
}

func (o AppRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppRegistration] {
	return pulumix.Output[*AppRegistration]{
		OutputState: o.OutputState,
	}
}

func (o AppRegistrationPtrOutput) Elem() AppRegistrationOutput {
	return o.ApplyT(func(v *AppRegistration) AppRegistration {
		if v != nil {
			return *v
		}
		var ret AppRegistration
		return ret
	}).(AppRegistrationOutput)
}

// The App ID of the app used for login.
func (o AppRegistrationPtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistration) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationPtrOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistration) *string {
		if v == nil {
			return nil
		}
		return v.AppSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationResponse struct {
	// The App ID of the app used for login.
	AppId *string `pulumi:"appId"`
	// The app setting name that contains the app secret.
	AppSecretSettingName *string `pulumi:"appSecretSettingName"`
}

// The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AppRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRegistrationResponse)(nil)).Elem()
}

func (o AppRegistrationResponseOutput) ToAppRegistrationResponseOutput() AppRegistrationResponseOutput {
	return o
}

func (o AppRegistrationResponseOutput) ToAppRegistrationResponseOutputWithContext(ctx context.Context) AppRegistrationResponseOutput {
	return o
}

func (o AppRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AppRegistrationResponse] {
	return pulumix.Output[AppRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The App ID of the app used for login.
func (o AppRegistrationResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistrationResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationResponseOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppRegistrationResponse) *string { return v.AppSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRegistrationResponse)(nil)).Elem()
}

func (o AppRegistrationResponsePtrOutput) ToAppRegistrationResponsePtrOutput() AppRegistrationResponsePtrOutput {
	return o
}

func (o AppRegistrationResponsePtrOutput) ToAppRegistrationResponsePtrOutputWithContext(ctx context.Context) AppRegistrationResponsePtrOutput {
	return o
}

func (o AppRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppRegistrationResponse] {
	return pulumix.Output[*AppRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AppRegistrationResponsePtrOutput) Elem() AppRegistrationResponseOutput {
	return o.ApplyT(func(v *AppRegistrationResponse) AppRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AppRegistrationResponse
		return ret
	}).(AppRegistrationResponseOutput)
}

// The App ID of the app used for login.
func (o AppRegistrationResponsePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the app secret.
func (o AppRegistrationResponsePtrOutput) AppSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Apple provider.
type Apple struct {
	// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the Apple registration.
	Registration *AppleRegistration `pulumi:"registration"`
}

// AppleInput is an input type that accepts AppleArgs and AppleOutput values.
// You can construct a concrete instance of `AppleInput` via:
//
//	AppleArgs{...}
type AppleInput interface {
	pulumi.Input

	ToAppleOutput() AppleOutput
	ToAppleOutputWithContext(context.Context) AppleOutput
}

// The configuration settings of the Apple provider.
type AppleArgs struct {
	// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the Apple registration.
	Registration AppleRegistrationPtrInput `pulumi:"registration"`
}

func (AppleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Apple)(nil)).Elem()
}

func (i AppleArgs) ToAppleOutput() AppleOutput {
	return i.ToAppleOutputWithContext(context.Background())
}

func (i AppleArgs) ToAppleOutputWithContext(ctx context.Context) AppleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleOutput)
}

func (i AppleArgs) ToOutput(ctx context.Context) pulumix.Output[Apple] {
	return pulumix.Output[Apple]{
		OutputState: i.ToAppleOutputWithContext(ctx).OutputState,
	}
}

func (i AppleArgs) ToApplePtrOutput() ApplePtrOutput {
	return i.ToApplePtrOutputWithContext(context.Background())
}

func (i AppleArgs) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleOutput).ToApplePtrOutputWithContext(ctx)
}

// ApplePtrInput is an input type that accepts AppleArgs, ApplePtr and ApplePtrOutput values.
// You can construct a concrete instance of `ApplePtrInput` via:
//
//	        AppleArgs{...}
//
//	or:
//
//	        nil
type ApplePtrInput interface {
	pulumi.Input

	ToApplePtrOutput() ApplePtrOutput
	ToApplePtrOutputWithContext(context.Context) ApplePtrOutput
}

type applePtrType AppleArgs

func ApplePtr(v *AppleArgs) ApplePtrInput {
	return (*applePtrType)(v)
}

func (*applePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Apple)(nil)).Elem()
}

func (i *applePtrType) ToApplePtrOutput() ApplePtrOutput {
	return i.ToApplePtrOutputWithContext(context.Background())
}

func (i *applePtrType) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplePtrOutput)
}

func (i *applePtrType) ToOutput(ctx context.Context) pulumix.Output[*Apple] {
	return pulumix.Output[*Apple]{
		OutputState: i.ToApplePtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Apple provider.
type AppleOutput struct{ *pulumi.OutputState }

func (AppleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Apple)(nil)).Elem()
}

func (o AppleOutput) ToAppleOutput() AppleOutput {
	return o
}

func (o AppleOutput) ToAppleOutputWithContext(ctx context.Context) AppleOutput {
	return o
}

func (o AppleOutput) ToApplePtrOutput() ApplePtrOutput {
	return o.ToApplePtrOutputWithContext(context.Background())
}

func (o AppleOutput) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Apple) *Apple {
		return &v
	}).(ApplePtrOutput)
}

func (o AppleOutput) ToOutput(ctx context.Context) pulumix.Output[Apple] {
	return pulumix.Output[Apple]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AppleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Apple) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o AppleOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v Apple) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the Apple registration.
func (o AppleOutput) Registration() AppleRegistrationPtrOutput {
	return o.ApplyT(func(v Apple) *AppleRegistration { return v.Registration }).(AppleRegistrationPtrOutput)
}

type ApplePtrOutput struct{ *pulumi.OutputState }

func (ApplePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Apple)(nil)).Elem()
}

func (o ApplePtrOutput) ToApplePtrOutput() ApplePtrOutput {
	return o
}

func (o ApplePtrOutput) ToApplePtrOutputWithContext(ctx context.Context) ApplePtrOutput {
	return o
}

func (o ApplePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Apple] {
	return pulumix.Output[*Apple]{
		OutputState: o.OutputState,
	}
}

func (o ApplePtrOutput) Elem() AppleOutput {
	return o.ApplyT(func(v *Apple) Apple {
		if v != nil {
			return *v
		}
		var ret Apple
		return ret
	}).(AppleOutput)
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o ApplePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Apple) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o ApplePtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *Apple) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the Apple registration.
func (o ApplePtrOutput) Registration() AppleRegistrationPtrOutput {
	return o.ApplyT(func(v *Apple) *AppleRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppleRegistrationPtrOutput)
}

// The configuration settings of the registration for the Apple provider
type AppleRegistration struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// AppleRegistrationInput is an input type that accepts AppleRegistrationArgs and AppleRegistrationOutput values.
// You can construct a concrete instance of `AppleRegistrationInput` via:
//
//	AppleRegistrationArgs{...}
type AppleRegistrationInput interface {
	pulumi.Input

	ToAppleRegistrationOutput() AppleRegistrationOutput
	ToAppleRegistrationOutputWithContext(context.Context) AppleRegistrationOutput
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationArgs struct {
	// The Client ID of the app used for login.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
}

func (AppleRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleRegistration)(nil)).Elem()
}

func (i AppleRegistrationArgs) ToAppleRegistrationOutput() AppleRegistrationOutput {
	return i.ToAppleRegistrationOutputWithContext(context.Background())
}

func (i AppleRegistrationArgs) ToAppleRegistrationOutputWithContext(ctx context.Context) AppleRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleRegistrationOutput)
}

func (i AppleRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[AppleRegistration] {
	return pulumix.Output[AppleRegistration]{
		OutputState: i.ToAppleRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i AppleRegistrationArgs) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return i.ToAppleRegistrationPtrOutputWithContext(context.Background())
}

func (i AppleRegistrationArgs) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleRegistrationOutput).ToAppleRegistrationPtrOutputWithContext(ctx)
}

// AppleRegistrationPtrInput is an input type that accepts AppleRegistrationArgs, AppleRegistrationPtr and AppleRegistrationPtrOutput values.
// You can construct a concrete instance of `AppleRegistrationPtrInput` via:
//
//	        AppleRegistrationArgs{...}
//
//	or:
//
//	        nil
type AppleRegistrationPtrInput interface {
	pulumi.Input

	ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput
	ToAppleRegistrationPtrOutputWithContext(context.Context) AppleRegistrationPtrOutput
}

type appleRegistrationPtrType AppleRegistrationArgs

func AppleRegistrationPtr(v *AppleRegistrationArgs) AppleRegistrationPtrInput {
	return (*appleRegistrationPtrType)(v)
}

func (*appleRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleRegistration)(nil)).Elem()
}

func (i *appleRegistrationPtrType) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return i.ToAppleRegistrationPtrOutputWithContext(context.Background())
}

func (i *appleRegistrationPtrType) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppleRegistrationPtrOutput)
}

func (i *appleRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AppleRegistration] {
	return pulumix.Output[*AppleRegistration]{
		OutputState: i.ToAppleRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationOutput struct{ *pulumi.OutputState }

func (AppleRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleRegistration)(nil)).Elem()
}

func (o AppleRegistrationOutput) ToAppleRegistrationOutput() AppleRegistrationOutput {
	return o
}

func (o AppleRegistrationOutput) ToAppleRegistrationOutputWithContext(ctx context.Context) AppleRegistrationOutput {
	return o
}

func (o AppleRegistrationOutput) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return o.ToAppleRegistrationPtrOutputWithContext(context.Background())
}

func (o AppleRegistrationOutput) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppleRegistration) *AppleRegistration {
		return &v
	}).(AppleRegistrationPtrOutput)
}

func (o AppleRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[AppleRegistration] {
	return pulumix.Output[AppleRegistration]{
		OutputState: o.OutputState,
	}
}

// The Client ID of the app used for login.
func (o AppleRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistration) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppleRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AppleRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleRegistration)(nil)).Elem()
}

func (o AppleRegistrationPtrOutput) ToAppleRegistrationPtrOutput() AppleRegistrationPtrOutput {
	return o
}

func (o AppleRegistrationPtrOutput) ToAppleRegistrationPtrOutputWithContext(ctx context.Context) AppleRegistrationPtrOutput {
	return o
}

func (o AppleRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppleRegistration] {
	return pulumix.Output[*AppleRegistration]{
		OutputState: o.OutputState,
	}
}

func (o AppleRegistrationPtrOutput) Elem() AppleRegistrationOutput {
	return o.ApplyT(func(v *AppleRegistration) AppleRegistration {
		if v != nil {
			return *v
		}
		var ret AppleRegistration
		return ret
	}).(AppleRegistrationOutput)
}

// The Client ID of the app used for login.
func (o AppleRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationResponse struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// The configuration settings of the registration for the Apple provider
type AppleRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AppleRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleRegistrationResponse)(nil)).Elem()
}

func (o AppleRegistrationResponseOutput) ToAppleRegistrationResponseOutput() AppleRegistrationResponseOutput {
	return o
}

func (o AppleRegistrationResponseOutput) ToAppleRegistrationResponseOutputWithContext(ctx context.Context) AppleRegistrationResponseOutput {
	return o
}

func (o AppleRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AppleRegistrationResponse] {
	return pulumix.Output[AppleRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The Client ID of the app used for login.
func (o AppleRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppleRegistrationResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type AppleRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppleRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleRegistrationResponse)(nil)).Elem()
}

func (o AppleRegistrationResponsePtrOutput) ToAppleRegistrationResponsePtrOutput() AppleRegistrationResponsePtrOutput {
	return o
}

func (o AppleRegistrationResponsePtrOutput) ToAppleRegistrationResponsePtrOutputWithContext(ctx context.Context) AppleRegistrationResponsePtrOutput {
	return o
}

func (o AppleRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppleRegistrationResponse] {
	return pulumix.Output[*AppleRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AppleRegistrationResponsePtrOutput) Elem() AppleRegistrationResponseOutput {
	return o.ApplyT(func(v *AppleRegistrationResponse) AppleRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AppleRegistrationResponse
		return ret
	}).(AppleRegistrationResponseOutput)
}

// The Client ID of the app used for login.
func (o AppleRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o AppleRegistrationResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppleRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Apple provider.
type AppleResponse struct {
	// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the Apple registration.
	Registration *AppleRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Apple provider.
type AppleResponseOutput struct{ *pulumi.OutputState }

func (AppleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppleResponse)(nil)).Elem()
}

func (o AppleResponseOutput) ToAppleResponseOutput() AppleResponseOutput {
	return o
}

func (o AppleResponseOutput) ToAppleResponseOutputWithContext(ctx context.Context) AppleResponseOutput {
	return o
}

func (o AppleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AppleResponse] {
	return pulumix.Output[AppleResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AppleResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppleResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o AppleResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v AppleResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the Apple registration.
func (o AppleResponseOutput) Registration() AppleRegistrationResponsePtrOutput {
	return o.ApplyT(func(v AppleResponse) *AppleRegistrationResponse { return v.Registration }).(AppleRegistrationResponsePtrOutput)
}

type AppleResponsePtrOutput struct{ *pulumi.OutputState }

func (AppleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppleResponse)(nil)).Elem()
}

func (o AppleResponsePtrOutput) ToAppleResponsePtrOutput() AppleResponsePtrOutput {
	return o
}

func (o AppleResponsePtrOutput) ToAppleResponsePtrOutputWithContext(ctx context.Context) AppleResponsePtrOutput {
	return o
}

func (o AppleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AppleResponse] {
	return pulumix.Output[*AppleResponse]{
		OutputState: o.OutputState,
	}
}

func (o AppleResponsePtrOutput) Elem() AppleResponseOutput {
	return o.ApplyT(func(v *AppleResponse) AppleResponse {
		if v != nil {
			return *v
		}
		var ret AppleResponse
		return ret
	}).(AppleResponseOutput)
}

// <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AppleResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppleResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o AppleResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *AppleResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the Apple registration.
func (o AppleResponsePtrOutput) Registration() AppleRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *AppleResponse) *AppleRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppleRegistrationResponsePtrOutput)
}

// The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
type AuthPlatform struct {
	// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
	// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// AuthPlatformInput is an input type that accepts AuthPlatformArgs and AuthPlatformOutput values.
// You can construct a concrete instance of `AuthPlatformInput` via:
//
//	AuthPlatformArgs{...}
type AuthPlatformInput interface {
	pulumi.Input

	ToAuthPlatformOutput() AuthPlatformOutput
	ToAuthPlatformOutputWithContext(context.Context) AuthPlatformOutput
}

// The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
type AuthPlatformArgs struct {
	// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
	// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

func (AuthPlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPlatform)(nil)).Elem()
}

func (i AuthPlatformArgs) ToAuthPlatformOutput() AuthPlatformOutput {
	return i.ToAuthPlatformOutputWithContext(context.Background())
}

func (i AuthPlatformArgs) ToAuthPlatformOutputWithContext(ctx context.Context) AuthPlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthPlatformOutput)
}

func (i AuthPlatformArgs) ToOutput(ctx context.Context) pulumix.Output[AuthPlatform] {
	return pulumix.Output[AuthPlatform]{
		OutputState: i.ToAuthPlatformOutputWithContext(ctx).OutputState,
	}
}

func (i AuthPlatformArgs) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return i.ToAuthPlatformPtrOutputWithContext(context.Background())
}

func (i AuthPlatformArgs) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthPlatformOutput).ToAuthPlatformPtrOutputWithContext(ctx)
}

// AuthPlatformPtrInput is an input type that accepts AuthPlatformArgs, AuthPlatformPtr and AuthPlatformPtrOutput values.
// You can construct a concrete instance of `AuthPlatformPtrInput` via:
//
//	        AuthPlatformArgs{...}
//
//	or:
//
//	        nil
type AuthPlatformPtrInput interface {
	pulumi.Input

	ToAuthPlatformPtrOutput() AuthPlatformPtrOutput
	ToAuthPlatformPtrOutputWithContext(context.Context) AuthPlatformPtrOutput
}

type authPlatformPtrType AuthPlatformArgs

func AuthPlatformPtr(v *AuthPlatformArgs) AuthPlatformPtrInput {
	return (*authPlatformPtrType)(v)
}

func (*authPlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthPlatform)(nil)).Elem()
}

func (i *authPlatformPtrType) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return i.ToAuthPlatformPtrOutputWithContext(context.Background())
}

func (i *authPlatformPtrType) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthPlatformPtrOutput)
}

func (i *authPlatformPtrType) ToOutput(ctx context.Context) pulumix.Output[*AuthPlatform] {
	return pulumix.Output[*AuthPlatform]{
		OutputState: i.ToAuthPlatformPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
type AuthPlatformOutput struct{ *pulumi.OutputState }

func (AuthPlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPlatform)(nil)).Elem()
}

func (o AuthPlatformOutput) ToAuthPlatformOutput() AuthPlatformOutput {
	return o
}

func (o AuthPlatformOutput) ToAuthPlatformOutputWithContext(ctx context.Context) AuthPlatformOutput {
	return o
}

func (o AuthPlatformOutput) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return o.ToAuthPlatformPtrOutputWithContext(context.Background())
}

func (o AuthPlatformOutput) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthPlatform) *AuthPlatform {
		return &v
	}).(AuthPlatformPtrOutput)
}

func (o AuthPlatformOutput) ToOutput(ctx context.Context) pulumix.Output[AuthPlatform] {
	return pulumix.Output[AuthPlatform]{
		OutputState: o.OutputState,
	}
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthPlatform) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthPlatform) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type AuthPlatformPtrOutput struct{ *pulumi.OutputState }

func (AuthPlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthPlatform)(nil)).Elem()
}

func (o AuthPlatformPtrOutput) ToAuthPlatformPtrOutput() AuthPlatformPtrOutput {
	return o
}

func (o AuthPlatformPtrOutput) ToAuthPlatformPtrOutputWithContext(ctx context.Context) AuthPlatformPtrOutput {
	return o
}

func (o AuthPlatformPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthPlatform] {
	return pulumix.Output[*AuthPlatform]{
		OutputState: o.OutputState,
	}
}

func (o AuthPlatformPtrOutput) Elem() AuthPlatformOutput {
	return o.ApplyT(func(v *AuthPlatform) AuthPlatform {
		if v != nil {
			return *v
		}
		var ret AuthPlatform
		return ret
	}).(AuthPlatformOutput)
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthPlatform) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthPlatform) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
type AuthPlatformResponse struct {
	// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
	// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
type AuthPlatformResponseOutput struct{ *pulumi.OutputState }

func (AuthPlatformResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthPlatformResponse)(nil)).Elem()
}

func (o AuthPlatformResponseOutput) ToAuthPlatformResponseOutput() AuthPlatformResponseOutput {
	return o
}

func (o AuthPlatformResponseOutput) ToAuthPlatformResponseOutputWithContext(ctx context.Context) AuthPlatformResponseOutput {
	return o
}

func (o AuthPlatformResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AuthPlatformResponse] {
	return pulumix.Output[AuthPlatformResponse]{
		OutputState: o.OutputState,
	}
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuthPlatformResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformResponseOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuthPlatformResponse) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type AuthPlatformResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthPlatformResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthPlatformResponse)(nil)).Elem()
}

func (o AuthPlatformResponsePtrOutput) ToAuthPlatformResponsePtrOutput() AuthPlatformResponsePtrOutput {
	return o
}

func (o AuthPlatformResponsePtrOutput) ToAuthPlatformResponsePtrOutputWithContext(ctx context.Context) AuthPlatformResponsePtrOutput {
	return o
}

func (o AuthPlatformResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AuthPlatformResponse] {
	return pulumix.Output[*AuthPlatformResponse]{
		OutputState: o.OutputState,
	}
}

func (o AuthPlatformResponsePtrOutput) Elem() AuthPlatformResponseOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) AuthPlatformResponse {
		if v != nil {
			return *v
		}
		var ret AuthPlatformResponse
		return ret
	}).(AuthPlatformResponseOutput)
}

// <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.
func (o AuthPlatformResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
// The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
func (o AuthPlatformResponsePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthPlatformResponse) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectory struct {
	// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
	// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
	// read or write to this property.
	IsAutoProvisioned *bool `pulumi:"isAutoProvisioned"`
	// The configuration settings of the Azure Active Directory login flow.
	Login *AzureActiveDirectoryLogin `pulumi:"login"`
	// The configuration settings of the Azure Active Directory app registration.
	Registration *AzureActiveDirectoryRegistration `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AzureActiveDirectoryValidation `pulumi:"validation"`
}

// AzureActiveDirectoryInput is an input type that accepts AzureActiveDirectoryArgs and AzureActiveDirectoryOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryInput` via:
//
//	AzureActiveDirectoryArgs{...}
type AzureActiveDirectoryInput interface {
	pulumi.Input

	ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput
	ToAzureActiveDirectoryOutputWithContext(context.Context) AzureActiveDirectoryOutput
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryArgs struct {
	// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
	// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
	// read or write to this property.
	IsAutoProvisioned pulumi.BoolPtrInput `pulumi:"isAutoProvisioned"`
	// The configuration settings of the Azure Active Directory login flow.
	Login AzureActiveDirectoryLoginPtrInput `pulumi:"login"`
	// The configuration settings of the Azure Active Directory app registration.
	Registration AzureActiveDirectoryRegistrationPtrInput `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation AzureActiveDirectoryValidationPtrInput `pulumi:"validation"`
}

func (AzureActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return i.ToAzureActiveDirectoryOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput)
}

func (i AzureActiveDirectoryArgs) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectory] {
	return pulumix.Output[AzureActiveDirectory]{
		OutputState: i.ToAzureActiveDirectoryOutputWithContext(ctx).OutputState,
	}
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryArgs) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryOutput).ToAzureActiveDirectoryPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryPtrInput is an input type that accepts AzureActiveDirectoryArgs, AzureActiveDirectoryPtr and AzureActiveDirectoryPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryPtrInput` via:
//
//	        AzureActiveDirectoryArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput
	ToAzureActiveDirectoryPtrOutputWithContext(context.Context) AzureActiveDirectoryPtrOutput
}

type azureActiveDirectoryPtrType AzureActiveDirectoryArgs

func AzureActiveDirectoryPtr(v *AzureActiveDirectoryArgs) AzureActiveDirectoryPtrInput {
	return (*azureActiveDirectoryPtrType)(v)
}

func (*azureActiveDirectoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return i.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryPtrType) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryPtrOutput)
}

func (i *azureActiveDirectoryPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectory] {
	return pulumix.Output[*AzureActiveDirectory]{
		OutputState: i.ToAzureActiveDirectoryPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutput() AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryOutputWithContext(ctx context.Context) AzureActiveDirectoryOutput {
	return o
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o.ToAzureActiveDirectoryPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectory) *AzureActiveDirectory {
		return &v
	}).(AzureActiveDirectoryPtrOutput)
}

func (o AzureActiveDirectoryOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectory] {
	return pulumix.Output[AzureActiveDirectory]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *bool { return v.IsAutoProvisioned }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryOutput) Login() AzureActiveDirectoryLoginPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectoryLogin { return v.Login }).(AzureActiveDirectoryLoginPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryOutput) Registration() AzureActiveDirectoryRegistrationPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectoryRegistration { return v.Registration }).(AzureActiveDirectoryRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryOutput) Validation() AzureActiveDirectoryValidationPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectory) *AzureActiveDirectoryValidation { return v.Validation }).(AzureActiveDirectoryValidationPtrOutput)
}

type AzureActiveDirectoryPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectory)(nil)).Elem()
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutput() AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) ToAzureActiveDirectoryPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryPtrOutput {
	return o
}

func (o AzureActiveDirectoryPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectory] {
	return pulumix.Output[*AzureActiveDirectory]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryPtrOutput) Elem() AzureActiveDirectoryOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) AzureActiveDirectory {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectory
		return ret
	}).(AzureActiveDirectoryOutput)
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryPtrOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *bool {
		if v == nil {
			return nil
		}
		return v.IsAutoProvisioned
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryPtrOutput) Login() AzureActiveDirectoryLoginPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *AzureActiveDirectoryLogin {
		if v == nil {
			return nil
		}
		return v.Login
	}).(AzureActiveDirectoryLoginPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryPtrOutput) Registration() AzureActiveDirectoryRegistrationPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *AzureActiveDirectoryRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureActiveDirectoryRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryPtrOutput) Validation() AzureActiveDirectoryValidationPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectory) *AzureActiveDirectoryValidation {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AzureActiveDirectoryValidationPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLogin struct {
	// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
	DisableWWWAuthenticate *bool `pulumi:"disableWWWAuthenticate"`
	// Login parameters to send to the OpenID Connect authorization endpoint when
	// a user logs in. Each parameter must be in the form "key=value".
	LoginParameters []string `pulumi:"loginParameters"`
}

// AzureActiveDirectoryLoginInput is an input type that accepts AzureActiveDirectoryLoginArgs and AzureActiveDirectoryLoginOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryLoginInput` via:
//
//	AzureActiveDirectoryLoginArgs{...}
type AzureActiveDirectoryLoginInput interface {
	pulumi.Input

	ToAzureActiveDirectoryLoginOutput() AzureActiveDirectoryLoginOutput
	ToAzureActiveDirectoryLoginOutputWithContext(context.Context) AzureActiveDirectoryLoginOutput
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginArgs struct {
	// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
	DisableWWWAuthenticate pulumi.BoolPtrInput `pulumi:"disableWWWAuthenticate"`
	// Login parameters to send to the OpenID Connect authorization endpoint when
	// a user logs in. Each parameter must be in the form "key=value".
	LoginParameters pulumi.StringArrayInput `pulumi:"loginParameters"`
}

func (AzureActiveDirectoryLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryLogin)(nil)).Elem()
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginOutput() AzureActiveDirectoryLoginOutput {
	return i.ToAzureActiveDirectoryLoginOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryLoginOutput)
}

func (i AzureActiveDirectoryLoginArgs) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryLogin] {
	return pulumix.Output[AzureActiveDirectoryLogin]{
		OutputState: i.ToAzureActiveDirectoryLoginOutputWithContext(ctx).OutputState,
	}
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return i.ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryLoginArgs) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryLoginOutput).ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryLoginPtrInput is an input type that accepts AzureActiveDirectoryLoginArgs, AzureActiveDirectoryLoginPtr and AzureActiveDirectoryLoginPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryLoginPtrInput` via:
//
//	        AzureActiveDirectoryLoginArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryLoginPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput
	ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Context) AzureActiveDirectoryLoginPtrOutput
}

type azureActiveDirectoryLoginPtrType AzureActiveDirectoryLoginArgs

func AzureActiveDirectoryLoginPtr(v *AzureActiveDirectoryLoginArgs) AzureActiveDirectoryLoginPtrInput {
	return (*azureActiveDirectoryLoginPtrType)(v)
}

func (*azureActiveDirectoryLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryLogin)(nil)).Elem()
}

func (i *azureActiveDirectoryLoginPtrType) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return i.ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryLoginPtrType) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryLoginPtrOutput)
}

func (i *azureActiveDirectoryLoginPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryLogin] {
	return pulumix.Output[*AzureActiveDirectoryLogin]{
		OutputState: i.ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryLogin)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginOutput() AzureActiveDirectoryLoginOutput {
	return o
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginOutput {
	return o
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return o.ToAzureActiveDirectoryLoginPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryLoginOutput) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryLogin) *AzureActiveDirectoryLogin {
		return &v
	}).(AzureActiveDirectoryLoginPtrOutput)
}

func (o AzureActiveDirectoryLoginOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryLogin] {
	return pulumix.Output[AzureActiveDirectoryLogin]{
		OutputState: o.OutputState,
	}
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLogin) *bool { return v.DisableWWWAuthenticate }).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLogin) []string { return v.LoginParameters }).(pulumi.StringArrayOutput)
}

type AzureActiveDirectoryLoginPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryLogin)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginPtrOutput) ToAzureActiveDirectoryLoginPtrOutput() AzureActiveDirectoryLoginPtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginPtrOutput) ToAzureActiveDirectoryLoginPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginPtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryLogin] {
	return pulumix.Output[*AzureActiveDirectoryLogin]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryLoginPtrOutput) Elem() AzureActiveDirectoryLoginOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLogin) AzureActiveDirectoryLogin {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryLogin
		return ret
	}).(AzureActiveDirectoryLoginOutput)
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginPtrOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLogin) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWWWAuthenticate
	}).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginPtrOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLogin) []string {
		if v == nil {
			return nil
		}
		return v.LoginParameters
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginResponse struct {
	// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
	DisableWWWAuthenticate *bool `pulumi:"disableWWWAuthenticate"`
	// Login parameters to send to the OpenID Connect authorization endpoint when
	// a user logs in. Each parameter must be in the form "key=value".
	LoginParameters []string `pulumi:"loginParameters"`
}

// The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLoginResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryLoginResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginResponseOutput) ToAzureActiveDirectoryLoginResponseOutput() AzureActiveDirectoryLoginResponseOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponseOutput) ToAzureActiveDirectoryLoginResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginResponseOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryLoginResponse] {
	return pulumix.Output[AzureActiveDirectoryLoginResponse]{
		OutputState: o.OutputState,
	}
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginResponseOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLoginResponse) *bool { return v.DisableWWWAuthenticate }).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginResponseOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryLoginResponse) []string { return v.LoginParameters }).(pulumi.StringArrayOutput)
}

type AzureActiveDirectoryLoginResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryLoginResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryLoginResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) ToAzureActiveDirectoryLoginResponsePtrOutput() AzureActiveDirectoryLoginResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) ToAzureActiveDirectoryLoginResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryLoginResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryLoginResponse] {
	return pulumix.Output[*AzureActiveDirectoryLoginResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryLoginResponsePtrOutput) Elem() AzureActiveDirectoryLoginResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLoginResponse) AzureActiveDirectoryLoginResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryLoginResponse
		return ret
	}).(AzureActiveDirectoryLoginResponseOutput)
}

// <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>.
func (o AzureActiveDirectoryLoginResponsePtrOutput) DisableWWWAuthenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLoginResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableWWWAuthenticate
	}).(pulumi.BoolPtrOutput)
}

// Login parameters to send to the OpenID Connect authorization endpoint when
// a user logs in. Each parameter must be in the form "key=value".
func (o AzureActiveDirectoryLoginResponsePtrOutput) LoginParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryLoginResponse) []string {
		if v == nil {
			return nil
		}
		return v.LoginParameters
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistration struct {
	// The Client ID of this relying party application, known as the client_id.
	// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
	// other 3rd party OpenID Connect providers.
	// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
	ClientId *string `pulumi:"clientId"`
	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateIssuer *string `pulumi:"clientSecretCertificateIssuer"`
	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName *string `pulumi:"clientSecretCertificateSubjectAlternativeName"`
	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret. It is also optional.
	ClientSecretCertificateThumbprint *string `pulumi:"clientSecretCertificateThumbprint"`
	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
	// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
	// This URI is a case-sensitive identifier for the token issuer.
	// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIdIssuer *string `pulumi:"openIdIssuer"`
}

// AzureActiveDirectoryRegistrationInput is an input type that accepts AzureActiveDirectoryRegistrationArgs and AzureActiveDirectoryRegistrationOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryRegistrationInput` via:
//
//	AzureActiveDirectoryRegistrationArgs{...}
type AzureActiveDirectoryRegistrationInput interface {
	pulumi.Input

	ToAzureActiveDirectoryRegistrationOutput() AzureActiveDirectoryRegistrationOutput
	ToAzureActiveDirectoryRegistrationOutputWithContext(context.Context) AzureActiveDirectoryRegistrationOutput
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationArgs struct {
	// The Client ID of this relying party application, known as the client_id.
	// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
	// other 3rd party OpenID Connect providers.
	// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateIssuer pulumi.StringPtrInput `pulumi:"clientSecretCertificateIssuer"`
	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName pulumi.StringPtrInput `pulumi:"clientSecretCertificateSubjectAlternativeName"`
	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret. It is also optional.
	ClientSecretCertificateThumbprint pulumi.StringPtrInput `pulumi:"clientSecretCertificateThumbprint"`
	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
	// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
	// This URI is a case-sensitive identifier for the token issuer.
	// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIdIssuer pulumi.StringPtrInput `pulumi:"openIdIssuer"`
}

func (AzureActiveDirectoryRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationOutput() AzureActiveDirectoryRegistrationOutput {
	return i.ToAzureActiveDirectoryRegistrationOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryRegistrationOutput)
}

func (i AzureActiveDirectoryRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryRegistration] {
	return pulumix.Output[AzureActiveDirectoryRegistration]{
		OutputState: i.ToAzureActiveDirectoryRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return i.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryRegistrationArgs) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryRegistrationOutput).ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryRegistrationPtrInput is an input type that accepts AzureActiveDirectoryRegistrationArgs, AzureActiveDirectoryRegistrationPtr and AzureActiveDirectoryRegistrationPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryRegistrationPtrInput` via:
//
//	        AzureActiveDirectoryRegistrationArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryRegistrationPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput
	ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Context) AzureActiveDirectoryRegistrationPtrOutput
}

type azureActiveDirectoryRegistrationPtrType AzureActiveDirectoryRegistrationArgs

func AzureActiveDirectoryRegistrationPtr(v *AzureActiveDirectoryRegistrationArgs) AzureActiveDirectoryRegistrationPtrInput {
	return (*azureActiveDirectoryRegistrationPtrType)(v)
}

func (*azureActiveDirectoryRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (i *azureActiveDirectoryRegistrationPtrType) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return i.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryRegistrationPtrType) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryRegistrationPtrOutput)
}

func (i *azureActiveDirectoryRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryRegistration] {
	return pulumix.Output[*AzureActiveDirectoryRegistration]{
		OutputState: i.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationOutput() AzureActiveDirectoryRegistrationOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return o.ToAzureActiveDirectoryRegistrationPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryRegistrationOutput) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryRegistration) *AzureActiveDirectoryRegistration {
		return &v
	}).(AzureActiveDirectoryRegistrationPtrOutput)
}

func (o AzureActiveDirectoryRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryRegistration] {
	return pulumix.Output[AzureActiveDirectoryRegistration]{
		OutputState: o.OutputState,
	}
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientSecretCertificateIssuer }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string {
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientSecretCertificateThumbprint }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistration) *string { return v.OpenIdIssuer }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryRegistration)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationPtrOutput) ToAzureActiveDirectoryRegistrationPtrOutput() AzureActiveDirectoryRegistrationPtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationPtrOutput) ToAzureActiveDirectoryRegistrationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationPtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryRegistration] {
	return pulumix.Output[*AzureActiveDirectoryRegistration]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryRegistrationPtrOutput) Elem() AzureActiveDirectoryRegistrationOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) AzureActiveDirectoryRegistration {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryRegistration
		return ret
	}).(AzureActiveDirectoryRegistrationOutput)
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateIssuer
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationPtrOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistration) *string {
		if v == nil {
			return nil
		}
		return v.OpenIdIssuer
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationResponse struct {
	// The Client ID of this relying party application, known as the client_id.
	// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
	// other 3rd party OpenID Connect providers.
	// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
	ClientId *string `pulumi:"clientId"`
	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateIssuer *string `pulumi:"clientSecretCertificateIssuer"`
	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName *string `pulumi:"clientSecretCertificateSubjectAlternativeName"`
	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret. It is also optional.
	ClientSecretCertificateThumbprint *string `pulumi:"clientSecretCertificateThumbprint"`
	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
	// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
	// This URI is a case-sensitive identifier for the token issuer.
	// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIdIssuer *string `pulumi:"openIdIssuer"`
}

// The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryRegistrationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationResponseOutput) ToAzureActiveDirectoryRegistrationResponseOutput() AzureActiveDirectoryRegistrationResponseOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponseOutput) ToAzureActiveDirectoryRegistrationResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationResponseOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryRegistrationResponse] {
	return pulumix.Output[AzureActiveDirectoryRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientSecretCertificateIssuer }).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string {
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientSecretCertificateThumbprint }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationResponseOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryRegistrationResponse) *string { return v.OpenIdIssuer }).(pulumi.StringPtrOutput)
}

type AzureActiveDirectoryRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryRegistrationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ToAzureActiveDirectoryRegistrationResponsePtrOutput() AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ToAzureActiveDirectoryRegistrationResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryRegistrationResponse] {
	return pulumix.Output[*AzureActiveDirectoryRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryRegistrationResponsePtrOutput) Elem() AzureActiveDirectoryRegistrationResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) AzureActiveDirectoryRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryRegistrationResponse
		return ret
	}).(AzureActiveDirectoryRegistrationResponseOutput)
}

// The Client ID of this relying party application, known as the client_id.
// This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
// other 3rd party OpenID Connect providers.
// More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretCertificateIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateIssuer
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret Certificate Thumbprint. It is also optional.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretCertificateSubjectAlternativeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateSubjectAlternativeName
	}).(pulumi.StringPtrOutput)
}

// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
// a replacement for the Client Secret. It is also optional.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretCertificateThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretCertificateThumbprint
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret of the relying party application.
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
// When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
// This URI is a case-sensitive identifier for the token issuer.
// More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
func (o AzureActiveDirectoryRegistrationResponsePtrOutput) OpenIdIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OpenIdIssuer
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryResponse struct {
	// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
	// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
	// read or write to this property.
	IsAutoProvisioned *bool `pulumi:"isAutoProvisioned"`
	// The configuration settings of the Azure Active Directory login flow.
	Login *AzureActiveDirectoryLoginResponse `pulumi:"login"`
	// The configuration settings of the Azure Active Directory app registration.
	Registration *AzureActiveDirectoryRegistrationResponse `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AzureActiveDirectoryValidationResponse `pulumi:"validation"`
}

// The configuration settings of the Azure Active directory provider.
type AzureActiveDirectoryResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutput() AzureActiveDirectoryResponseOutput {
	return o
}

func (o AzureActiveDirectoryResponseOutput) ToAzureActiveDirectoryResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryResponseOutput {
	return o
}

func (o AzureActiveDirectoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryResponse] {
	return pulumix.Output[AzureActiveDirectoryResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryResponseOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *bool { return v.IsAutoProvisioned }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryResponseOutput) Login() AzureActiveDirectoryLoginResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryLoginResponse { return v.Login }).(AzureActiveDirectoryLoginResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryResponseOutput) Registration() AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryRegistrationResponse { return v.Registration }).(AzureActiveDirectoryRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryResponseOutput) Validation() AzureActiveDirectoryValidationResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryResponse) *AzureActiveDirectoryValidationResponse { return v.Validation }).(AzureActiveDirectoryValidationResponsePtrOutput)
}

type AzureActiveDirectoryResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutput() AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) ToAzureActiveDirectoryResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryResponse] {
	return pulumix.Output[*AzureActiveDirectoryResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryResponsePtrOutput) Elem() AzureActiveDirectoryResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) AzureActiveDirectoryResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryResponse
		return ret
	}).(AzureActiveDirectoryResponseOutput)
}

// <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureActiveDirectoryResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
// This is an internal flag primarily intended to support the Azure Management Portal. Users should not
// read or write to this property.
func (o AzureActiveDirectoryResponsePtrOutput) IsAutoProvisioned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsAutoProvisioned
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Active Directory login flow.
func (o AzureActiveDirectoryResponsePtrOutput) Login() AzureActiveDirectoryLoginResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *AzureActiveDirectoryLoginResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(AzureActiveDirectoryLoginResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory app registration.
func (o AzureActiveDirectoryResponsePtrOutput) Registration() AzureActiveDirectoryRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *AzureActiveDirectoryRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureActiveDirectoryRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o AzureActiveDirectoryResponsePtrOutput) Validation() AzureActiveDirectoryValidationResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryResponse) *AzureActiveDirectoryValidationResponse {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AzureActiveDirectoryValidationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidation struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy *DefaultAuthorizationPolicy `pulumi:"defaultAuthorizationPolicy"`
	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks *JwtClaimChecks `pulumi:"jwtClaimChecks"`
}

// AzureActiveDirectoryValidationInput is an input type that accepts AzureActiveDirectoryValidationArgs and AzureActiveDirectoryValidationOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryValidationInput` via:
//
//	AzureActiveDirectoryValidationArgs{...}
type AzureActiveDirectoryValidationInput interface {
	pulumi.Input

	ToAzureActiveDirectoryValidationOutput() AzureActiveDirectoryValidationOutput
	ToAzureActiveDirectoryValidationOutputWithContext(context.Context) AzureActiveDirectoryValidationOutput
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationArgs struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences pulumi.StringArrayInput `pulumi:"allowedAudiences"`
	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy DefaultAuthorizationPolicyPtrInput `pulumi:"defaultAuthorizationPolicy"`
	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks JwtClaimChecksPtrInput `pulumi:"jwtClaimChecks"`
}

func (AzureActiveDirectoryValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryValidation)(nil)).Elem()
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationOutput() AzureActiveDirectoryValidationOutput {
	return i.ToAzureActiveDirectoryValidationOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryValidationOutput)
}

func (i AzureActiveDirectoryValidationArgs) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryValidation] {
	return pulumix.Output[AzureActiveDirectoryValidation]{
		OutputState: i.ToAzureActiveDirectoryValidationOutputWithContext(ctx).OutputState,
	}
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return i.ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Background())
}

func (i AzureActiveDirectoryValidationArgs) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryValidationOutput).ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx)
}

// AzureActiveDirectoryValidationPtrInput is an input type that accepts AzureActiveDirectoryValidationArgs, AzureActiveDirectoryValidationPtr and AzureActiveDirectoryValidationPtrOutput values.
// You can construct a concrete instance of `AzureActiveDirectoryValidationPtrInput` via:
//
//	        AzureActiveDirectoryValidationArgs{...}
//
//	or:
//
//	        nil
type AzureActiveDirectoryValidationPtrInput interface {
	pulumi.Input

	ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput
	ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Context) AzureActiveDirectoryValidationPtrOutput
}

type azureActiveDirectoryValidationPtrType AzureActiveDirectoryValidationArgs

func AzureActiveDirectoryValidationPtr(v *AzureActiveDirectoryValidationArgs) AzureActiveDirectoryValidationPtrInput {
	return (*azureActiveDirectoryValidationPtrType)(v)
}

func (*azureActiveDirectoryValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryValidation)(nil)).Elem()
}

func (i *azureActiveDirectoryValidationPtrType) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return i.ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Background())
}

func (i *azureActiveDirectoryValidationPtrType) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureActiveDirectoryValidationPtrOutput)
}

func (i *azureActiveDirectoryValidationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryValidation] {
	return pulumix.Output[*AzureActiveDirectoryValidation]{
		OutputState: i.ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryValidation)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationOutput() AzureActiveDirectoryValidationOutput {
	return o
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationOutput {
	return o
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return o.ToAzureActiveDirectoryValidationPtrOutputWithContext(context.Background())
}

func (o AzureActiveDirectoryValidationOutput) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureActiveDirectoryValidation) *AzureActiveDirectoryValidation {
		return &v
	}).(AzureActiveDirectoryValidationPtrOutput)
}

func (o AzureActiveDirectoryValidationOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryValidation] {
	return pulumix.Output[AzureActiveDirectoryValidation]{
		OutputState: o.OutputState,
	}
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidation) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidation) *DefaultAuthorizationPolicy {
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyPtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationOutput) JwtClaimChecks() JwtClaimChecksPtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidation) *JwtClaimChecks { return v.JwtClaimChecks }).(JwtClaimChecksPtrOutput)
}

type AzureActiveDirectoryValidationPtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryValidation)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationPtrOutput) ToAzureActiveDirectoryValidationPtrOutput() AzureActiveDirectoryValidationPtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationPtrOutput) ToAzureActiveDirectoryValidationPtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationPtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryValidation] {
	return pulumix.Output[*AzureActiveDirectoryValidation]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryValidationPtrOutput) Elem() AzureActiveDirectoryValidationOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) AzureActiveDirectoryValidation {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryValidation
		return ret
	}).(AzureActiveDirectoryValidationOutput)
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationPtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationPtrOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) *DefaultAuthorizationPolicy {
		if v == nil {
			return nil
		}
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyPtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationPtrOutput) JwtClaimChecks() JwtClaimChecksPtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidation) *JwtClaimChecks {
		if v == nil {
			return nil
		}
		return v.JwtClaimChecks
	}).(JwtClaimChecksPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationResponse struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy *DefaultAuthorizationPolicyResponse `pulumi:"defaultAuthorizationPolicy"`
	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks *JwtClaimChecksResponse `pulumi:"jwtClaimChecks"`
}

// The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidationResponseOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureActiveDirectoryValidationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationResponseOutput) ToAzureActiveDirectoryValidationResponseOutput() AzureActiveDirectoryValidationResponseOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponseOutput) ToAzureActiveDirectoryValidationResponseOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationResponseOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureActiveDirectoryValidationResponse] {
	return pulumix.Output[AzureActiveDirectoryValidationResponse]{
		OutputState: o.OutputState,
	}
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationResponseOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidationResponse) []string { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationResponseOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidationResponse) *DefaultAuthorizationPolicyResponse {
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyResponsePtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationResponseOutput) JwtClaimChecks() JwtClaimChecksResponsePtrOutput {
	return o.ApplyT(func(v AzureActiveDirectoryValidationResponse) *JwtClaimChecksResponse { return v.JwtClaimChecks }).(JwtClaimChecksResponsePtrOutput)
}

type AzureActiveDirectoryValidationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureActiveDirectoryValidationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureActiveDirectoryValidationResponse)(nil)).Elem()
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) ToAzureActiveDirectoryValidationResponsePtrOutput() AzureActiveDirectoryValidationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) ToAzureActiveDirectoryValidationResponsePtrOutputWithContext(ctx context.Context) AzureActiveDirectoryValidationResponsePtrOutput {
	return o
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureActiveDirectoryValidationResponse] {
	return pulumix.Output[*AzureActiveDirectoryValidationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureActiveDirectoryValidationResponsePtrOutput) Elem() AzureActiveDirectoryValidationResponseOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) AzureActiveDirectoryValidationResponse {
		if v != nil {
			return *v
		}
		var ret AzureActiveDirectoryValidationResponse
		return ret
	}).(AzureActiveDirectoryValidationResponseOutput)
}

// The list of audiences that can make successful authentication/authorization requests.
func (o AzureActiveDirectoryValidationResponsePtrOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedAudiences
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the default authorization policy.
func (o AzureActiveDirectoryValidationResponsePtrOutput) DefaultAuthorizationPolicy() DefaultAuthorizationPolicyResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) *DefaultAuthorizationPolicyResponse {
		if v == nil {
			return nil
		}
		return v.DefaultAuthorizationPolicy
	}).(DefaultAuthorizationPolicyResponsePtrOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
func (o AzureActiveDirectoryValidationResponsePtrOutput) JwtClaimChecks() JwtClaimChecksResponsePtrOutput {
	return o.ApplyT(func(v *AzureActiveDirectoryValidationResponse) *JwtClaimChecksResponse {
		if v == nil {
			return nil
		}
		return v.JwtClaimChecks
	}).(JwtClaimChecksResponsePtrOutput)
}

// Container App credentials.
type AzureCredentials struct {
	// Client Id.
	ClientId *string `pulumi:"clientId"`
	// Client Secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Kind of auth github does for deploying the template
	Kind *string `pulumi:"kind"`
	// Subscription Id.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tenant Id.
	TenantId *string `pulumi:"tenantId"`
}

// AzureCredentialsInput is an input type that accepts AzureCredentialsArgs and AzureCredentialsOutput values.
// You can construct a concrete instance of `AzureCredentialsInput` via:
//
//	AzureCredentialsArgs{...}
type AzureCredentialsInput interface {
	pulumi.Input

	ToAzureCredentialsOutput() AzureCredentialsOutput
	ToAzureCredentialsOutputWithContext(context.Context) AzureCredentialsOutput
}

// Container App credentials.
type AzureCredentialsArgs struct {
	// Client Id.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Client Secret.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Kind of auth github does for deploying the template
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Subscription Id.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Tenant Id.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (AzureCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCredentials)(nil)).Elem()
}

func (i AzureCredentialsArgs) ToAzureCredentialsOutput() AzureCredentialsOutput {
	return i.ToAzureCredentialsOutputWithContext(context.Background())
}

func (i AzureCredentialsArgs) ToAzureCredentialsOutputWithContext(ctx context.Context) AzureCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialsOutput)
}

func (i AzureCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[AzureCredentials] {
	return pulumix.Output[AzureCredentials]{
		OutputState: i.ToAzureCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i AzureCredentialsArgs) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return i.ToAzureCredentialsPtrOutputWithContext(context.Background())
}

func (i AzureCredentialsArgs) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialsOutput).ToAzureCredentialsPtrOutputWithContext(ctx)
}

// AzureCredentialsPtrInput is an input type that accepts AzureCredentialsArgs, AzureCredentialsPtr and AzureCredentialsPtrOutput values.
// You can construct a concrete instance of `AzureCredentialsPtrInput` via:
//
//	        AzureCredentialsArgs{...}
//
//	or:
//
//	        nil
type AzureCredentialsPtrInput interface {
	pulumi.Input

	ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput
	ToAzureCredentialsPtrOutputWithContext(context.Context) AzureCredentialsPtrOutput
}

type azureCredentialsPtrType AzureCredentialsArgs

func AzureCredentialsPtr(v *AzureCredentialsArgs) AzureCredentialsPtrInput {
	return (*azureCredentialsPtrType)(v)
}

func (*azureCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredentials)(nil)).Elem()
}

func (i *azureCredentialsPtrType) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return i.ToAzureCredentialsPtrOutputWithContext(context.Background())
}

func (i *azureCredentialsPtrType) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureCredentialsPtrOutput)
}

func (i *azureCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureCredentials] {
	return pulumix.Output[*AzureCredentials]{
		OutputState: i.ToAzureCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

// Container App credentials.
type AzureCredentialsOutput struct{ *pulumi.OutputState }

func (AzureCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCredentials)(nil)).Elem()
}

func (o AzureCredentialsOutput) ToAzureCredentialsOutput() AzureCredentialsOutput {
	return o
}

func (o AzureCredentialsOutput) ToAzureCredentialsOutputWithContext(ctx context.Context) AzureCredentialsOutput {
	return o
}

func (o AzureCredentialsOutput) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return o.ToAzureCredentialsPtrOutputWithContext(context.Background())
}

func (o AzureCredentialsOutput) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureCredentials) *AzureCredentials {
		return &v
	}).(AzureCredentialsPtrOutput)
}

func (o AzureCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[AzureCredentials] {
	return pulumix.Output[AzureCredentials]{
		OutputState: o.OutputState,
	}
}

// Client Id.
func (o AzureCredentialsOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client Secret.
func (o AzureCredentialsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Kind of auth github does for deploying the template
func (o AzureCredentialsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Subscription Id.
func (o AzureCredentialsOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tenant Id.
func (o AzureCredentialsOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentials) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type AzureCredentialsPtrOutput struct{ *pulumi.OutputState }

func (AzureCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredentials)(nil)).Elem()
}

func (o AzureCredentialsPtrOutput) ToAzureCredentialsPtrOutput() AzureCredentialsPtrOutput {
	return o
}

func (o AzureCredentialsPtrOutput) ToAzureCredentialsPtrOutputWithContext(ctx context.Context) AzureCredentialsPtrOutput {
	return o
}

func (o AzureCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureCredentials] {
	return pulumix.Output[*AzureCredentials]{
		OutputState: o.OutputState,
	}
}

func (o AzureCredentialsPtrOutput) Elem() AzureCredentialsOutput {
	return o.ApplyT(func(v *AzureCredentials) AzureCredentials {
		if v != nil {
			return *v
		}
		var ret AzureCredentials
		return ret
	}).(AzureCredentialsOutput)
}

// Client Id.
func (o AzureCredentialsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client Secret.
func (o AzureCredentialsPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentials) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Kind of auth github does for deploying the template
func (o AzureCredentialsPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Subscription Id.
func (o AzureCredentialsPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentials) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Tenant Id.
func (o AzureCredentialsPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentials) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Container App credentials.
type AzureCredentialsResponse struct {
	// Subscription Id.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

// Container App credentials.
type AzureCredentialsResponseOutput struct{ *pulumi.OutputState }

func (AzureCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureCredentialsResponse)(nil)).Elem()
}

func (o AzureCredentialsResponseOutput) ToAzureCredentialsResponseOutput() AzureCredentialsResponseOutput {
	return o
}

func (o AzureCredentialsResponseOutput) ToAzureCredentialsResponseOutputWithContext(ctx context.Context) AzureCredentialsResponseOutput {
	return o
}

func (o AzureCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureCredentialsResponse] {
	return pulumix.Output[AzureCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// Subscription Id.
func (o AzureCredentialsResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureCredentialsResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

type AzureCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureCredentialsResponse)(nil)).Elem()
}

func (o AzureCredentialsResponsePtrOutput) ToAzureCredentialsResponsePtrOutput() AzureCredentialsResponsePtrOutput {
	return o
}

func (o AzureCredentialsResponsePtrOutput) ToAzureCredentialsResponsePtrOutputWithContext(ctx context.Context) AzureCredentialsResponsePtrOutput {
	return o
}

func (o AzureCredentialsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureCredentialsResponse] {
	return pulumix.Output[*AzureCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureCredentialsResponsePtrOutput) Elem() AzureCredentialsResponseOutput {
	return o.ApplyT(func(v *AzureCredentialsResponse) AzureCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret AzureCredentialsResponse
		return ret
	}).(AzureCredentialsResponseOutput)
}

// Subscription Id.
func (o AzureCredentialsResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Azure File Properties.
type AzureFileProperties struct {
	// Access mode for storage
	AccessMode *string `pulumi:"accessMode"`
	// Storage account key for azure file.
	AccountKey *string `pulumi:"accountKey"`
	// Storage account name for azure file.
	AccountName *string `pulumi:"accountName"`
	// Azure file share name.
	ShareName *string `pulumi:"shareName"`
}

// AzureFilePropertiesInput is an input type that accepts AzureFilePropertiesArgs and AzureFilePropertiesOutput values.
// You can construct a concrete instance of `AzureFilePropertiesInput` via:
//
//	AzureFilePropertiesArgs{...}
type AzureFilePropertiesInput interface {
	pulumi.Input

	ToAzureFilePropertiesOutput() AzureFilePropertiesOutput
	ToAzureFilePropertiesOutputWithContext(context.Context) AzureFilePropertiesOutput
}

// Azure File Properties.
type AzureFilePropertiesArgs struct {
	// Access mode for storage
	AccessMode pulumi.StringPtrInput `pulumi:"accessMode"`
	// Storage account key for azure file.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// Storage account name for azure file.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Azure file share name.
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
}

func (AzureFilePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileProperties)(nil)).Elem()
}

func (i AzureFilePropertiesArgs) ToAzureFilePropertiesOutput() AzureFilePropertiesOutput {
	return i.ToAzureFilePropertiesOutputWithContext(context.Background())
}

func (i AzureFilePropertiesArgs) ToAzureFilePropertiesOutputWithContext(ctx context.Context) AzureFilePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePropertiesOutput)
}

func (i AzureFilePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[AzureFileProperties] {
	return pulumix.Output[AzureFileProperties]{
		OutputState: i.ToAzureFilePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i AzureFilePropertiesArgs) ToAzureFilePropertiesPtrOutput() AzureFilePropertiesPtrOutput {
	return i.ToAzureFilePropertiesPtrOutputWithContext(context.Background())
}

func (i AzureFilePropertiesArgs) ToAzureFilePropertiesPtrOutputWithContext(ctx context.Context) AzureFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePropertiesOutput).ToAzureFilePropertiesPtrOutputWithContext(ctx)
}

// AzureFilePropertiesPtrInput is an input type that accepts AzureFilePropertiesArgs, AzureFilePropertiesPtr and AzureFilePropertiesPtrOutput values.
// You can construct a concrete instance of `AzureFilePropertiesPtrInput` via:
//
//	        AzureFilePropertiesArgs{...}
//
//	or:
//
//	        nil
type AzureFilePropertiesPtrInput interface {
	pulumi.Input

	ToAzureFilePropertiesPtrOutput() AzureFilePropertiesPtrOutput
	ToAzureFilePropertiesPtrOutputWithContext(context.Context) AzureFilePropertiesPtrOutput
}

type azureFilePropertiesPtrType AzureFilePropertiesArgs

func AzureFilePropertiesPtr(v *AzureFilePropertiesArgs) AzureFilePropertiesPtrInput {
	return (*azureFilePropertiesPtrType)(v)
}

func (*azureFilePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileProperties)(nil)).Elem()
}

func (i *azureFilePropertiesPtrType) ToAzureFilePropertiesPtrOutput() AzureFilePropertiesPtrOutput {
	return i.ToAzureFilePropertiesPtrOutputWithContext(context.Background())
}

func (i *azureFilePropertiesPtrType) ToAzureFilePropertiesPtrOutputWithContext(ctx context.Context) AzureFilePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFilePropertiesPtrOutput)
}

func (i *azureFilePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureFileProperties] {
	return pulumix.Output[*AzureFileProperties]{
		OutputState: i.ToAzureFilePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Azure File Properties.
type AzureFilePropertiesOutput struct{ *pulumi.OutputState }

func (AzureFilePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileProperties)(nil)).Elem()
}

func (o AzureFilePropertiesOutput) ToAzureFilePropertiesOutput() AzureFilePropertiesOutput {
	return o
}

func (o AzureFilePropertiesOutput) ToAzureFilePropertiesOutputWithContext(ctx context.Context) AzureFilePropertiesOutput {
	return o
}

func (o AzureFilePropertiesOutput) ToAzureFilePropertiesPtrOutput() AzureFilePropertiesPtrOutput {
	return o.ToAzureFilePropertiesPtrOutputWithContext(context.Background())
}

func (o AzureFilePropertiesOutput) ToAzureFilePropertiesPtrOutputWithContext(ctx context.Context) AzureFilePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFileProperties) *AzureFileProperties {
		return &v
	}).(AzureFilePropertiesPtrOutput)
}

func (o AzureFilePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[AzureFileProperties] {
	return pulumix.Output[AzureFileProperties]{
		OutputState: o.OutputState,
	}
}

// Access mode for storage
func (o AzureFilePropertiesOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileProperties) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// Storage account key for azure file.
func (o AzureFilePropertiesOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileProperties) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Storage account name for azure file.
func (o AzureFilePropertiesOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileProperties) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Azure file share name.
func (o AzureFilePropertiesOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileProperties) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

type AzureFilePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AzureFilePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileProperties)(nil)).Elem()
}

func (o AzureFilePropertiesPtrOutput) ToAzureFilePropertiesPtrOutput() AzureFilePropertiesPtrOutput {
	return o
}

func (o AzureFilePropertiesPtrOutput) ToAzureFilePropertiesPtrOutputWithContext(ctx context.Context) AzureFilePropertiesPtrOutput {
	return o
}

func (o AzureFilePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureFileProperties] {
	return pulumix.Output[*AzureFileProperties]{
		OutputState: o.OutputState,
	}
}

func (o AzureFilePropertiesPtrOutput) Elem() AzureFilePropertiesOutput {
	return o.ApplyT(func(v *AzureFileProperties) AzureFileProperties {
		if v != nil {
			return *v
		}
		var ret AzureFileProperties
		return ret
	}).(AzureFilePropertiesOutput)
}

// Access mode for storage
func (o AzureFilePropertiesPtrOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.AccessMode
	}).(pulumi.StringPtrOutput)
}

// Storage account key for azure file.
func (o AzureFilePropertiesPtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// Storage account name for azure file.
func (o AzureFilePropertiesPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Azure file share name.
func (o AzureFilePropertiesPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileProperties) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// Azure File Properties.
type AzureFilePropertiesResponse struct {
	// Access mode for storage
	AccessMode *string `pulumi:"accessMode"`
	// Storage account key for azure file.
	AccountKey *string `pulumi:"accountKey"`
	// Storage account name for azure file.
	AccountName *string `pulumi:"accountName"`
	// Azure file share name.
	ShareName *string `pulumi:"shareName"`
}

// Azure File Properties.
type AzureFilePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AzureFilePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFilePropertiesResponse)(nil)).Elem()
}

func (o AzureFilePropertiesResponseOutput) ToAzureFilePropertiesResponseOutput() AzureFilePropertiesResponseOutput {
	return o
}

func (o AzureFilePropertiesResponseOutput) ToAzureFilePropertiesResponseOutputWithContext(ctx context.Context) AzureFilePropertiesResponseOutput {
	return o
}

func (o AzureFilePropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureFilePropertiesResponse] {
	return pulumix.Output[AzureFilePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Access mode for storage
func (o AzureFilePropertiesResponseOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePropertiesResponse) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// Storage account key for azure file.
func (o AzureFilePropertiesResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePropertiesResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Storage account name for azure file.
func (o AzureFilePropertiesResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePropertiesResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Azure file share name.
func (o AzureFilePropertiesResponseOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFilePropertiesResponse) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

type AzureFilePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFilePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFilePropertiesResponse)(nil)).Elem()
}

func (o AzureFilePropertiesResponsePtrOutput) ToAzureFilePropertiesResponsePtrOutput() AzureFilePropertiesResponsePtrOutput {
	return o
}

func (o AzureFilePropertiesResponsePtrOutput) ToAzureFilePropertiesResponsePtrOutputWithContext(ctx context.Context) AzureFilePropertiesResponsePtrOutput {
	return o
}

func (o AzureFilePropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureFilePropertiesResponse] {
	return pulumix.Output[*AzureFilePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureFilePropertiesResponsePtrOutput) Elem() AzureFilePropertiesResponseOutput {
	return o.ApplyT(func(v *AzureFilePropertiesResponse) AzureFilePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AzureFilePropertiesResponse
		return ret
	}).(AzureFilePropertiesResponseOutput)
}

// Access mode for storage
func (o AzureFilePropertiesResponsePtrOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessMode
	}).(pulumi.StringPtrOutput)
}

// Storage account key for azure file.
func (o AzureFilePropertiesResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// Storage account name for azure file.
func (o AzureFilePropertiesResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Azure file share name.
func (o AzureFilePropertiesResponsePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFilePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebApps struct {
	// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the Azure Static Web Apps registration.
	Registration *AzureStaticWebAppsRegistration `pulumi:"registration"`
}

// AzureStaticWebAppsInput is an input type that accepts AzureStaticWebAppsArgs and AzureStaticWebAppsOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsInput` via:
//
//	AzureStaticWebAppsArgs{...}
type AzureStaticWebAppsInput interface {
	pulumi.Input

	ToAzureStaticWebAppsOutput() AzureStaticWebAppsOutput
	ToAzureStaticWebAppsOutputWithContext(context.Context) AzureStaticWebAppsOutput
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsArgs struct {
	// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the Azure Static Web Apps registration.
	Registration AzureStaticWebAppsRegistrationPtrInput `pulumi:"registration"`
}

func (AzureStaticWebAppsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebApps)(nil)).Elem()
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsOutput() AzureStaticWebAppsOutput {
	return i.ToAzureStaticWebAppsOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsOutputWithContext(ctx context.Context) AzureStaticWebAppsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsOutput)
}

func (i AzureStaticWebAppsArgs) ToOutput(ctx context.Context) pulumix.Output[AzureStaticWebApps] {
	return pulumix.Output[AzureStaticWebApps]{
		OutputState: i.ToAzureStaticWebAppsOutputWithContext(ctx).OutputState,
	}
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return i.ToAzureStaticWebAppsPtrOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsArgs) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsOutput).ToAzureStaticWebAppsPtrOutputWithContext(ctx)
}

// AzureStaticWebAppsPtrInput is an input type that accepts AzureStaticWebAppsArgs, AzureStaticWebAppsPtr and AzureStaticWebAppsPtrOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsPtrInput` via:
//
//	        AzureStaticWebAppsArgs{...}
//
//	or:
//
//	        nil
type AzureStaticWebAppsPtrInput interface {
	pulumi.Input

	ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput
	ToAzureStaticWebAppsPtrOutputWithContext(context.Context) AzureStaticWebAppsPtrOutput
}

type azureStaticWebAppsPtrType AzureStaticWebAppsArgs

func AzureStaticWebAppsPtr(v *AzureStaticWebAppsArgs) AzureStaticWebAppsPtrInput {
	return (*azureStaticWebAppsPtrType)(v)
}

func (*azureStaticWebAppsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebApps)(nil)).Elem()
}

func (i *azureStaticWebAppsPtrType) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return i.ToAzureStaticWebAppsPtrOutputWithContext(context.Background())
}

func (i *azureStaticWebAppsPtrType) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsPtrOutput)
}

func (i *azureStaticWebAppsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureStaticWebApps] {
	return pulumix.Output[*AzureStaticWebApps]{
		OutputState: i.ToAzureStaticWebAppsPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebApps)(nil)).Elem()
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsOutput() AzureStaticWebAppsOutput {
	return o
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsOutputWithContext(ctx context.Context) AzureStaticWebAppsOutput {
	return o
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return o.ToAzureStaticWebAppsPtrOutputWithContext(context.Background())
}

func (o AzureStaticWebAppsOutput) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureStaticWebApps) *AzureStaticWebApps {
		return &v
	}).(AzureStaticWebAppsPtrOutput)
}

func (o AzureStaticWebAppsOutput) ToOutput(ctx context.Context) pulumix.Output[AzureStaticWebApps] {
	return pulumix.Output[AzureStaticWebApps]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStaticWebApps) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsOutput) Registration() AzureStaticWebAppsRegistrationPtrOutput {
	return o.ApplyT(func(v AzureStaticWebApps) *AzureStaticWebAppsRegistration { return v.Registration }).(AzureStaticWebAppsRegistrationPtrOutput)
}

type AzureStaticWebAppsPtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebApps)(nil)).Elem()
}

func (o AzureStaticWebAppsPtrOutput) ToAzureStaticWebAppsPtrOutput() AzureStaticWebAppsPtrOutput {
	return o
}

func (o AzureStaticWebAppsPtrOutput) ToAzureStaticWebAppsPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsPtrOutput {
	return o
}

func (o AzureStaticWebAppsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureStaticWebApps] {
	return pulumix.Output[*AzureStaticWebApps]{
		OutputState: o.OutputState,
	}
}

func (o AzureStaticWebAppsPtrOutput) Elem() AzureStaticWebAppsOutput {
	return o.ApplyT(func(v *AzureStaticWebApps) AzureStaticWebApps {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebApps
		return ret
	}).(AzureStaticWebAppsOutput)
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebApps) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsPtrOutput) Registration() AzureStaticWebAppsRegistrationPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebApps) *AzureStaticWebAppsRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureStaticWebAppsRegistrationPtrOutput)
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistration struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
}

// AzureStaticWebAppsRegistrationInput is an input type that accepts AzureStaticWebAppsRegistrationArgs and AzureStaticWebAppsRegistrationOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsRegistrationInput` via:
//
//	AzureStaticWebAppsRegistrationArgs{...}
type AzureStaticWebAppsRegistrationInput interface {
	pulumi.Input

	ToAzureStaticWebAppsRegistrationOutput() AzureStaticWebAppsRegistrationOutput
	ToAzureStaticWebAppsRegistrationOutputWithContext(context.Context) AzureStaticWebAppsRegistrationOutput
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationArgs struct {
	// The Client ID of the app used for login.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
}

func (AzureStaticWebAppsRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationOutput() AzureStaticWebAppsRegistrationOutput {
	return i.ToAzureStaticWebAppsRegistrationOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsRegistrationOutput)
}

func (i AzureStaticWebAppsRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[AzureStaticWebAppsRegistration] {
	return pulumix.Output[AzureStaticWebAppsRegistration]{
		OutputState: i.ToAzureStaticWebAppsRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return i.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Background())
}

func (i AzureStaticWebAppsRegistrationArgs) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsRegistrationOutput).ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx)
}

// AzureStaticWebAppsRegistrationPtrInput is an input type that accepts AzureStaticWebAppsRegistrationArgs, AzureStaticWebAppsRegistrationPtr and AzureStaticWebAppsRegistrationPtrOutput values.
// You can construct a concrete instance of `AzureStaticWebAppsRegistrationPtrInput` via:
//
//	        AzureStaticWebAppsRegistrationArgs{...}
//
//	or:
//
//	        nil
type AzureStaticWebAppsRegistrationPtrInput interface {
	pulumi.Input

	ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput
	ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Context) AzureStaticWebAppsRegistrationPtrOutput
}

type azureStaticWebAppsRegistrationPtrType AzureStaticWebAppsRegistrationArgs

func AzureStaticWebAppsRegistrationPtr(v *AzureStaticWebAppsRegistrationArgs) AzureStaticWebAppsRegistrationPtrInput {
	return (*azureStaticWebAppsRegistrationPtrType)(v)
}

func (*azureStaticWebAppsRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (i *azureStaticWebAppsRegistrationPtrType) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return i.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Background())
}

func (i *azureStaticWebAppsRegistrationPtrType) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureStaticWebAppsRegistrationPtrOutput)
}

func (i *azureStaticWebAppsRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureStaticWebAppsRegistration] {
	return pulumix.Output[*AzureStaticWebAppsRegistration]{
		OutputState: i.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationOutput() AzureStaticWebAppsRegistrationOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return o.ToAzureStaticWebAppsRegistrationPtrOutputWithContext(context.Background())
}

func (o AzureStaticWebAppsRegistrationOutput) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureStaticWebAppsRegistration) *AzureStaticWebAppsRegistration {
		return &v
	}).(AzureStaticWebAppsRegistrationPtrOutput)
}

func (o AzureStaticWebAppsRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[AzureStaticWebAppsRegistration] {
	return pulumix.Output[AzureStaticWebAppsRegistration]{
		OutputState: o.OutputState,
	}
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type AzureStaticWebAppsRegistrationPtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsRegistration)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationPtrOutput) ToAzureStaticWebAppsRegistrationPtrOutput() AzureStaticWebAppsRegistrationPtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationPtrOutput) ToAzureStaticWebAppsRegistrationPtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationPtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureStaticWebAppsRegistration] {
	return pulumix.Output[*AzureStaticWebAppsRegistration]{
		OutputState: o.OutputState,
	}
}

func (o AzureStaticWebAppsRegistrationPtrOutput) Elem() AzureStaticWebAppsRegistrationOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistration) AzureStaticWebAppsRegistration {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebAppsRegistration
		return ret
	}).(AzureStaticWebAppsRegistrationOutput)
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationResponse struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
}

// The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistrationResponseOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsRegistrationResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationResponseOutput) ToAzureStaticWebAppsRegistrationResponseOutput() AzureStaticWebAppsRegistrationResponseOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponseOutput) ToAzureStaticWebAppsRegistrationResponseOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationResponseOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureStaticWebAppsRegistrationResponse] {
	return pulumix.Output[AzureStaticWebAppsRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type AzureStaticWebAppsRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsRegistrationResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ToAzureStaticWebAppsRegistrationResponsePtrOutput() AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ToAzureStaticWebAppsRegistrationResponsePtrOutputWithContext(ctx context.Context) AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureStaticWebAppsRegistrationResponse] {
	return pulumix.Output[*AzureStaticWebAppsRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureStaticWebAppsRegistrationResponsePtrOutput) Elem() AzureStaticWebAppsRegistrationResponseOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistrationResponse) AzureStaticWebAppsRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebAppsRegistrationResponse
		return ret
	}).(AzureStaticWebAppsRegistrationResponseOutput)
}

// The Client ID of the app used for login.
func (o AzureStaticWebAppsRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsResponse struct {
	// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the Azure Static Web Apps registration.
	Registration *AzureStaticWebAppsRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebAppsResponseOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStaticWebAppsResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsResponseOutput) ToAzureStaticWebAppsResponseOutput() AzureStaticWebAppsResponseOutput {
	return o
}

func (o AzureStaticWebAppsResponseOutput) ToAzureStaticWebAppsResponseOutputWithContext(ctx context.Context) AzureStaticWebAppsResponseOutput {
	return o
}

func (o AzureStaticWebAppsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureStaticWebAppsResponse] {
	return pulumix.Output[AzureStaticWebAppsResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsResponseOutput) Registration() AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o.ApplyT(func(v AzureStaticWebAppsResponse) *AzureStaticWebAppsRegistrationResponse { return v.Registration }).(AzureStaticWebAppsRegistrationResponsePtrOutput)
}

type AzureStaticWebAppsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureStaticWebAppsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStaticWebAppsResponse)(nil)).Elem()
}

func (o AzureStaticWebAppsResponsePtrOutput) ToAzureStaticWebAppsResponsePtrOutput() AzureStaticWebAppsResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsResponsePtrOutput) ToAzureStaticWebAppsResponsePtrOutputWithContext(ctx context.Context) AzureStaticWebAppsResponsePtrOutput {
	return o
}

func (o AzureStaticWebAppsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureStaticWebAppsResponse] {
	return pulumix.Output[*AzureStaticWebAppsResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureStaticWebAppsResponsePtrOutput) Elem() AzureStaticWebAppsResponseOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsResponse) AzureStaticWebAppsResponse {
		if v != nil {
			return *v
		}
		var ret AzureStaticWebAppsResponse
		return ret
	}).(AzureStaticWebAppsResponseOutput)
}

// <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o AzureStaticWebAppsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the Azure Static Web Apps registration.
func (o AzureStaticWebAppsResponsePtrOutput) Registration() AzureStaticWebAppsRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *AzureStaticWebAppsResponse) *AzureStaticWebAppsRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AzureStaticWebAppsRegistrationResponsePtrOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStore struct {
	// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
	SasUrlSettingName string `pulumi:"sasUrlSettingName"`
}

// BlobStorageTokenStoreInput is an input type that accepts BlobStorageTokenStoreArgs and BlobStorageTokenStoreOutput values.
// You can construct a concrete instance of `BlobStorageTokenStoreInput` via:
//
//	BlobStorageTokenStoreArgs{...}
type BlobStorageTokenStoreInput interface {
	pulumi.Input

	ToBlobStorageTokenStoreOutput() BlobStorageTokenStoreOutput
	ToBlobStorageTokenStoreOutputWithContext(context.Context) BlobStorageTokenStoreOutput
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreArgs struct {
	// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
	SasUrlSettingName pulumi.StringInput `pulumi:"sasUrlSettingName"`
}

func (BlobStorageTokenStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStorageTokenStore)(nil)).Elem()
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStoreOutput() BlobStorageTokenStoreOutput {
	return i.ToBlobStorageTokenStoreOutputWithContext(context.Background())
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStoreOutputWithContext(ctx context.Context) BlobStorageTokenStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageTokenStoreOutput)
}

func (i BlobStorageTokenStoreArgs) ToOutput(ctx context.Context) pulumix.Output[BlobStorageTokenStore] {
	return pulumix.Output[BlobStorageTokenStore]{
		OutputState: i.ToBlobStorageTokenStoreOutputWithContext(ctx).OutputState,
	}
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return i.ToBlobStorageTokenStorePtrOutputWithContext(context.Background())
}

func (i BlobStorageTokenStoreArgs) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageTokenStoreOutput).ToBlobStorageTokenStorePtrOutputWithContext(ctx)
}

// BlobStorageTokenStorePtrInput is an input type that accepts BlobStorageTokenStoreArgs, BlobStorageTokenStorePtr and BlobStorageTokenStorePtrOutput values.
// You can construct a concrete instance of `BlobStorageTokenStorePtrInput` via:
//
//	        BlobStorageTokenStoreArgs{...}
//
//	or:
//
//	        nil
type BlobStorageTokenStorePtrInput interface {
	pulumi.Input

	ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput
	ToBlobStorageTokenStorePtrOutputWithContext(context.Context) BlobStorageTokenStorePtrOutput
}

type blobStorageTokenStorePtrType BlobStorageTokenStoreArgs

func BlobStorageTokenStorePtr(v *BlobStorageTokenStoreArgs) BlobStorageTokenStorePtrInput {
	return (*blobStorageTokenStorePtrType)(v)
}

func (*blobStorageTokenStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageTokenStore)(nil)).Elem()
}

func (i *blobStorageTokenStorePtrType) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return i.ToBlobStorageTokenStorePtrOutputWithContext(context.Background())
}

func (i *blobStorageTokenStorePtrType) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStorageTokenStorePtrOutput)
}

func (i *blobStorageTokenStorePtrType) ToOutput(ctx context.Context) pulumix.Output[*BlobStorageTokenStore] {
	return pulumix.Output[*BlobStorageTokenStore]{
		OutputState: i.ToBlobStorageTokenStorePtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStorageTokenStore)(nil)).Elem()
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStoreOutput() BlobStorageTokenStoreOutput {
	return o
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStoreOutputWithContext(ctx context.Context) BlobStorageTokenStoreOutput {
	return o
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return o.ToBlobStorageTokenStorePtrOutputWithContext(context.Background())
}

func (o BlobStorageTokenStoreOutput) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobStorageTokenStore) *BlobStorageTokenStore {
		return &v
	}).(BlobStorageTokenStorePtrOutput)
}

func (o BlobStorageTokenStoreOutput) ToOutput(ctx context.Context) pulumix.Output[BlobStorageTokenStore] {
	return pulumix.Output[BlobStorageTokenStore]{
		OutputState: o.OutputState,
	}
}

// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStoreOutput) SasUrlSettingName() pulumi.StringOutput {
	return o.ApplyT(func(v BlobStorageTokenStore) string { return v.SasUrlSettingName }).(pulumi.StringOutput)
}

type BlobStorageTokenStorePtrOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageTokenStore)(nil)).Elem()
}

func (o BlobStorageTokenStorePtrOutput) ToBlobStorageTokenStorePtrOutput() BlobStorageTokenStorePtrOutput {
	return o
}

func (o BlobStorageTokenStorePtrOutput) ToBlobStorageTokenStorePtrOutputWithContext(ctx context.Context) BlobStorageTokenStorePtrOutput {
	return o
}

func (o BlobStorageTokenStorePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BlobStorageTokenStore] {
	return pulumix.Output[*BlobStorageTokenStore]{
		OutputState: o.OutputState,
	}
}

func (o BlobStorageTokenStorePtrOutput) Elem() BlobStorageTokenStoreOutput {
	return o.ApplyT(func(v *BlobStorageTokenStore) BlobStorageTokenStore {
		if v != nil {
			return *v
		}
		var ret BlobStorageTokenStore
		return ret
	}).(BlobStorageTokenStoreOutput)
}

// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStorePtrOutput) SasUrlSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStorageTokenStore) *string {
		if v == nil {
			return nil
		}
		return &v.SasUrlSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreResponse struct {
	// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
	SasUrlSettingName string `pulumi:"sasUrlSettingName"`
}

// The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStoreResponseOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStorageTokenStoreResponse)(nil)).Elem()
}

func (o BlobStorageTokenStoreResponseOutput) ToBlobStorageTokenStoreResponseOutput() BlobStorageTokenStoreResponseOutput {
	return o
}

func (o BlobStorageTokenStoreResponseOutput) ToBlobStorageTokenStoreResponseOutputWithContext(ctx context.Context) BlobStorageTokenStoreResponseOutput {
	return o
}

func (o BlobStorageTokenStoreResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BlobStorageTokenStoreResponse] {
	return pulumix.Output[BlobStorageTokenStoreResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStoreResponseOutput) SasUrlSettingName() pulumi.StringOutput {
	return o.ApplyT(func(v BlobStorageTokenStoreResponse) string { return v.SasUrlSettingName }).(pulumi.StringOutput)
}

type BlobStorageTokenStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobStorageTokenStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStorageTokenStoreResponse)(nil)).Elem()
}

func (o BlobStorageTokenStoreResponsePtrOutput) ToBlobStorageTokenStoreResponsePtrOutput() BlobStorageTokenStoreResponsePtrOutput {
	return o
}

func (o BlobStorageTokenStoreResponsePtrOutput) ToBlobStorageTokenStoreResponsePtrOutputWithContext(ctx context.Context) BlobStorageTokenStoreResponsePtrOutput {
	return o
}

func (o BlobStorageTokenStoreResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BlobStorageTokenStoreResponse] {
	return pulumix.Output[*BlobStorageTokenStoreResponse]{
		OutputState: o.OutputState,
	}
}

func (o BlobStorageTokenStoreResponsePtrOutput) Elem() BlobStorageTokenStoreResponseOutput {
	return o.ApplyT(func(v *BlobStorageTokenStoreResponse) BlobStorageTokenStoreResponse {
		if v != nil {
			return *v
		}
		var ret BlobStorageTokenStoreResponse
		return ret
	}).(BlobStorageTokenStoreResponseOutput)
}

// The name of the app secrets containing the SAS URL of the blob storage containing the tokens.
func (o BlobStorageTokenStoreResponsePtrOutput) SasUrlSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStorageTokenStoreResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SasUrlSettingName
	}).(pulumi.StringPtrOutput)
}

// Certificate resource specific properties
type CertificateProperties struct {
	// Certificate password.
	Password *string `pulumi:"password"`
	// PFX or PEM blob
	Value *string `pulumi:"value"`
}

// CertificatePropertiesInput is an input type that accepts CertificatePropertiesArgs and CertificatePropertiesOutput values.
// You can construct a concrete instance of `CertificatePropertiesInput` via:
//
//	CertificatePropertiesArgs{...}
type CertificatePropertiesInput interface {
	pulumi.Input

	ToCertificatePropertiesOutput() CertificatePropertiesOutput
	ToCertificatePropertiesOutputWithContext(context.Context) CertificatePropertiesOutput
}

// Certificate resource specific properties
type CertificatePropertiesArgs struct {
	// Certificate password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// PFX or PEM blob
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CertificatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateProperties)(nil)).Elem()
}

func (i CertificatePropertiesArgs) ToCertificatePropertiesOutput() CertificatePropertiesOutput {
	return i.ToCertificatePropertiesOutputWithContext(context.Background())
}

func (i CertificatePropertiesArgs) ToCertificatePropertiesOutputWithContext(ctx context.Context) CertificatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePropertiesOutput)
}

func (i CertificatePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CertificateProperties] {
	return pulumix.Output[CertificateProperties]{
		OutputState: i.ToCertificatePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CertificatePropertiesArgs) ToCertificatePropertiesPtrOutput() CertificatePropertiesPtrOutput {
	return i.ToCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i CertificatePropertiesArgs) ToCertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePropertiesOutput).ToCertificatePropertiesPtrOutputWithContext(ctx)
}

// CertificatePropertiesPtrInput is an input type that accepts CertificatePropertiesArgs, CertificatePropertiesPtr and CertificatePropertiesPtrOutput values.
// You can construct a concrete instance of `CertificatePropertiesPtrInput` via:
//
//	        CertificatePropertiesArgs{...}
//
//	or:
//
//	        nil
type CertificatePropertiesPtrInput interface {
	pulumi.Input

	ToCertificatePropertiesPtrOutput() CertificatePropertiesPtrOutput
	ToCertificatePropertiesPtrOutputWithContext(context.Context) CertificatePropertiesPtrOutput
}

type certificatePropertiesPtrType CertificatePropertiesArgs

func CertificatePropertiesPtr(v *CertificatePropertiesArgs) CertificatePropertiesPtrInput {
	return (*certificatePropertiesPtrType)(v)
}

func (*certificatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateProperties)(nil)).Elem()
}

func (i *certificatePropertiesPtrType) ToCertificatePropertiesPtrOutput() CertificatePropertiesPtrOutput {
	return i.ToCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i *certificatePropertiesPtrType) ToCertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePropertiesPtrOutput)
}

func (i *certificatePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CertificateProperties] {
	return pulumix.Output[*CertificateProperties]{
		OutputState: i.ToCertificatePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Certificate resource specific properties
type CertificatePropertiesOutput struct{ *pulumi.OutputState }

func (CertificatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateProperties)(nil)).Elem()
}

func (o CertificatePropertiesOutput) ToCertificatePropertiesOutput() CertificatePropertiesOutput {
	return o
}

func (o CertificatePropertiesOutput) ToCertificatePropertiesOutputWithContext(ctx context.Context) CertificatePropertiesOutput {
	return o
}

func (o CertificatePropertiesOutput) ToCertificatePropertiesPtrOutput() CertificatePropertiesPtrOutput {
	return o.ToCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (o CertificatePropertiesOutput) ToCertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateProperties) *CertificateProperties {
		return &v
	}).(CertificatePropertiesPtrOutput)
}

func (o CertificatePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateProperties] {
	return pulumix.Output[CertificateProperties]{
		OutputState: o.OutputState,
	}
}

// Certificate password.
func (o CertificatePropertiesOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateProperties) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// PFX or PEM blob
func (o CertificatePropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CertificatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertificatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateProperties)(nil)).Elem()
}

func (o CertificatePropertiesPtrOutput) ToCertificatePropertiesPtrOutput() CertificatePropertiesPtrOutput {
	return o
}

func (o CertificatePropertiesPtrOutput) ToCertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificatePropertiesPtrOutput {
	return o
}

func (o CertificatePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateProperties] {
	return pulumix.Output[*CertificateProperties]{
		OutputState: o.OutputState,
	}
}

func (o CertificatePropertiesPtrOutput) Elem() CertificatePropertiesOutput {
	return o.ApplyT(func(v *CertificateProperties) CertificateProperties {
		if v != nil {
			return *v
		}
		var ret CertificateProperties
		return ret
	}).(CertificatePropertiesOutput)
}

// Certificate password.
func (o CertificatePropertiesPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateProperties) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// PFX or PEM blob
func (o CertificatePropertiesPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateProperties) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Certificate resource specific properties
type CertificateResponseProperties struct {
	// Certificate expiration date.
	ExpirationDate string `pulumi:"expirationDate"`
	// Certificate issue Date.
	IssueDate string `pulumi:"issueDate"`
	// Certificate issuer.
	Issuer string `pulumi:"issuer"`
	// Provisioning state of the certificate.
	ProvisioningState string `pulumi:"provisioningState"`
	// Public key hash.
	PublicKeyHash string `pulumi:"publicKeyHash"`
	// Subject alternative names the certificate applies to.
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// Subject name of the certificate.
	SubjectName string `pulumi:"subjectName"`
	// Certificate thumbprint.
	Thumbprint string `pulumi:"thumbprint"`
	// Is the certificate valid?.
	Valid bool `pulumi:"valid"`
}

// Certificate resource specific properties
type CertificateResponsePropertiesOutput struct{ *pulumi.OutputState }

func (CertificateResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateResponseProperties)(nil)).Elem()
}

func (o CertificateResponsePropertiesOutput) ToCertificateResponsePropertiesOutput() CertificateResponsePropertiesOutput {
	return o
}

func (o CertificateResponsePropertiesOutput) ToCertificateResponsePropertiesOutputWithContext(ctx context.Context) CertificateResponsePropertiesOutput {
	return o
}

func (o CertificateResponsePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateResponseProperties] {
	return pulumix.Output[CertificateResponseProperties]{
		OutputState: o.OutputState,
	}
}

// Certificate expiration date.
func (o CertificateResponsePropertiesOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Certificate issue Date.
func (o CertificateResponsePropertiesOutput) IssueDate() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.IssueDate }).(pulumi.StringOutput)
}

// Certificate issuer.
func (o CertificateResponsePropertiesOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.Issuer }).(pulumi.StringOutput)
}

// Provisioning state of the certificate.
func (o CertificateResponsePropertiesOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Public key hash.
func (o CertificateResponsePropertiesOutput) PublicKeyHash() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.PublicKeyHash }).(pulumi.StringOutput)
}

// Subject alternative names the certificate applies to.
func (o CertificateResponsePropertiesOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateResponseProperties) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

// Subject name of the certificate.
func (o CertificateResponsePropertiesOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.SubjectName }).(pulumi.StringOutput)
}

// Certificate thumbprint.
func (o CertificateResponsePropertiesOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateResponseProperties) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Is the certificate valid?.
func (o CertificateResponsePropertiesOutput) Valid() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateResponseProperties) bool { return v.Valid }).(pulumi.BoolOutput)
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistration struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// ClientRegistrationInput is an input type that accepts ClientRegistrationArgs and ClientRegistrationOutput values.
// You can construct a concrete instance of `ClientRegistrationInput` via:
//
//	ClientRegistrationArgs{...}
type ClientRegistrationInput interface {
	pulumi.Input

	ToClientRegistrationOutput() ClientRegistrationOutput
	ToClientRegistrationOutputWithContext(context.Context) ClientRegistrationOutput
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationArgs struct {
	// The Client ID of the app used for login.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
}

func (ClientRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientRegistration)(nil)).Elem()
}

func (i ClientRegistrationArgs) ToClientRegistrationOutput() ClientRegistrationOutput {
	return i.ToClientRegistrationOutputWithContext(context.Background())
}

func (i ClientRegistrationArgs) ToClientRegistrationOutputWithContext(ctx context.Context) ClientRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientRegistrationOutput)
}

func (i ClientRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[ClientRegistration] {
	return pulumix.Output[ClientRegistration]{
		OutputState: i.ToClientRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i ClientRegistrationArgs) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return i.ToClientRegistrationPtrOutputWithContext(context.Background())
}

func (i ClientRegistrationArgs) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientRegistrationOutput).ToClientRegistrationPtrOutputWithContext(ctx)
}

// ClientRegistrationPtrInput is an input type that accepts ClientRegistrationArgs, ClientRegistrationPtr and ClientRegistrationPtrOutput values.
// You can construct a concrete instance of `ClientRegistrationPtrInput` via:
//
//	        ClientRegistrationArgs{...}
//
//	or:
//
//	        nil
type ClientRegistrationPtrInput interface {
	pulumi.Input

	ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput
	ToClientRegistrationPtrOutputWithContext(context.Context) ClientRegistrationPtrOutput
}

type clientRegistrationPtrType ClientRegistrationArgs

func ClientRegistrationPtr(v *ClientRegistrationArgs) ClientRegistrationPtrInput {
	return (*clientRegistrationPtrType)(v)
}

func (*clientRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientRegistration)(nil)).Elem()
}

func (i *clientRegistrationPtrType) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return i.ToClientRegistrationPtrOutputWithContext(context.Background())
}

func (i *clientRegistrationPtrType) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientRegistrationPtrOutput)
}

func (i *clientRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientRegistration] {
	return pulumix.Output[*ClientRegistration]{
		OutputState: i.ToClientRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationOutput struct{ *pulumi.OutputState }

func (ClientRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientRegistration)(nil)).Elem()
}

func (o ClientRegistrationOutput) ToClientRegistrationOutput() ClientRegistrationOutput {
	return o
}

func (o ClientRegistrationOutput) ToClientRegistrationOutputWithContext(ctx context.Context) ClientRegistrationOutput {
	return o
}

func (o ClientRegistrationOutput) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return o.ToClientRegistrationPtrOutputWithContext(context.Background())
}

func (o ClientRegistrationOutput) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientRegistration) *ClientRegistration {
		return &v
	}).(ClientRegistrationPtrOutput)
}

func (o ClientRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[ClientRegistration] {
	return pulumix.Output[ClientRegistration]{
		OutputState: o.OutputState,
	}
}

// The Client ID of the app used for login.
func (o ClientRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistration) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type ClientRegistrationPtrOutput struct{ *pulumi.OutputState }

func (ClientRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientRegistration)(nil)).Elem()
}

func (o ClientRegistrationPtrOutput) ToClientRegistrationPtrOutput() ClientRegistrationPtrOutput {
	return o
}

func (o ClientRegistrationPtrOutput) ToClientRegistrationPtrOutputWithContext(ctx context.Context) ClientRegistrationPtrOutput {
	return o
}

func (o ClientRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientRegistration] {
	return pulumix.Output[*ClientRegistration]{
		OutputState: o.OutputState,
	}
}

func (o ClientRegistrationPtrOutput) Elem() ClientRegistrationOutput {
	return o.ApplyT(func(v *ClientRegistration) ClientRegistration {
		if v != nil {
			return *v
		}
		var ret ClientRegistration
		return ret
	}).(ClientRegistrationOutput)
}

// The Client ID of the app used for login.
func (o ClientRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationResponse struct {
	// The Client ID of the app used for login.
	ClientId *string `pulumi:"clientId"`
	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
}

// The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistrationResponseOutput struct{ *pulumi.OutputState }

func (ClientRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientRegistrationResponse)(nil)).Elem()
}

func (o ClientRegistrationResponseOutput) ToClientRegistrationResponseOutput() ClientRegistrationResponseOutput {
	return o
}

func (o ClientRegistrationResponseOutput) ToClientRegistrationResponseOutputWithContext(ctx context.Context) ClientRegistrationResponseOutput {
	return o
}

func (o ClientRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClientRegistrationResponse] {
	return pulumix.Output[ClientRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The Client ID of the app used for login.
func (o ClientRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientRegistrationResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

type ClientRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientRegistrationResponse)(nil)).Elem()
}

func (o ClientRegistrationResponsePtrOutput) ToClientRegistrationResponsePtrOutput() ClientRegistrationResponsePtrOutput {
	return o
}

func (o ClientRegistrationResponsePtrOutput) ToClientRegistrationResponsePtrOutputWithContext(ctx context.Context) ClientRegistrationResponsePtrOutput {
	return o
}

func (o ClientRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientRegistrationResponse] {
	return pulumix.Output[*ClientRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ClientRegistrationResponsePtrOutput) Elem() ClientRegistrationResponseOutput {
	return o.ApplyT(func(v *ClientRegistrationResponse) ClientRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret ClientRegistrationResponse
		return ret
	}).(ClientRegistrationResponseOutput)
}

// The Client ID of the app used for login.
func (o ClientRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the client secret.
func (o ClientRegistrationResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// Non versioned Container App configuration properties that define the mutable settings of a Container app
type Configuration struct {
	// ActiveRevisionsMode controls how active revisions are handled for the Container app:
	// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
	ActiveRevisionsMode *string `pulumi:"activeRevisionsMode"`
	// Dapr configuration for the Container App.
	Dapr *Dapr `pulumi:"dapr"`
	// Ingress configurations.
	Ingress *Ingress `pulumi:"ingress"`
	// Optional. Max inactive revisions a Container App can have.
	MaxInactiveRevisions *int `pulumi:"maxInactiveRevisions"`
	// Collection of private container registry credentials for containers used by the Container app
	Registries []RegistryCredentials `pulumi:"registries"`
	// Collection of secrets used by a Container app
	Secrets []Secret `pulumi:"secrets"`
	// Container App to be a dev Container App Service
	Service *Service `pulumi:"service"`
}

// Defaults sets the appropriate defaults for Configuration
func (val *Configuration) Defaults() *Configuration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ActiveRevisionsMode == nil {
		activeRevisionsMode_ := "Single"
		tmp.ActiveRevisionsMode = &activeRevisionsMode_
	}
	tmp.Dapr = tmp.Dapr.Defaults()

	tmp.Ingress = tmp.Ingress.Defaults()

	return &tmp
}

// ConfigurationInput is an input type that accepts ConfigurationArgs and ConfigurationOutput values.
// You can construct a concrete instance of `ConfigurationInput` via:
//
//	ConfigurationArgs{...}
type ConfigurationInput interface {
	pulumi.Input

	ToConfigurationOutput() ConfigurationOutput
	ToConfigurationOutputWithContext(context.Context) ConfigurationOutput
}

// Non versioned Container App configuration properties that define the mutable settings of a Container app
type ConfigurationArgs struct {
	// ActiveRevisionsMode controls how active revisions are handled for the Container app:
	// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
	ActiveRevisionsMode pulumi.StringPtrInput `pulumi:"activeRevisionsMode"`
	// Dapr configuration for the Container App.
	Dapr DaprPtrInput `pulumi:"dapr"`
	// Ingress configurations.
	Ingress IngressPtrInput `pulumi:"ingress"`
	// Optional. Max inactive revisions a Container App can have.
	MaxInactiveRevisions pulumi.IntPtrInput `pulumi:"maxInactiveRevisions"`
	// Collection of private container registry credentials for containers used by the Container app
	Registries RegistryCredentialsArrayInput `pulumi:"registries"`
	// Collection of secrets used by a Container app
	Secrets SecretArrayInput `pulumi:"secrets"`
	// Container App to be a dev Container App Service
	Service ServicePtrInput `pulumi:"service"`
}

// Defaults sets the appropriate defaults for ConfigurationArgs
func (val *ConfigurationArgs) Defaults() *ConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ActiveRevisionsMode == nil {
		tmp.ActiveRevisionsMode = pulumi.StringPtr("Single")
	}

	return &tmp
}
func (ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Configuration)(nil)).Elem()
}

func (i ConfigurationArgs) ToConfigurationOutput() ConfigurationOutput {
	return i.ToConfigurationOutputWithContext(context.Background())
}

func (i ConfigurationArgs) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationOutput)
}

func (i ConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[Configuration] {
	return pulumix.Output[Configuration]{
		OutputState: i.ToConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ConfigurationArgs) ToConfigurationPtrOutput() ConfigurationPtrOutput {
	return i.ToConfigurationPtrOutputWithContext(context.Background())
}

func (i ConfigurationArgs) ToConfigurationPtrOutputWithContext(ctx context.Context) ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationOutput).ToConfigurationPtrOutputWithContext(ctx)
}

// ConfigurationPtrInput is an input type that accepts ConfigurationArgs, ConfigurationPtr and ConfigurationPtrOutput values.
// You can construct a concrete instance of `ConfigurationPtrInput` via:
//
//	        ConfigurationArgs{...}
//
//	or:
//
//	        nil
type ConfigurationPtrInput interface {
	pulumi.Input

	ToConfigurationPtrOutput() ConfigurationPtrOutput
	ToConfigurationPtrOutputWithContext(context.Context) ConfigurationPtrOutput
}

type configurationPtrType ConfigurationArgs

func ConfigurationPtr(v *ConfigurationArgs) ConfigurationPtrInput {
	return (*configurationPtrType)(v)
}

func (*configurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (i *configurationPtrType) ToConfigurationPtrOutput() ConfigurationPtrOutput {
	return i.ToConfigurationPtrOutputWithContext(context.Background())
}

func (i *configurationPtrType) ToConfigurationPtrOutputWithContext(ctx context.Context) ConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationPtrOutput)
}

func (i *configurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*Configuration] {
	return pulumix.Output[*Configuration]{
		OutputState: i.ToConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Non versioned Container App configuration properties that define the mutable settings of a Container app
type ConfigurationOutput struct{ *pulumi.OutputState }

func (ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Configuration)(nil)).Elem()
}

func (o ConfigurationOutput) ToConfigurationOutput() ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) ToConfigurationPtrOutput() ConfigurationPtrOutput {
	return o.ToConfigurationPtrOutputWithContext(context.Background())
}

func (o ConfigurationOutput) ToConfigurationPtrOutputWithContext(ctx context.Context) ConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Configuration) *Configuration {
		return &v
	}).(ConfigurationPtrOutput)
}

func (o ConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[Configuration] {
	return pulumix.Output[Configuration]{
		OutputState: o.OutputState,
	}
}

// ActiveRevisionsMode controls how active revisions are handled for the Container app:
// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
func (o ConfigurationOutput) ActiveRevisionsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Configuration) *string { return v.ActiveRevisionsMode }).(pulumi.StringPtrOutput)
}

// Dapr configuration for the Container App.
func (o ConfigurationOutput) Dapr() DaprPtrOutput {
	return o.ApplyT(func(v Configuration) *Dapr { return v.Dapr }).(DaprPtrOutput)
}

// Ingress configurations.
func (o ConfigurationOutput) Ingress() IngressPtrOutput {
	return o.ApplyT(func(v Configuration) *Ingress { return v.Ingress }).(IngressPtrOutput)
}

// Optional. Max inactive revisions a Container App can have.
func (o ConfigurationOutput) MaxInactiveRevisions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Configuration) *int { return v.MaxInactiveRevisions }).(pulumi.IntPtrOutput)
}

// Collection of private container registry credentials for containers used by the Container app
func (o ConfigurationOutput) Registries() RegistryCredentialsArrayOutput {
	return o.ApplyT(func(v Configuration) []RegistryCredentials { return v.Registries }).(RegistryCredentialsArrayOutput)
}

// Collection of secrets used by a Container app
func (o ConfigurationOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v Configuration) []Secret { return v.Secrets }).(SecretArrayOutput)
}

// Container App to be a dev Container App Service
func (o ConfigurationOutput) Service() ServicePtrOutput {
	return o.ApplyT(func(v Configuration) *Service { return v.Service }).(ServicePtrOutput)
}

type ConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (o ConfigurationPtrOutput) ToConfigurationPtrOutput() ConfigurationPtrOutput {
	return o
}

func (o ConfigurationPtrOutput) ToConfigurationPtrOutputWithContext(ctx context.Context) ConfigurationPtrOutput {
	return o
}

func (o ConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Configuration] {
	return pulumix.Output[*Configuration]{
		OutputState: o.OutputState,
	}
}

func (o ConfigurationPtrOutput) Elem() ConfigurationOutput {
	return o.ApplyT(func(v *Configuration) Configuration {
		if v != nil {
			return *v
		}
		var ret Configuration
		return ret
	}).(ConfigurationOutput)
}

// ActiveRevisionsMode controls how active revisions are handled for the Container app:
// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
func (o ConfigurationPtrOutput) ActiveRevisionsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Configuration) *string {
		if v == nil {
			return nil
		}
		return v.ActiveRevisionsMode
	}).(pulumi.StringPtrOutput)
}

// Dapr configuration for the Container App.
func (o ConfigurationPtrOutput) Dapr() DaprPtrOutput {
	return o.ApplyT(func(v *Configuration) *Dapr {
		if v == nil {
			return nil
		}
		return v.Dapr
	}).(DaprPtrOutput)
}

// Ingress configurations.
func (o ConfigurationPtrOutput) Ingress() IngressPtrOutput {
	return o.ApplyT(func(v *Configuration) *Ingress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(IngressPtrOutput)
}

// Optional. Max inactive revisions a Container App can have.
func (o ConfigurationPtrOutput) MaxInactiveRevisions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Configuration) *int {
		if v == nil {
			return nil
		}
		return v.MaxInactiveRevisions
	}).(pulumi.IntPtrOutput)
}

// Collection of private container registry credentials for containers used by the Container app
func (o ConfigurationPtrOutput) Registries() RegistryCredentialsArrayOutput {
	return o.ApplyT(func(v *Configuration) []RegistryCredentials {
		if v == nil {
			return nil
		}
		return v.Registries
	}).(RegistryCredentialsArrayOutput)
}

// Collection of secrets used by a Container app
func (o ConfigurationPtrOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v *Configuration) []Secret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretArrayOutput)
}

// Container App to be a dev Container App Service
func (o ConfigurationPtrOutput) Service() ServicePtrOutput {
	return o.ApplyT(func(v *Configuration) *Service {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ServicePtrOutput)
}

// Non versioned Container App configuration properties that define the mutable settings of a Container app
type ConfigurationResponse struct {
	// ActiveRevisionsMode controls how active revisions are handled for the Container app:
	// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
	ActiveRevisionsMode *string `pulumi:"activeRevisionsMode"`
	// Dapr configuration for the Container App.
	Dapr *DaprResponse `pulumi:"dapr"`
	// Ingress configurations.
	Ingress *IngressResponse `pulumi:"ingress"`
	// Optional. Max inactive revisions a Container App can have.
	MaxInactiveRevisions *int `pulumi:"maxInactiveRevisions"`
	// Collection of private container registry credentials for containers used by the Container app
	Registries []RegistryCredentialsResponse `pulumi:"registries"`
	// Collection of secrets used by a Container app
	Secrets []SecretResponse `pulumi:"secrets"`
	// Container App to be a dev Container App Service
	Service *ServiceResponse `pulumi:"service"`
}

// Defaults sets the appropriate defaults for ConfigurationResponse
func (val *ConfigurationResponse) Defaults() *ConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ActiveRevisionsMode == nil {
		activeRevisionsMode_ := "Single"
		tmp.ActiveRevisionsMode = &activeRevisionsMode_
	}
	tmp.Dapr = tmp.Dapr.Defaults()

	tmp.Ingress = tmp.Ingress.Defaults()

	return &tmp
}

// Non versioned Container App configuration properties that define the mutable settings of a Container app
type ConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationResponse)(nil)).Elem()
}

func (o ConfigurationResponseOutput) ToConfigurationResponseOutput() ConfigurationResponseOutput {
	return o
}

func (o ConfigurationResponseOutput) ToConfigurationResponseOutputWithContext(ctx context.Context) ConfigurationResponseOutput {
	return o
}

func (o ConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConfigurationResponse] {
	return pulumix.Output[ConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// ActiveRevisionsMode controls how active revisions are handled for the Container app:
// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
func (o ConfigurationResponseOutput) ActiveRevisionsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationResponse) *string { return v.ActiveRevisionsMode }).(pulumi.StringPtrOutput)
}

// Dapr configuration for the Container App.
func (o ConfigurationResponseOutput) Dapr() DaprResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationResponse) *DaprResponse { return v.Dapr }).(DaprResponsePtrOutput)
}

// Ingress configurations.
func (o ConfigurationResponseOutput) Ingress() IngressResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationResponse) *IngressResponse { return v.Ingress }).(IngressResponsePtrOutput)
}

// Optional. Max inactive revisions a Container App can have.
func (o ConfigurationResponseOutput) MaxInactiveRevisions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigurationResponse) *int { return v.MaxInactiveRevisions }).(pulumi.IntPtrOutput)
}

// Collection of private container registry credentials for containers used by the Container app
func (o ConfigurationResponseOutput) Registries() RegistryCredentialsResponseArrayOutput {
	return o.ApplyT(func(v ConfigurationResponse) []RegistryCredentialsResponse { return v.Registries }).(RegistryCredentialsResponseArrayOutput)
}

// Collection of secrets used by a Container app
func (o ConfigurationResponseOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v ConfigurationResponse) []SecretResponse { return v.Secrets }).(SecretResponseArrayOutput)
}

// Container App to be a dev Container App Service
func (o ConfigurationResponseOutput) Service() ServiceResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationResponse) *ServiceResponse { return v.Service }).(ServiceResponsePtrOutput)
}

type ConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationResponse)(nil)).Elem()
}

func (o ConfigurationResponsePtrOutput) ToConfigurationResponsePtrOutput() ConfigurationResponsePtrOutput {
	return o
}

func (o ConfigurationResponsePtrOutput) ToConfigurationResponsePtrOutputWithContext(ctx context.Context) ConfigurationResponsePtrOutput {
	return o
}

func (o ConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConfigurationResponse] {
	return pulumix.Output[*ConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ConfigurationResponsePtrOutput) Elem() ConfigurationResponseOutput {
	return o.ApplyT(func(v *ConfigurationResponse) ConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ConfigurationResponse
		return ret
	}).(ConfigurationResponseOutput)
}

// ActiveRevisionsMode controls how active revisions are handled for the Container app:
// <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
func (o ConfigurationResponsePtrOutput) ActiveRevisionsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActiveRevisionsMode
	}).(pulumi.StringPtrOutput)
}

// Dapr configuration for the Container App.
func (o ConfigurationResponsePtrOutput) Dapr() DaprResponsePtrOutput {
	return o.ApplyT(func(v *ConfigurationResponse) *DaprResponse {
		if v == nil {
			return nil
		}
		return v.Dapr
	}).(DaprResponsePtrOutput)
}

// Ingress configurations.
func (o ConfigurationResponsePtrOutput) Ingress() IngressResponsePtrOutput {
	return o.ApplyT(func(v *ConfigurationResponse) *IngressResponse {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(IngressResponsePtrOutput)
}

// Optional. Max inactive revisions a Container App can have.
func (o ConfigurationResponsePtrOutput) MaxInactiveRevisions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInactiveRevisions
	}).(pulumi.IntPtrOutput)
}

// Collection of private container registry credentials for containers used by the Container app
func (o ConfigurationResponsePtrOutput) Registries() RegistryCredentialsResponseArrayOutput {
	return o.ApplyT(func(v *ConfigurationResponse) []RegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Registries
	}).(RegistryCredentialsResponseArrayOutput)
}

// Collection of secrets used by a Container app
func (o ConfigurationResponsePtrOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v *ConfigurationResponse) []SecretResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretResponseArrayOutput)
}

// Container App to be a dev Container App Service
func (o ConfigurationResponsePtrOutput) Service() ServiceResponsePtrOutput {
	return o.ApplyT(func(v *ConfigurationResponse) *ServiceResponse {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ServiceResponsePtrOutput)
}

// Storage properties
type ConnectedEnvironmentStorageProperties struct {
	// Azure file properties
	AzureFile *AzureFileProperties `pulumi:"azureFile"`
}

// ConnectedEnvironmentStoragePropertiesInput is an input type that accepts ConnectedEnvironmentStoragePropertiesArgs and ConnectedEnvironmentStoragePropertiesOutput values.
// You can construct a concrete instance of `ConnectedEnvironmentStoragePropertiesInput` via:
//
//	ConnectedEnvironmentStoragePropertiesArgs{...}
type ConnectedEnvironmentStoragePropertiesInput interface {
	pulumi.Input

	ToConnectedEnvironmentStoragePropertiesOutput() ConnectedEnvironmentStoragePropertiesOutput
	ToConnectedEnvironmentStoragePropertiesOutputWithContext(context.Context) ConnectedEnvironmentStoragePropertiesOutput
}

// Storage properties
type ConnectedEnvironmentStoragePropertiesArgs struct {
	// Azure file properties
	AzureFile AzureFilePropertiesPtrInput `pulumi:"azureFile"`
}

func (ConnectedEnvironmentStoragePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedEnvironmentStorageProperties)(nil)).Elem()
}

func (i ConnectedEnvironmentStoragePropertiesArgs) ToConnectedEnvironmentStoragePropertiesOutput() ConnectedEnvironmentStoragePropertiesOutput {
	return i.ToConnectedEnvironmentStoragePropertiesOutputWithContext(context.Background())
}

func (i ConnectedEnvironmentStoragePropertiesArgs) ToConnectedEnvironmentStoragePropertiesOutputWithContext(ctx context.Context) ConnectedEnvironmentStoragePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedEnvironmentStoragePropertiesOutput)
}

func (i ConnectedEnvironmentStoragePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectedEnvironmentStorageProperties] {
	return pulumix.Output[ConnectedEnvironmentStorageProperties]{
		OutputState: i.ToConnectedEnvironmentStoragePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i ConnectedEnvironmentStoragePropertiesArgs) ToConnectedEnvironmentStoragePropertiesPtrOutput() ConnectedEnvironmentStoragePropertiesPtrOutput {
	return i.ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectedEnvironmentStoragePropertiesArgs) ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ConnectedEnvironmentStoragePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedEnvironmentStoragePropertiesOutput).ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(ctx)
}

// ConnectedEnvironmentStoragePropertiesPtrInput is an input type that accepts ConnectedEnvironmentStoragePropertiesArgs, ConnectedEnvironmentStoragePropertiesPtr and ConnectedEnvironmentStoragePropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectedEnvironmentStoragePropertiesPtrInput` via:
//
//	        ConnectedEnvironmentStoragePropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectedEnvironmentStoragePropertiesPtrInput interface {
	pulumi.Input

	ToConnectedEnvironmentStoragePropertiesPtrOutput() ConnectedEnvironmentStoragePropertiesPtrOutput
	ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(context.Context) ConnectedEnvironmentStoragePropertiesPtrOutput
}

type connectedEnvironmentStoragePropertiesPtrType ConnectedEnvironmentStoragePropertiesArgs

func ConnectedEnvironmentStoragePropertiesPtr(v *ConnectedEnvironmentStoragePropertiesArgs) ConnectedEnvironmentStoragePropertiesPtrInput {
	return (*connectedEnvironmentStoragePropertiesPtrType)(v)
}

func (*connectedEnvironmentStoragePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedEnvironmentStorageProperties)(nil)).Elem()
}

func (i *connectedEnvironmentStoragePropertiesPtrType) ToConnectedEnvironmentStoragePropertiesPtrOutput() ConnectedEnvironmentStoragePropertiesPtrOutput {
	return i.ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(context.Background())
}

func (i *connectedEnvironmentStoragePropertiesPtrType) ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ConnectedEnvironmentStoragePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedEnvironmentStoragePropertiesPtrOutput)
}

func (i *connectedEnvironmentStoragePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConnectedEnvironmentStorageProperties] {
	return pulumix.Output[*ConnectedEnvironmentStorageProperties]{
		OutputState: i.ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Storage properties
type ConnectedEnvironmentStoragePropertiesOutput struct{ *pulumi.OutputState }

func (ConnectedEnvironmentStoragePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedEnvironmentStorageProperties)(nil)).Elem()
}

func (o ConnectedEnvironmentStoragePropertiesOutput) ToConnectedEnvironmentStoragePropertiesOutput() ConnectedEnvironmentStoragePropertiesOutput {
	return o
}

func (o ConnectedEnvironmentStoragePropertiesOutput) ToConnectedEnvironmentStoragePropertiesOutputWithContext(ctx context.Context) ConnectedEnvironmentStoragePropertiesOutput {
	return o
}

func (o ConnectedEnvironmentStoragePropertiesOutput) ToConnectedEnvironmentStoragePropertiesPtrOutput() ConnectedEnvironmentStoragePropertiesPtrOutput {
	return o.ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectedEnvironmentStoragePropertiesOutput) ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ConnectedEnvironmentStoragePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectedEnvironmentStorageProperties) *ConnectedEnvironmentStorageProperties {
		return &v
	}).(ConnectedEnvironmentStoragePropertiesPtrOutput)
}

func (o ConnectedEnvironmentStoragePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectedEnvironmentStorageProperties] {
	return pulumix.Output[ConnectedEnvironmentStorageProperties]{
		OutputState: o.OutputState,
	}
}

// Azure file properties
func (o ConnectedEnvironmentStoragePropertiesOutput) AzureFile() AzureFilePropertiesPtrOutput {
	return o.ApplyT(func(v ConnectedEnvironmentStorageProperties) *AzureFileProperties { return v.AzureFile }).(AzureFilePropertiesPtrOutput)
}

type ConnectedEnvironmentStoragePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectedEnvironmentStoragePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedEnvironmentStorageProperties)(nil)).Elem()
}

func (o ConnectedEnvironmentStoragePropertiesPtrOutput) ToConnectedEnvironmentStoragePropertiesPtrOutput() ConnectedEnvironmentStoragePropertiesPtrOutput {
	return o
}

func (o ConnectedEnvironmentStoragePropertiesPtrOutput) ToConnectedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ConnectedEnvironmentStoragePropertiesPtrOutput {
	return o
}

func (o ConnectedEnvironmentStoragePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectedEnvironmentStorageProperties] {
	return pulumix.Output[*ConnectedEnvironmentStorageProperties]{
		OutputState: o.OutputState,
	}
}

func (o ConnectedEnvironmentStoragePropertiesPtrOutput) Elem() ConnectedEnvironmentStoragePropertiesOutput {
	return o.ApplyT(func(v *ConnectedEnvironmentStorageProperties) ConnectedEnvironmentStorageProperties {
		if v != nil {
			return *v
		}
		var ret ConnectedEnvironmentStorageProperties
		return ret
	}).(ConnectedEnvironmentStoragePropertiesOutput)
}

// Azure file properties
func (o ConnectedEnvironmentStoragePropertiesPtrOutput) AzureFile() AzureFilePropertiesPtrOutput {
	return o.ApplyT(func(v *ConnectedEnvironmentStorageProperties) *AzureFileProperties {
		if v == nil {
			return nil
		}
		return v.AzureFile
	}).(AzureFilePropertiesPtrOutput)
}

// Storage properties
type ConnectedEnvironmentStorageResponseProperties struct {
	// Azure file properties
	AzureFile *AzureFilePropertiesResponse `pulumi:"azureFile"`
}

// Storage properties
type ConnectedEnvironmentStorageResponsePropertiesOutput struct{ *pulumi.OutputState }

func (ConnectedEnvironmentStorageResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedEnvironmentStorageResponseProperties)(nil)).Elem()
}

func (o ConnectedEnvironmentStorageResponsePropertiesOutput) ToConnectedEnvironmentStorageResponsePropertiesOutput() ConnectedEnvironmentStorageResponsePropertiesOutput {
	return o
}

func (o ConnectedEnvironmentStorageResponsePropertiesOutput) ToConnectedEnvironmentStorageResponsePropertiesOutputWithContext(ctx context.Context) ConnectedEnvironmentStorageResponsePropertiesOutput {
	return o
}

func (o ConnectedEnvironmentStorageResponsePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectedEnvironmentStorageResponseProperties] {
	return pulumix.Output[ConnectedEnvironmentStorageResponseProperties]{
		OutputState: o.OutputState,
	}
}

// Azure file properties
func (o ConnectedEnvironmentStorageResponsePropertiesOutput) AzureFile() AzureFilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ConnectedEnvironmentStorageResponseProperties) *AzureFilePropertiesResponse { return v.AzureFile }).(AzureFilePropertiesResponsePtrOutput)
}

// Container App container definition
type Container struct {
	// Container start command arguments.
	Args []string `pulumi:"args"`
	// Container start command.
	Command []string `pulumi:"command"`
	// Container environment variables.
	Env []EnvironmentVar `pulumi:"env"`
	// Container image tag.
	Image *string `pulumi:"image"`
	// Custom container name.
	Name *string `pulumi:"name"`
	// List of probes for the container.
	Probes []ContainerAppProbe `pulumi:"probes"`
	// Container resource requirements.
	Resources *ContainerResources `pulumi:"resources"`
	// Container volume mounts.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//	ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// Container App container definition
type ContainerArgs struct {
	// Container start command arguments.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Container start command.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Container environment variables.
	Env EnvironmentVarArrayInput `pulumi:"env"`
	// Container image tag.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Custom container name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of probes for the container.
	Probes ContainerAppProbeArrayInput `pulumi:"probes"`
	// Container resource requirements.
	Resources ContainerResourcesPtrInput `pulumi:"resources"`
	// Container volume mounts.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

func (i ContainerArgs) ToOutput(ctx context.Context) pulumix.Output[Container] {
	return pulumix.Output[Container]{
		OutputState: i.ToContainerOutputWithContext(ctx).OutputState,
	}
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//	ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

func (i ContainerArray) ToOutput(ctx context.Context) pulumix.Output[[]Container] {
	return pulumix.Output[[]Container]{
		OutputState: i.ToContainerArrayOutputWithContext(ctx).OutputState,
	}
}

// Container App container definition
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

func (o ContainerOutput) ToOutput(ctx context.Context) pulumix.Output[Container] {
	return pulumix.Output[Container]{
		OutputState: o.OutputState,
	}
}

// Container start command arguments.
func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Container start command.
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container environment variables.
func (o ContainerOutput) Env() EnvironmentVarArrayOutput {
	return o.ApplyT(func(v Container) []EnvironmentVar { return v.Env }).(EnvironmentVarArrayOutput)
}

// Container image tag.
func (o ContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Custom container name.
func (o ContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of probes for the container.
func (o ContainerOutput) Probes() ContainerAppProbeArrayOutput {
	return o.ApplyT(func(v Container) []ContainerAppProbe { return v.Probes }).(ContainerAppProbeArrayOutput)
}

// Container resource requirements.
func (o ContainerOutput) Resources() ContainerResourcesPtrOutput {
	return o.ApplyT(func(v Container) *ContainerResources { return v.Resources }).(ContainerResourcesPtrOutput)
}

// Container volume mounts.
func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v Container) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Container] {
	return pulumix.Output[[]Container]{
		OutputState: o.OutputState,
	}
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ContainerAppProbe struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *ContainerAppProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
	TcpSocket *ContainerAppProbeTcpSocket `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)
	TerminationGracePeriodSeconds *float64 `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// The type of probe.
	Type *string `pulumi:"type"`
}

// ContainerAppProbeInput is an input type that accepts ContainerAppProbeArgs and ContainerAppProbeOutput values.
// You can construct a concrete instance of `ContainerAppProbeInput` via:
//
//	ContainerAppProbeArgs{...}
type ContainerAppProbeInput interface {
	pulumi.Input

	ToContainerAppProbeOutput() ContainerAppProbeOutput
	ToContainerAppProbeOutputWithContext(context.Context) ContainerAppProbeOutput
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ContainerAppProbeArgs struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet ContainerAppProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
	TcpSocket ContainerAppProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)
	TerminationGracePeriodSeconds pulumi.Float64PtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
	// The type of probe.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ContainerAppProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbe)(nil)).Elem()
}

func (i ContainerAppProbeArgs) ToContainerAppProbeOutput() ContainerAppProbeOutput {
	return i.ToContainerAppProbeOutputWithContext(context.Background())
}

func (i ContainerAppProbeArgs) ToContainerAppProbeOutputWithContext(ctx context.Context) ContainerAppProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeOutput)
}

func (i ContainerAppProbeArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbe] {
	return pulumix.Output[ContainerAppProbe]{
		OutputState: i.ToContainerAppProbeOutputWithContext(ctx).OutputState,
	}
}

// ContainerAppProbeArrayInput is an input type that accepts ContainerAppProbeArray and ContainerAppProbeArrayOutput values.
// You can construct a concrete instance of `ContainerAppProbeArrayInput` via:
//
//	ContainerAppProbeArray{ ContainerAppProbeArgs{...} }
type ContainerAppProbeArrayInput interface {
	pulumi.Input

	ToContainerAppProbeArrayOutput() ContainerAppProbeArrayOutput
	ToContainerAppProbeArrayOutputWithContext(context.Context) ContainerAppProbeArrayOutput
}

type ContainerAppProbeArray []ContainerAppProbeInput

func (ContainerAppProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppProbe)(nil)).Elem()
}

func (i ContainerAppProbeArray) ToContainerAppProbeArrayOutput() ContainerAppProbeArrayOutput {
	return i.ToContainerAppProbeArrayOutputWithContext(context.Background())
}

func (i ContainerAppProbeArray) ToContainerAppProbeArrayOutputWithContext(ctx context.Context) ContainerAppProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeArrayOutput)
}

func (i ContainerAppProbeArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppProbe] {
	return pulumix.Output[[]ContainerAppProbe]{
		OutputState: i.ToContainerAppProbeArrayOutputWithContext(ctx).OutputState,
	}
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ContainerAppProbeOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbe)(nil)).Elem()
}

func (o ContainerAppProbeOutput) ToContainerAppProbeOutput() ContainerAppProbeOutput {
	return o
}

func (o ContainerAppProbeOutput) ToContainerAppProbeOutputWithContext(ctx context.Context) ContainerAppProbeOutput {
	return o
}

func (o ContainerAppProbeOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbe] {
	return pulumix.Output[ContainerAppProbe]{
		OutputState: o.OutputState,
	}
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10.
func (o ContainerAppProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ContainerAppProbeOutput) HttpGet() ContainerAppProbeHttpGetPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *ContainerAppProbeHttpGet { return v.HttpGet }).(ContainerAppProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60.
func (o ContainerAppProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240.
func (o ContainerAppProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.
func (o ContainerAppProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
func (o ContainerAppProbeOutput) TcpSocket() ContainerAppProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *ContainerAppProbeTcpSocket { return v.TcpSocket }).(ContainerAppProbeTcpSocketPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)
func (o ContainerAppProbeOutput) TerminationGracePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *float64 { return v.TerminationGracePeriodSeconds }).(pulumi.Float64PtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240.
func (o ContainerAppProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The type of probe.
func (o ContainerAppProbeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbe) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ContainerAppProbeArrayOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppProbe)(nil)).Elem()
}

func (o ContainerAppProbeArrayOutput) ToContainerAppProbeArrayOutput() ContainerAppProbeArrayOutput {
	return o
}

func (o ContainerAppProbeArrayOutput) ToContainerAppProbeArrayOutputWithContext(ctx context.Context) ContainerAppProbeArrayOutput {
	return o
}

func (o ContainerAppProbeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppProbe] {
	return pulumix.Output[[]ContainerAppProbe]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeArrayOutput) Index(i pulumi.IntInput) ContainerAppProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerAppProbe {
		return vs[0].([]ContainerAppProbe)[vs[1].(int)]
	}).(ContainerAppProbeOutput)
}

// HTTPGet specifies the http request to perform.
type ContainerAppProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []ContainerAppProbeHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port int `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// ContainerAppProbeHttpGetInput is an input type that accepts ContainerAppProbeHttpGetArgs and ContainerAppProbeHttpGetOutput values.
// You can construct a concrete instance of `ContainerAppProbeHttpGetInput` via:
//
//	ContainerAppProbeHttpGetArgs{...}
type ContainerAppProbeHttpGetInput interface {
	pulumi.Input

	ToContainerAppProbeHttpGetOutput() ContainerAppProbeHttpGetOutput
	ToContainerAppProbeHttpGetOutputWithContext(context.Context) ContainerAppProbeHttpGetOutput
}

// HTTPGet specifies the http request to perform.
type ContainerAppProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders ContainerAppProbeHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port pulumi.IntInput `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerAppProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeHttpGet)(nil)).Elem()
}

func (i ContainerAppProbeHttpGetArgs) ToContainerAppProbeHttpGetOutput() ContainerAppProbeHttpGetOutput {
	return i.ToContainerAppProbeHttpGetOutputWithContext(context.Background())
}

func (i ContainerAppProbeHttpGetArgs) ToContainerAppProbeHttpGetOutputWithContext(ctx context.Context) ContainerAppProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeHttpGetOutput)
}

func (i ContainerAppProbeHttpGetArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeHttpGet] {
	return pulumix.Output[ContainerAppProbeHttpGet]{
		OutputState: i.ToContainerAppProbeHttpGetOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerAppProbeHttpGetArgs) ToContainerAppProbeHttpGetPtrOutput() ContainerAppProbeHttpGetPtrOutput {
	return i.ToContainerAppProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i ContainerAppProbeHttpGetArgs) ToContainerAppProbeHttpGetPtrOutputWithContext(ctx context.Context) ContainerAppProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeHttpGetOutput).ToContainerAppProbeHttpGetPtrOutputWithContext(ctx)
}

// ContainerAppProbeHttpGetPtrInput is an input type that accepts ContainerAppProbeHttpGetArgs, ContainerAppProbeHttpGetPtr and ContainerAppProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `ContainerAppProbeHttpGetPtrInput` via:
//
//	        ContainerAppProbeHttpGetArgs{...}
//
//	or:
//
//	        nil
type ContainerAppProbeHttpGetPtrInput interface {
	pulumi.Input

	ToContainerAppProbeHttpGetPtrOutput() ContainerAppProbeHttpGetPtrOutput
	ToContainerAppProbeHttpGetPtrOutputWithContext(context.Context) ContainerAppProbeHttpGetPtrOutput
}

type containerAppProbeHttpGetPtrType ContainerAppProbeHttpGetArgs

func ContainerAppProbeHttpGetPtr(v *ContainerAppProbeHttpGetArgs) ContainerAppProbeHttpGetPtrInput {
	return (*containerAppProbeHttpGetPtrType)(v)
}

func (*containerAppProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAppProbeHttpGet)(nil)).Elem()
}

func (i *containerAppProbeHttpGetPtrType) ToContainerAppProbeHttpGetPtrOutput() ContainerAppProbeHttpGetPtrOutput {
	return i.ToContainerAppProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *containerAppProbeHttpGetPtrType) ToContainerAppProbeHttpGetPtrOutputWithContext(ctx context.Context) ContainerAppProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeHttpGetPtrOutput)
}

func (i *containerAppProbeHttpGetPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerAppProbeHttpGet] {
	return pulumix.Output[*ContainerAppProbeHttpGet]{
		OutputState: i.ToContainerAppProbeHttpGetPtrOutputWithContext(ctx).OutputState,
	}
}

// HTTPGet specifies the http request to perform.
type ContainerAppProbeHttpGetOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeHttpGet)(nil)).Elem()
}

func (o ContainerAppProbeHttpGetOutput) ToContainerAppProbeHttpGetOutput() ContainerAppProbeHttpGetOutput {
	return o
}

func (o ContainerAppProbeHttpGetOutput) ToContainerAppProbeHttpGetOutputWithContext(ctx context.Context) ContainerAppProbeHttpGetOutput {
	return o
}

func (o ContainerAppProbeHttpGetOutput) ToContainerAppProbeHttpGetPtrOutput() ContainerAppProbeHttpGetPtrOutput {
	return o.ToContainerAppProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o ContainerAppProbeHttpGetOutput) ToContainerAppProbeHttpGetPtrOutputWithContext(ctx context.Context) ContainerAppProbeHttpGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerAppProbeHttpGet) *ContainerAppProbeHttpGet {
		return &v
	}).(ContainerAppProbeHttpGetPtrOutput)
}

func (o ContainerAppProbeHttpGetOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeHttpGet] {
	return pulumix.Output[ContainerAppProbeHttpGet]{
		OutputState: o.OutputState,
	}
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o ContainerAppProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ContainerAppProbeHttpGetOutput) HttpHeaders() ContainerAppProbeHttpHeadersArrayOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpGet) []ContainerAppProbeHttpHeaders { return v.HttpHeaders }).(ContainerAppProbeHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ContainerAppProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeHttpGetOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpGet) int { return v.Port }).(pulumi.IntOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o ContainerAppProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerAppProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAppProbeHttpGet)(nil)).Elem()
}

func (o ContainerAppProbeHttpGetPtrOutput) ToContainerAppProbeHttpGetPtrOutput() ContainerAppProbeHttpGetPtrOutput {
	return o
}

func (o ContainerAppProbeHttpGetPtrOutput) ToContainerAppProbeHttpGetPtrOutputWithContext(ctx context.Context) ContainerAppProbeHttpGetPtrOutput {
	return o
}

func (o ContainerAppProbeHttpGetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerAppProbeHttpGet] {
	return pulumix.Output[*ContainerAppProbeHttpGet]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeHttpGetPtrOutput) Elem() ContainerAppProbeHttpGetOutput {
	return o.ApplyT(func(v *ContainerAppProbeHttpGet) ContainerAppProbeHttpGet {
		if v != nil {
			return *v
		}
		var ret ContainerAppProbeHttpGet
		return ret
	}).(ContainerAppProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o ContainerAppProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ContainerAppProbeHttpGetPtrOutput) HttpHeaders() ContainerAppProbeHttpHeadersArrayOutput {
	return o.ApplyT(func(v *ContainerAppProbeHttpGet) []ContainerAppProbeHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(ContainerAppProbeHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ContainerAppProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeHttpGetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeHttpGet) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o ContainerAppProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ContainerAppProbeHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// ContainerAppProbeHttpHeadersInput is an input type that accepts ContainerAppProbeHttpHeadersArgs and ContainerAppProbeHttpHeadersOutput values.
// You can construct a concrete instance of `ContainerAppProbeHttpHeadersInput` via:
//
//	ContainerAppProbeHttpHeadersArgs{...}
type ContainerAppProbeHttpHeadersInput interface {
	pulumi.Input

	ToContainerAppProbeHttpHeadersOutput() ContainerAppProbeHttpHeadersOutput
	ToContainerAppProbeHttpHeadersOutputWithContext(context.Context) ContainerAppProbeHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ContainerAppProbeHttpHeadersArgs struct {
	// The header field name
	Name pulumi.StringInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ContainerAppProbeHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeHttpHeaders)(nil)).Elem()
}

func (i ContainerAppProbeHttpHeadersArgs) ToContainerAppProbeHttpHeadersOutput() ContainerAppProbeHttpHeadersOutput {
	return i.ToContainerAppProbeHttpHeadersOutputWithContext(context.Background())
}

func (i ContainerAppProbeHttpHeadersArgs) ToContainerAppProbeHttpHeadersOutputWithContext(ctx context.Context) ContainerAppProbeHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeHttpHeadersOutput)
}

func (i ContainerAppProbeHttpHeadersArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeHttpHeaders] {
	return pulumix.Output[ContainerAppProbeHttpHeaders]{
		OutputState: i.ToContainerAppProbeHttpHeadersOutputWithContext(ctx).OutputState,
	}
}

// ContainerAppProbeHttpHeadersArrayInput is an input type that accepts ContainerAppProbeHttpHeadersArray and ContainerAppProbeHttpHeadersArrayOutput values.
// You can construct a concrete instance of `ContainerAppProbeHttpHeadersArrayInput` via:
//
//	ContainerAppProbeHttpHeadersArray{ ContainerAppProbeHttpHeadersArgs{...} }
type ContainerAppProbeHttpHeadersArrayInput interface {
	pulumi.Input

	ToContainerAppProbeHttpHeadersArrayOutput() ContainerAppProbeHttpHeadersArrayOutput
	ToContainerAppProbeHttpHeadersArrayOutputWithContext(context.Context) ContainerAppProbeHttpHeadersArrayOutput
}

type ContainerAppProbeHttpHeadersArray []ContainerAppProbeHttpHeadersInput

func (ContainerAppProbeHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppProbeHttpHeaders)(nil)).Elem()
}

func (i ContainerAppProbeHttpHeadersArray) ToContainerAppProbeHttpHeadersArrayOutput() ContainerAppProbeHttpHeadersArrayOutput {
	return i.ToContainerAppProbeHttpHeadersArrayOutputWithContext(context.Background())
}

func (i ContainerAppProbeHttpHeadersArray) ToContainerAppProbeHttpHeadersArrayOutputWithContext(ctx context.Context) ContainerAppProbeHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeHttpHeadersArrayOutput)
}

func (i ContainerAppProbeHttpHeadersArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppProbeHttpHeaders] {
	return pulumix.Output[[]ContainerAppProbeHttpHeaders]{
		OutputState: i.ToContainerAppProbeHttpHeadersArrayOutputWithContext(ctx).OutputState,
	}
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ContainerAppProbeHttpHeadersOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeHttpHeaders)(nil)).Elem()
}

func (o ContainerAppProbeHttpHeadersOutput) ToContainerAppProbeHttpHeadersOutput() ContainerAppProbeHttpHeadersOutput {
	return o
}

func (o ContainerAppProbeHttpHeadersOutput) ToContainerAppProbeHttpHeadersOutputWithContext(ctx context.Context) ContainerAppProbeHttpHeadersOutput {
	return o
}

func (o ContainerAppProbeHttpHeadersOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeHttpHeaders] {
	return pulumix.Output[ContainerAppProbeHttpHeaders]{
		OutputState: o.OutputState,
	}
}

// The header field name
func (o ContainerAppProbeHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o ContainerAppProbeHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppProbeHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerAppProbeHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppProbeHttpHeaders)(nil)).Elem()
}

func (o ContainerAppProbeHttpHeadersArrayOutput) ToContainerAppProbeHttpHeadersArrayOutput() ContainerAppProbeHttpHeadersArrayOutput {
	return o
}

func (o ContainerAppProbeHttpHeadersArrayOutput) ToContainerAppProbeHttpHeadersArrayOutputWithContext(ctx context.Context) ContainerAppProbeHttpHeadersArrayOutput {
	return o
}

func (o ContainerAppProbeHttpHeadersArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppProbeHttpHeaders] {
	return pulumix.Output[[]ContainerAppProbeHttpHeaders]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeHttpHeadersArrayOutput) Index(i pulumi.IntInput) ContainerAppProbeHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerAppProbeHttpHeaders {
		return vs[0].([]ContainerAppProbeHttpHeaders)[vs[1].(int)]
	}).(ContainerAppProbeHttpHeadersOutput)
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ContainerAppProbeResponse struct {
	// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// HTTPGet specifies the http request to perform.
	HttpGet *ContainerAppProbeResponseHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
	TcpSocket *ContainerAppProbeResponseTcpSocket `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)
	TerminationGracePeriodSeconds *float64 `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
	// The type of probe.
	Type *string `pulumi:"type"`
}

// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
type ContainerAppProbeResponseOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeResponse)(nil)).Elem()
}

func (o ContainerAppProbeResponseOutput) ToContainerAppProbeResponseOutput() ContainerAppProbeResponseOutput {
	return o
}

func (o ContainerAppProbeResponseOutput) ToContainerAppProbeResponseOutputWithContext(ctx context.Context) ContainerAppProbeResponseOutput {
	return o
}

func (o ContainerAppProbeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeResponse] {
	return pulumix.Output[ContainerAppProbeResponse]{
		OutputState: o.OutputState,
	}
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10.
func (o ContainerAppProbeResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// HTTPGet specifies the http request to perform.
func (o ContainerAppProbeResponseOutput) HttpGet() ContainerAppProbeResponseHttpGetPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *ContainerAppProbeResponseHttpGet { return v.HttpGet }).(ContainerAppProbeResponseHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60.
func (o ContainerAppProbeResponseOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240.
func (o ContainerAppProbeResponseOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10.
func (o ContainerAppProbeResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
func (o ContainerAppProbeResponseOutput) TcpSocket() ContainerAppProbeResponseTcpSocketPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *ContainerAppProbeResponseTcpSocket { return v.TcpSocket }).(ContainerAppProbeResponseTcpSocketPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)
func (o ContainerAppProbeResponseOutput) TerminationGracePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *float64 { return v.TerminationGracePeriodSeconds }).(pulumi.Float64PtrOutput)
}

// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240.
func (o ContainerAppProbeResponseOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

// The type of probe.
func (o ContainerAppProbeResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ContainerAppProbeResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppProbeResponse)(nil)).Elem()
}

func (o ContainerAppProbeResponseArrayOutput) ToContainerAppProbeResponseArrayOutput() ContainerAppProbeResponseArrayOutput {
	return o
}

func (o ContainerAppProbeResponseArrayOutput) ToContainerAppProbeResponseArrayOutputWithContext(ctx context.Context) ContainerAppProbeResponseArrayOutput {
	return o
}

func (o ContainerAppProbeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppProbeResponse] {
	return pulumix.Output[[]ContainerAppProbeResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeResponseArrayOutput) Index(i pulumi.IntInput) ContainerAppProbeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerAppProbeResponse {
		return vs[0].([]ContainerAppProbeResponse)[vs[1].(int)]
	}).(ContainerAppProbeResponseOutput)
}

// HTTPGet specifies the http request to perform.
type ContainerAppProbeResponseHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []ContainerAppProbeResponseHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port int `pulumi:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// HTTPGet specifies the http request to perform.
type ContainerAppProbeResponseHttpGetOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeResponseHttpGet)(nil)).Elem()
}

func (o ContainerAppProbeResponseHttpGetOutput) ToContainerAppProbeResponseHttpGetOutput() ContainerAppProbeResponseHttpGetOutput {
	return o
}

func (o ContainerAppProbeResponseHttpGetOutput) ToContainerAppProbeResponseHttpGetOutputWithContext(ctx context.Context) ContainerAppProbeResponseHttpGetOutput {
	return o
}

func (o ContainerAppProbeResponseHttpGetOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeResponseHttpGet] {
	return pulumix.Output[ContainerAppProbeResponseHttpGet]{
		OutputState: o.OutputState,
	}
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o ContainerAppProbeResponseHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ContainerAppProbeResponseHttpGetOutput) HttpHeaders() ContainerAppProbeResponseHttpHeadersArrayOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpGet) []ContainerAppProbeResponseHttpHeaders { return v.HttpHeaders }).(ContainerAppProbeResponseHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ContainerAppProbeResponseHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeResponseHttpGetOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpGet) int { return v.Port }).(pulumi.IntOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o ContainerAppProbeResponseHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerAppProbeResponseHttpGetPtrOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAppProbeResponseHttpGet)(nil)).Elem()
}

func (o ContainerAppProbeResponseHttpGetPtrOutput) ToContainerAppProbeResponseHttpGetPtrOutput() ContainerAppProbeResponseHttpGetPtrOutput {
	return o
}

func (o ContainerAppProbeResponseHttpGetPtrOutput) ToContainerAppProbeResponseHttpGetPtrOutputWithContext(ctx context.Context) ContainerAppProbeResponseHttpGetPtrOutput {
	return o
}

func (o ContainerAppProbeResponseHttpGetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerAppProbeResponseHttpGet] {
	return pulumix.Output[*ContainerAppProbeResponseHttpGet]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeResponseHttpGetPtrOutput) Elem() ContainerAppProbeResponseHttpGetOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseHttpGet) ContainerAppProbeResponseHttpGet {
		if v != nil {
			return *v
		}
		var ret ContainerAppProbeResponseHttpGet
		return ret
	}).(ContainerAppProbeResponseHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
func (o ContainerAppProbeResponseHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ContainerAppProbeResponseHttpGetPtrOutput) HttpHeaders() ContainerAppProbeResponseHttpHeadersArrayOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseHttpGet) []ContainerAppProbeResponseHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(ContainerAppProbeResponseHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ContainerAppProbeResponseHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeResponseHttpGetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseHttpGet) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Scheme to use for connecting to the host. Defaults to HTTP.
func (o ContainerAppProbeResponseHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ContainerAppProbeResponseHttpHeaders struct {
	// The header field name
	Name string `pulumi:"name"`
	// The header field value
	Value string `pulumi:"value"`
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ContainerAppProbeResponseHttpHeadersOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeResponseHttpHeaders)(nil)).Elem()
}

func (o ContainerAppProbeResponseHttpHeadersOutput) ToContainerAppProbeResponseHttpHeadersOutput() ContainerAppProbeResponseHttpHeadersOutput {
	return o
}

func (o ContainerAppProbeResponseHttpHeadersOutput) ToContainerAppProbeResponseHttpHeadersOutputWithContext(ctx context.Context) ContainerAppProbeResponseHttpHeadersOutput {
	return o
}

func (o ContainerAppProbeResponseHttpHeadersOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeResponseHttpHeaders] {
	return pulumix.Output[ContainerAppProbeResponseHttpHeaders]{
		OutputState: o.OutputState,
	}
}

// The header field name
func (o ContainerAppProbeResponseHttpHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// The header field value
func (o ContainerAppProbeResponseHttpHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseHttpHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerAppProbeResponseHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppProbeResponseHttpHeaders)(nil)).Elem()
}

func (o ContainerAppProbeResponseHttpHeadersArrayOutput) ToContainerAppProbeResponseHttpHeadersArrayOutput() ContainerAppProbeResponseHttpHeadersArrayOutput {
	return o
}

func (o ContainerAppProbeResponseHttpHeadersArrayOutput) ToContainerAppProbeResponseHttpHeadersArrayOutputWithContext(ctx context.Context) ContainerAppProbeResponseHttpHeadersArrayOutput {
	return o
}

func (o ContainerAppProbeResponseHttpHeadersArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppProbeResponseHttpHeaders] {
	return pulumix.Output[[]ContainerAppProbeResponseHttpHeaders]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeResponseHttpHeadersArrayOutput) Index(i pulumi.IntInput) ContainerAppProbeResponseHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerAppProbeResponseHttpHeaders {
		return vs[0].([]ContainerAppProbeResponseHttpHeaders)[vs[1].(int)]
	}).(ContainerAppProbeResponseHttpHeadersOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
type ContainerAppProbeResponseTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port int `pulumi:"port"`
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
type ContainerAppProbeResponseTcpSocketOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeResponseTcpSocket)(nil)).Elem()
}

func (o ContainerAppProbeResponseTcpSocketOutput) ToContainerAppProbeResponseTcpSocketOutput() ContainerAppProbeResponseTcpSocketOutput {
	return o
}

func (o ContainerAppProbeResponseTcpSocketOutput) ToContainerAppProbeResponseTcpSocketOutputWithContext(ctx context.Context) ContainerAppProbeResponseTcpSocketOutput {
	return o
}

func (o ContainerAppProbeResponseTcpSocketOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeResponseTcpSocket] {
	return pulumix.Output[ContainerAppProbeResponseTcpSocket]{
		OutputState: o.OutputState,
	}
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ContainerAppProbeResponseTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeResponseTcpSocketOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerAppProbeResponseTcpSocket) int { return v.Port }).(pulumi.IntOutput)
}

type ContainerAppProbeResponseTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeResponseTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAppProbeResponseTcpSocket)(nil)).Elem()
}

func (o ContainerAppProbeResponseTcpSocketPtrOutput) ToContainerAppProbeResponseTcpSocketPtrOutput() ContainerAppProbeResponseTcpSocketPtrOutput {
	return o
}

func (o ContainerAppProbeResponseTcpSocketPtrOutput) ToContainerAppProbeResponseTcpSocketPtrOutputWithContext(ctx context.Context) ContainerAppProbeResponseTcpSocketPtrOutput {
	return o
}

func (o ContainerAppProbeResponseTcpSocketPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerAppProbeResponseTcpSocket] {
	return pulumix.Output[*ContainerAppProbeResponseTcpSocket]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeResponseTcpSocketPtrOutput) Elem() ContainerAppProbeResponseTcpSocketOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseTcpSocket) ContainerAppProbeResponseTcpSocket {
		if v != nil {
			return *v
		}
		var ret ContainerAppProbeResponseTcpSocket
		return ret
	}).(ContainerAppProbeResponseTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ContainerAppProbeResponseTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeResponseTcpSocketPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeResponseTcpSocket) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
type ContainerAppProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port int `pulumi:"port"`
}

// ContainerAppProbeTcpSocketInput is an input type that accepts ContainerAppProbeTcpSocketArgs and ContainerAppProbeTcpSocketOutput values.
// You can construct a concrete instance of `ContainerAppProbeTcpSocketInput` via:
//
//	ContainerAppProbeTcpSocketArgs{...}
type ContainerAppProbeTcpSocketInput interface {
	pulumi.Input

	ToContainerAppProbeTcpSocketOutput() ContainerAppProbeTcpSocketOutput
	ToContainerAppProbeTcpSocketOutputWithContext(context.Context) ContainerAppProbeTcpSocketOutput
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
type ContainerAppProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port pulumi.IntInput `pulumi:"port"`
}

func (ContainerAppProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeTcpSocket)(nil)).Elem()
}

func (i ContainerAppProbeTcpSocketArgs) ToContainerAppProbeTcpSocketOutput() ContainerAppProbeTcpSocketOutput {
	return i.ToContainerAppProbeTcpSocketOutputWithContext(context.Background())
}

func (i ContainerAppProbeTcpSocketArgs) ToContainerAppProbeTcpSocketOutputWithContext(ctx context.Context) ContainerAppProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeTcpSocketOutput)
}

func (i ContainerAppProbeTcpSocketArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeTcpSocket] {
	return pulumix.Output[ContainerAppProbeTcpSocket]{
		OutputState: i.ToContainerAppProbeTcpSocketOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerAppProbeTcpSocketArgs) ToContainerAppProbeTcpSocketPtrOutput() ContainerAppProbeTcpSocketPtrOutput {
	return i.ToContainerAppProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i ContainerAppProbeTcpSocketArgs) ToContainerAppProbeTcpSocketPtrOutputWithContext(ctx context.Context) ContainerAppProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeTcpSocketOutput).ToContainerAppProbeTcpSocketPtrOutputWithContext(ctx)
}

// ContainerAppProbeTcpSocketPtrInput is an input type that accepts ContainerAppProbeTcpSocketArgs, ContainerAppProbeTcpSocketPtr and ContainerAppProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `ContainerAppProbeTcpSocketPtrInput` via:
//
//	        ContainerAppProbeTcpSocketArgs{...}
//
//	or:
//
//	        nil
type ContainerAppProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToContainerAppProbeTcpSocketPtrOutput() ContainerAppProbeTcpSocketPtrOutput
	ToContainerAppProbeTcpSocketPtrOutputWithContext(context.Context) ContainerAppProbeTcpSocketPtrOutput
}

type containerAppProbeTcpSocketPtrType ContainerAppProbeTcpSocketArgs

func ContainerAppProbeTcpSocketPtr(v *ContainerAppProbeTcpSocketArgs) ContainerAppProbeTcpSocketPtrInput {
	return (*containerAppProbeTcpSocketPtrType)(v)
}

func (*containerAppProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAppProbeTcpSocket)(nil)).Elem()
}

func (i *containerAppProbeTcpSocketPtrType) ToContainerAppProbeTcpSocketPtrOutput() ContainerAppProbeTcpSocketPtrOutput {
	return i.ToContainerAppProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *containerAppProbeTcpSocketPtrType) ToContainerAppProbeTcpSocketPtrOutputWithContext(ctx context.Context) ContainerAppProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerAppProbeTcpSocketPtrOutput)
}

func (i *containerAppProbeTcpSocketPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerAppProbeTcpSocket] {
	return pulumix.Output[*ContainerAppProbeTcpSocket]{
		OutputState: i.ToContainerAppProbeTcpSocketPtrOutputWithContext(ctx).OutputState,
	}
}

// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.
type ContainerAppProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppProbeTcpSocket)(nil)).Elem()
}

func (o ContainerAppProbeTcpSocketOutput) ToContainerAppProbeTcpSocketOutput() ContainerAppProbeTcpSocketOutput {
	return o
}

func (o ContainerAppProbeTcpSocketOutput) ToContainerAppProbeTcpSocketOutputWithContext(ctx context.Context) ContainerAppProbeTcpSocketOutput {
	return o
}

func (o ContainerAppProbeTcpSocketOutput) ToContainerAppProbeTcpSocketPtrOutput() ContainerAppProbeTcpSocketPtrOutput {
	return o.ToContainerAppProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o ContainerAppProbeTcpSocketOutput) ToContainerAppProbeTcpSocketPtrOutputWithContext(ctx context.Context) ContainerAppProbeTcpSocketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerAppProbeTcpSocket) *ContainerAppProbeTcpSocket {
		return &v
	}).(ContainerAppProbeTcpSocketPtrOutput)
}

func (o ContainerAppProbeTcpSocketOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppProbeTcpSocket] {
	return pulumix.Output[ContainerAppProbeTcpSocket]{
		OutputState: o.OutputState,
	}
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ContainerAppProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerAppProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeTcpSocketOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerAppProbeTcpSocket) int { return v.Port }).(pulumi.IntOutput)
}

type ContainerAppProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (ContainerAppProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerAppProbeTcpSocket)(nil)).Elem()
}

func (o ContainerAppProbeTcpSocketPtrOutput) ToContainerAppProbeTcpSocketPtrOutput() ContainerAppProbeTcpSocketPtrOutput {
	return o
}

func (o ContainerAppProbeTcpSocketPtrOutput) ToContainerAppProbeTcpSocketPtrOutputWithContext(ctx context.Context) ContainerAppProbeTcpSocketPtrOutput {
	return o
}

func (o ContainerAppProbeTcpSocketPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerAppProbeTcpSocket] {
	return pulumix.Output[*ContainerAppProbeTcpSocket]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppProbeTcpSocketPtrOutput) Elem() ContainerAppProbeTcpSocketOutput {
	return o.ApplyT(func(v *ContainerAppProbeTcpSocket) ContainerAppProbeTcpSocket {
		if v != nil {
			return *v
		}
		var ret ContainerAppProbeTcpSocket
		return ret
	}).(ContainerAppProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ContainerAppProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
func (o ContainerAppProbeTcpSocketPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerAppProbeTcpSocket) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Container App Secret.
type ContainerAppSecretResponse struct {
	// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
	Identity string `pulumi:"identity"`
	// Azure Key Vault URL pointing to the secret referenced by the container app.
	KeyVaultUrl string `pulumi:"keyVaultUrl"`
	// Secret Name.
	Name string `pulumi:"name"`
	// Secret Value.
	Value string `pulumi:"value"`
}

// Container App Secret.
type ContainerAppSecretResponseOutput struct{ *pulumi.OutputState }

func (ContainerAppSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerAppSecretResponse)(nil)).Elem()
}

func (o ContainerAppSecretResponseOutput) ToContainerAppSecretResponseOutput() ContainerAppSecretResponseOutput {
	return o
}

func (o ContainerAppSecretResponseOutput) ToContainerAppSecretResponseOutputWithContext(ctx context.Context) ContainerAppSecretResponseOutput {
	return o
}

func (o ContainerAppSecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerAppSecretResponse] {
	return pulumix.Output[ContainerAppSecretResponse]{
		OutputState: o.OutputState,
	}
}

// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
func (o ContainerAppSecretResponseOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppSecretResponse) string { return v.Identity }).(pulumi.StringOutput)
}

// Azure Key Vault URL pointing to the secret referenced by the container app.
func (o ContainerAppSecretResponseOutput) KeyVaultUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppSecretResponse) string { return v.KeyVaultUrl }).(pulumi.StringOutput)
}

// Secret Name.
func (o ContainerAppSecretResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppSecretResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Secret Value.
func (o ContainerAppSecretResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerAppSecretResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ContainerAppSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerAppSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerAppSecretResponse)(nil)).Elem()
}

func (o ContainerAppSecretResponseArrayOutput) ToContainerAppSecretResponseArrayOutput() ContainerAppSecretResponseArrayOutput {
	return o
}

func (o ContainerAppSecretResponseArrayOutput) ToContainerAppSecretResponseArrayOutputWithContext(ctx context.Context) ContainerAppSecretResponseArrayOutput {
	return o
}

func (o ContainerAppSecretResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerAppSecretResponse] {
	return pulumix.Output[[]ContainerAppSecretResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerAppSecretResponseArrayOutput) Index(i pulumi.IntInput) ContainerAppSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerAppSecretResponse {
		return vs[0].([]ContainerAppSecretResponse)[vs[1].(int)]
	}).(ContainerAppSecretResponseOutput)
}

// Container App container resource requirements.
type ContainerResources struct {
	// Required CPU in cores, e.g. 0.5
	Cpu *float64 `pulumi:"cpu"`
	// Required memory, e.g. "250Mb"
	Memory *string `pulumi:"memory"`
}

// ContainerResourcesInput is an input type that accepts ContainerResourcesArgs and ContainerResourcesOutput values.
// You can construct a concrete instance of `ContainerResourcesInput` via:
//
//	ContainerResourcesArgs{...}
type ContainerResourcesInput interface {
	pulumi.Input

	ToContainerResourcesOutput() ContainerResourcesOutput
	ToContainerResourcesOutputWithContext(context.Context) ContainerResourcesOutput
}

// Container App container resource requirements.
type ContainerResourcesArgs struct {
	// Required CPU in cores, e.g. 0.5
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// Required memory, e.g. "250Mb"
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (ContainerResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResources)(nil)).Elem()
}

func (i ContainerResourcesArgs) ToContainerResourcesOutput() ContainerResourcesOutput {
	return i.ToContainerResourcesOutputWithContext(context.Background())
}

func (i ContainerResourcesArgs) ToContainerResourcesOutputWithContext(ctx context.Context) ContainerResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourcesOutput)
}

func (i ContainerResourcesArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerResources] {
	return pulumix.Output[ContainerResources]{
		OutputState: i.ToContainerResourcesOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerResourcesArgs) ToContainerResourcesPtrOutput() ContainerResourcesPtrOutput {
	return i.ToContainerResourcesPtrOutputWithContext(context.Background())
}

func (i ContainerResourcesArgs) ToContainerResourcesPtrOutputWithContext(ctx context.Context) ContainerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourcesOutput).ToContainerResourcesPtrOutputWithContext(ctx)
}

// ContainerResourcesPtrInput is an input type that accepts ContainerResourcesArgs, ContainerResourcesPtr and ContainerResourcesPtrOutput values.
// You can construct a concrete instance of `ContainerResourcesPtrInput` via:
//
//	        ContainerResourcesArgs{...}
//
//	or:
//
//	        nil
type ContainerResourcesPtrInput interface {
	pulumi.Input

	ToContainerResourcesPtrOutput() ContainerResourcesPtrOutput
	ToContainerResourcesPtrOutputWithContext(context.Context) ContainerResourcesPtrOutput
}

type containerResourcesPtrType ContainerResourcesArgs

func ContainerResourcesPtr(v *ContainerResourcesArgs) ContainerResourcesPtrInput {
	return (*containerResourcesPtrType)(v)
}

func (*containerResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResources)(nil)).Elem()
}

func (i *containerResourcesPtrType) ToContainerResourcesPtrOutput() ContainerResourcesPtrOutput {
	return i.ToContainerResourcesPtrOutputWithContext(context.Background())
}

func (i *containerResourcesPtrType) ToContainerResourcesPtrOutputWithContext(ctx context.Context) ContainerResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourcesPtrOutput)
}

func (i *containerResourcesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerResources] {
	return pulumix.Output[*ContainerResources]{
		OutputState: i.ToContainerResourcesPtrOutputWithContext(ctx).OutputState,
	}
}

// Container App container resource requirements.
type ContainerResourcesOutput struct{ *pulumi.OutputState }

func (ContainerResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResources)(nil)).Elem()
}

func (o ContainerResourcesOutput) ToContainerResourcesOutput() ContainerResourcesOutput {
	return o
}

func (o ContainerResourcesOutput) ToContainerResourcesOutputWithContext(ctx context.Context) ContainerResourcesOutput {
	return o
}

func (o ContainerResourcesOutput) ToContainerResourcesPtrOutput() ContainerResourcesPtrOutput {
	return o.ToContainerResourcesPtrOutputWithContext(context.Background())
}

func (o ContainerResourcesOutput) ToContainerResourcesPtrOutputWithContext(ctx context.Context) ContainerResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResources) *ContainerResources {
		return &v
	}).(ContainerResourcesPtrOutput)
}

func (o ContainerResourcesOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerResources] {
	return pulumix.Output[ContainerResources]{
		OutputState: o.OutputState,
	}
}

// Required CPU in cores, e.g. 0.5
func (o ContainerResourcesOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerResources) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Required memory, e.g. "250Mb"
func (o ContainerResourcesOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResources) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourcesPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResources)(nil)).Elem()
}

func (o ContainerResourcesPtrOutput) ToContainerResourcesPtrOutput() ContainerResourcesPtrOutput {
	return o
}

func (o ContainerResourcesPtrOutput) ToContainerResourcesPtrOutputWithContext(ctx context.Context) ContainerResourcesPtrOutput {
	return o
}

func (o ContainerResourcesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerResources] {
	return pulumix.Output[*ContainerResources]{
		OutputState: o.OutputState,
	}
}

func (o ContainerResourcesPtrOutput) Elem() ContainerResourcesOutput {
	return o.ApplyT(func(v *ContainerResources) ContainerResources {
		if v != nil {
			return *v
		}
		var ret ContainerResources
		return ret
	}).(ContainerResourcesOutput)
}

// Required CPU in cores, e.g. 0.5
func (o ContainerResourcesPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ContainerResources) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Required memory, e.g. "250Mb"
func (o ContainerResourcesPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResources) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// Container App container resource requirements.
type ContainerResourcesResponse struct {
	// Required CPU in cores, e.g. 0.5
	Cpu *float64 `pulumi:"cpu"`
	// Ephemeral Storage, e.g. "1Gi"
	EphemeralStorage string `pulumi:"ephemeralStorage"`
	// Required memory, e.g. "250Mb"
	Memory *string `pulumi:"memory"`
}

// Container App container resource requirements.
type ContainerResourcesResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourcesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourcesResponse)(nil)).Elem()
}

func (o ContainerResourcesResponseOutput) ToContainerResourcesResponseOutput() ContainerResourcesResponseOutput {
	return o
}

func (o ContainerResourcesResponseOutput) ToContainerResourcesResponseOutputWithContext(ctx context.Context) ContainerResourcesResponseOutput {
	return o
}

func (o ContainerResourcesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerResourcesResponse] {
	return pulumix.Output[ContainerResourcesResponse]{
		OutputState: o.OutputState,
	}
}

// Required CPU in cores, e.g. 0.5
func (o ContainerResourcesResponseOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ContainerResourcesResponse) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// Ephemeral Storage, e.g. "1Gi"
func (o ContainerResourcesResponseOutput) EphemeralStorage() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResourcesResponse) string { return v.EphemeralStorage }).(pulumi.StringOutput)
}

// Required memory, e.g. "250Mb"
func (o ContainerResourcesResponseOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourcesResponse) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourcesResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourcesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourcesResponse)(nil)).Elem()
}

func (o ContainerResourcesResponsePtrOutput) ToContainerResourcesResponsePtrOutput() ContainerResourcesResponsePtrOutput {
	return o
}

func (o ContainerResourcesResponsePtrOutput) ToContainerResourcesResponsePtrOutputWithContext(ctx context.Context) ContainerResourcesResponsePtrOutput {
	return o
}

func (o ContainerResourcesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerResourcesResponse] {
	return pulumix.Output[*ContainerResourcesResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerResourcesResponsePtrOutput) Elem() ContainerResourcesResponseOutput {
	return o.ApplyT(func(v *ContainerResourcesResponse) ContainerResourcesResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourcesResponse
		return ret
	}).(ContainerResourcesResponseOutput)
}

// Required CPU in cores, e.g. 0.5
func (o ContainerResourcesResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ContainerResourcesResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// Ephemeral Storage, e.g. "1Gi"
func (o ContainerResourcesResponsePtrOutput) EphemeralStorage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourcesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EphemeralStorage
	}).(pulumi.StringPtrOutput)
}

// Required memory, e.g. "250Mb"
func (o ContainerResourcesResponsePtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourcesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// Container App container definition
type ContainerResponse struct {
	// Container start command arguments.
	Args []string `pulumi:"args"`
	// Container start command.
	Command []string `pulumi:"command"`
	// Container environment variables.
	Env []EnvironmentVarResponse `pulumi:"env"`
	// Container image tag.
	Image *string `pulumi:"image"`
	// Custom container name.
	Name *string `pulumi:"name"`
	// List of probes for the container.
	Probes []ContainerAppProbeResponse `pulumi:"probes"`
	// Container resource requirements.
	Resources *ContainerResourcesResponse `pulumi:"resources"`
	// Container volume mounts.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
}

// Container App container definition
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerResponse] {
	return pulumix.Output[ContainerResponse]{
		OutputState: o.OutputState,
	}
}

// Container start command arguments.
func (o ContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Container start command.
func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container environment variables.
func (o ContainerResponseOutput) Env() EnvironmentVarResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvironmentVarResponse { return v.Env }).(EnvironmentVarResponseArrayOutput)
}

// Container image tag.
func (o ContainerResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Custom container name.
func (o ContainerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of probes for the container.
func (o ContainerResponseOutput) Probes() ContainerAppProbeResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []ContainerAppProbeResponse { return v.Probes }).(ContainerAppProbeResponseArrayOutput)
}

// Container resource requirements.
func (o ContainerResponseOutput) Resources() ContainerResourcesResponsePtrOutput {
	return o.ApplyT(func(v ContainerResponse) *ContainerResourcesResponse { return v.Resources }).(ContainerResourcesResponsePtrOutput)
}

// Container volume mounts.
func (o ContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

type ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerResponse] {
	return pulumix.Output[[]ContainerResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerResponseArrayOutput) Index(i pulumi.IntInput) ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerResponse {
		return vs[0].([]ContainerResponse)[vs[1].(int)]
	}).(ContainerResponseOutput)
}

// The configuration settings of the session cookie's expiration.
type CookieExpiration struct {
	// The convention used when determining the session cookie's expiration.
	Convention *CookieExpirationConvention `pulumi:"convention"`
	// The time after the request is made when the session cookie should expire.
	TimeToExpiration *string `pulumi:"timeToExpiration"`
}

// CookieExpirationInput is an input type that accepts CookieExpirationArgs and CookieExpirationOutput values.
// You can construct a concrete instance of `CookieExpirationInput` via:
//
//	CookieExpirationArgs{...}
type CookieExpirationInput interface {
	pulumi.Input

	ToCookieExpirationOutput() CookieExpirationOutput
	ToCookieExpirationOutputWithContext(context.Context) CookieExpirationOutput
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationArgs struct {
	// The convention used when determining the session cookie's expiration.
	Convention CookieExpirationConventionPtrInput `pulumi:"convention"`
	// The time after the request is made when the session cookie should expire.
	TimeToExpiration pulumi.StringPtrInput `pulumi:"timeToExpiration"`
}

func (CookieExpirationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CookieExpiration)(nil)).Elem()
}

func (i CookieExpirationArgs) ToCookieExpirationOutput() CookieExpirationOutput {
	return i.ToCookieExpirationOutputWithContext(context.Background())
}

func (i CookieExpirationArgs) ToCookieExpirationOutputWithContext(ctx context.Context) CookieExpirationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CookieExpirationOutput)
}

func (i CookieExpirationArgs) ToOutput(ctx context.Context) pulumix.Output[CookieExpiration] {
	return pulumix.Output[CookieExpiration]{
		OutputState: i.ToCookieExpirationOutputWithContext(ctx).OutputState,
	}
}

func (i CookieExpirationArgs) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return i.ToCookieExpirationPtrOutputWithContext(context.Background())
}

func (i CookieExpirationArgs) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CookieExpirationOutput).ToCookieExpirationPtrOutputWithContext(ctx)
}

// CookieExpirationPtrInput is an input type that accepts CookieExpirationArgs, CookieExpirationPtr and CookieExpirationPtrOutput values.
// You can construct a concrete instance of `CookieExpirationPtrInput` via:
//
//	        CookieExpirationArgs{...}
//
//	or:
//
//	        nil
type CookieExpirationPtrInput interface {
	pulumi.Input

	ToCookieExpirationPtrOutput() CookieExpirationPtrOutput
	ToCookieExpirationPtrOutputWithContext(context.Context) CookieExpirationPtrOutput
}

type cookieExpirationPtrType CookieExpirationArgs

func CookieExpirationPtr(v *CookieExpirationArgs) CookieExpirationPtrInput {
	return (*cookieExpirationPtrType)(v)
}

func (*cookieExpirationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CookieExpiration)(nil)).Elem()
}

func (i *cookieExpirationPtrType) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return i.ToCookieExpirationPtrOutputWithContext(context.Background())
}

func (i *cookieExpirationPtrType) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CookieExpirationPtrOutput)
}

func (i *cookieExpirationPtrType) ToOutput(ctx context.Context) pulumix.Output[*CookieExpiration] {
	return pulumix.Output[*CookieExpiration]{
		OutputState: i.ToCookieExpirationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationOutput struct{ *pulumi.OutputState }

func (CookieExpirationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CookieExpiration)(nil)).Elem()
}

func (o CookieExpirationOutput) ToCookieExpirationOutput() CookieExpirationOutput {
	return o
}

func (o CookieExpirationOutput) ToCookieExpirationOutputWithContext(ctx context.Context) CookieExpirationOutput {
	return o
}

func (o CookieExpirationOutput) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return o.ToCookieExpirationPtrOutputWithContext(context.Background())
}

func (o CookieExpirationOutput) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CookieExpiration) *CookieExpiration {
		return &v
	}).(CookieExpirationPtrOutput)
}

func (o CookieExpirationOutput) ToOutput(ctx context.Context) pulumix.Output[CookieExpiration] {
	return pulumix.Output[CookieExpiration]{
		OutputState: o.OutputState,
	}
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationOutput) Convention() CookieExpirationConventionPtrOutput {
	return o.ApplyT(func(v CookieExpiration) *CookieExpirationConvention { return v.Convention }).(CookieExpirationConventionPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CookieExpiration) *string { return v.TimeToExpiration }).(pulumi.StringPtrOutput)
}

type CookieExpirationPtrOutput struct{ *pulumi.OutputState }

func (CookieExpirationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CookieExpiration)(nil)).Elem()
}

func (o CookieExpirationPtrOutput) ToCookieExpirationPtrOutput() CookieExpirationPtrOutput {
	return o
}

func (o CookieExpirationPtrOutput) ToCookieExpirationPtrOutputWithContext(ctx context.Context) CookieExpirationPtrOutput {
	return o
}

func (o CookieExpirationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CookieExpiration] {
	return pulumix.Output[*CookieExpiration]{
		OutputState: o.OutputState,
	}
}

func (o CookieExpirationPtrOutput) Elem() CookieExpirationOutput {
	return o.ApplyT(func(v *CookieExpiration) CookieExpiration {
		if v != nil {
			return *v
		}
		var ret CookieExpiration
		return ret
	}).(CookieExpirationOutput)
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationPtrOutput) Convention() CookieExpirationConventionPtrOutput {
	return o.ApplyT(func(v *CookieExpiration) *CookieExpirationConvention {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(CookieExpirationConventionPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationPtrOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CookieExpiration) *string {
		if v == nil {
			return nil
		}
		return v.TimeToExpiration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationResponse struct {
	// The convention used when determining the session cookie's expiration.
	Convention *string `pulumi:"convention"`
	// The time after the request is made when the session cookie should expire.
	TimeToExpiration *string `pulumi:"timeToExpiration"`
}

// The configuration settings of the session cookie's expiration.
type CookieExpirationResponseOutput struct{ *pulumi.OutputState }

func (CookieExpirationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CookieExpirationResponse)(nil)).Elem()
}

func (o CookieExpirationResponseOutput) ToCookieExpirationResponseOutput() CookieExpirationResponseOutput {
	return o
}

func (o CookieExpirationResponseOutput) ToCookieExpirationResponseOutputWithContext(ctx context.Context) CookieExpirationResponseOutput {
	return o
}

func (o CookieExpirationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CookieExpirationResponse] {
	return pulumix.Output[CookieExpirationResponse]{
		OutputState: o.OutputState,
	}
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationResponseOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CookieExpirationResponse) *string { return v.Convention }).(pulumi.StringPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationResponseOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CookieExpirationResponse) *string { return v.TimeToExpiration }).(pulumi.StringPtrOutput)
}

type CookieExpirationResponsePtrOutput struct{ *pulumi.OutputState }

func (CookieExpirationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CookieExpirationResponse)(nil)).Elem()
}

func (o CookieExpirationResponsePtrOutput) ToCookieExpirationResponsePtrOutput() CookieExpirationResponsePtrOutput {
	return o
}

func (o CookieExpirationResponsePtrOutput) ToCookieExpirationResponsePtrOutputWithContext(ctx context.Context) CookieExpirationResponsePtrOutput {
	return o
}

func (o CookieExpirationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CookieExpirationResponse] {
	return pulumix.Output[*CookieExpirationResponse]{
		OutputState: o.OutputState,
	}
}

func (o CookieExpirationResponsePtrOutput) Elem() CookieExpirationResponseOutput {
	return o.ApplyT(func(v *CookieExpirationResponse) CookieExpirationResponse {
		if v != nil {
			return *v
		}
		var ret CookieExpirationResponse
		return ret
	}).(CookieExpirationResponseOutput)
}

// The convention used when determining the session cookie's expiration.
func (o CookieExpirationResponsePtrOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CookieExpirationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(pulumi.StringPtrOutput)
}

// The time after the request is made when the session cookie should expire.
func (o CookieExpirationResponsePtrOutput) TimeToExpiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CookieExpirationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeToExpiration
	}).(pulumi.StringPtrOutput)
}

// Cross-Origin-Resource-Sharing policy
type CorsPolicy struct {
	// Specifies whether the resource allows credentials
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the access-control-allow-headers header
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// Specifies the content for the access-control-allow-methods header
	AllowedMethods []string `pulumi:"allowedMethods"`
	// Specifies the content for the access-control-allow-origins header
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Specifies the content for the access-control-expose-headers header
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies the content for the access-control-max-age header
	MaxAge *int `pulumi:"maxAge"`
}

// CorsPolicyInput is an input type that accepts CorsPolicyArgs and CorsPolicyOutput values.
// You can construct a concrete instance of `CorsPolicyInput` via:
//
//	CorsPolicyArgs{...}
type CorsPolicyInput interface {
	pulumi.Input

	ToCorsPolicyOutput() CorsPolicyOutput
	ToCorsPolicyOutputWithContext(context.Context) CorsPolicyOutput
}

// Cross-Origin-Resource-Sharing policy
type CorsPolicyArgs struct {
	// Specifies whether the resource allows credentials
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for the access-control-allow-headers header
	AllowedHeaders pulumi.StringArrayInput `pulumi:"allowedHeaders"`
	// Specifies the content for the access-control-allow-methods header
	AllowedMethods pulumi.StringArrayInput `pulumi:"allowedMethods"`
	// Specifies the content for the access-control-allow-origins header
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
	// Specifies the content for the access-control-expose-headers header
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies the content for the access-control-max-age header
	MaxAge pulumi.IntPtrInput `pulumi:"maxAge"`
}

func (CorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicy)(nil)).Elem()
}

func (i CorsPolicyArgs) ToCorsPolicyOutput() CorsPolicyOutput {
	return i.ToCorsPolicyOutputWithContext(context.Background())
}

func (i CorsPolicyArgs) ToCorsPolicyOutputWithContext(ctx context.Context) CorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyOutput)
}

func (i CorsPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[CorsPolicy] {
	return pulumix.Output[CorsPolicy]{
		OutputState: i.ToCorsPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i CorsPolicyArgs) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return i.ToCorsPolicyPtrOutputWithContext(context.Background())
}

func (i CorsPolicyArgs) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyOutput).ToCorsPolicyPtrOutputWithContext(ctx)
}

// CorsPolicyPtrInput is an input type that accepts CorsPolicyArgs, CorsPolicyPtr and CorsPolicyPtrOutput values.
// You can construct a concrete instance of `CorsPolicyPtrInput` via:
//
//	        CorsPolicyArgs{...}
//
//	or:
//
//	        nil
type CorsPolicyPtrInput interface {
	pulumi.Input

	ToCorsPolicyPtrOutput() CorsPolicyPtrOutput
	ToCorsPolicyPtrOutputWithContext(context.Context) CorsPolicyPtrOutput
}

type corsPolicyPtrType CorsPolicyArgs

func CorsPolicyPtr(v *CorsPolicyArgs) CorsPolicyPtrInput {
	return (*corsPolicyPtrType)(v)
}

func (*corsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicy)(nil)).Elem()
}

func (i *corsPolicyPtrType) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return i.ToCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *corsPolicyPtrType) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsPolicyPtrOutput)
}

func (i *corsPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*CorsPolicy] {
	return pulumix.Output[*CorsPolicy]{
		OutputState: i.ToCorsPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Cross-Origin-Resource-Sharing policy
type CorsPolicyOutput struct{ *pulumi.OutputState }

func (CorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicy)(nil)).Elem()
}

func (o CorsPolicyOutput) ToCorsPolicyOutput() CorsPolicyOutput {
	return o
}

func (o CorsPolicyOutput) ToCorsPolicyOutputWithContext(ctx context.Context) CorsPolicyOutput {
	return o
}

func (o CorsPolicyOutput) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return o.ToCorsPolicyPtrOutputWithContext(context.Background())
}

func (o CorsPolicyOutput) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CorsPolicy) *CorsPolicy {
		return &v
	}).(CorsPolicyPtrOutput)
}

func (o CorsPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[CorsPolicy] {
	return pulumix.Output[CorsPolicy]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the resource allows credentials
func (o CorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the access-control-allow-headers header
func (o CorsPolicyOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowedHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-methods header
func (o CorsPolicyOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowedMethods }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-origins header
func (o CorsPolicyOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-expose-headers header
func (o CorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-max-age header
func (o CorsPolicyOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CorsPolicy) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type CorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (CorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicy)(nil)).Elem()
}

func (o CorsPolicyPtrOutput) ToCorsPolicyPtrOutput() CorsPolicyPtrOutput {
	return o
}

func (o CorsPolicyPtrOutput) ToCorsPolicyPtrOutputWithContext(ctx context.Context) CorsPolicyPtrOutput {
	return o
}

func (o CorsPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CorsPolicy] {
	return pulumix.Output[*CorsPolicy]{
		OutputState: o.OutputState,
	}
}

func (o CorsPolicyPtrOutput) Elem() CorsPolicyOutput {
	return o.ApplyT(func(v *CorsPolicy) CorsPolicy {
		if v != nil {
			return *v
		}
		var ret CorsPolicy
		return ret
	}).(CorsPolicyOutput)
}

// Specifies whether the resource allows credentials
func (o CorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the access-control-allow-headers header
func (o CorsPolicyPtrOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-methods header
func (o CorsPolicyPtrOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-origins header
func (o CorsPolicyPtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-expose-headers header
func (o CorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-max-age header
func (o CorsPolicyPtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CorsPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

// Cross-Origin-Resource-Sharing policy
type CorsPolicyResponse struct {
	// Specifies whether the resource allows credentials
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for the access-control-allow-headers header
	AllowedHeaders []string `pulumi:"allowedHeaders"`
	// Specifies the content for the access-control-allow-methods header
	AllowedMethods []string `pulumi:"allowedMethods"`
	// Specifies the content for the access-control-allow-origins header
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Specifies the content for the access-control-expose-headers header
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies the content for the access-control-max-age header
	MaxAge *int `pulumi:"maxAge"`
}

// Cross-Origin-Resource-Sharing policy
type CorsPolicyResponseOutput struct{ *pulumi.OutputState }

func (CorsPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsPolicyResponse)(nil)).Elem()
}

func (o CorsPolicyResponseOutput) ToCorsPolicyResponseOutput() CorsPolicyResponseOutput {
	return o
}

func (o CorsPolicyResponseOutput) ToCorsPolicyResponseOutputWithContext(ctx context.Context) CorsPolicyResponseOutput {
	return o
}

func (o CorsPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CorsPolicyResponse] {
	return pulumix.Output[CorsPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies whether the resource allows credentials
func (o CorsPolicyResponseOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CorsPolicyResponse) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for the access-control-allow-headers header
func (o CorsPolicyResponseOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowedHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-methods header
func (o CorsPolicyResponseOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowedMethods }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-origins header
func (o CorsPolicyResponseOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-expose-headers header
func (o CorsPolicyResponseOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsPolicyResponse) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-max-age header
func (o CorsPolicyResponseOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CorsPolicyResponse) *int { return v.MaxAge }).(pulumi.IntPtrOutput)
}

type CorsPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (CorsPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsPolicyResponse)(nil)).Elem()
}

func (o CorsPolicyResponsePtrOutput) ToCorsPolicyResponsePtrOutput() CorsPolicyResponsePtrOutput {
	return o
}

func (o CorsPolicyResponsePtrOutput) ToCorsPolicyResponsePtrOutputWithContext(ctx context.Context) CorsPolicyResponsePtrOutput {
	return o
}

func (o CorsPolicyResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CorsPolicyResponse] {
	return pulumix.Output[*CorsPolicyResponse]{
		OutputState: o.OutputState,
	}
}

func (o CorsPolicyResponsePtrOutput) Elem() CorsPolicyResponseOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) CorsPolicyResponse {
		if v != nil {
			return *v
		}
		var ret CorsPolicyResponse
		return ret
	}).(CorsPolicyResponseOutput)
}

// Specifies whether the resource allows credentials
func (o CorsPolicyResponsePtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for the access-control-allow-headers header
func (o CorsPolicyResponsePtrOutput) AllowedHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-methods header
func (o CorsPolicyResponsePtrOutput) AllowedMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-allow-origins header
func (o CorsPolicyResponsePtrOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedOrigins
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-expose-headers header
func (o CorsPolicyResponsePtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for the access-control-max-age header
func (o CorsPolicyResponsePtrOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CorsPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.IntPtrOutput)
}

// Custom Domain of a Container App
type CustomDomain struct {
	// Custom Domain binding type.
	BindingType *string `pulumi:"bindingType"`
	// Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.
	CertificateId *string `pulumi:"certificateId"`
	// Hostname.
	Name string `pulumi:"name"`
}

// CustomDomainInput is an input type that accepts CustomDomainArgs and CustomDomainOutput values.
// You can construct a concrete instance of `CustomDomainInput` via:
//
//	CustomDomainArgs{...}
type CustomDomainInput interface {
	pulumi.Input

	ToCustomDomainOutput() CustomDomainOutput
	ToCustomDomainOutputWithContext(context.Context) CustomDomainOutput
}

// Custom Domain of a Container App
type CustomDomainArgs struct {
	// Custom Domain binding type.
	BindingType pulumi.StringPtrInput `pulumi:"bindingType"`
	// Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
	// Hostname.
	Name pulumi.StringInput `pulumi:"name"`
}

func (CustomDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomain)(nil)).Elem()
}

func (i CustomDomainArgs) ToCustomDomainOutput() CustomDomainOutput {
	return i.ToCustomDomainOutputWithContext(context.Background())
}

func (i CustomDomainArgs) ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainOutput)
}

func (i CustomDomainArgs) ToOutput(ctx context.Context) pulumix.Output[CustomDomain] {
	return pulumix.Output[CustomDomain]{
		OutputState: i.ToCustomDomainOutputWithContext(ctx).OutputState,
	}
}

// CustomDomainArrayInput is an input type that accepts CustomDomainArray and CustomDomainArrayOutput values.
// You can construct a concrete instance of `CustomDomainArrayInput` via:
//
//	CustomDomainArray{ CustomDomainArgs{...} }
type CustomDomainArrayInput interface {
	pulumi.Input

	ToCustomDomainArrayOutput() CustomDomainArrayOutput
	ToCustomDomainArrayOutputWithContext(context.Context) CustomDomainArrayOutput
}

type CustomDomainArray []CustomDomainInput

func (CustomDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomDomain)(nil)).Elem()
}

func (i CustomDomainArray) ToCustomDomainArrayOutput() CustomDomainArrayOutput {
	return i.ToCustomDomainArrayOutputWithContext(context.Background())
}

func (i CustomDomainArray) ToCustomDomainArrayOutputWithContext(ctx context.Context) CustomDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainArrayOutput)
}

func (i CustomDomainArray) ToOutput(ctx context.Context) pulumix.Output[[]CustomDomain] {
	return pulumix.Output[[]CustomDomain]{
		OutputState: i.ToCustomDomainArrayOutputWithContext(ctx).OutputState,
	}
}

// Custom Domain of a Container App
type CustomDomainOutput struct{ *pulumi.OutputState }

func (CustomDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomain)(nil)).Elem()
}

func (o CustomDomainOutput) ToCustomDomainOutput() CustomDomainOutput {
	return o
}

func (o CustomDomainOutput) ToCustomDomainOutputWithContext(ctx context.Context) CustomDomainOutput {
	return o
}

func (o CustomDomainOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomain] {
	return pulumix.Output[CustomDomain]{
		OutputState: o.OutputState,
	}
}

// Custom Domain binding type.
func (o CustomDomainOutput) BindingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomain) *string { return v.BindingType }).(pulumi.StringPtrOutput)
}

// Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.
func (o CustomDomainOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomain) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Hostname.
func (o CustomDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomain) string { return v.Name }).(pulumi.StringOutput)
}

type CustomDomainArrayOutput struct{ *pulumi.OutputState }

func (CustomDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomDomain)(nil)).Elem()
}

func (o CustomDomainArrayOutput) ToCustomDomainArrayOutput() CustomDomainArrayOutput {
	return o
}

func (o CustomDomainArrayOutput) ToCustomDomainArrayOutputWithContext(ctx context.Context) CustomDomainArrayOutput {
	return o
}

func (o CustomDomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CustomDomain] {
	return pulumix.Output[[]CustomDomain]{
		OutputState: o.OutputState,
	}
}

func (o CustomDomainArrayOutput) Index(i pulumi.IntInput) CustomDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomDomain {
		return vs[0].([]CustomDomain)[vs[1].(int)]
	}).(CustomDomainOutput)
}

// Configuration properties for apps environment custom domain
type CustomDomainConfiguration struct {
	// Certificate password
	CertificatePassword *string `pulumi:"certificatePassword"`
	// PFX or PEM blob
	CertificateValue *string `pulumi:"certificateValue"`
	// Dns suffix for the environment domain
	DnsSuffix *string `pulumi:"dnsSuffix"`
}

// CustomDomainConfigurationInput is an input type that accepts CustomDomainConfigurationArgs and CustomDomainConfigurationOutput values.
// You can construct a concrete instance of `CustomDomainConfigurationInput` via:
//
//	CustomDomainConfigurationArgs{...}
type CustomDomainConfigurationInput interface {
	pulumi.Input

	ToCustomDomainConfigurationOutput() CustomDomainConfigurationOutput
	ToCustomDomainConfigurationOutputWithContext(context.Context) CustomDomainConfigurationOutput
}

// Configuration properties for apps environment custom domain
type CustomDomainConfigurationArgs struct {
	// Certificate password
	CertificatePassword pulumi.StringPtrInput `pulumi:"certificatePassword"`
	// PFX or PEM blob
	CertificateValue pulumi.StringPtrInput `pulumi:"certificateValue"`
	// Dns suffix for the environment domain
	DnsSuffix pulumi.StringPtrInput `pulumi:"dnsSuffix"`
}

func (CustomDomainConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainConfiguration)(nil)).Elem()
}

func (i CustomDomainConfigurationArgs) ToCustomDomainConfigurationOutput() CustomDomainConfigurationOutput {
	return i.ToCustomDomainConfigurationOutputWithContext(context.Background())
}

func (i CustomDomainConfigurationArgs) ToCustomDomainConfigurationOutputWithContext(ctx context.Context) CustomDomainConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainConfigurationOutput)
}

func (i CustomDomainConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[CustomDomainConfiguration] {
	return pulumix.Output[CustomDomainConfiguration]{
		OutputState: i.ToCustomDomainConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i CustomDomainConfigurationArgs) ToCustomDomainConfigurationPtrOutput() CustomDomainConfigurationPtrOutput {
	return i.ToCustomDomainConfigurationPtrOutputWithContext(context.Background())
}

func (i CustomDomainConfigurationArgs) ToCustomDomainConfigurationPtrOutputWithContext(ctx context.Context) CustomDomainConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainConfigurationOutput).ToCustomDomainConfigurationPtrOutputWithContext(ctx)
}

// CustomDomainConfigurationPtrInput is an input type that accepts CustomDomainConfigurationArgs, CustomDomainConfigurationPtr and CustomDomainConfigurationPtrOutput values.
// You can construct a concrete instance of `CustomDomainConfigurationPtrInput` via:
//
//	        CustomDomainConfigurationArgs{...}
//
//	or:
//
//	        nil
type CustomDomainConfigurationPtrInput interface {
	pulumi.Input

	ToCustomDomainConfigurationPtrOutput() CustomDomainConfigurationPtrOutput
	ToCustomDomainConfigurationPtrOutputWithContext(context.Context) CustomDomainConfigurationPtrOutput
}

type customDomainConfigurationPtrType CustomDomainConfigurationArgs

func CustomDomainConfigurationPtr(v *CustomDomainConfigurationArgs) CustomDomainConfigurationPtrInput {
	return (*customDomainConfigurationPtrType)(v)
}

func (*customDomainConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainConfiguration)(nil)).Elem()
}

func (i *customDomainConfigurationPtrType) ToCustomDomainConfigurationPtrOutput() CustomDomainConfigurationPtrOutput {
	return i.ToCustomDomainConfigurationPtrOutputWithContext(context.Background())
}

func (i *customDomainConfigurationPtrType) ToCustomDomainConfigurationPtrOutputWithContext(ctx context.Context) CustomDomainConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDomainConfigurationPtrOutput)
}

func (i *customDomainConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomDomainConfiguration] {
	return pulumix.Output[*CustomDomainConfiguration]{
		OutputState: i.ToCustomDomainConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration properties for apps environment custom domain
type CustomDomainConfigurationOutput struct{ *pulumi.OutputState }

func (CustomDomainConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainConfiguration)(nil)).Elem()
}

func (o CustomDomainConfigurationOutput) ToCustomDomainConfigurationOutput() CustomDomainConfigurationOutput {
	return o
}

func (o CustomDomainConfigurationOutput) ToCustomDomainConfigurationOutputWithContext(ctx context.Context) CustomDomainConfigurationOutput {
	return o
}

func (o CustomDomainConfigurationOutput) ToCustomDomainConfigurationPtrOutput() CustomDomainConfigurationPtrOutput {
	return o.ToCustomDomainConfigurationPtrOutputWithContext(context.Background())
}

func (o CustomDomainConfigurationOutput) ToCustomDomainConfigurationPtrOutputWithContext(ctx context.Context) CustomDomainConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomDomainConfiguration) *CustomDomainConfiguration {
		return &v
	}).(CustomDomainConfigurationPtrOutput)
}

func (o CustomDomainConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomainConfiguration] {
	return pulumix.Output[CustomDomainConfiguration]{
		OutputState: o.OutputState,
	}
}

// Certificate password
func (o CustomDomainConfigurationOutput) CertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainConfiguration) *string { return v.CertificatePassword }).(pulumi.StringPtrOutput)
}

// PFX or PEM blob
func (o CustomDomainConfigurationOutput) CertificateValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainConfiguration) *string { return v.CertificateValue }).(pulumi.StringPtrOutput)
}

// Dns suffix for the environment domain
func (o CustomDomainConfigurationOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainConfiguration) *string { return v.DnsSuffix }).(pulumi.StringPtrOutput)
}

type CustomDomainConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CustomDomainConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainConfiguration)(nil)).Elem()
}

func (o CustomDomainConfigurationPtrOutput) ToCustomDomainConfigurationPtrOutput() CustomDomainConfigurationPtrOutput {
	return o
}

func (o CustomDomainConfigurationPtrOutput) ToCustomDomainConfigurationPtrOutputWithContext(ctx context.Context) CustomDomainConfigurationPtrOutput {
	return o
}

func (o CustomDomainConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomDomainConfiguration] {
	return pulumix.Output[*CustomDomainConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o CustomDomainConfigurationPtrOutput) Elem() CustomDomainConfigurationOutput {
	return o.ApplyT(func(v *CustomDomainConfiguration) CustomDomainConfiguration {
		if v != nil {
			return *v
		}
		var ret CustomDomainConfiguration
		return ret
	}).(CustomDomainConfigurationOutput)
}

// Certificate password
func (o CustomDomainConfigurationPtrOutput) CertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePassword
	}).(pulumi.StringPtrOutput)
}

// PFX or PEM blob
func (o CustomDomainConfigurationPtrOutput) CertificateValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CertificateValue
	}).(pulumi.StringPtrOutput)
}

// Dns suffix for the environment domain
func (o CustomDomainConfigurationPtrOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DnsSuffix
	}).(pulumi.StringPtrOutput)
}

// Configuration properties for apps environment custom domain
type CustomDomainConfigurationResponse struct {
	// Certificate password
	CertificatePassword *string `pulumi:"certificatePassword"`
	// PFX or PEM blob
	CertificateValue *string `pulumi:"certificateValue"`
	// Id used to verify domain name ownership
	CustomDomainVerificationId string `pulumi:"customDomainVerificationId"`
	// Dns suffix for the environment domain
	DnsSuffix *string `pulumi:"dnsSuffix"`
	// Certificate expiration date.
	ExpirationDate string `pulumi:"expirationDate"`
	// Subject name of the certificate.
	SubjectName string `pulumi:"subjectName"`
	// Certificate thumbprint.
	Thumbprint string `pulumi:"thumbprint"`
}

// Configuration properties for apps environment custom domain
type CustomDomainConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CustomDomainConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainConfigurationResponse)(nil)).Elem()
}

func (o CustomDomainConfigurationResponseOutput) ToCustomDomainConfigurationResponseOutput() CustomDomainConfigurationResponseOutput {
	return o
}

func (o CustomDomainConfigurationResponseOutput) ToCustomDomainConfigurationResponseOutputWithContext(ctx context.Context) CustomDomainConfigurationResponseOutput {
	return o
}

func (o CustomDomainConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomainConfigurationResponse] {
	return pulumix.Output[CustomDomainConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Certificate password
func (o CustomDomainConfigurationResponseOutput) CertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) *string { return v.CertificatePassword }).(pulumi.StringPtrOutput)
}

// PFX or PEM blob
func (o CustomDomainConfigurationResponseOutput) CertificateValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) *string { return v.CertificateValue }).(pulumi.StringPtrOutput)
}

// Id used to verify domain name ownership
func (o CustomDomainConfigurationResponseOutput) CustomDomainVerificationId() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) string { return v.CustomDomainVerificationId }).(pulumi.StringOutput)
}

// Dns suffix for the environment domain
func (o CustomDomainConfigurationResponseOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) *string { return v.DnsSuffix }).(pulumi.StringPtrOutput)
}

// Certificate expiration date.
func (o CustomDomainConfigurationResponseOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) string { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Subject name of the certificate.
func (o CustomDomainConfigurationResponseOutput) SubjectName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) string { return v.SubjectName }).(pulumi.StringOutput)
}

// Certificate thumbprint.
func (o CustomDomainConfigurationResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainConfigurationResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

type CustomDomainConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomDomainConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDomainConfigurationResponse)(nil)).Elem()
}

func (o CustomDomainConfigurationResponsePtrOutput) ToCustomDomainConfigurationResponsePtrOutput() CustomDomainConfigurationResponsePtrOutput {
	return o
}

func (o CustomDomainConfigurationResponsePtrOutput) ToCustomDomainConfigurationResponsePtrOutputWithContext(ctx context.Context) CustomDomainConfigurationResponsePtrOutput {
	return o
}

func (o CustomDomainConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomDomainConfigurationResponse] {
	return pulumix.Output[*CustomDomainConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomDomainConfigurationResponsePtrOutput) Elem() CustomDomainConfigurationResponseOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) CustomDomainConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CustomDomainConfigurationResponse
		return ret
	}).(CustomDomainConfigurationResponseOutput)
}

// Certificate password
func (o CustomDomainConfigurationResponsePtrOutput) CertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePassword
	}).(pulumi.StringPtrOutput)
}

// PFX or PEM blob
func (o CustomDomainConfigurationResponsePtrOutput) CertificateValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificateValue
	}).(pulumi.StringPtrOutput)
}

// Id used to verify domain name ownership
func (o CustomDomainConfigurationResponsePtrOutput) CustomDomainVerificationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CustomDomainVerificationId
	}).(pulumi.StringPtrOutput)
}

// Dns suffix for the environment domain
func (o CustomDomainConfigurationResponsePtrOutput) DnsSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsSuffix
	}).(pulumi.StringPtrOutput)
}

// Certificate expiration date.
func (o CustomDomainConfigurationResponsePtrOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ExpirationDate
	}).(pulumi.StringPtrOutput)
}

// Subject name of the certificate.
func (o CustomDomainConfigurationResponsePtrOutput) SubjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubjectName
	}).(pulumi.StringPtrOutput)
}

// Certificate thumbprint.
func (o CustomDomainConfigurationResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDomainConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Custom Domain of a Container App
type CustomDomainResponse struct {
	// Custom Domain binding type.
	BindingType *string `pulumi:"bindingType"`
	// Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.
	CertificateId *string `pulumi:"certificateId"`
	// Hostname.
	Name string `pulumi:"name"`
}

// Custom Domain of a Container App
type CustomDomainResponseOutput struct{ *pulumi.OutputState }

func (CustomDomainResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomDomainResponse)(nil)).Elem()
}

func (o CustomDomainResponseOutput) ToCustomDomainResponseOutput() CustomDomainResponseOutput {
	return o
}

func (o CustomDomainResponseOutput) ToCustomDomainResponseOutputWithContext(ctx context.Context) CustomDomainResponseOutput {
	return o
}

func (o CustomDomainResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomDomainResponse] {
	return pulumix.Output[CustomDomainResponse]{
		OutputState: o.OutputState,
	}
}

// Custom Domain binding type.
func (o CustomDomainResponseOutput) BindingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainResponse) *string { return v.BindingType }).(pulumi.StringPtrOutput)
}

// Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment.
func (o CustomDomainResponseOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomDomainResponse) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Hostname.
func (o CustomDomainResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomDomainResponse) string { return v.Name }).(pulumi.StringOutput)
}

type CustomDomainResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomDomainResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomDomainResponse)(nil)).Elem()
}

func (o CustomDomainResponseArrayOutput) ToCustomDomainResponseArrayOutput() CustomDomainResponseArrayOutput {
	return o
}

func (o CustomDomainResponseArrayOutput) ToCustomDomainResponseArrayOutputWithContext(ctx context.Context) CustomDomainResponseArrayOutput {
	return o
}

func (o CustomDomainResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CustomDomainResponse] {
	return pulumix.Output[[]CustomDomainResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomDomainResponseArrayOutput) Index(i pulumi.IntInput) CustomDomainResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomDomainResponse {
		return vs[0].([]CustomDomainResponse)[vs[1].(int)]
	}).(CustomDomainResponseOutput)
}

// Raw failure information if DNS verification fails.
type CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo struct {
	// Standardized string to programmatically identify the error.
	Code string `pulumi:"code"`
	// Details or the error
	Details []CustomHostnameAnalysisResultResponseDetails `pulumi:"details"`
	// Detailed error description and debugging information.
	Message string `pulumi:"message"`
	// Detailed error description and debugging information.
	Target string `pulumi:"target"`
}

// Raw failure information if DNS verification fails.
type CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput struct{ *pulumi.OutputState }

func (CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo)(nil)).Elem()
}

func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) ToCustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput() CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput {
	return o
}

func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) ToCustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutputWithContext(ctx context.Context) CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput {
	return o
}

func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) ToOutput(ctx context.Context) pulumix.Output[CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo] {
	return pulumix.Output[CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo]{
		OutputState: o.OutputState,
	}
}

// Standardized string to programmatically identify the error.
func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo) string { return v.Code }).(pulumi.StringOutput)
}

// Details or the error
func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) Details() CustomHostnameAnalysisResultResponseDetailsArrayOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo) []CustomHostnameAnalysisResultResponseDetails {
		return v.Details
	}).(CustomHostnameAnalysisResultResponseDetailsArrayOutput)
}

// Detailed error description and debugging information.
func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo) string {
		return v.Message
	}).(pulumi.StringOutput)
}

// Detailed error description and debugging information.
func (o CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfo) string {
		return v.Target
	}).(pulumi.StringOutput)
}

// Detailed errors.
type CustomHostnameAnalysisResultResponseDetails struct {
	// Standardized string to programmatically identify the error.
	Code string `pulumi:"code"`
	// Detailed error description and debugging information.
	Message string `pulumi:"message"`
	// Detailed error description and debugging information.
	Target string `pulumi:"target"`
}

// Detailed errors.
type CustomHostnameAnalysisResultResponseDetailsOutput struct{ *pulumi.OutputState }

func (CustomHostnameAnalysisResultResponseDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomHostnameAnalysisResultResponseDetails)(nil)).Elem()
}

func (o CustomHostnameAnalysisResultResponseDetailsOutput) ToCustomHostnameAnalysisResultResponseDetailsOutput() CustomHostnameAnalysisResultResponseDetailsOutput {
	return o
}

func (o CustomHostnameAnalysisResultResponseDetailsOutput) ToCustomHostnameAnalysisResultResponseDetailsOutputWithContext(ctx context.Context) CustomHostnameAnalysisResultResponseDetailsOutput {
	return o
}

func (o CustomHostnameAnalysisResultResponseDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[CustomHostnameAnalysisResultResponseDetails] {
	return pulumix.Output[CustomHostnameAnalysisResultResponseDetails]{
		OutputState: o.OutputState,
	}
}

// Standardized string to programmatically identify the error.
func (o CustomHostnameAnalysisResultResponseDetailsOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseDetails) string { return v.Code }).(pulumi.StringOutput)
}

// Detailed error description and debugging information.
func (o CustomHostnameAnalysisResultResponseDetailsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseDetails) string { return v.Message }).(pulumi.StringOutput)
}

// Detailed error description and debugging information.
func (o CustomHostnameAnalysisResultResponseDetailsOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v CustomHostnameAnalysisResultResponseDetails) string { return v.Target }).(pulumi.StringOutput)
}

type CustomHostnameAnalysisResultResponseDetailsArrayOutput struct{ *pulumi.OutputState }

func (CustomHostnameAnalysisResultResponseDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomHostnameAnalysisResultResponseDetails)(nil)).Elem()
}

func (o CustomHostnameAnalysisResultResponseDetailsArrayOutput) ToCustomHostnameAnalysisResultResponseDetailsArrayOutput() CustomHostnameAnalysisResultResponseDetailsArrayOutput {
	return o
}

func (o CustomHostnameAnalysisResultResponseDetailsArrayOutput) ToCustomHostnameAnalysisResultResponseDetailsArrayOutputWithContext(ctx context.Context) CustomHostnameAnalysisResultResponseDetailsArrayOutput {
	return o
}

func (o CustomHostnameAnalysisResultResponseDetailsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CustomHostnameAnalysisResultResponseDetails] {
	return pulumix.Output[[]CustomHostnameAnalysisResultResponseDetails]{
		OutputState: o.OutputState,
	}
}

func (o CustomHostnameAnalysisResultResponseDetailsArrayOutput) Index(i pulumi.IntInput) CustomHostnameAnalysisResultResponseDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomHostnameAnalysisResultResponseDetails {
		return vs[0].([]CustomHostnameAnalysisResultResponseDetails)[vs[1].(int)]
	}).(CustomHostnameAnalysisResultResponseDetailsOutput)
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProvider struct {
	// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login *OpenIdConnectLogin `pulumi:"login"`
	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration *OpenIdConnectRegistration `pulumi:"registration"`
}

// CustomOpenIdConnectProviderInput is an input type that accepts CustomOpenIdConnectProviderArgs and CustomOpenIdConnectProviderOutput values.
// You can construct a concrete instance of `CustomOpenIdConnectProviderInput` via:
//
//	CustomOpenIdConnectProviderArgs{...}
type CustomOpenIdConnectProviderInput interface {
	pulumi.Input

	ToCustomOpenIdConnectProviderOutput() CustomOpenIdConnectProviderOutput
	ToCustomOpenIdConnectProviderOutputWithContext(context.Context) CustomOpenIdConnectProviderOutput
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderArgs struct {
	// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login OpenIdConnectLoginPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration OpenIdConnectRegistrationPtrInput `pulumi:"registration"`
}

func (CustomOpenIdConnectProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomOpenIdConnectProvider)(nil)).Elem()
}

func (i CustomOpenIdConnectProviderArgs) ToCustomOpenIdConnectProviderOutput() CustomOpenIdConnectProviderOutput {
	return i.ToCustomOpenIdConnectProviderOutputWithContext(context.Background())
}

func (i CustomOpenIdConnectProviderArgs) ToCustomOpenIdConnectProviderOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomOpenIdConnectProviderOutput)
}

func (i CustomOpenIdConnectProviderArgs) ToOutput(ctx context.Context) pulumix.Output[CustomOpenIdConnectProvider] {
	return pulumix.Output[CustomOpenIdConnectProvider]{
		OutputState: i.ToCustomOpenIdConnectProviderOutputWithContext(ctx).OutputState,
	}
}

// CustomOpenIdConnectProviderMapInput is an input type that accepts CustomOpenIdConnectProviderMap and CustomOpenIdConnectProviderMapOutput values.
// You can construct a concrete instance of `CustomOpenIdConnectProviderMapInput` via:
//
//	CustomOpenIdConnectProviderMap{ "key": CustomOpenIdConnectProviderArgs{...} }
type CustomOpenIdConnectProviderMapInput interface {
	pulumi.Input

	ToCustomOpenIdConnectProviderMapOutput() CustomOpenIdConnectProviderMapOutput
	ToCustomOpenIdConnectProviderMapOutputWithContext(context.Context) CustomOpenIdConnectProviderMapOutput
}

type CustomOpenIdConnectProviderMap map[string]CustomOpenIdConnectProviderInput

func (CustomOpenIdConnectProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomOpenIdConnectProvider)(nil)).Elem()
}

func (i CustomOpenIdConnectProviderMap) ToCustomOpenIdConnectProviderMapOutput() CustomOpenIdConnectProviderMapOutput {
	return i.ToCustomOpenIdConnectProviderMapOutputWithContext(context.Background())
}

func (i CustomOpenIdConnectProviderMap) ToCustomOpenIdConnectProviderMapOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomOpenIdConnectProviderMapOutput)
}

func (i CustomOpenIdConnectProviderMap) ToOutput(ctx context.Context) pulumix.Output[map[string]CustomOpenIdConnectProvider] {
	return pulumix.Output[map[string]CustomOpenIdConnectProvider]{
		OutputState: i.ToCustomOpenIdConnectProviderMapOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomOpenIdConnectProvider)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderOutput) ToCustomOpenIdConnectProviderOutput() CustomOpenIdConnectProviderOutput {
	return o
}

func (o CustomOpenIdConnectProviderOutput) ToCustomOpenIdConnectProviderOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderOutput {
	return o
}

func (o CustomOpenIdConnectProviderOutput) ToOutput(ctx context.Context) pulumix.Output[CustomOpenIdConnectProvider] {
	return pulumix.Output[CustomOpenIdConnectProvider]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
func (o CustomOpenIdConnectProviderOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProvider) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderOutput) Login() OpenIdConnectLoginPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProvider) *OpenIdConnectLogin { return v.Login }).(OpenIdConnectLoginPtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderOutput) Registration() OpenIdConnectRegistrationPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProvider) *OpenIdConnectRegistration { return v.Registration }).(OpenIdConnectRegistrationPtrOutput)
}

type CustomOpenIdConnectProviderMapOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomOpenIdConnectProvider)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderMapOutput) ToCustomOpenIdConnectProviderMapOutput() CustomOpenIdConnectProviderMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderMapOutput) ToCustomOpenIdConnectProviderMapOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]CustomOpenIdConnectProvider] {
	return pulumix.Output[map[string]CustomOpenIdConnectProvider]{
		OutputState: o.OutputState,
	}
}

func (o CustomOpenIdConnectProviderMapOutput) MapIndex(k pulumi.StringInput) CustomOpenIdConnectProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomOpenIdConnectProvider {
		return vs[0].(map[string]CustomOpenIdConnectProvider)[vs[1].(string)]
	}).(CustomOpenIdConnectProviderOutput)
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderResponse struct {
	// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login *OpenIdConnectLoginResponse `pulumi:"login"`
	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration *OpenIdConnectRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the custom Open ID Connect provider.
type CustomOpenIdConnectProviderResponseOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomOpenIdConnectProviderResponse)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderResponseOutput) ToCustomOpenIdConnectProviderResponseOutput() CustomOpenIdConnectProviderResponseOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseOutput) ToCustomOpenIdConnectProviderResponseOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderResponseOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomOpenIdConnectProviderResponse] {
	return pulumix.Output[CustomOpenIdConnectProviderResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>.
func (o CustomOpenIdConnectProviderResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProviderResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderResponseOutput) Login() OpenIdConnectLoginResponsePtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProviderResponse) *OpenIdConnectLoginResponse { return v.Login }).(OpenIdConnectLoginResponsePtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
func (o CustomOpenIdConnectProviderResponseOutput) Registration() OpenIdConnectRegistrationResponsePtrOutput {
	return o.ApplyT(func(v CustomOpenIdConnectProviderResponse) *OpenIdConnectRegistrationResponse { return v.Registration }).(OpenIdConnectRegistrationResponsePtrOutput)
}

type CustomOpenIdConnectProviderResponseMapOutput struct{ *pulumi.OutputState }

func (CustomOpenIdConnectProviderResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CustomOpenIdConnectProviderResponse)(nil)).Elem()
}

func (o CustomOpenIdConnectProviderResponseMapOutput) ToCustomOpenIdConnectProviderResponseMapOutput() CustomOpenIdConnectProviderResponseMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseMapOutput) ToCustomOpenIdConnectProviderResponseMapOutputWithContext(ctx context.Context) CustomOpenIdConnectProviderResponseMapOutput {
	return o
}

func (o CustomOpenIdConnectProviderResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]CustomOpenIdConnectProviderResponse] {
	return pulumix.Output[map[string]CustomOpenIdConnectProviderResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomOpenIdConnectProviderResponseMapOutput) MapIndex(k pulumi.StringInput) CustomOpenIdConnectProviderResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CustomOpenIdConnectProviderResponse {
		return vs[0].(map[string]CustomOpenIdConnectProviderResponse)[vs[1].(string)]
	}).(CustomOpenIdConnectProviderResponseOutput)
}

// Container App container Custom scaling rule.
type CustomScaleRule struct {
	// Authentication secrets for the custom scale rule.
	Auth []ScaleRuleAuth `pulumi:"auth"`
	// Metadata properties to describe custom scale rule.
	Metadata map[string]string `pulumi:"metadata"`
	// Type of the custom scale rule
	// eg: azure-servicebus, redis etc.
	Type *string `pulumi:"type"`
}

// CustomScaleRuleInput is an input type that accepts CustomScaleRuleArgs and CustomScaleRuleOutput values.
// You can construct a concrete instance of `CustomScaleRuleInput` via:
//
//	CustomScaleRuleArgs{...}
type CustomScaleRuleInput interface {
	pulumi.Input

	ToCustomScaleRuleOutput() CustomScaleRuleOutput
	ToCustomScaleRuleOutputWithContext(context.Context) CustomScaleRuleOutput
}

// Container App container Custom scaling rule.
type CustomScaleRuleArgs struct {
	// Authentication secrets for the custom scale rule.
	Auth ScaleRuleAuthArrayInput `pulumi:"auth"`
	// Metadata properties to describe custom scale rule.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Type of the custom scale rule
	// eg: azure-servicebus, redis etc.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CustomScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomScaleRule)(nil)).Elem()
}

func (i CustomScaleRuleArgs) ToCustomScaleRuleOutput() CustomScaleRuleOutput {
	return i.ToCustomScaleRuleOutputWithContext(context.Background())
}

func (i CustomScaleRuleArgs) ToCustomScaleRuleOutputWithContext(ctx context.Context) CustomScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomScaleRuleOutput)
}

func (i CustomScaleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[CustomScaleRule] {
	return pulumix.Output[CustomScaleRule]{
		OutputState: i.ToCustomScaleRuleOutputWithContext(ctx).OutputState,
	}
}

func (i CustomScaleRuleArgs) ToCustomScaleRulePtrOutput() CustomScaleRulePtrOutput {
	return i.ToCustomScaleRulePtrOutputWithContext(context.Background())
}

func (i CustomScaleRuleArgs) ToCustomScaleRulePtrOutputWithContext(ctx context.Context) CustomScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomScaleRuleOutput).ToCustomScaleRulePtrOutputWithContext(ctx)
}

// CustomScaleRulePtrInput is an input type that accepts CustomScaleRuleArgs, CustomScaleRulePtr and CustomScaleRulePtrOutput values.
// You can construct a concrete instance of `CustomScaleRulePtrInput` via:
//
//	        CustomScaleRuleArgs{...}
//
//	or:
//
//	        nil
type CustomScaleRulePtrInput interface {
	pulumi.Input

	ToCustomScaleRulePtrOutput() CustomScaleRulePtrOutput
	ToCustomScaleRulePtrOutputWithContext(context.Context) CustomScaleRulePtrOutput
}

type customScaleRulePtrType CustomScaleRuleArgs

func CustomScaleRulePtr(v *CustomScaleRuleArgs) CustomScaleRulePtrInput {
	return (*customScaleRulePtrType)(v)
}

func (*customScaleRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomScaleRule)(nil)).Elem()
}

func (i *customScaleRulePtrType) ToCustomScaleRulePtrOutput() CustomScaleRulePtrOutput {
	return i.ToCustomScaleRulePtrOutputWithContext(context.Background())
}

func (i *customScaleRulePtrType) ToCustomScaleRulePtrOutputWithContext(ctx context.Context) CustomScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomScaleRulePtrOutput)
}

func (i *customScaleRulePtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomScaleRule] {
	return pulumix.Output[*CustomScaleRule]{
		OutputState: i.ToCustomScaleRulePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App container Custom scaling rule.
type CustomScaleRuleOutput struct{ *pulumi.OutputState }

func (CustomScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomScaleRule)(nil)).Elem()
}

func (o CustomScaleRuleOutput) ToCustomScaleRuleOutput() CustomScaleRuleOutput {
	return o
}

func (o CustomScaleRuleOutput) ToCustomScaleRuleOutputWithContext(ctx context.Context) CustomScaleRuleOutput {
	return o
}

func (o CustomScaleRuleOutput) ToCustomScaleRulePtrOutput() CustomScaleRulePtrOutput {
	return o.ToCustomScaleRulePtrOutputWithContext(context.Background())
}

func (o CustomScaleRuleOutput) ToCustomScaleRulePtrOutputWithContext(ctx context.Context) CustomScaleRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomScaleRule) *CustomScaleRule {
		return &v
	}).(CustomScaleRulePtrOutput)
}

func (o CustomScaleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[CustomScaleRule] {
	return pulumix.Output[CustomScaleRule]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the custom scale rule.
func (o CustomScaleRuleOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v CustomScaleRule) []ScaleRuleAuth { return v.Auth }).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe custom scale rule.
func (o CustomScaleRuleOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomScaleRule) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Type of the custom scale rule
// eg: azure-servicebus, redis etc.
func (o CustomScaleRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomScaleRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CustomScaleRulePtrOutput struct{ *pulumi.OutputState }

func (CustomScaleRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomScaleRule)(nil)).Elem()
}

func (o CustomScaleRulePtrOutput) ToCustomScaleRulePtrOutput() CustomScaleRulePtrOutput {
	return o
}

func (o CustomScaleRulePtrOutput) ToCustomScaleRulePtrOutputWithContext(ctx context.Context) CustomScaleRulePtrOutput {
	return o
}

func (o CustomScaleRulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomScaleRule] {
	return pulumix.Output[*CustomScaleRule]{
		OutputState: o.OutputState,
	}
}

func (o CustomScaleRulePtrOutput) Elem() CustomScaleRuleOutput {
	return o.ApplyT(func(v *CustomScaleRule) CustomScaleRule {
		if v != nil {
			return *v
		}
		var ret CustomScaleRule
		return ret
	}).(CustomScaleRuleOutput)
}

// Authentication secrets for the custom scale rule.
func (o CustomScaleRulePtrOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v *CustomScaleRule) []ScaleRuleAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe custom scale rule.
func (o CustomScaleRulePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomScaleRule) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Type of the custom scale rule
// eg: azure-servicebus, redis etc.
func (o CustomScaleRulePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomScaleRule) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Container App container Custom scaling rule.
type CustomScaleRuleResponse struct {
	// Authentication secrets for the custom scale rule.
	Auth []ScaleRuleAuthResponse `pulumi:"auth"`
	// Metadata properties to describe custom scale rule.
	Metadata map[string]string `pulumi:"metadata"`
	// Type of the custom scale rule
	// eg: azure-servicebus, redis etc.
	Type *string `pulumi:"type"`
}

// Container App container Custom scaling rule.
type CustomScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (CustomScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomScaleRuleResponse)(nil)).Elem()
}

func (o CustomScaleRuleResponseOutput) ToCustomScaleRuleResponseOutput() CustomScaleRuleResponseOutput {
	return o
}

func (o CustomScaleRuleResponseOutput) ToCustomScaleRuleResponseOutputWithContext(ctx context.Context) CustomScaleRuleResponseOutput {
	return o
}

func (o CustomScaleRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomScaleRuleResponse] {
	return pulumix.Output[CustomScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the custom scale rule.
func (o CustomScaleRuleResponseOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v CustomScaleRuleResponse) []ScaleRuleAuthResponse { return v.Auth }).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe custom scale rule.
func (o CustomScaleRuleResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomScaleRuleResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Type of the custom scale rule
// eg: azure-servicebus, redis etc.
func (o CustomScaleRuleResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomScaleRuleResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CustomScaleRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomScaleRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomScaleRuleResponse)(nil)).Elem()
}

func (o CustomScaleRuleResponsePtrOutput) ToCustomScaleRuleResponsePtrOutput() CustomScaleRuleResponsePtrOutput {
	return o
}

func (o CustomScaleRuleResponsePtrOutput) ToCustomScaleRuleResponsePtrOutputWithContext(ctx context.Context) CustomScaleRuleResponsePtrOutput {
	return o
}

func (o CustomScaleRuleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomScaleRuleResponse] {
	return pulumix.Output[*CustomScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomScaleRuleResponsePtrOutput) Elem() CustomScaleRuleResponseOutput {
	return o.ApplyT(func(v *CustomScaleRuleResponse) CustomScaleRuleResponse {
		if v != nil {
			return *v
		}
		var ret CustomScaleRuleResponse
		return ret
	}).(CustomScaleRuleResponseOutput)
}

// Authentication secrets for the custom scale rule.
func (o CustomScaleRuleResponsePtrOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v *CustomScaleRuleResponse) []ScaleRuleAuthResponse {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe custom scale rule.
func (o CustomScaleRuleResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomScaleRuleResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Type of the custom scale rule
// eg: azure-servicebus, redis etc.
func (o CustomScaleRuleResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomScaleRuleResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Container App Dapr configuration.
type Dapr struct {
	// Dapr application identifier
	AppId *string `pulumi:"appId"`
	// Tells Dapr which port your application is listening on
	AppPort *int `pulumi:"appPort"`
	// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
	AppProtocol *string `pulumi:"appProtocol"`
	// Enables API logging for the Dapr sidecar
	EnableApiLogging *bool `pulumi:"enableApiLogging"`
	// Boolean indicating if the Dapr side car is enabled
	Enabled *bool `pulumi:"enabled"`
	// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
	HttpMaxRequestSize *int `pulumi:"httpMaxRequestSize"`
	// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
	HttpReadBufferSize *int `pulumi:"httpReadBufferSize"`
	// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
	LogLevel *string `pulumi:"logLevel"`
}

// Defaults sets the appropriate defaults for Dapr
func (val *Dapr) Defaults() *Dapr {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppProtocol == nil {
		appProtocol_ := "http"
		tmp.AppProtocol = &appProtocol_
	}
	if tmp.Enabled == nil {
		enabled_ := false
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// DaprInput is an input type that accepts DaprArgs and DaprOutput values.
// You can construct a concrete instance of `DaprInput` via:
//
//	DaprArgs{...}
type DaprInput interface {
	pulumi.Input

	ToDaprOutput() DaprOutput
	ToDaprOutputWithContext(context.Context) DaprOutput
}

// Container App Dapr configuration.
type DaprArgs struct {
	// Dapr application identifier
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Tells Dapr which port your application is listening on
	AppPort pulumi.IntPtrInput `pulumi:"appPort"`
	// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// Enables API logging for the Dapr sidecar
	EnableApiLogging pulumi.BoolPtrInput `pulumi:"enableApiLogging"`
	// Boolean indicating if the Dapr side car is enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
	HttpMaxRequestSize pulumi.IntPtrInput `pulumi:"httpMaxRequestSize"`
	// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
	HttpReadBufferSize pulumi.IntPtrInput `pulumi:"httpReadBufferSize"`
	// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
}

// Defaults sets the appropriate defaults for DaprArgs
func (val *DaprArgs) Defaults() *DaprArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppProtocol == nil {
		tmp.AppProtocol = pulumi.StringPtr("http")
	}
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DaprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dapr)(nil)).Elem()
}

func (i DaprArgs) ToDaprOutput() DaprOutput {
	return i.ToDaprOutputWithContext(context.Background())
}

func (i DaprArgs) ToDaprOutputWithContext(ctx context.Context) DaprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprOutput)
}

func (i DaprArgs) ToOutput(ctx context.Context) pulumix.Output[Dapr] {
	return pulumix.Output[Dapr]{
		OutputState: i.ToDaprOutputWithContext(ctx).OutputState,
	}
}

func (i DaprArgs) ToDaprPtrOutput() DaprPtrOutput {
	return i.ToDaprPtrOutputWithContext(context.Background())
}

func (i DaprArgs) ToDaprPtrOutputWithContext(ctx context.Context) DaprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprOutput).ToDaprPtrOutputWithContext(ctx)
}

// DaprPtrInput is an input type that accepts DaprArgs, DaprPtr and DaprPtrOutput values.
// You can construct a concrete instance of `DaprPtrInput` via:
//
//	        DaprArgs{...}
//
//	or:
//
//	        nil
type DaprPtrInput interface {
	pulumi.Input

	ToDaprPtrOutput() DaprPtrOutput
	ToDaprPtrOutputWithContext(context.Context) DaprPtrOutput
}

type daprPtrType DaprArgs

func DaprPtr(v *DaprArgs) DaprPtrInput {
	return (*daprPtrType)(v)
}

func (*daprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Dapr)(nil)).Elem()
}

func (i *daprPtrType) ToDaprPtrOutput() DaprPtrOutput {
	return i.ToDaprPtrOutputWithContext(context.Background())
}

func (i *daprPtrType) ToDaprPtrOutputWithContext(ctx context.Context) DaprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprPtrOutput)
}

func (i *daprPtrType) ToOutput(ctx context.Context) pulumix.Output[*Dapr] {
	return pulumix.Output[*Dapr]{
		OutputState: i.ToDaprPtrOutputWithContext(ctx).OutputState,
	}
}

// Container App Dapr configuration.
type DaprOutput struct{ *pulumi.OutputState }

func (DaprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dapr)(nil)).Elem()
}

func (o DaprOutput) ToDaprOutput() DaprOutput {
	return o
}

func (o DaprOutput) ToDaprOutputWithContext(ctx context.Context) DaprOutput {
	return o
}

func (o DaprOutput) ToDaprPtrOutput() DaprPtrOutput {
	return o.ToDaprPtrOutputWithContext(context.Background())
}

func (o DaprOutput) ToDaprPtrOutputWithContext(ctx context.Context) DaprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Dapr) *Dapr {
		return &v
	}).(DaprPtrOutput)
}

func (o DaprOutput) ToOutput(ctx context.Context) pulumix.Output[Dapr] {
	return pulumix.Output[Dapr]{
		OutputState: o.OutputState,
	}
}

// Dapr application identifier
func (o DaprOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dapr) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Tells Dapr which port your application is listening on
func (o DaprOutput) AppPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Dapr) *int { return v.AppPort }).(pulumi.IntPtrOutput)
}

// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
func (o DaprOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dapr) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// Enables API logging for the Dapr sidecar
func (o DaprOutput) EnableApiLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Dapr) *bool { return v.EnableApiLogging }).(pulumi.BoolPtrOutput)
}

// Boolean indicating if the Dapr side car is enabled
func (o DaprOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Dapr) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
func (o DaprOutput) HttpMaxRequestSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Dapr) *int { return v.HttpMaxRequestSize }).(pulumi.IntPtrOutput)
}

// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
func (o DaprOutput) HttpReadBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Dapr) *int { return v.HttpReadBufferSize }).(pulumi.IntPtrOutput)
}

// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
func (o DaprOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dapr) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

type DaprPtrOutput struct{ *pulumi.OutputState }

func (DaprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dapr)(nil)).Elem()
}

func (o DaprPtrOutput) ToDaprPtrOutput() DaprPtrOutput {
	return o
}

func (o DaprPtrOutput) ToDaprPtrOutputWithContext(ctx context.Context) DaprPtrOutput {
	return o
}

func (o DaprPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Dapr] {
	return pulumix.Output[*Dapr]{
		OutputState: o.OutputState,
	}
}

func (o DaprPtrOutput) Elem() DaprOutput {
	return o.ApplyT(func(v *Dapr) Dapr {
		if v != nil {
			return *v
		}
		var ret Dapr
		return ret
	}).(DaprOutput)
}

// Dapr application identifier
func (o DaprPtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dapr) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// Tells Dapr which port your application is listening on
func (o DaprPtrOutput) AppPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Dapr) *int {
		if v == nil {
			return nil
		}
		return v.AppPort
	}).(pulumi.IntPtrOutput)
}

// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
func (o DaprPtrOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dapr) *string {
		if v == nil {
			return nil
		}
		return v.AppProtocol
	}).(pulumi.StringPtrOutput)
}

// Enables API logging for the Dapr sidecar
func (o DaprPtrOutput) EnableApiLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dapr) *bool {
		if v == nil {
			return nil
		}
		return v.EnableApiLogging
	}).(pulumi.BoolPtrOutput)
}

// Boolean indicating if the Dapr side car is enabled
func (o DaprPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dapr) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
func (o DaprPtrOutput) HttpMaxRequestSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Dapr) *int {
		if v == nil {
			return nil
		}
		return v.HttpMaxRequestSize
	}).(pulumi.IntPtrOutput)
}

// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
func (o DaprPtrOutput) HttpReadBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Dapr) *int {
		if v == nil {
			return nil
		}
		return v.HttpReadBufferSize
	}).(pulumi.IntPtrOutput)
}

// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
func (o DaprPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dapr) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Configuration properties Dapr component
type DaprConfigurationResponse struct {
	// The version of Dapr
	Version string `pulumi:"version"`
}

// Configuration properties Dapr component
type DaprConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DaprConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprConfigurationResponse)(nil)).Elem()
}

func (o DaprConfigurationResponseOutput) ToDaprConfigurationResponseOutput() DaprConfigurationResponseOutput {
	return o
}

func (o DaprConfigurationResponseOutput) ToDaprConfigurationResponseOutputWithContext(ctx context.Context) DaprConfigurationResponseOutput {
	return o
}

func (o DaprConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DaprConfigurationResponse] {
	return pulumix.Output[DaprConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The version of Dapr
func (o DaprConfigurationResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v DaprConfigurationResponse) string { return v.Version }).(pulumi.StringOutput)
}

type DaprConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DaprConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaprConfigurationResponse)(nil)).Elem()
}

func (o DaprConfigurationResponsePtrOutput) ToDaprConfigurationResponsePtrOutput() DaprConfigurationResponsePtrOutput {
	return o
}

func (o DaprConfigurationResponsePtrOutput) ToDaprConfigurationResponsePtrOutputWithContext(ctx context.Context) DaprConfigurationResponsePtrOutput {
	return o
}

func (o DaprConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DaprConfigurationResponse] {
	return pulumix.Output[*DaprConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o DaprConfigurationResponsePtrOutput) Elem() DaprConfigurationResponseOutput {
	return o.ApplyT(func(v *DaprConfigurationResponse) DaprConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DaprConfigurationResponse
		return ret
	}).(DaprConfigurationResponseOutput)
}

// The version of Dapr
func (o DaprConfigurationResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Dapr component metadata.
type DaprMetadata struct {
	// Metadata property name.
	Name *string `pulumi:"name"`
	// Name of the Dapr Component secret from which to pull the metadata property value.
	SecretRef *string `pulumi:"secretRef"`
	// Metadata property value.
	Value *string `pulumi:"value"`
}

// DaprMetadataInput is an input type that accepts DaprMetadataArgs and DaprMetadataOutput values.
// You can construct a concrete instance of `DaprMetadataInput` via:
//
//	DaprMetadataArgs{...}
type DaprMetadataInput interface {
	pulumi.Input

	ToDaprMetadataOutput() DaprMetadataOutput
	ToDaprMetadataOutputWithContext(context.Context) DaprMetadataOutput
}

// Dapr component metadata.
type DaprMetadataArgs struct {
	// Metadata property name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the Dapr Component secret from which to pull the metadata property value.
	SecretRef pulumi.StringPtrInput `pulumi:"secretRef"`
	// Metadata property value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DaprMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprMetadata)(nil)).Elem()
}

func (i DaprMetadataArgs) ToDaprMetadataOutput() DaprMetadataOutput {
	return i.ToDaprMetadataOutputWithContext(context.Background())
}

func (i DaprMetadataArgs) ToDaprMetadataOutputWithContext(ctx context.Context) DaprMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprMetadataOutput)
}

func (i DaprMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[DaprMetadata] {
	return pulumix.Output[DaprMetadata]{
		OutputState: i.ToDaprMetadataOutputWithContext(ctx).OutputState,
	}
}

// DaprMetadataArrayInput is an input type that accepts DaprMetadataArray and DaprMetadataArrayOutput values.
// You can construct a concrete instance of `DaprMetadataArrayInput` via:
//
//	DaprMetadataArray{ DaprMetadataArgs{...} }
type DaprMetadataArrayInput interface {
	pulumi.Input

	ToDaprMetadataArrayOutput() DaprMetadataArrayOutput
	ToDaprMetadataArrayOutputWithContext(context.Context) DaprMetadataArrayOutput
}

type DaprMetadataArray []DaprMetadataInput

func (DaprMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprMetadata)(nil)).Elem()
}

func (i DaprMetadataArray) ToDaprMetadataArrayOutput() DaprMetadataArrayOutput {
	return i.ToDaprMetadataArrayOutputWithContext(context.Background())
}

func (i DaprMetadataArray) ToDaprMetadataArrayOutputWithContext(ctx context.Context) DaprMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprMetadataArrayOutput)
}

func (i DaprMetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]DaprMetadata] {
	return pulumix.Output[[]DaprMetadata]{
		OutputState: i.ToDaprMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

// Dapr component metadata.
type DaprMetadataOutput struct{ *pulumi.OutputState }

func (DaprMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprMetadata)(nil)).Elem()
}

func (o DaprMetadataOutput) ToDaprMetadataOutput() DaprMetadataOutput {
	return o
}

func (o DaprMetadataOutput) ToDaprMetadataOutputWithContext(ctx context.Context) DaprMetadataOutput {
	return o
}

func (o DaprMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[DaprMetadata] {
	return pulumix.Output[DaprMetadata]{
		OutputState: o.OutputState,
	}
}

// Metadata property name.
func (o DaprMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the Dapr Component secret from which to pull the metadata property value.
func (o DaprMetadataOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Metadata property value.
func (o DaprMetadataOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DaprMetadataArrayOutput struct{ *pulumi.OutputState }

func (DaprMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprMetadata)(nil)).Elem()
}

func (o DaprMetadataArrayOutput) ToDaprMetadataArrayOutput() DaprMetadataArrayOutput {
	return o
}

func (o DaprMetadataArrayOutput) ToDaprMetadataArrayOutputWithContext(ctx context.Context) DaprMetadataArrayOutput {
	return o
}

func (o DaprMetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DaprMetadata] {
	return pulumix.Output[[]DaprMetadata]{
		OutputState: o.OutputState,
	}
}

func (o DaprMetadataArrayOutput) Index(i pulumi.IntInput) DaprMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaprMetadata {
		return vs[0].([]DaprMetadata)[vs[1].(int)]
	}).(DaprMetadataOutput)
}

// Dapr component metadata.
type DaprMetadataResponse struct {
	// Metadata property name.
	Name *string `pulumi:"name"`
	// Name of the Dapr Component secret from which to pull the metadata property value.
	SecretRef *string `pulumi:"secretRef"`
	// Metadata property value.
	Value *string `pulumi:"value"`
}

// Dapr component metadata.
type DaprMetadataResponseOutput struct{ *pulumi.OutputState }

func (DaprMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprMetadataResponse)(nil)).Elem()
}

func (o DaprMetadataResponseOutput) ToDaprMetadataResponseOutput() DaprMetadataResponseOutput {
	return o
}

func (o DaprMetadataResponseOutput) ToDaprMetadataResponseOutputWithContext(ctx context.Context) DaprMetadataResponseOutput {
	return o
}

func (o DaprMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DaprMetadataResponse] {
	return pulumix.Output[DaprMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// Metadata property name.
func (o DaprMetadataResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the Dapr Component secret from which to pull the metadata property value.
func (o DaprMetadataResponseOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Metadata property value.
func (o DaprMetadataResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DaprMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (DaprMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprMetadataResponse)(nil)).Elem()
}

func (o DaprMetadataResponseArrayOutput) ToDaprMetadataResponseArrayOutput() DaprMetadataResponseArrayOutput {
	return o
}

func (o DaprMetadataResponseArrayOutput) ToDaprMetadataResponseArrayOutputWithContext(ctx context.Context) DaprMetadataResponseArrayOutput {
	return o
}

func (o DaprMetadataResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DaprMetadataResponse] {
	return pulumix.Output[[]DaprMetadataResponse]{
		OutputState: o.OutputState,
	}
}

func (o DaprMetadataResponseArrayOutput) Index(i pulumi.IntInput) DaprMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaprMetadataResponse {
		return vs[0].([]DaprMetadataResponse)[vs[1].(int)]
	}).(DaprMetadataResponseOutput)
}

// Container App Dapr configuration.
type DaprResponse struct {
	// Dapr application identifier
	AppId *string `pulumi:"appId"`
	// Tells Dapr which port your application is listening on
	AppPort *int `pulumi:"appPort"`
	// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
	AppProtocol *string `pulumi:"appProtocol"`
	// Enables API logging for the Dapr sidecar
	EnableApiLogging *bool `pulumi:"enableApiLogging"`
	// Boolean indicating if the Dapr side car is enabled
	Enabled *bool `pulumi:"enabled"`
	// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
	HttpMaxRequestSize *int `pulumi:"httpMaxRequestSize"`
	// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
	HttpReadBufferSize *int `pulumi:"httpReadBufferSize"`
	// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
	LogLevel *string `pulumi:"logLevel"`
}

// Defaults sets the appropriate defaults for DaprResponse
func (val *DaprResponse) Defaults() *DaprResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppProtocol == nil {
		appProtocol_ := "http"
		tmp.AppProtocol = &appProtocol_
	}
	if tmp.Enabled == nil {
		enabled_ := false
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// Container App Dapr configuration.
type DaprResponseOutput struct{ *pulumi.OutputState }

func (DaprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprResponse)(nil)).Elem()
}

func (o DaprResponseOutput) ToDaprResponseOutput() DaprResponseOutput {
	return o
}

func (o DaprResponseOutput) ToDaprResponseOutputWithContext(ctx context.Context) DaprResponseOutput {
	return o
}

func (o DaprResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DaprResponse] {
	return pulumix.Output[DaprResponse]{
		OutputState: o.OutputState,
	}
}

// Dapr application identifier
func (o DaprResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Tells Dapr which port your application is listening on
func (o DaprResponseOutput) AppPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaprResponse) *int { return v.AppPort }).(pulumi.IntPtrOutput)
}

// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
func (o DaprResponseOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprResponse) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// Enables API logging for the Dapr sidecar
func (o DaprResponseOutput) EnableApiLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DaprResponse) *bool { return v.EnableApiLogging }).(pulumi.BoolPtrOutput)
}

// Boolean indicating if the Dapr side car is enabled
func (o DaprResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DaprResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
func (o DaprResponseOutput) HttpMaxRequestSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaprResponse) *int { return v.HttpMaxRequestSize }).(pulumi.IntPtrOutput)
}

// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
func (o DaprResponseOutput) HttpReadBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DaprResponse) *int { return v.HttpReadBufferSize }).(pulumi.IntPtrOutput)
}

// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
func (o DaprResponseOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprResponse) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

type DaprResponsePtrOutput struct{ *pulumi.OutputState }

func (DaprResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaprResponse)(nil)).Elem()
}

func (o DaprResponsePtrOutput) ToDaprResponsePtrOutput() DaprResponsePtrOutput {
	return o
}

func (o DaprResponsePtrOutput) ToDaprResponsePtrOutputWithContext(ctx context.Context) DaprResponsePtrOutput {
	return o
}

func (o DaprResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DaprResponse] {
	return pulumix.Output[*DaprResponse]{
		OutputState: o.OutputState,
	}
}

func (o DaprResponsePtrOutput) Elem() DaprResponseOutput {
	return o.ApplyT(func(v *DaprResponse) DaprResponse {
		if v != nil {
			return *v
		}
		var ret DaprResponse
		return ret
	}).(DaprResponseOutput)
}

// Dapr application identifier
func (o DaprResponsePtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// Tells Dapr which port your application is listening on
func (o DaprResponsePtrOutput) AppPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *int {
		if v == nil {
			return nil
		}
		return v.AppPort
	}).(pulumi.IntPtrOutput)
}

// Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http
func (o DaprResponsePtrOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppProtocol
	}).(pulumi.StringPtrOutput)
}

// Enables API logging for the Dapr sidecar
func (o DaprResponsePtrOutput) EnableApiLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableApiLogging
	}).(pulumi.BoolPtrOutput)
}

// Boolean indicating if the Dapr side car is enabled
func (o DaprResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB.
func (o DaprResponsePtrOutput) HttpMaxRequestSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *int {
		if v == nil {
			return nil
		}
		return v.HttpMaxRequestSize
	}).(pulumi.IntPtrOutput)
}

// Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB.
func (o DaprResponsePtrOutput) HttpReadBufferSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *int {
		if v == nil {
			return nil
		}
		return v.HttpReadBufferSize
	}).(pulumi.IntPtrOutput)
}

// Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info.
func (o DaprResponsePtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Dapr component Secret for ListSecrets Action
type DaprSecretResponse struct {
	// Secret Name.
	Name string `pulumi:"name"`
	// Secret Value.
	Value string `pulumi:"value"`
}

// Dapr component Secret for ListSecrets Action
type DaprSecretResponseOutput struct{ *pulumi.OutputState }

func (DaprSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprSecretResponse)(nil)).Elem()
}

func (o DaprSecretResponseOutput) ToDaprSecretResponseOutput() DaprSecretResponseOutput {
	return o
}

func (o DaprSecretResponseOutput) ToDaprSecretResponseOutputWithContext(ctx context.Context) DaprSecretResponseOutput {
	return o
}

func (o DaprSecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DaprSecretResponse] {
	return pulumix.Output[DaprSecretResponse]{
		OutputState: o.OutputState,
	}
}

// Secret Name.
func (o DaprSecretResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DaprSecretResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Secret Value.
func (o DaprSecretResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DaprSecretResponse) string { return v.Value }).(pulumi.StringOutput)
}

type DaprSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (DaprSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprSecretResponse)(nil)).Elem()
}

func (o DaprSecretResponseArrayOutput) ToDaprSecretResponseArrayOutput() DaprSecretResponseArrayOutput {
	return o
}

func (o DaprSecretResponseArrayOutput) ToDaprSecretResponseArrayOutputWithContext(ctx context.Context) DaprSecretResponseArrayOutput {
	return o
}

func (o DaprSecretResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DaprSecretResponse] {
	return pulumix.Output[[]DaprSecretResponse]{
		OutputState: o.OutputState,
	}
}

func (o DaprSecretResponseArrayOutput) Index(i pulumi.IntInput) DaprSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaprSecretResponse {
		return vs[0].([]DaprSecretResponse)[vs[1].(int)]
	}).(DaprSecretResponseOutput)
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicy struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals *AllowedPrincipals `pulumi:"allowedPrincipals"`
}

// DefaultAuthorizationPolicyInput is an input type that accepts DefaultAuthorizationPolicyArgs and DefaultAuthorizationPolicyOutput values.
// You can construct a concrete instance of `DefaultAuthorizationPolicyInput` via:
//
//	DefaultAuthorizationPolicyArgs{...}
type DefaultAuthorizationPolicyInput interface {
	pulumi.Input

	ToDefaultAuthorizationPolicyOutput() DefaultAuthorizationPolicyOutput
	ToDefaultAuthorizationPolicyOutputWithContext(context.Context) DefaultAuthorizationPolicyOutput
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyArgs struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications pulumi.StringArrayInput `pulumi:"allowedApplications"`
	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals AllowedPrincipalsPtrInput `pulumi:"allowedPrincipals"`
}

func (DefaultAuthorizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAuthorizationPolicy)(nil)).Elem()
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyOutput() DefaultAuthorizationPolicyOutput {
	return i.ToDefaultAuthorizationPolicyOutputWithContext(context.Background())
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultAuthorizationPolicyOutput)
}

func (i DefaultAuthorizationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[DefaultAuthorizationPolicy] {
	return pulumix.Output[DefaultAuthorizationPolicy]{
		OutputState: i.ToDefaultAuthorizationPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return i.ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Background())
}

func (i DefaultAuthorizationPolicyArgs) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultAuthorizationPolicyOutput).ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx)
}

// DefaultAuthorizationPolicyPtrInput is an input type that accepts DefaultAuthorizationPolicyArgs, DefaultAuthorizationPolicyPtr and DefaultAuthorizationPolicyPtrOutput values.
// You can construct a concrete instance of `DefaultAuthorizationPolicyPtrInput` via:
//
//	        DefaultAuthorizationPolicyArgs{...}
//
//	or:
//
//	        nil
type DefaultAuthorizationPolicyPtrInput interface {
	pulumi.Input

	ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput
	ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Context) DefaultAuthorizationPolicyPtrOutput
}

type defaultAuthorizationPolicyPtrType DefaultAuthorizationPolicyArgs

func DefaultAuthorizationPolicyPtr(v *DefaultAuthorizationPolicyArgs) DefaultAuthorizationPolicyPtrInput {
	return (*defaultAuthorizationPolicyPtrType)(v)
}

func (*defaultAuthorizationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAuthorizationPolicy)(nil)).Elem()
}

func (i *defaultAuthorizationPolicyPtrType) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return i.ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Background())
}

func (i *defaultAuthorizationPolicyPtrType) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultAuthorizationPolicyPtrOutput)
}

func (i *defaultAuthorizationPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*DefaultAuthorizationPolicy] {
	return pulumix.Output[*DefaultAuthorizationPolicy]{
		OutputState: i.ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAuthorizationPolicy)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyOutput() DefaultAuthorizationPolicyOutput {
	return o
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyOutput {
	return o
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return o.ToDefaultAuthorizationPolicyPtrOutputWithContext(context.Background())
}

func (o DefaultAuthorizationPolicyOutput) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultAuthorizationPolicy) *DefaultAuthorizationPolicy {
		return &v
	}).(DefaultAuthorizationPolicyPtrOutput)
}

func (o DefaultAuthorizationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[DefaultAuthorizationPolicy] {
	return pulumix.Output[DefaultAuthorizationPolicy]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicy) []string { return v.AllowedApplications }).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyOutput) AllowedPrincipals() AllowedPrincipalsPtrOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicy) *AllowedPrincipals { return v.AllowedPrincipals }).(AllowedPrincipalsPtrOutput)
}

type DefaultAuthorizationPolicyPtrOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAuthorizationPolicy)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyPtrOutput) ToDefaultAuthorizationPolicyPtrOutput() DefaultAuthorizationPolicyPtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyPtrOutput) ToDefaultAuthorizationPolicyPtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyPtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DefaultAuthorizationPolicy] {
	return pulumix.Output[*DefaultAuthorizationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o DefaultAuthorizationPolicyPtrOutput) Elem() DefaultAuthorizationPolicyOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicy) DefaultAuthorizationPolicy {
		if v != nil {
			return *v
		}
		var ret DefaultAuthorizationPolicy
		return ret
	}).(DefaultAuthorizationPolicyOutput)
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyPtrOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowedApplications
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyPtrOutput) AllowedPrincipals() AllowedPrincipalsPtrOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicy) *AllowedPrincipals {
		if v == nil {
			return nil
		}
		return v.AllowedPrincipals
	}).(AllowedPrincipalsPtrOutput)
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyResponse struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications []string `pulumi:"allowedApplications"`
	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals *AllowedPrincipalsResponse `pulumi:"allowedPrincipals"`
}

// The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicyResponseOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultAuthorizationPolicyResponse)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyResponseOutput) ToDefaultAuthorizationPolicyResponseOutput() DefaultAuthorizationPolicyResponseOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponseOutput) ToDefaultAuthorizationPolicyResponseOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyResponseOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DefaultAuthorizationPolicyResponse] {
	return pulumix.Output[DefaultAuthorizationPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyResponseOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicyResponse) []string { return v.AllowedApplications }).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyResponseOutput) AllowedPrincipals() AllowedPrincipalsResponsePtrOutput {
	return o.ApplyT(func(v DefaultAuthorizationPolicyResponse) *AllowedPrincipalsResponse { return v.AllowedPrincipals }).(AllowedPrincipalsResponsePtrOutput)
}

type DefaultAuthorizationPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultAuthorizationPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultAuthorizationPolicyResponse)(nil)).Elem()
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) ToDefaultAuthorizationPolicyResponsePtrOutput() DefaultAuthorizationPolicyResponsePtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) ToDefaultAuthorizationPolicyResponsePtrOutputWithContext(ctx context.Context) DefaultAuthorizationPolicyResponsePtrOutput {
	return o
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DefaultAuthorizationPolicyResponse] {
	return pulumix.Output[*DefaultAuthorizationPolicyResponse]{
		OutputState: o.OutputState,
	}
}

func (o DefaultAuthorizationPolicyResponsePtrOutput) Elem() DefaultAuthorizationPolicyResponseOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicyResponse) DefaultAuthorizationPolicyResponse {
		if v != nil {
			return *v
		}
		var ret DefaultAuthorizationPolicyResponse
		return ret
	}).(DefaultAuthorizationPolicyResponseOutput)
}

// The configuration settings of the Azure Active Directory allowed applications.
func (o DefaultAuthorizationPolicyResponsePtrOutput) AllowedApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedApplications
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the Azure Active Directory allowed principals.
func (o DefaultAuthorizationPolicyResponsePtrOutput) AllowedPrincipals() AllowedPrincipalsResponsePtrOutput {
	return o.ApplyT(func(v *DefaultAuthorizationPolicyResponse) *AllowedPrincipalsResponse {
		if v == nil {
			return nil
		}
		return v.AllowedPrincipals
	}).(AllowedPrincipalsResponsePtrOutput)
}

// The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization.
type EncryptionSettings struct {
	// The secret name which is referenced for EncryptionKey.
	ContainerAppAuthEncryptionSecretName *string `pulumi:"containerAppAuthEncryptionSecretName"`
	// The secret name which is referenced for SigningKey.
	ContainerAppAuthSigningSecretName *string `pulumi:"containerAppAuthSigningSecretName"`
}

// EncryptionSettingsInput is an input type that accepts EncryptionSettingsArgs and EncryptionSettingsOutput values.
// You can construct a concrete instance of `EncryptionSettingsInput` via:
//
//	EncryptionSettingsArgs{...}
type EncryptionSettingsInput interface {
	pulumi.Input

	ToEncryptionSettingsOutput() EncryptionSettingsOutput
	ToEncryptionSettingsOutputWithContext(context.Context) EncryptionSettingsOutput
}

// The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization.
type EncryptionSettingsArgs struct {
	// The secret name which is referenced for EncryptionKey.
	ContainerAppAuthEncryptionSecretName pulumi.StringPtrInput `pulumi:"containerAppAuthEncryptionSecretName"`
	// The secret name which is referenced for SigningKey.
	ContainerAppAuthSigningSecretName pulumi.StringPtrInput `pulumi:"containerAppAuthSigningSecretName"`
}

func (EncryptionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettings)(nil)).Elem()
}

func (i EncryptionSettingsArgs) ToEncryptionSettingsOutput() EncryptionSettingsOutput {
	return i.ToEncryptionSettingsOutputWithContext(context.Background())
}

func (i EncryptionSettingsArgs) ToEncryptionSettingsOutputWithContext(ctx context.Context) EncryptionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsOutput)
}

func (i EncryptionSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionSettings] {
	return pulumix.Output[EncryptionSettings]{
		OutputState: i.ToEncryptionSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionSettingsArgs) ToEncryptionSettingsPtrOutput() EncryptionSettingsPtrOutput {
	return i.ToEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i EncryptionSettingsArgs) ToEncryptionSettingsPtrOutputWithContext(ctx context.Context) EncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsOutput).ToEncryptionSettingsPtrOutputWithContext(ctx)
}

// EncryptionSettingsPtrInput is an input type that accepts EncryptionSettingsArgs, EncryptionSettingsPtr and EncryptionSettingsPtrOutput values.
// You can construct a concrete instance of `EncryptionSettingsPtrInput` via:
//
//	        EncryptionSettingsArgs{...}
//
//	or:
//
//	        nil
type EncryptionSettingsPtrInput interface {
	pulumi.Input

	ToEncryptionSettingsPtrOutput() EncryptionSettingsPtrOutput
	ToEncryptionSettingsPtrOutputWithContext(context.Context) EncryptionSettingsPtrOutput
}

type encryptionSettingsPtrType EncryptionSettingsArgs

func EncryptionSettingsPtr(v *EncryptionSettingsArgs) EncryptionSettingsPtrInput {
	return (*encryptionSettingsPtrType)(v)
}

func (*encryptionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettings)(nil)).Elem()
}

func (i *encryptionSettingsPtrType) ToEncryptionSettingsPtrOutput() EncryptionSettingsPtrOutput {
	return i.ToEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (i *encryptionSettingsPtrType) ToEncryptionSettingsPtrOutputWithContext(ctx context.Context) EncryptionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionSettingsPtrOutput)
}

func (i *encryptionSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionSettings] {
	return pulumix.Output[*EncryptionSettings]{
		OutputState: i.ToEncryptionSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization.
type EncryptionSettingsOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettings)(nil)).Elem()
}

func (o EncryptionSettingsOutput) ToEncryptionSettingsOutput() EncryptionSettingsOutput {
	return o
}

func (o EncryptionSettingsOutput) ToEncryptionSettingsOutputWithContext(ctx context.Context) EncryptionSettingsOutput {
	return o
}

func (o EncryptionSettingsOutput) ToEncryptionSettingsPtrOutput() EncryptionSettingsPtrOutput {
	return o.ToEncryptionSettingsPtrOutputWithContext(context.Background())
}

func (o EncryptionSettingsOutput) ToEncryptionSettingsPtrOutputWithContext(ctx context.Context) EncryptionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionSettings) *EncryptionSettings {
		return &v
	}).(EncryptionSettingsPtrOutput)
}

func (o EncryptionSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionSettings] {
	return pulumix.Output[EncryptionSettings]{
		OutputState: o.OutputState,
	}
}

// The secret name which is referenced for EncryptionKey.
func (o EncryptionSettingsOutput) ContainerAppAuthEncryptionSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettings) *string { return v.ContainerAppAuthEncryptionSecretName }).(pulumi.StringPtrOutput)
}

// The secret name which is referenced for SigningKey.
func (o EncryptionSettingsOutput) ContainerAppAuthSigningSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettings) *string { return v.ContainerAppAuthSigningSecretName }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsPtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettings)(nil)).Elem()
}

func (o EncryptionSettingsPtrOutput) ToEncryptionSettingsPtrOutput() EncryptionSettingsPtrOutput {
	return o
}

func (o EncryptionSettingsPtrOutput) ToEncryptionSettingsPtrOutputWithContext(ctx context.Context) EncryptionSettingsPtrOutput {
	return o
}

func (o EncryptionSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionSettings] {
	return pulumix.Output[*EncryptionSettings]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionSettingsPtrOutput) Elem() EncryptionSettingsOutput {
	return o.ApplyT(func(v *EncryptionSettings) EncryptionSettings {
		if v != nil {
			return *v
		}
		var ret EncryptionSettings
		return ret
	}).(EncryptionSettingsOutput)
}

// The secret name which is referenced for EncryptionKey.
func (o EncryptionSettingsPtrOutput) ContainerAppAuthEncryptionSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettings) *string {
		if v == nil {
			return nil
		}
		return v.ContainerAppAuthEncryptionSecretName
	}).(pulumi.StringPtrOutput)
}

// The secret name which is referenced for SigningKey.
func (o EncryptionSettingsPtrOutput) ContainerAppAuthSigningSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettings) *string {
		if v == nil {
			return nil
		}
		return v.ContainerAppAuthSigningSecretName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization.
type EncryptionSettingsResponse struct {
	// The secret name which is referenced for EncryptionKey.
	ContainerAppAuthEncryptionSecretName *string `pulumi:"containerAppAuthEncryptionSecretName"`
	// The secret name which is referenced for SigningKey.
	ContainerAppAuthSigningSecretName *string `pulumi:"containerAppAuthSigningSecretName"`
}

// The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization.
type EncryptionSettingsResponseOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionSettingsResponse)(nil)).Elem()
}

func (o EncryptionSettingsResponseOutput) ToEncryptionSettingsResponseOutput() EncryptionSettingsResponseOutput {
	return o
}

func (o EncryptionSettingsResponseOutput) ToEncryptionSettingsResponseOutputWithContext(ctx context.Context) EncryptionSettingsResponseOutput {
	return o
}

func (o EncryptionSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionSettingsResponse] {
	return pulumix.Output[EncryptionSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// The secret name which is referenced for EncryptionKey.
func (o EncryptionSettingsResponseOutput) ContainerAppAuthEncryptionSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsResponse) *string { return v.ContainerAppAuthEncryptionSecretName }).(pulumi.StringPtrOutput)
}

// The secret name which is referenced for SigningKey.
func (o EncryptionSettingsResponseOutput) ContainerAppAuthSigningSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionSettingsResponse) *string { return v.ContainerAppAuthSigningSecretName }).(pulumi.StringPtrOutput)
}

type EncryptionSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionSettingsResponse)(nil)).Elem()
}

func (o EncryptionSettingsResponsePtrOutput) ToEncryptionSettingsResponsePtrOutput() EncryptionSettingsResponsePtrOutput {
	return o
}

func (o EncryptionSettingsResponsePtrOutput) ToEncryptionSettingsResponsePtrOutputWithContext(ctx context.Context) EncryptionSettingsResponsePtrOutput {
	return o
}

func (o EncryptionSettingsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionSettingsResponse] {
	return pulumix.Output[*EncryptionSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionSettingsResponsePtrOutput) Elem() EncryptionSettingsResponseOutput {
	return o.ApplyT(func(v *EncryptionSettingsResponse) EncryptionSettingsResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionSettingsResponse
		return ret
	}).(EncryptionSettingsResponseOutput)
}

// The secret name which is referenced for EncryptionKey.
func (o EncryptionSettingsResponsePtrOutput) ContainerAppAuthEncryptionSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerAppAuthEncryptionSecretName
	}).(pulumi.StringPtrOutput)
}

// The secret name which is referenced for SigningKey.
func (o EncryptionSettingsResponsePtrOutput) ContainerAppAuthSigningSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerAppAuthSigningSecretName
	}).(pulumi.StringPtrOutput)
}

// Container App container environment variable.
type EnvironmentVar struct {
	// Environment variable name.
	Name *string `pulumi:"name"`
	// Name of the Container App secret from which to pull the environment variable value.
	SecretRef *string `pulumi:"secretRef"`
	// Non-secret environment variable value.
	Value *string `pulumi:"value"`
}

// EnvironmentVarInput is an input type that accepts EnvironmentVarArgs and EnvironmentVarOutput values.
// You can construct a concrete instance of `EnvironmentVarInput` via:
//
//	EnvironmentVarArgs{...}
type EnvironmentVarInput interface {
	pulumi.Input

	ToEnvironmentVarOutput() EnvironmentVarOutput
	ToEnvironmentVarOutputWithContext(context.Context) EnvironmentVarOutput
}

// Container App container environment variable.
type EnvironmentVarArgs struct {
	// Environment variable name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the Container App secret from which to pull the environment variable value.
	SecretRef pulumi.StringPtrInput `pulumi:"secretRef"`
	// Non-secret environment variable value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVar)(nil)).Elem()
}

func (i EnvironmentVarArgs) ToEnvironmentVarOutput() EnvironmentVarOutput {
	return i.ToEnvironmentVarOutputWithContext(context.Background())
}

func (i EnvironmentVarArgs) ToEnvironmentVarOutputWithContext(ctx context.Context) EnvironmentVarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVarOutput)
}

func (i EnvironmentVarArgs) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVar] {
	return pulumix.Output[EnvironmentVar]{
		OutputState: i.ToEnvironmentVarOutputWithContext(ctx).OutputState,
	}
}

// EnvironmentVarArrayInput is an input type that accepts EnvironmentVarArray and EnvironmentVarArrayOutput values.
// You can construct a concrete instance of `EnvironmentVarArrayInput` via:
//
//	EnvironmentVarArray{ EnvironmentVarArgs{...} }
type EnvironmentVarArrayInput interface {
	pulumi.Input

	ToEnvironmentVarArrayOutput() EnvironmentVarArrayOutput
	ToEnvironmentVarArrayOutputWithContext(context.Context) EnvironmentVarArrayOutput
}

type EnvironmentVarArray []EnvironmentVarInput

func (EnvironmentVarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVar)(nil)).Elem()
}

func (i EnvironmentVarArray) ToEnvironmentVarArrayOutput() EnvironmentVarArrayOutput {
	return i.ToEnvironmentVarArrayOutputWithContext(context.Background())
}

func (i EnvironmentVarArray) ToEnvironmentVarArrayOutputWithContext(ctx context.Context) EnvironmentVarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVarArrayOutput)
}

func (i EnvironmentVarArray) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVar] {
	return pulumix.Output[[]EnvironmentVar]{
		OutputState: i.ToEnvironmentVarArrayOutputWithContext(ctx).OutputState,
	}
}

// Container App container environment variable.
type EnvironmentVarOutput struct{ *pulumi.OutputState }

func (EnvironmentVarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVar)(nil)).Elem()
}

func (o EnvironmentVarOutput) ToEnvironmentVarOutput() EnvironmentVarOutput {
	return o
}

func (o EnvironmentVarOutput) ToEnvironmentVarOutputWithContext(ctx context.Context) EnvironmentVarOutput {
	return o
}

func (o EnvironmentVarOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVar] {
	return pulumix.Output[EnvironmentVar]{
		OutputState: o.OutputState,
	}
}

// Environment variable name.
func (o EnvironmentVarOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVar) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the Container App secret from which to pull the environment variable value.
func (o EnvironmentVarOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVar) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Non-secret environment variable value.
func (o EnvironmentVarOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVar) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVarArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVar)(nil)).Elem()
}

func (o EnvironmentVarArrayOutput) ToEnvironmentVarArrayOutput() EnvironmentVarArrayOutput {
	return o
}

func (o EnvironmentVarArrayOutput) ToEnvironmentVarArrayOutputWithContext(ctx context.Context) EnvironmentVarArrayOutput {
	return o
}

func (o EnvironmentVarArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVar] {
	return pulumix.Output[[]EnvironmentVar]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentVarArrayOutput) Index(i pulumi.IntInput) EnvironmentVarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVar {
		return vs[0].([]EnvironmentVar)[vs[1].(int)]
	}).(EnvironmentVarOutput)
}

// Container App container environment variable.
type EnvironmentVarResponse struct {
	// Environment variable name.
	Name *string `pulumi:"name"`
	// Name of the Container App secret from which to pull the environment variable value.
	SecretRef *string `pulumi:"secretRef"`
	// Non-secret environment variable value.
	Value *string `pulumi:"value"`
}

// Container App container environment variable.
type EnvironmentVarResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVarResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVarResponse)(nil)).Elem()
}

func (o EnvironmentVarResponseOutput) ToEnvironmentVarResponseOutput() EnvironmentVarResponseOutput {
	return o
}

func (o EnvironmentVarResponseOutput) ToEnvironmentVarResponseOutputWithContext(ctx context.Context) EnvironmentVarResponseOutput {
	return o
}

func (o EnvironmentVarResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVarResponse] {
	return pulumix.Output[EnvironmentVarResponse]{
		OutputState: o.OutputState,
	}
}

// Environment variable name.
func (o EnvironmentVarResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVarResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the Container App secret from which to pull the environment variable value.
func (o EnvironmentVarResponseOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVarResponse) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Non-secret environment variable value.
func (o EnvironmentVarResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVarResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVarResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVarResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVarResponse)(nil)).Elem()
}

func (o EnvironmentVarResponseArrayOutput) ToEnvironmentVarResponseArrayOutput() EnvironmentVarResponseArrayOutput {
	return o
}

func (o EnvironmentVarResponseArrayOutput) ToEnvironmentVarResponseArrayOutputWithContext(ctx context.Context) EnvironmentVarResponseArrayOutput {
	return o
}

func (o EnvironmentVarResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVarResponse] {
	return pulumix.Output[[]EnvironmentVarResponse]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentVarResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVarResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVarResponse {
		return vs[0].([]EnvironmentVarResponse)[vs[1].(int)]
	}).(EnvironmentVarResponseOutput)
}

// The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The complex type of the extended location.
type ExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocation] {
	return pulumix.Output[ExtendedLocation]{
		OutputState: i.ToExtendedLocationOutputWithContext(ctx).OutputState,
	}
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

func (i *extendedLocationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocation] {
	return pulumix.Output[*ExtendedLocation]{
		OutputState: i.ToExtendedLocationPtrOutputWithContext(ctx).OutputState,
	}
}

// The complex type of the extended location.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

func (o ExtendedLocationOutput) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocation] {
	return pulumix.Output[ExtendedLocation]{
		OutputState: o.OutputState,
	}
}

// The name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocation) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocation] {
	return pulumix.Output[*ExtendedLocation]{
		OutputState: o.OutputState,
	}
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The name of the extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The complex type of the extended location.
type ExtendedLocationResponse struct {
	// The name of the extended location.
	Name *string `pulumi:"name"`
	// The type of the extended location.
	Type *string `pulumi:"type"`
}

// The complex type of the extended location.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocationResponse] {
	return pulumix.Output[ExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocationResponse] {
	return pulumix.Output[*ExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The name of the extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Facebook provider.
type Facebook struct {
	// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The version of the Facebook api to be used while logging in.
	GraphApiVersion *string `pulumi:"graphApiVersion"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the Facebook provider.
	Registration *AppRegistration `pulumi:"registration"`
}

// FacebookInput is an input type that accepts FacebookArgs and FacebookOutput values.
// You can construct a concrete instance of `FacebookInput` via:
//
//	FacebookArgs{...}
type FacebookInput interface {
	pulumi.Input

	ToFacebookOutput() FacebookOutput
	ToFacebookOutputWithContext(context.Context) FacebookOutput
}

// The configuration settings of the Facebook provider.
type FacebookArgs struct {
	// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The version of the Facebook api to be used while logging in.
	GraphApiVersion pulumi.StringPtrInput `pulumi:"graphApiVersion"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the Facebook provider.
	Registration AppRegistrationPtrInput `pulumi:"registration"`
}

func (FacebookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Facebook)(nil)).Elem()
}

func (i FacebookArgs) ToFacebookOutput() FacebookOutput {
	return i.ToFacebookOutputWithContext(context.Background())
}

func (i FacebookArgs) ToFacebookOutputWithContext(ctx context.Context) FacebookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FacebookOutput)
}

func (i FacebookArgs) ToOutput(ctx context.Context) pulumix.Output[Facebook] {
	return pulumix.Output[Facebook]{
		OutputState: i.ToFacebookOutputWithContext(ctx).OutputState,
	}
}

func (i FacebookArgs) ToFacebookPtrOutput() FacebookPtrOutput {
	return i.ToFacebookPtrOutputWithContext(context.Background())
}

func (i FacebookArgs) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FacebookOutput).ToFacebookPtrOutputWithContext(ctx)
}

// FacebookPtrInput is an input type that accepts FacebookArgs, FacebookPtr and FacebookPtrOutput values.
// You can construct a concrete instance of `FacebookPtrInput` via:
//
//	        FacebookArgs{...}
//
//	or:
//
//	        nil
type FacebookPtrInput interface {
	pulumi.Input

	ToFacebookPtrOutput() FacebookPtrOutput
	ToFacebookPtrOutputWithContext(context.Context) FacebookPtrOutput
}

type facebookPtrType FacebookArgs

func FacebookPtr(v *FacebookArgs) FacebookPtrInput {
	return (*facebookPtrType)(v)
}

func (*facebookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Facebook)(nil)).Elem()
}

func (i *facebookPtrType) ToFacebookPtrOutput() FacebookPtrOutput {
	return i.ToFacebookPtrOutputWithContext(context.Background())
}

func (i *facebookPtrType) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FacebookPtrOutput)
}

func (i *facebookPtrType) ToOutput(ctx context.Context) pulumix.Output[*Facebook] {
	return pulumix.Output[*Facebook]{
		OutputState: i.ToFacebookPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Facebook provider.
type FacebookOutput struct{ *pulumi.OutputState }

func (FacebookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Facebook)(nil)).Elem()
}

func (o FacebookOutput) ToFacebookOutput() FacebookOutput {
	return o
}

func (o FacebookOutput) ToFacebookOutputWithContext(ctx context.Context) FacebookOutput {
	return o
}

func (o FacebookOutput) ToFacebookPtrOutput() FacebookPtrOutput {
	return o.ToFacebookPtrOutputWithContext(context.Background())
}

func (o FacebookOutput) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Facebook) *Facebook {
		return &v
	}).(FacebookPtrOutput)
}

func (o FacebookOutput) ToOutput(ctx context.Context) pulumix.Output[Facebook] {
	return pulumix.Output[Facebook]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Facebook) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Facebook) *string { return v.GraphApiVersion }).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v Facebook) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookOutput) Registration() AppRegistrationPtrOutput {
	return o.ApplyT(func(v Facebook) *AppRegistration { return v.Registration }).(AppRegistrationPtrOutput)
}

type FacebookPtrOutput struct{ *pulumi.OutputState }

func (FacebookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Facebook)(nil)).Elem()
}

func (o FacebookPtrOutput) ToFacebookPtrOutput() FacebookPtrOutput {
	return o
}

func (o FacebookPtrOutput) ToFacebookPtrOutputWithContext(ctx context.Context) FacebookPtrOutput {
	return o
}

func (o FacebookPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Facebook] {
	return pulumix.Output[*Facebook]{
		OutputState: o.OutputState,
	}
}

func (o FacebookPtrOutput) Elem() FacebookOutput {
	return o.ApplyT(func(v *Facebook) Facebook {
		if v != nil {
			return *v
		}
		var ret Facebook
		return ret
	}).(FacebookOutput)
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Facebook) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookPtrOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Facebook) *string {
		if v == nil {
			return nil
		}
		return v.GraphApiVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookPtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *Facebook) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookPtrOutput) Registration() AppRegistrationPtrOutput {
	return o.ApplyT(func(v *Facebook) *AppRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppRegistrationPtrOutput)
}

// The configuration settings of the Facebook provider.
type FacebookResponse struct {
	// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The version of the Facebook api to be used while logging in.
	GraphApiVersion *string `pulumi:"graphApiVersion"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the Facebook provider.
	Registration *AppRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Facebook provider.
type FacebookResponseOutput struct{ *pulumi.OutputState }

func (FacebookResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FacebookResponse)(nil)).Elem()
}

func (o FacebookResponseOutput) ToFacebookResponseOutput() FacebookResponseOutput {
	return o
}

func (o FacebookResponseOutput) ToFacebookResponseOutputWithContext(ctx context.Context) FacebookResponseOutput {
	return o
}

func (o FacebookResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FacebookResponse] {
	return pulumix.Output[FacebookResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FacebookResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookResponseOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FacebookResponse) *string { return v.GraphApiVersion }).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v FacebookResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookResponseOutput) Registration() AppRegistrationResponsePtrOutput {
	return o.ApplyT(func(v FacebookResponse) *AppRegistrationResponse { return v.Registration }).(AppRegistrationResponsePtrOutput)
}

type FacebookResponsePtrOutput struct{ *pulumi.OutputState }

func (FacebookResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FacebookResponse)(nil)).Elem()
}

func (o FacebookResponsePtrOutput) ToFacebookResponsePtrOutput() FacebookResponsePtrOutput {
	return o
}

func (o FacebookResponsePtrOutput) ToFacebookResponsePtrOutputWithContext(ctx context.Context) FacebookResponsePtrOutput {
	return o
}

func (o FacebookResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FacebookResponse] {
	return pulumix.Output[*FacebookResponse]{
		OutputState: o.OutputState,
	}
}

func (o FacebookResponsePtrOutput) Elem() FacebookResponseOutput {
	return o.ApplyT(func(v *FacebookResponse) FacebookResponse {
		if v != nil {
			return *v
		}
		var ret FacebookResponse
		return ret
	}).(FacebookResponseOutput)
}

// <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o FacebookResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The version of the Facebook api to be used while logging in.
func (o FacebookResponsePtrOutput) GraphApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *string {
		if v == nil {
			return nil
		}
		return v.GraphApiVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow.
func (o FacebookResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Facebook provider.
func (o FacebookResponsePtrOutput) Registration() AppRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *FacebookResponse) *AppRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(AppRegistrationResponsePtrOutput)
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxy struct {
	// The convention used to determine the url of the request made.
	Convention *ForwardProxyConvention `pulumi:"convention"`
	// The name of the header containing the host of the request.
	CustomHostHeaderName *string `pulumi:"customHostHeaderName"`
	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName *string `pulumi:"customProtoHeaderName"`
}

// ForwardProxyInput is an input type that accepts ForwardProxyArgs and ForwardProxyOutput values.
// You can construct a concrete instance of `ForwardProxyInput` via:
//
//	ForwardProxyArgs{...}
type ForwardProxyInput interface {
	pulumi.Input

	ToForwardProxyOutput() ForwardProxyOutput
	ToForwardProxyOutputWithContext(context.Context) ForwardProxyOutput
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyArgs struct {
	// The convention used to determine the url of the request made.
	Convention ForwardProxyConventionPtrInput `pulumi:"convention"`
	// The name of the header containing the host of the request.
	CustomHostHeaderName pulumi.StringPtrInput `pulumi:"customHostHeaderName"`
	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName pulumi.StringPtrInput `pulumi:"customProtoHeaderName"`
}

func (ForwardProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardProxy)(nil)).Elem()
}

func (i ForwardProxyArgs) ToForwardProxyOutput() ForwardProxyOutput {
	return i.ToForwardProxyOutputWithContext(context.Background())
}

func (i ForwardProxyArgs) ToForwardProxyOutputWithContext(ctx context.Context) ForwardProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardProxyOutput)
}

func (i ForwardProxyArgs) ToOutput(ctx context.Context) pulumix.Output[ForwardProxy] {
	return pulumix.Output[ForwardProxy]{
		OutputState: i.ToForwardProxyOutputWithContext(ctx).OutputState,
	}
}

func (i ForwardProxyArgs) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return i.ToForwardProxyPtrOutputWithContext(context.Background())
}

func (i ForwardProxyArgs) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardProxyOutput).ToForwardProxyPtrOutputWithContext(ctx)
}

// ForwardProxyPtrInput is an input type that accepts ForwardProxyArgs, ForwardProxyPtr and ForwardProxyPtrOutput values.
// You can construct a concrete instance of `ForwardProxyPtrInput` via:
//
//	        ForwardProxyArgs{...}
//
//	or:
//
//	        nil
type ForwardProxyPtrInput interface {
	pulumi.Input

	ToForwardProxyPtrOutput() ForwardProxyPtrOutput
	ToForwardProxyPtrOutputWithContext(context.Context) ForwardProxyPtrOutput
}

type forwardProxyPtrType ForwardProxyArgs

func ForwardProxyPtr(v *ForwardProxyArgs) ForwardProxyPtrInput {
	return (*forwardProxyPtrType)(v)
}

func (*forwardProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardProxy)(nil)).Elem()
}

func (i *forwardProxyPtrType) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return i.ToForwardProxyPtrOutputWithContext(context.Background())
}

func (i *forwardProxyPtrType) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardProxyPtrOutput)
}

func (i *forwardProxyPtrType) ToOutput(ctx context.Context) pulumix.Output[*ForwardProxy] {
	return pulumix.Output[*ForwardProxy]{
		OutputState: i.ToForwardProxyPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyOutput struct{ *pulumi.OutputState }

func (ForwardProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardProxy)(nil)).Elem()
}

func (o ForwardProxyOutput) ToForwardProxyOutput() ForwardProxyOutput {
	return o
}

func (o ForwardProxyOutput) ToForwardProxyOutputWithContext(ctx context.Context) ForwardProxyOutput {
	return o
}

func (o ForwardProxyOutput) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return o.ToForwardProxyPtrOutputWithContext(context.Background())
}

func (o ForwardProxyOutput) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForwardProxy) *ForwardProxy {
		return &v
	}).(ForwardProxyPtrOutput)
}

func (o ForwardProxyOutput) ToOutput(ctx context.Context) pulumix.Output[ForwardProxy] {
	return pulumix.Output[ForwardProxy]{
		OutputState: o.OutputState,
	}
}

// The convention used to determine the url of the request made.
func (o ForwardProxyOutput) Convention() ForwardProxyConventionPtrOutput {
	return o.ApplyT(func(v ForwardProxy) *ForwardProxyConvention { return v.Convention }).(ForwardProxyConventionPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxy) *string { return v.CustomHostHeaderName }).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxy) *string { return v.CustomProtoHeaderName }).(pulumi.StringPtrOutput)
}

type ForwardProxyPtrOutput struct{ *pulumi.OutputState }

func (ForwardProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardProxy)(nil)).Elem()
}

func (o ForwardProxyPtrOutput) ToForwardProxyPtrOutput() ForwardProxyPtrOutput {
	return o
}

func (o ForwardProxyPtrOutput) ToForwardProxyPtrOutputWithContext(ctx context.Context) ForwardProxyPtrOutput {
	return o
}

func (o ForwardProxyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ForwardProxy] {
	return pulumix.Output[*ForwardProxy]{
		OutputState: o.OutputState,
	}
}

func (o ForwardProxyPtrOutput) Elem() ForwardProxyOutput {
	return o.ApplyT(func(v *ForwardProxy) ForwardProxy {
		if v != nil {
			return *v
		}
		var ret ForwardProxy
		return ret
	}).(ForwardProxyOutput)
}

// The convention used to determine the url of the request made.
func (o ForwardProxyPtrOutput) Convention() ForwardProxyConventionPtrOutput {
	return o.ApplyT(func(v *ForwardProxy) *ForwardProxyConvention {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(ForwardProxyConventionPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyPtrOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxy) *string {
		if v == nil {
			return nil
		}
		return v.CustomHostHeaderName
	}).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyPtrOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxy) *string {
		if v == nil {
			return nil
		}
		return v.CustomProtoHeaderName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyResponse struct {
	// The convention used to determine the url of the request made.
	Convention *string `pulumi:"convention"`
	// The name of the header containing the host of the request.
	CustomHostHeaderName *string `pulumi:"customHostHeaderName"`
	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName *string `pulumi:"customProtoHeaderName"`
}

// The configuration settings of a forward proxy used to make the requests.
type ForwardProxyResponseOutput struct{ *pulumi.OutputState }

func (ForwardProxyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardProxyResponse)(nil)).Elem()
}

func (o ForwardProxyResponseOutput) ToForwardProxyResponseOutput() ForwardProxyResponseOutput {
	return o
}

func (o ForwardProxyResponseOutput) ToForwardProxyResponseOutputWithContext(ctx context.Context) ForwardProxyResponseOutput {
	return o
}

func (o ForwardProxyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ForwardProxyResponse] {
	return pulumix.Output[ForwardProxyResponse]{
		OutputState: o.OutputState,
	}
}

// The convention used to determine the url of the request made.
func (o ForwardProxyResponseOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxyResponse) *string { return v.Convention }).(pulumi.StringPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyResponseOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxyResponse) *string { return v.CustomHostHeaderName }).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyResponseOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardProxyResponse) *string { return v.CustomProtoHeaderName }).(pulumi.StringPtrOutput)
}

type ForwardProxyResponsePtrOutput struct{ *pulumi.OutputState }

func (ForwardProxyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardProxyResponse)(nil)).Elem()
}

func (o ForwardProxyResponsePtrOutput) ToForwardProxyResponsePtrOutput() ForwardProxyResponsePtrOutput {
	return o
}

func (o ForwardProxyResponsePtrOutput) ToForwardProxyResponsePtrOutputWithContext(ctx context.Context) ForwardProxyResponsePtrOutput {
	return o
}

func (o ForwardProxyResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ForwardProxyResponse] {
	return pulumix.Output[*ForwardProxyResponse]{
		OutputState: o.OutputState,
	}
}

func (o ForwardProxyResponsePtrOutput) Elem() ForwardProxyResponseOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) ForwardProxyResponse {
		if v != nil {
			return *v
		}
		var ret ForwardProxyResponse
		return ret
	}).(ForwardProxyResponseOutput)
}

// The convention used to determine the url of the request made.
func (o ForwardProxyResponsePtrOutput) Convention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Convention
	}).(pulumi.StringPtrOutput)
}

// The name of the header containing the host of the request.
func (o ForwardProxyResponsePtrOutput) CustomHostHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomHostHeaderName
	}).(pulumi.StringPtrOutput)
}

// The name of the header containing the scheme of the request.
func (o ForwardProxyResponsePtrOutput) CustomProtoHeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardProxyResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomProtoHeaderName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the GitHub provider.
type GitHub struct {
	// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the GitHub provider.
	Registration *ClientRegistration `pulumi:"registration"`
}

// GitHubInput is an input type that accepts GitHubArgs and GitHubOutput values.
// You can construct a concrete instance of `GitHubInput` via:
//
//	GitHubArgs{...}
type GitHubInput interface {
	pulumi.Input

	ToGitHubOutput() GitHubOutput
	ToGitHubOutputWithContext(context.Context) GitHubOutput
}

// The configuration settings of the GitHub provider.
type GitHubArgs struct {
	// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the GitHub provider.
	Registration ClientRegistrationPtrInput `pulumi:"registration"`
}

func (GitHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHub)(nil)).Elem()
}

func (i GitHubArgs) ToGitHubOutput() GitHubOutput {
	return i.ToGitHubOutputWithContext(context.Background())
}

func (i GitHubArgs) ToGitHubOutputWithContext(ctx context.Context) GitHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubOutput)
}

func (i GitHubArgs) ToOutput(ctx context.Context) pulumix.Output[GitHub] {
	return pulumix.Output[GitHub]{
		OutputState: i.ToGitHubOutputWithContext(ctx).OutputState,
	}
}

func (i GitHubArgs) ToGitHubPtrOutput() GitHubPtrOutput {
	return i.ToGitHubPtrOutputWithContext(context.Background())
}

func (i GitHubArgs) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubOutput).ToGitHubPtrOutputWithContext(ctx)
}

// GitHubPtrInput is an input type that accepts GitHubArgs, GitHubPtr and GitHubPtrOutput values.
// You can construct a concrete instance of `GitHubPtrInput` via:
//
//	        GitHubArgs{...}
//
//	or:
//
//	        nil
type GitHubPtrInput interface {
	pulumi.Input

	ToGitHubPtrOutput() GitHubPtrOutput
	ToGitHubPtrOutputWithContext(context.Context) GitHubPtrOutput
}

type gitHubPtrType GitHubArgs

func GitHubPtr(v *GitHubArgs) GitHubPtrInput {
	return (*gitHubPtrType)(v)
}

func (*gitHubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHub)(nil)).Elem()
}

func (i *gitHubPtrType) ToGitHubPtrOutput() GitHubPtrOutput {
	return i.ToGitHubPtrOutputWithContext(context.Background())
}

func (i *gitHubPtrType) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubPtrOutput)
}

func (i *gitHubPtrType) ToOutput(ctx context.Context) pulumix.Output[*GitHub] {
	return pulumix.Output[*GitHub]{
		OutputState: i.ToGitHubPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the GitHub provider.
type GitHubOutput struct{ *pulumi.OutputState }

func (GitHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHub)(nil)).Elem()
}

func (o GitHubOutput) ToGitHubOutput() GitHubOutput {
	return o
}

func (o GitHubOutput) ToGitHubOutputWithContext(ctx context.Context) GitHubOutput {
	return o
}

func (o GitHubOutput) ToGitHubPtrOutput() GitHubPtrOutput {
	return o.ToGitHubPtrOutputWithContext(context.Background())
}

func (o GitHubOutput) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHub) *GitHub {
		return &v
	}).(GitHubPtrOutput)
}

func (o GitHubOutput) ToOutput(ctx context.Context) pulumix.Output[GitHub] {
	return pulumix.Output[GitHub]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitHub) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v GitHub) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v GitHub) *ClientRegistration { return v.Registration }).(ClientRegistrationPtrOutput)
}

type GitHubPtrOutput struct{ *pulumi.OutputState }

func (GitHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHub)(nil)).Elem()
}

func (o GitHubPtrOutput) ToGitHubPtrOutput() GitHubPtrOutput {
	return o
}

func (o GitHubPtrOutput) ToGitHubPtrOutputWithContext(ctx context.Context) GitHubPtrOutput {
	return o
}

func (o GitHubPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitHub] {
	return pulumix.Output[*GitHub]{
		OutputState: o.OutputState,
	}
}

func (o GitHubPtrOutput) Elem() GitHubOutput {
	return o.ApplyT(func(v *GitHub) GitHub {
		if v != nil {
			return *v
		}
		var ret GitHub
		return ret
	}).(GitHubOutput)
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitHub) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubPtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *GitHub) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubPtrOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v *GitHub) *ClientRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationPtrOutput)
}

// The configuration settings of the GitHub provider.
type GitHubResponse struct {
	// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the GitHub provider.
	Registration *ClientRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the GitHub provider.
type GitHubResponseOutput struct{ *pulumi.OutputState }

func (GitHubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubResponse)(nil)).Elem()
}

func (o GitHubResponseOutput) ToGitHubResponseOutput() GitHubResponseOutput {
	return o
}

func (o GitHubResponseOutput) ToGitHubResponseOutputWithContext(ctx context.Context) GitHubResponseOutput {
	return o
}

func (o GitHubResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GitHubResponse] {
	return pulumix.Output[GitHubResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GitHubResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v GitHubResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubResponseOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v GitHubResponse) *ClientRegistrationResponse { return v.Registration }).(ClientRegistrationResponsePtrOutput)
}

type GitHubResponsePtrOutput struct{ *pulumi.OutputState }

func (GitHubResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubResponse)(nil)).Elem()
}

func (o GitHubResponsePtrOutput) ToGitHubResponsePtrOutput() GitHubResponsePtrOutput {
	return o
}

func (o GitHubResponsePtrOutput) ToGitHubResponsePtrOutputWithContext(ctx context.Context) GitHubResponsePtrOutput {
	return o
}

func (o GitHubResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitHubResponse] {
	return pulumix.Output[*GitHubResponse]{
		OutputState: o.OutputState,
	}
}

func (o GitHubResponsePtrOutput) Elem() GitHubResponseOutput {
	return o.ApplyT(func(v *GitHubResponse) GitHubResponse {
		if v != nil {
			return *v
		}
		var ret GitHubResponse
		return ret
	}).(GitHubResponseOutput)
}

// <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GitHubResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GitHubResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GitHubResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *GitHubResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the GitHub provider.
func (o GitHubResponsePtrOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *GitHubResponse) *ClientRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationResponsePtrOutput)
}

// Configuration properties that define the mutable settings of a Container App SourceControl
type GithubActionConfiguration struct {
	// AzureCredentials configurations.
	AzureCredentials *AzureCredentials `pulumi:"azureCredentials"`
	// Context path
	ContextPath *string `pulumi:"contextPath"`
	// One time Github PAT to configure github environment
	GithubPersonalAccessToken *string `pulumi:"githubPersonalAccessToken"`
	// Image name
	Image *string `pulumi:"image"`
	// Operation system
	Os *string `pulumi:"os"`
	// Code or Image
	PublishType *string `pulumi:"publishType"`
	// Registry configurations.
	RegistryInfo *RegistryInfo `pulumi:"registryInfo"`
	// Runtime stack
	RuntimeStack *string `pulumi:"runtimeStack"`
	// Runtime version
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// GithubActionConfigurationInput is an input type that accepts GithubActionConfigurationArgs and GithubActionConfigurationOutput values.
// You can construct a concrete instance of `GithubActionConfigurationInput` via:
//
//	GithubActionConfigurationArgs{...}
type GithubActionConfigurationInput interface {
	pulumi.Input

	ToGithubActionConfigurationOutput() GithubActionConfigurationOutput
	ToGithubActionConfigurationOutputWithContext(context.Context) GithubActionConfigurationOutput
}

// Configuration properties that define the mutable settings of a Container App SourceControl
type GithubActionConfigurationArgs struct {
	// AzureCredentials configurations.
	AzureCredentials AzureCredentialsPtrInput `pulumi:"azureCredentials"`
	// Context path
	ContextPath pulumi.StringPtrInput `pulumi:"contextPath"`
	// One time Github PAT to configure github environment
	GithubPersonalAccessToken pulumi.StringPtrInput `pulumi:"githubPersonalAccessToken"`
	// Image name
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Operation system
	Os pulumi.StringPtrInput `pulumi:"os"`
	// Code or Image
	PublishType pulumi.StringPtrInput `pulumi:"publishType"`
	// Registry configurations.
	RegistryInfo RegistryInfoPtrInput `pulumi:"registryInfo"`
	// Runtime stack
	RuntimeStack pulumi.StringPtrInput `pulumi:"runtimeStack"`
	// Runtime version
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

func (GithubActionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubActionConfiguration)(nil)).Elem()
}

func (i GithubActionConfigurationArgs) ToGithubActionConfigurationOutput() GithubActionConfigurationOutput {
	return i.ToGithubActionConfigurationOutputWithContext(context.Background())
}

func (i GithubActionConfigurationArgs) ToGithubActionConfigurationOutputWithContext(ctx context.Context) GithubActionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubActionConfigurationOutput)
}

func (i GithubActionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GithubActionConfiguration] {
	return pulumix.Output[GithubActionConfiguration]{
		OutputState: i.ToGithubActionConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i GithubActionConfigurationArgs) ToGithubActionConfigurationPtrOutput() GithubActionConfigurationPtrOutput {
	return i.ToGithubActionConfigurationPtrOutputWithContext(context.Background())
}

func (i GithubActionConfigurationArgs) ToGithubActionConfigurationPtrOutputWithContext(ctx context.Context) GithubActionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubActionConfigurationOutput).ToGithubActionConfigurationPtrOutputWithContext(ctx)
}

// GithubActionConfigurationPtrInput is an input type that accepts GithubActionConfigurationArgs, GithubActionConfigurationPtr and GithubActionConfigurationPtrOutput values.
// You can construct a concrete instance of `GithubActionConfigurationPtrInput` via:
//
//	        GithubActionConfigurationArgs{...}
//
//	or:
//
//	        nil
type GithubActionConfigurationPtrInput interface {
	pulumi.Input

	ToGithubActionConfigurationPtrOutput() GithubActionConfigurationPtrOutput
	ToGithubActionConfigurationPtrOutputWithContext(context.Context) GithubActionConfigurationPtrOutput
}

type githubActionConfigurationPtrType GithubActionConfigurationArgs

func GithubActionConfigurationPtr(v *GithubActionConfigurationArgs) GithubActionConfigurationPtrInput {
	return (*githubActionConfigurationPtrType)(v)
}

func (*githubActionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubActionConfiguration)(nil)).Elem()
}

func (i *githubActionConfigurationPtrType) ToGithubActionConfigurationPtrOutput() GithubActionConfigurationPtrOutput {
	return i.ToGithubActionConfigurationPtrOutputWithContext(context.Background())
}

func (i *githubActionConfigurationPtrType) ToGithubActionConfigurationPtrOutputWithContext(ctx context.Context) GithubActionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubActionConfigurationPtrOutput)
}

func (i *githubActionConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*GithubActionConfiguration] {
	return pulumix.Output[*GithubActionConfiguration]{
		OutputState: i.ToGithubActionConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration properties that define the mutable settings of a Container App SourceControl
type GithubActionConfigurationOutput struct{ *pulumi.OutputState }

func (GithubActionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubActionConfiguration)(nil)).Elem()
}

func (o GithubActionConfigurationOutput) ToGithubActionConfigurationOutput() GithubActionConfigurationOutput {
	return o
}

func (o GithubActionConfigurationOutput) ToGithubActionConfigurationOutputWithContext(ctx context.Context) GithubActionConfigurationOutput {
	return o
}

func (o GithubActionConfigurationOutput) ToGithubActionConfigurationPtrOutput() GithubActionConfigurationPtrOutput {
	return o.ToGithubActionConfigurationPtrOutputWithContext(context.Background())
}

func (o GithubActionConfigurationOutput) ToGithubActionConfigurationPtrOutputWithContext(ctx context.Context) GithubActionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubActionConfiguration) *GithubActionConfiguration {
		return &v
	}).(GithubActionConfigurationPtrOutput)
}

func (o GithubActionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GithubActionConfiguration] {
	return pulumix.Output[GithubActionConfiguration]{
		OutputState: o.OutputState,
	}
}

// AzureCredentials configurations.
func (o GithubActionConfigurationOutput) AzureCredentials() AzureCredentialsPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *AzureCredentials { return v.AzureCredentials }).(AzureCredentialsPtrOutput)
}

// Context path
func (o GithubActionConfigurationOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// One time Github PAT to configure github environment
func (o GithubActionConfigurationOutput) GithubPersonalAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.GithubPersonalAccessToken }).(pulumi.StringPtrOutput)
}

// Image name
func (o GithubActionConfigurationOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Operation system
func (o GithubActionConfigurationOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.Os }).(pulumi.StringPtrOutput)
}

// Code or Image
func (o GithubActionConfigurationOutput) PublishType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.PublishType }).(pulumi.StringPtrOutput)
}

// Registry configurations.
func (o GithubActionConfigurationOutput) RegistryInfo() RegistryInfoPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *RegistryInfo { return v.RegistryInfo }).(RegistryInfoPtrOutput)
}

// Runtime stack
func (o GithubActionConfigurationOutput) RuntimeStack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.RuntimeStack }).(pulumi.StringPtrOutput)
}

// Runtime version
func (o GithubActionConfigurationOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfiguration) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type GithubActionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GithubActionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubActionConfiguration)(nil)).Elem()
}

func (o GithubActionConfigurationPtrOutput) ToGithubActionConfigurationPtrOutput() GithubActionConfigurationPtrOutput {
	return o
}

func (o GithubActionConfigurationPtrOutput) ToGithubActionConfigurationPtrOutputWithContext(ctx context.Context) GithubActionConfigurationPtrOutput {
	return o
}

func (o GithubActionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GithubActionConfiguration] {
	return pulumix.Output[*GithubActionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GithubActionConfigurationPtrOutput) Elem() GithubActionConfigurationOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) GithubActionConfiguration {
		if v != nil {
			return *v
		}
		var ret GithubActionConfiguration
		return ret
	}).(GithubActionConfigurationOutput)
}

// AzureCredentials configurations.
func (o GithubActionConfigurationPtrOutput) AzureCredentials() AzureCredentialsPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *AzureCredentials {
		if v == nil {
			return nil
		}
		return v.AzureCredentials
	}).(AzureCredentialsPtrOutput)
}

// Context path
func (o GithubActionConfigurationPtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// One time Github PAT to configure github environment
func (o GithubActionConfigurationPtrOutput) GithubPersonalAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.GithubPersonalAccessToken
	}).(pulumi.StringPtrOutput)
}

// Image name
func (o GithubActionConfigurationPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Operation system
func (o GithubActionConfigurationPtrOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Os
	}).(pulumi.StringPtrOutput)
}

// Code or Image
func (o GithubActionConfigurationPtrOutput) PublishType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PublishType
	}).(pulumi.StringPtrOutput)
}

// Registry configurations.
func (o GithubActionConfigurationPtrOutput) RegistryInfo() RegistryInfoPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *RegistryInfo {
		if v == nil {
			return nil
		}
		return v.RegistryInfo
	}).(RegistryInfoPtrOutput)
}

// Runtime stack
func (o GithubActionConfigurationPtrOutput) RuntimeStack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeStack
	}).(pulumi.StringPtrOutput)
}

// Runtime version
func (o GithubActionConfigurationPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration properties that define the mutable settings of a Container App SourceControl
type GithubActionConfigurationResponse struct {
	// AzureCredentials configurations.
	AzureCredentials *AzureCredentialsResponse `pulumi:"azureCredentials"`
	// Context path
	ContextPath *string `pulumi:"contextPath"`
	// Image name
	Image *string `pulumi:"image"`
	// Operation system
	Os *string `pulumi:"os"`
	// Code or Image
	PublishType *string `pulumi:"publishType"`
	// Registry configurations.
	RegistryInfo *RegistryInfoResponse `pulumi:"registryInfo"`
	// Runtime stack
	RuntimeStack *string `pulumi:"runtimeStack"`
	// Runtime version
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// Configuration properties that define the mutable settings of a Container App SourceControl
type GithubActionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (GithubActionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubActionConfigurationResponse)(nil)).Elem()
}

func (o GithubActionConfigurationResponseOutput) ToGithubActionConfigurationResponseOutput() GithubActionConfigurationResponseOutput {
	return o
}

func (o GithubActionConfigurationResponseOutput) ToGithubActionConfigurationResponseOutputWithContext(ctx context.Context) GithubActionConfigurationResponseOutput {
	return o
}

func (o GithubActionConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GithubActionConfigurationResponse] {
	return pulumix.Output[GithubActionConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// AzureCredentials configurations.
func (o GithubActionConfigurationResponseOutput) AzureCredentials() AzureCredentialsResponsePtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *AzureCredentialsResponse { return v.AzureCredentials }).(AzureCredentialsResponsePtrOutput)
}

// Context path
func (o GithubActionConfigurationResponseOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *string { return v.ContextPath }).(pulumi.StringPtrOutput)
}

// Image name
func (o GithubActionConfigurationResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Operation system
func (o GithubActionConfigurationResponseOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *string { return v.Os }).(pulumi.StringPtrOutput)
}

// Code or Image
func (o GithubActionConfigurationResponseOutput) PublishType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *string { return v.PublishType }).(pulumi.StringPtrOutput)
}

// Registry configurations.
func (o GithubActionConfigurationResponseOutput) RegistryInfo() RegistryInfoResponsePtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *RegistryInfoResponse { return v.RegistryInfo }).(RegistryInfoResponsePtrOutput)
}

// Runtime stack
func (o GithubActionConfigurationResponseOutput) RuntimeStack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *string { return v.RuntimeStack }).(pulumi.StringPtrOutput)
}

// Runtime version
func (o GithubActionConfigurationResponseOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubActionConfigurationResponse) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type GithubActionConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (GithubActionConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubActionConfigurationResponse)(nil)).Elem()
}

func (o GithubActionConfigurationResponsePtrOutput) ToGithubActionConfigurationResponsePtrOutput() GithubActionConfigurationResponsePtrOutput {
	return o
}

func (o GithubActionConfigurationResponsePtrOutput) ToGithubActionConfigurationResponsePtrOutputWithContext(ctx context.Context) GithubActionConfigurationResponsePtrOutput {
	return o
}

func (o GithubActionConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GithubActionConfigurationResponse] {
	return pulumix.Output[*GithubActionConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o GithubActionConfigurationResponsePtrOutput) Elem() GithubActionConfigurationResponseOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) GithubActionConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret GithubActionConfigurationResponse
		return ret
	}).(GithubActionConfigurationResponseOutput)
}

// AzureCredentials configurations.
func (o GithubActionConfigurationResponsePtrOutput) AzureCredentials() AzureCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *AzureCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.AzureCredentials
	}).(AzureCredentialsResponsePtrOutput)
}

// Context path
func (o GithubActionConfigurationResponsePtrOutput) ContextPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContextPath
	}).(pulumi.StringPtrOutput)
}

// Image name
func (o GithubActionConfigurationResponsePtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Operation system
func (o GithubActionConfigurationResponsePtrOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Os
	}).(pulumi.StringPtrOutput)
}

// Code or Image
func (o GithubActionConfigurationResponsePtrOutput) PublishType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublishType
	}).(pulumi.StringPtrOutput)
}

// Registry configurations.
func (o GithubActionConfigurationResponsePtrOutput) RegistryInfo() RegistryInfoResponsePtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *RegistryInfoResponse {
		if v == nil {
			return nil
		}
		return v.RegistryInfo
	}).(RegistryInfoResponsePtrOutput)
}

// Runtime stack
func (o GithubActionConfigurationResponsePtrOutput) RuntimeStack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeStack
	}).(pulumi.StringPtrOutput)
}

// Runtime version
func (o GithubActionConfigurationResponsePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubActionConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization.
type GlobalValidation struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths []string `pulumi:"excludedPaths"`
	// The default authentication provider to use when multiple providers are configured.
	// This setting is only needed if multiple providers are configured and the unauthenticated client
	// action is set to "RedirectToLoginPage".
	RedirectToProvider *string `pulumi:"redirectToProvider"`
	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction *UnauthenticatedClientActionV2 `pulumi:"unauthenticatedClientAction"`
}

// GlobalValidationInput is an input type that accepts GlobalValidationArgs and GlobalValidationOutput values.
// You can construct a concrete instance of `GlobalValidationInput` via:
//
//	GlobalValidationArgs{...}
type GlobalValidationInput interface {
	pulumi.Input

	ToGlobalValidationOutput() GlobalValidationOutput
	ToGlobalValidationOutputWithContext(context.Context) GlobalValidationOutput
}

// The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization.
type GlobalValidationArgs struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths pulumi.StringArrayInput `pulumi:"excludedPaths"`
	// The default authentication provider to use when multiple providers are configured.
	// This setting is only needed if multiple providers are configured and the unauthenticated client
	// action is set to "RedirectToLoginPage".
	RedirectToProvider pulumi.StringPtrInput `pulumi:"redirectToProvider"`
	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction UnauthenticatedClientActionV2PtrInput `pulumi:"unauthenticatedClientAction"`
}

func (GlobalValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalValidation)(nil)).Elem()
}

func (i GlobalValidationArgs) ToGlobalValidationOutput() GlobalValidationOutput {
	return i.ToGlobalValidationOutputWithContext(context.Background())
}

func (i GlobalValidationArgs) ToGlobalValidationOutputWithContext(ctx context.Context) GlobalValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalValidationOutput)
}

func (i GlobalValidationArgs) ToOutput(ctx context.Context) pulumix.Output[GlobalValidation] {
	return pulumix.Output[GlobalValidation]{
		OutputState: i.ToGlobalValidationOutputWithContext(ctx).OutputState,
	}
}

func (i GlobalValidationArgs) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return i.ToGlobalValidationPtrOutputWithContext(context.Background())
}

func (i GlobalValidationArgs) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalValidationOutput).ToGlobalValidationPtrOutputWithContext(ctx)
}

// GlobalValidationPtrInput is an input type that accepts GlobalValidationArgs, GlobalValidationPtr and GlobalValidationPtrOutput values.
// You can construct a concrete instance of `GlobalValidationPtrInput` via:
//
//	        GlobalValidationArgs{...}
//
//	or:
//
//	        nil
type GlobalValidationPtrInput interface {
	pulumi.Input

	ToGlobalValidationPtrOutput() GlobalValidationPtrOutput
	ToGlobalValidationPtrOutputWithContext(context.Context) GlobalValidationPtrOutput
}

type globalValidationPtrType GlobalValidationArgs

func GlobalValidationPtr(v *GlobalValidationArgs) GlobalValidationPtrInput {
	return (*globalValidationPtrType)(v)
}

func (*globalValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalValidation)(nil)).Elem()
}

func (i *globalValidationPtrType) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return i.ToGlobalValidationPtrOutputWithContext(context.Background())
}

func (i *globalValidationPtrType) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalValidationPtrOutput)
}

func (i *globalValidationPtrType) ToOutput(ctx context.Context) pulumix.Output[*GlobalValidation] {
	return pulumix.Output[*GlobalValidation]{
		OutputState: i.ToGlobalValidationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization.
type GlobalValidationOutput struct{ *pulumi.OutputState }

func (GlobalValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalValidation)(nil)).Elem()
}

func (o GlobalValidationOutput) ToGlobalValidationOutput() GlobalValidationOutput {
	return o
}

func (o GlobalValidationOutput) ToGlobalValidationOutputWithContext(ctx context.Context) GlobalValidationOutput {
	return o
}

func (o GlobalValidationOutput) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return o.ToGlobalValidationPtrOutputWithContext(context.Background())
}

func (o GlobalValidationOutput) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GlobalValidation) *GlobalValidation {
		return &v
	}).(GlobalValidationPtrOutput)
}

func (o GlobalValidationOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalValidation] {
	return pulumix.Output[GlobalValidation]{
		OutputState: o.OutputState,
	}
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalValidation) []string { return v.ExcludedPaths }).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalValidation) *string { return v.RedirectToProvider }).(pulumi.StringPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationOutput) UnauthenticatedClientAction() UnauthenticatedClientActionV2PtrOutput {
	return o.ApplyT(func(v GlobalValidation) *UnauthenticatedClientActionV2 { return v.UnauthenticatedClientAction }).(UnauthenticatedClientActionV2PtrOutput)
}

type GlobalValidationPtrOutput struct{ *pulumi.OutputState }

func (GlobalValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalValidation)(nil)).Elem()
}

func (o GlobalValidationPtrOutput) ToGlobalValidationPtrOutput() GlobalValidationPtrOutput {
	return o
}

func (o GlobalValidationPtrOutput) ToGlobalValidationPtrOutputWithContext(ctx context.Context) GlobalValidationPtrOutput {
	return o
}

func (o GlobalValidationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GlobalValidation] {
	return pulumix.Output[*GlobalValidation]{
		OutputState: o.OutputState,
	}
}

func (o GlobalValidationPtrOutput) Elem() GlobalValidationOutput {
	return o.ApplyT(func(v *GlobalValidation) GlobalValidation {
		if v != nil {
			return *v
		}
		var ret GlobalValidation
		return ret
	}).(GlobalValidationOutput)
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationPtrOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalValidation) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationPtrOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalValidation) *string {
		if v == nil {
			return nil
		}
		return v.RedirectToProvider
	}).(pulumi.StringPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationPtrOutput) UnauthenticatedClientAction() UnauthenticatedClientActionV2PtrOutput {
	return o.ApplyT(func(v *GlobalValidation) *UnauthenticatedClientActionV2 {
		if v == nil {
			return nil
		}
		return v.UnauthenticatedClientAction
	}).(UnauthenticatedClientActionV2PtrOutput)
}

// The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization.
type GlobalValidationResponse struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths []string `pulumi:"excludedPaths"`
	// The default authentication provider to use when multiple providers are configured.
	// This setting is only needed if multiple providers are configured and the unauthenticated client
	// action is set to "RedirectToLoginPage".
	RedirectToProvider *string `pulumi:"redirectToProvider"`
	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction *string `pulumi:"unauthenticatedClientAction"`
}

// The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization.
type GlobalValidationResponseOutput struct{ *pulumi.OutputState }

func (GlobalValidationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlobalValidationResponse)(nil)).Elem()
}

func (o GlobalValidationResponseOutput) ToGlobalValidationResponseOutput() GlobalValidationResponseOutput {
	return o
}

func (o GlobalValidationResponseOutput) ToGlobalValidationResponseOutputWithContext(ctx context.Context) GlobalValidationResponseOutput {
	return o
}

func (o GlobalValidationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GlobalValidationResponse] {
	return pulumix.Output[GlobalValidationResponse]{
		OutputState: o.OutputState,
	}
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationResponseOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GlobalValidationResponse) []string { return v.ExcludedPaths }).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationResponseOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalValidationResponse) *string { return v.RedirectToProvider }).(pulumi.StringPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationResponseOutput) UnauthenticatedClientAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GlobalValidationResponse) *string { return v.UnauthenticatedClientAction }).(pulumi.StringPtrOutput)
}

type GlobalValidationResponsePtrOutput struct{ *pulumi.OutputState }

func (GlobalValidationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalValidationResponse)(nil)).Elem()
}

func (o GlobalValidationResponsePtrOutput) ToGlobalValidationResponsePtrOutput() GlobalValidationResponsePtrOutput {
	return o
}

func (o GlobalValidationResponsePtrOutput) ToGlobalValidationResponsePtrOutputWithContext(ctx context.Context) GlobalValidationResponsePtrOutput {
	return o
}

func (o GlobalValidationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GlobalValidationResponse] {
	return pulumix.Output[*GlobalValidationResponse]{
		OutputState: o.OutputState,
	}
}

func (o GlobalValidationResponsePtrOutput) Elem() GlobalValidationResponseOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) GlobalValidationResponse {
		if v != nil {
			return *v
		}
		var ret GlobalValidationResponse
		return ret
	}).(GlobalValidationResponseOutput)
}

// The paths for which unauthenticated flow would not be redirected to the login page.
func (o GlobalValidationResponsePtrOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ExcludedPaths
	}).(pulumi.StringArrayOutput)
}

// The default authentication provider to use when multiple providers are configured.
// This setting is only needed if multiple providers are configured and the unauthenticated client
// action is set to "RedirectToLoginPage".
func (o GlobalValidationResponsePtrOutput) RedirectToProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RedirectToProvider
	}).(pulumi.StringPtrOutput)
}

// The action to take when an unauthenticated client attempts to access the app.
func (o GlobalValidationResponsePtrOutput) UnauthenticatedClientAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalValidationResponse) *string {
		if v == nil {
			return nil
		}
		return v.UnauthenticatedClientAction
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Google provider.
type Google struct {
	// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopes `pulumi:"login"`
	// The configuration settings of the app registration for the Google provider.
	Registration *ClientRegistration `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AllowedAudiencesValidation `pulumi:"validation"`
}

// GoogleInput is an input type that accepts GoogleArgs and GoogleOutput values.
// You can construct a concrete instance of `GoogleInput` via:
//
//	GoogleArgs{...}
type GoogleInput interface {
	pulumi.Input

	ToGoogleOutput() GoogleOutput
	ToGoogleOutputWithContext(context.Context) GoogleOutput
}

// The configuration settings of the Google provider.
type GoogleArgs struct {
	// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login LoginScopesPtrInput `pulumi:"login"`
	// The configuration settings of the app registration for the Google provider.
	Registration ClientRegistrationPtrInput `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation AllowedAudiencesValidationPtrInput `pulumi:"validation"`
}

func (GoogleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Google)(nil)).Elem()
}

func (i GoogleArgs) ToGoogleOutput() GoogleOutput {
	return i.ToGoogleOutputWithContext(context.Background())
}

func (i GoogleArgs) ToGoogleOutputWithContext(ctx context.Context) GoogleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleOutput)
}

func (i GoogleArgs) ToOutput(ctx context.Context) pulumix.Output[Google] {
	return pulumix.Output[Google]{
		OutputState: i.ToGoogleOutputWithContext(ctx).OutputState,
	}
}

func (i GoogleArgs) ToGooglePtrOutput() GooglePtrOutput {
	return i.ToGooglePtrOutputWithContext(context.Background())
}

func (i GoogleArgs) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleOutput).ToGooglePtrOutputWithContext(ctx)
}

// GooglePtrInput is an input type that accepts GoogleArgs, GooglePtr and GooglePtrOutput values.
// You can construct a concrete instance of `GooglePtrInput` via:
//
//	        GoogleArgs{...}
//
//	or:
//
//	        nil
type GooglePtrInput interface {
	pulumi.Input

	ToGooglePtrOutput() GooglePtrOutput
	ToGooglePtrOutputWithContext(context.Context) GooglePtrOutput
}

type googlePtrType GoogleArgs

func GooglePtr(v *GoogleArgs) GooglePtrInput {
	return (*googlePtrType)(v)
}

func (*googlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Google)(nil)).Elem()
}

func (i *googlePtrType) ToGooglePtrOutput() GooglePtrOutput {
	return i.ToGooglePtrOutputWithContext(context.Background())
}

func (i *googlePtrType) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GooglePtrOutput)
}

func (i *googlePtrType) ToOutput(ctx context.Context) pulumix.Output[*Google] {
	return pulumix.Output[*Google]{
		OutputState: i.ToGooglePtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Google provider.
type GoogleOutput struct{ *pulumi.OutputState }

func (GoogleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Google)(nil)).Elem()
}

func (o GoogleOutput) ToGoogleOutput() GoogleOutput {
	return o
}

func (o GoogleOutput) ToGoogleOutputWithContext(ctx context.Context) GoogleOutput {
	return o
}

func (o GoogleOutput) ToGooglePtrOutput() GooglePtrOutput {
	return o.ToGooglePtrOutputWithContext(context.Background())
}

func (o GoogleOutput) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Google) *Google {
		return &v
	}).(GooglePtrOutput)
}

func (o GoogleOutput) ToOutput(ctx context.Context) pulumix.Output[Google] {
	return pulumix.Output[Google]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GoogleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Google) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GoogleOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v Google) *LoginScopes { return v.Login }).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GoogleOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v Google) *ClientRegistration { return v.Registration }).(ClientRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GoogleOutput) Validation() AllowedAudiencesValidationPtrOutput {
	return o.ApplyT(func(v Google) *AllowedAudiencesValidation { return v.Validation }).(AllowedAudiencesValidationPtrOutput)
}

type GooglePtrOutput struct{ *pulumi.OutputState }

func (GooglePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Google)(nil)).Elem()
}

func (o GooglePtrOutput) ToGooglePtrOutput() GooglePtrOutput {
	return o
}

func (o GooglePtrOutput) ToGooglePtrOutputWithContext(ctx context.Context) GooglePtrOutput {
	return o
}

func (o GooglePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Google] {
	return pulumix.Output[*Google]{
		OutputState: o.OutputState,
	}
}

func (o GooglePtrOutput) Elem() GoogleOutput {
	return o.ApplyT(func(v *Google) Google {
		if v != nil {
			return *v
		}
		var ret Google
		return ret
	}).(GoogleOutput)
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GooglePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Google) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GooglePtrOutput) Login() LoginScopesPtrOutput {
	return o.ApplyT(func(v *Google) *LoginScopes {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesPtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GooglePtrOutput) Registration() ClientRegistrationPtrOutput {
	return o.ApplyT(func(v *Google) *ClientRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationPtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GooglePtrOutput) Validation() AllowedAudiencesValidationPtrOutput {
	return o.ApplyT(func(v *Google) *AllowedAudiencesValidation {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AllowedAudiencesValidationPtrOutput)
}

// The configuration settings of the Google provider.
type GoogleResponse struct {
	// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the login flow.
	Login *LoginScopesResponse `pulumi:"login"`
	// The configuration settings of the app registration for the Google provider.
	Registration *ClientRegistrationResponse `pulumi:"registration"`
	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AllowedAudiencesValidationResponse `pulumi:"validation"`
}

// The configuration settings of the Google provider.
type GoogleResponseOutput struct{ *pulumi.OutputState }

func (GoogleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleResponse)(nil)).Elem()
}

func (o GoogleResponseOutput) ToGoogleResponseOutput() GoogleResponseOutput {
	return o
}

func (o GoogleResponseOutput) ToGoogleResponseOutputWithContext(ctx context.Context) GoogleResponseOutput {
	return o
}

func (o GoogleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GoogleResponse] {
	return pulumix.Output[GoogleResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GoogleResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GoogleResponseOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v GoogleResponse) *LoginScopesResponse { return v.Login }).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GoogleResponseOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v GoogleResponse) *ClientRegistrationResponse { return v.Registration }).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GoogleResponseOutput) Validation() AllowedAudiencesValidationResponsePtrOutput {
	return o.ApplyT(func(v GoogleResponse) *AllowedAudiencesValidationResponse { return v.Validation }).(AllowedAudiencesValidationResponsePtrOutput)
}

type GoogleResponsePtrOutput struct{ *pulumi.OutputState }

func (GoogleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleResponse)(nil)).Elem()
}

func (o GoogleResponsePtrOutput) ToGoogleResponsePtrOutput() GoogleResponsePtrOutput {
	return o
}

func (o GoogleResponsePtrOutput) ToGoogleResponsePtrOutputWithContext(ctx context.Context) GoogleResponsePtrOutput {
	return o
}

func (o GoogleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GoogleResponse] {
	return pulumix.Output[*GoogleResponse]{
		OutputState: o.OutputState,
	}
}

func (o GoogleResponsePtrOutput) Elem() GoogleResponseOutput {
	return o.ApplyT(func(v *GoogleResponse) GoogleResponse {
		if v != nil {
			return *v
		}
		var ret GoogleResponse
		return ret
	}).(GoogleResponseOutput)
}

// <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o GoogleResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the login flow.
func (o GoogleResponsePtrOutput) Login() LoginScopesResponsePtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *LoginScopesResponse {
		if v == nil {
			return nil
		}
		return v.Login
	}).(LoginScopesResponsePtrOutput)
}

// The configuration settings of the app registration for the Google provider.
func (o GoogleResponsePtrOutput) Registration() ClientRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *ClientRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(ClientRegistrationResponsePtrOutput)
}

// The configuration settings of the Azure Active Directory token validation flow.
func (o GoogleResponsePtrOutput) Validation() AllowedAudiencesValidationResponsePtrOutput {
	return o.ApplyT(func(v *GoogleResponse) *AllowedAudiencesValidationResponse {
		if v == nil {
			return nil
		}
		return v.Validation
	}).(AllowedAudiencesValidationResponsePtrOutput)
}

// Container App container Http scaling rule.
type HttpScaleRule struct {
	// Authentication secrets for the custom scale rule.
	Auth []ScaleRuleAuth `pulumi:"auth"`
	// Metadata properties to describe http scale rule.
	Metadata map[string]string `pulumi:"metadata"`
}

// HttpScaleRuleInput is an input type that accepts HttpScaleRuleArgs and HttpScaleRuleOutput values.
// You can construct a concrete instance of `HttpScaleRuleInput` via:
//
//	HttpScaleRuleArgs{...}
type HttpScaleRuleInput interface {
	pulumi.Input

	ToHttpScaleRuleOutput() HttpScaleRuleOutput
	ToHttpScaleRuleOutputWithContext(context.Context) HttpScaleRuleOutput
}

// Container App container Http scaling rule.
type HttpScaleRuleArgs struct {
	// Authentication secrets for the custom scale rule.
	Auth ScaleRuleAuthArrayInput `pulumi:"auth"`
	// Metadata properties to describe http scale rule.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
}

func (HttpScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpScaleRule)(nil)).Elem()
}

func (i HttpScaleRuleArgs) ToHttpScaleRuleOutput() HttpScaleRuleOutput {
	return i.ToHttpScaleRuleOutputWithContext(context.Background())
}

func (i HttpScaleRuleArgs) ToHttpScaleRuleOutputWithContext(ctx context.Context) HttpScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpScaleRuleOutput)
}

func (i HttpScaleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[HttpScaleRule] {
	return pulumix.Output[HttpScaleRule]{
		OutputState: i.ToHttpScaleRuleOutputWithContext(ctx).OutputState,
	}
}

func (i HttpScaleRuleArgs) ToHttpScaleRulePtrOutput() HttpScaleRulePtrOutput {
	return i.ToHttpScaleRulePtrOutputWithContext(context.Background())
}

func (i HttpScaleRuleArgs) ToHttpScaleRulePtrOutputWithContext(ctx context.Context) HttpScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpScaleRuleOutput).ToHttpScaleRulePtrOutputWithContext(ctx)
}

// HttpScaleRulePtrInput is an input type that accepts HttpScaleRuleArgs, HttpScaleRulePtr and HttpScaleRulePtrOutput values.
// You can construct a concrete instance of `HttpScaleRulePtrInput` via:
//
//	        HttpScaleRuleArgs{...}
//
//	or:
//
//	        nil
type HttpScaleRulePtrInput interface {
	pulumi.Input

	ToHttpScaleRulePtrOutput() HttpScaleRulePtrOutput
	ToHttpScaleRulePtrOutputWithContext(context.Context) HttpScaleRulePtrOutput
}

type httpScaleRulePtrType HttpScaleRuleArgs

func HttpScaleRulePtr(v *HttpScaleRuleArgs) HttpScaleRulePtrInput {
	return (*httpScaleRulePtrType)(v)
}

func (*httpScaleRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpScaleRule)(nil)).Elem()
}

func (i *httpScaleRulePtrType) ToHttpScaleRulePtrOutput() HttpScaleRulePtrOutput {
	return i.ToHttpScaleRulePtrOutputWithContext(context.Background())
}

func (i *httpScaleRulePtrType) ToHttpScaleRulePtrOutputWithContext(ctx context.Context) HttpScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpScaleRulePtrOutput)
}

func (i *httpScaleRulePtrType) ToOutput(ctx context.Context) pulumix.Output[*HttpScaleRule] {
	return pulumix.Output[*HttpScaleRule]{
		OutputState: i.ToHttpScaleRulePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App container Http scaling rule.
type HttpScaleRuleOutput struct{ *pulumi.OutputState }

func (HttpScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpScaleRule)(nil)).Elem()
}

func (o HttpScaleRuleOutput) ToHttpScaleRuleOutput() HttpScaleRuleOutput {
	return o
}

func (o HttpScaleRuleOutput) ToHttpScaleRuleOutputWithContext(ctx context.Context) HttpScaleRuleOutput {
	return o
}

func (o HttpScaleRuleOutput) ToHttpScaleRulePtrOutput() HttpScaleRulePtrOutput {
	return o.ToHttpScaleRulePtrOutputWithContext(context.Background())
}

func (o HttpScaleRuleOutput) ToHttpScaleRulePtrOutputWithContext(ctx context.Context) HttpScaleRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpScaleRule) *HttpScaleRule {
		return &v
	}).(HttpScaleRulePtrOutput)
}

func (o HttpScaleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[HttpScaleRule] {
	return pulumix.Output[HttpScaleRule]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the custom scale rule.
func (o HttpScaleRuleOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v HttpScaleRule) []ScaleRuleAuth { return v.Auth }).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe http scale rule.
func (o HttpScaleRuleOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpScaleRule) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

type HttpScaleRulePtrOutput struct{ *pulumi.OutputState }

func (HttpScaleRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpScaleRule)(nil)).Elem()
}

func (o HttpScaleRulePtrOutput) ToHttpScaleRulePtrOutput() HttpScaleRulePtrOutput {
	return o
}

func (o HttpScaleRulePtrOutput) ToHttpScaleRulePtrOutputWithContext(ctx context.Context) HttpScaleRulePtrOutput {
	return o
}

func (o HttpScaleRulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpScaleRule] {
	return pulumix.Output[*HttpScaleRule]{
		OutputState: o.OutputState,
	}
}

func (o HttpScaleRulePtrOutput) Elem() HttpScaleRuleOutput {
	return o.ApplyT(func(v *HttpScaleRule) HttpScaleRule {
		if v != nil {
			return *v
		}
		var ret HttpScaleRule
		return ret
	}).(HttpScaleRuleOutput)
}

// Authentication secrets for the custom scale rule.
func (o HttpScaleRulePtrOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v *HttpScaleRule) []ScaleRuleAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe http scale rule.
func (o HttpScaleRulePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpScaleRule) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Container App container Http scaling rule.
type HttpScaleRuleResponse struct {
	// Authentication secrets for the custom scale rule.
	Auth []ScaleRuleAuthResponse `pulumi:"auth"`
	// Metadata properties to describe http scale rule.
	Metadata map[string]string `pulumi:"metadata"`
}

// Container App container Http scaling rule.
type HttpScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (HttpScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpScaleRuleResponse)(nil)).Elem()
}

func (o HttpScaleRuleResponseOutput) ToHttpScaleRuleResponseOutput() HttpScaleRuleResponseOutput {
	return o
}

func (o HttpScaleRuleResponseOutput) ToHttpScaleRuleResponseOutputWithContext(ctx context.Context) HttpScaleRuleResponseOutput {
	return o
}

func (o HttpScaleRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HttpScaleRuleResponse] {
	return pulumix.Output[HttpScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the custom scale rule.
func (o HttpScaleRuleResponseOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v HttpScaleRuleResponse) []ScaleRuleAuthResponse { return v.Auth }).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe http scale rule.
func (o HttpScaleRuleResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpScaleRuleResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

type HttpScaleRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpScaleRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpScaleRuleResponse)(nil)).Elem()
}

func (o HttpScaleRuleResponsePtrOutput) ToHttpScaleRuleResponsePtrOutput() HttpScaleRuleResponsePtrOutput {
	return o
}

func (o HttpScaleRuleResponsePtrOutput) ToHttpScaleRuleResponsePtrOutputWithContext(ctx context.Context) HttpScaleRuleResponsePtrOutput {
	return o
}

func (o HttpScaleRuleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpScaleRuleResponse] {
	return pulumix.Output[*HttpScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o HttpScaleRuleResponsePtrOutput) Elem() HttpScaleRuleResponseOutput {
	return o.ApplyT(func(v *HttpScaleRuleResponse) HttpScaleRuleResponse {
		if v != nil {
			return *v
		}
		var ret HttpScaleRuleResponse
		return ret
	}).(HttpScaleRuleResponseOutput)
}

// Authentication secrets for the custom scale rule.
func (o HttpScaleRuleResponsePtrOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v *HttpScaleRuleResponse) []ScaleRuleAuthResponse {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe http scale rule.
func (o HttpScaleRuleResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpScaleRuleResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
type HttpSettings struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy *ForwardProxy `pulumi:"forwardProxy"`
	// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
	RequireHttps *bool `pulumi:"requireHttps"`
	// The configuration settings of the paths HTTP requests.
	Routes *HttpSettingsRoutes `pulumi:"routes"`
}

// HttpSettingsInput is an input type that accepts HttpSettingsArgs and HttpSettingsOutput values.
// You can construct a concrete instance of `HttpSettingsInput` via:
//
//	HttpSettingsArgs{...}
type HttpSettingsInput interface {
	pulumi.Input

	ToHttpSettingsOutput() HttpSettingsOutput
	ToHttpSettingsOutputWithContext(context.Context) HttpSettingsOutput
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
type HttpSettingsArgs struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy ForwardProxyPtrInput `pulumi:"forwardProxy"`
	// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
	RequireHttps pulumi.BoolPtrInput `pulumi:"requireHttps"`
	// The configuration settings of the paths HTTP requests.
	Routes HttpSettingsRoutesPtrInput `pulumi:"routes"`
}

func (HttpSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettings)(nil)).Elem()
}

func (i HttpSettingsArgs) ToHttpSettingsOutput() HttpSettingsOutput {
	return i.ToHttpSettingsOutputWithContext(context.Background())
}

func (i HttpSettingsArgs) ToHttpSettingsOutputWithContext(ctx context.Context) HttpSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsOutput)
}

func (i HttpSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[HttpSettings] {
	return pulumix.Output[HttpSettings]{
		OutputState: i.ToHttpSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i HttpSettingsArgs) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return i.ToHttpSettingsPtrOutputWithContext(context.Background())
}

func (i HttpSettingsArgs) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsOutput).ToHttpSettingsPtrOutputWithContext(ctx)
}

// HttpSettingsPtrInput is an input type that accepts HttpSettingsArgs, HttpSettingsPtr and HttpSettingsPtrOutput values.
// You can construct a concrete instance of `HttpSettingsPtrInput` via:
//
//	        HttpSettingsArgs{...}
//
//	or:
//
//	        nil
type HttpSettingsPtrInput interface {
	pulumi.Input

	ToHttpSettingsPtrOutput() HttpSettingsPtrOutput
	ToHttpSettingsPtrOutputWithContext(context.Context) HttpSettingsPtrOutput
}

type httpSettingsPtrType HttpSettingsArgs

func HttpSettingsPtr(v *HttpSettingsArgs) HttpSettingsPtrInput {
	return (*httpSettingsPtrType)(v)
}

func (*httpSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettings)(nil)).Elem()
}

func (i *httpSettingsPtrType) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return i.ToHttpSettingsPtrOutputWithContext(context.Background())
}

func (i *httpSettingsPtrType) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsPtrOutput)
}

func (i *httpSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*HttpSettings] {
	return pulumix.Output[*HttpSettings]{
		OutputState: i.ToHttpSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
type HttpSettingsOutput struct{ *pulumi.OutputState }

func (HttpSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettings)(nil)).Elem()
}

func (o HttpSettingsOutput) ToHttpSettingsOutput() HttpSettingsOutput {
	return o
}

func (o HttpSettingsOutput) ToHttpSettingsOutputWithContext(ctx context.Context) HttpSettingsOutput {
	return o
}

func (o HttpSettingsOutput) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return o.ToHttpSettingsPtrOutputWithContext(context.Background())
}

func (o HttpSettingsOutput) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpSettings) *HttpSettings {
		return &v
	}).(HttpSettingsPtrOutput)
}

func (o HttpSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[HttpSettings] {
	return pulumix.Output[HttpSettings]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsOutput) ForwardProxy() ForwardProxyPtrOutput {
	return o.ApplyT(func(v HttpSettings) *ForwardProxy { return v.ForwardProxy }).(ForwardProxyPtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpSettings) *bool { return v.RequireHttps }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsOutput) Routes() HttpSettingsRoutesPtrOutput {
	return o.ApplyT(func(v HttpSettings) *HttpSettingsRoutes { return v.Routes }).(HttpSettingsRoutesPtrOutput)
}

type HttpSettingsPtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettings)(nil)).Elem()
}

func (o HttpSettingsPtrOutput) ToHttpSettingsPtrOutput() HttpSettingsPtrOutput {
	return o
}

func (o HttpSettingsPtrOutput) ToHttpSettingsPtrOutputWithContext(ctx context.Context) HttpSettingsPtrOutput {
	return o
}

func (o HttpSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpSettings] {
	return pulumix.Output[*HttpSettings]{
		OutputState: o.OutputState,
	}
}

func (o HttpSettingsPtrOutput) Elem() HttpSettingsOutput {
	return o.ApplyT(func(v *HttpSettings) HttpSettings {
		if v != nil {
			return *v
		}
		var ret HttpSettings
		return ret
	}).(HttpSettingsOutput)
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsPtrOutput) ForwardProxy() ForwardProxyPtrOutput {
	return o.ApplyT(func(v *HttpSettings) *ForwardProxy {
		if v == nil {
			return nil
		}
		return v.ForwardProxy
	}).(ForwardProxyPtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsPtrOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpSettings) *bool {
		if v == nil {
			return nil
		}
		return v.RequireHttps
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsPtrOutput) Routes() HttpSettingsRoutesPtrOutput {
	return o.ApplyT(func(v *HttpSettings) *HttpSettingsRoutes {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(HttpSettingsRoutesPtrOutput)
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
type HttpSettingsResponse struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy *ForwardProxyResponse `pulumi:"forwardProxy"`
	// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
	RequireHttps *bool `pulumi:"requireHttps"`
	// The configuration settings of the paths HTTP requests.
	Routes *HttpSettingsRoutesResponse `pulumi:"routes"`
}

// The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
type HttpSettingsResponseOutput struct{ *pulumi.OutputState }

func (HttpSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsResponse)(nil)).Elem()
}

func (o HttpSettingsResponseOutput) ToHttpSettingsResponseOutput() HttpSettingsResponseOutput {
	return o
}

func (o HttpSettingsResponseOutput) ToHttpSettingsResponseOutputWithContext(ctx context.Context) HttpSettingsResponseOutput {
	return o
}

func (o HttpSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HttpSettingsResponse] {
	return pulumix.Output[HttpSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsResponseOutput) ForwardProxy() ForwardProxyResponsePtrOutput {
	return o.ApplyT(func(v HttpSettingsResponse) *ForwardProxyResponse { return v.ForwardProxy }).(ForwardProxyResponsePtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsResponseOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpSettingsResponse) *bool { return v.RequireHttps }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsResponseOutput) Routes() HttpSettingsRoutesResponsePtrOutput {
	return o.ApplyT(func(v HttpSettingsResponse) *HttpSettingsRoutesResponse { return v.Routes }).(HttpSettingsRoutesResponsePtrOutput)
}

type HttpSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsResponse)(nil)).Elem()
}

func (o HttpSettingsResponsePtrOutput) ToHttpSettingsResponsePtrOutput() HttpSettingsResponsePtrOutput {
	return o
}

func (o HttpSettingsResponsePtrOutput) ToHttpSettingsResponsePtrOutputWithContext(ctx context.Context) HttpSettingsResponsePtrOutput {
	return o
}

func (o HttpSettingsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpSettingsResponse] {
	return pulumix.Output[*HttpSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o HttpSettingsResponsePtrOutput) Elem() HttpSettingsResponseOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) HttpSettingsResponse {
		if v != nil {
			return *v
		}
		var ret HttpSettingsResponse
		return ret
	}).(HttpSettingsResponseOutput)
}

// The configuration settings of a forward proxy used to make the requests.
func (o HttpSettingsResponsePtrOutput) ForwardProxy() ForwardProxyResponsePtrOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) *ForwardProxyResponse {
		if v == nil {
			return nil
		}
		return v.ForwardProxy
	}).(ForwardProxyResponsePtrOutput)
}

// <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>.
func (o HttpSettingsResponsePtrOutput) RequireHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireHttps
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the paths HTTP requests.
func (o HttpSettingsResponsePtrOutput) Routes() HttpSettingsRoutesResponsePtrOutput {
	return o.ApplyT(func(v *HttpSettingsResponse) *HttpSettingsRoutesResponse {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(HttpSettingsRoutesResponsePtrOutput)
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutes struct {
	// The prefix that should precede all the authentication/authorization paths.
	ApiPrefix *string `pulumi:"apiPrefix"`
}

// HttpSettingsRoutesInput is an input type that accepts HttpSettingsRoutesArgs and HttpSettingsRoutesOutput values.
// You can construct a concrete instance of `HttpSettingsRoutesInput` via:
//
//	HttpSettingsRoutesArgs{...}
type HttpSettingsRoutesInput interface {
	pulumi.Input

	ToHttpSettingsRoutesOutput() HttpSettingsRoutesOutput
	ToHttpSettingsRoutesOutputWithContext(context.Context) HttpSettingsRoutesOutput
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesArgs struct {
	// The prefix that should precede all the authentication/authorization paths.
	ApiPrefix pulumi.StringPtrInput `pulumi:"apiPrefix"`
}

func (HttpSettingsRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsRoutes)(nil)).Elem()
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesOutput() HttpSettingsRoutesOutput {
	return i.ToHttpSettingsRoutesOutputWithContext(context.Background())
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesOutputWithContext(ctx context.Context) HttpSettingsRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsRoutesOutput)
}

func (i HttpSettingsRoutesArgs) ToOutput(ctx context.Context) pulumix.Output[HttpSettingsRoutes] {
	return pulumix.Output[HttpSettingsRoutes]{
		OutputState: i.ToHttpSettingsRoutesOutputWithContext(ctx).OutputState,
	}
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return i.ToHttpSettingsRoutesPtrOutputWithContext(context.Background())
}

func (i HttpSettingsRoutesArgs) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsRoutesOutput).ToHttpSettingsRoutesPtrOutputWithContext(ctx)
}

// HttpSettingsRoutesPtrInput is an input type that accepts HttpSettingsRoutesArgs, HttpSettingsRoutesPtr and HttpSettingsRoutesPtrOutput values.
// You can construct a concrete instance of `HttpSettingsRoutesPtrInput` via:
//
//	        HttpSettingsRoutesArgs{...}
//
//	or:
//
//	        nil
type HttpSettingsRoutesPtrInput interface {
	pulumi.Input

	ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput
	ToHttpSettingsRoutesPtrOutputWithContext(context.Context) HttpSettingsRoutesPtrOutput
}

type httpSettingsRoutesPtrType HttpSettingsRoutesArgs

func HttpSettingsRoutesPtr(v *HttpSettingsRoutesArgs) HttpSettingsRoutesPtrInput {
	return (*httpSettingsRoutesPtrType)(v)
}

func (*httpSettingsRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsRoutes)(nil)).Elem()
}

func (i *httpSettingsRoutesPtrType) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return i.ToHttpSettingsRoutesPtrOutputWithContext(context.Background())
}

func (i *httpSettingsRoutesPtrType) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpSettingsRoutesPtrOutput)
}

func (i *httpSettingsRoutesPtrType) ToOutput(ctx context.Context) pulumix.Output[*HttpSettingsRoutes] {
	return pulumix.Output[*HttpSettingsRoutes]{
		OutputState: i.ToHttpSettingsRoutesPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsRoutes)(nil)).Elem()
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesOutput() HttpSettingsRoutesOutput {
	return o
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesOutputWithContext(ctx context.Context) HttpSettingsRoutesOutput {
	return o
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return o.ToHttpSettingsRoutesPtrOutputWithContext(context.Background())
}

func (o HttpSettingsRoutesOutput) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpSettingsRoutes) *HttpSettingsRoutes {
		return &v
	}).(HttpSettingsRoutesPtrOutput)
}

func (o HttpSettingsRoutesOutput) ToOutput(ctx context.Context) pulumix.Output[HttpSettingsRoutes] {
	return pulumix.Output[HttpSettingsRoutes]{
		OutputState: o.OutputState,
	}
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpSettingsRoutes) *string { return v.ApiPrefix }).(pulumi.StringPtrOutput)
}

type HttpSettingsRoutesPtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsRoutes)(nil)).Elem()
}

func (o HttpSettingsRoutesPtrOutput) ToHttpSettingsRoutesPtrOutput() HttpSettingsRoutesPtrOutput {
	return o
}

func (o HttpSettingsRoutesPtrOutput) ToHttpSettingsRoutesPtrOutputWithContext(ctx context.Context) HttpSettingsRoutesPtrOutput {
	return o
}

func (o HttpSettingsRoutesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpSettingsRoutes] {
	return pulumix.Output[*HttpSettingsRoutes]{
		OutputState: o.OutputState,
	}
}

func (o HttpSettingsRoutesPtrOutput) Elem() HttpSettingsRoutesOutput {
	return o.ApplyT(func(v *HttpSettingsRoutes) HttpSettingsRoutes {
		if v != nil {
			return *v
		}
		var ret HttpSettingsRoutes
		return ret
	}).(HttpSettingsRoutesOutput)
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesPtrOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpSettingsRoutes) *string {
		if v == nil {
			return nil
		}
		return v.ApiPrefix
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesResponse struct {
	// The prefix that should precede all the authentication/authorization paths.
	ApiPrefix *string `pulumi:"apiPrefix"`
}

// The configuration settings of the paths HTTP requests.
type HttpSettingsRoutesResponseOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpSettingsRoutesResponse)(nil)).Elem()
}

func (o HttpSettingsRoutesResponseOutput) ToHttpSettingsRoutesResponseOutput() HttpSettingsRoutesResponseOutput {
	return o
}

func (o HttpSettingsRoutesResponseOutput) ToHttpSettingsRoutesResponseOutputWithContext(ctx context.Context) HttpSettingsRoutesResponseOutput {
	return o
}

func (o HttpSettingsRoutesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HttpSettingsRoutesResponse] {
	return pulumix.Output[HttpSettingsRoutesResponse]{
		OutputState: o.OutputState,
	}
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesResponseOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpSettingsRoutesResponse) *string { return v.ApiPrefix }).(pulumi.StringPtrOutput)
}

type HttpSettingsRoutesResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpSettingsRoutesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpSettingsRoutesResponse)(nil)).Elem()
}

func (o HttpSettingsRoutesResponsePtrOutput) ToHttpSettingsRoutesResponsePtrOutput() HttpSettingsRoutesResponsePtrOutput {
	return o
}

func (o HttpSettingsRoutesResponsePtrOutput) ToHttpSettingsRoutesResponsePtrOutputWithContext(ctx context.Context) HttpSettingsRoutesResponsePtrOutput {
	return o
}

func (o HttpSettingsRoutesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HttpSettingsRoutesResponse] {
	return pulumix.Output[*HttpSettingsRoutesResponse]{
		OutputState: o.OutputState,
	}
}

func (o HttpSettingsRoutesResponsePtrOutput) Elem() HttpSettingsRoutesResponseOutput {
	return o.ApplyT(func(v *HttpSettingsRoutesResponse) HttpSettingsRoutesResponse {
		if v != nil {
			return *v
		}
		var ret HttpSettingsRoutesResponse
		return ret
	}).(HttpSettingsRoutesResponseOutput)
}

// The prefix that should precede all the authentication/authorization paths.
func (o HttpSettingsRoutesResponsePtrOutput) ApiPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpSettingsRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiPrefix
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
type IdentityProviders struct {
	// The configuration settings of the Apple provider.
	Apple *Apple `pulumi:"apple"`
	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory *AzureActiveDirectory `pulumi:"azureActiveDirectory"`
	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps *AzureStaticWebApps `pulumi:"azureStaticWebApps"`
	// The map of the name of the alias of each custom Open ID Connect provider to the
	// configuration settings of the custom Open ID Connect provider.
	CustomOpenIdConnectProviders map[string]CustomOpenIdConnectProvider `pulumi:"customOpenIdConnectProviders"`
	// The configuration settings of the Facebook provider.
	Facebook *Facebook `pulumi:"facebook"`
	// The configuration settings of the GitHub provider.
	GitHub *GitHub `pulumi:"gitHub"`
	// The configuration settings of the Google provider.
	Google *Google `pulumi:"google"`
	// The configuration settings of the Twitter provider.
	Twitter *Twitter `pulumi:"twitter"`
}

// IdentityProvidersInput is an input type that accepts IdentityProvidersArgs and IdentityProvidersOutput values.
// You can construct a concrete instance of `IdentityProvidersInput` via:
//
//	IdentityProvidersArgs{...}
type IdentityProvidersInput interface {
	pulumi.Input

	ToIdentityProvidersOutput() IdentityProvidersOutput
	ToIdentityProvidersOutputWithContext(context.Context) IdentityProvidersOutput
}

// The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
type IdentityProvidersArgs struct {
	// The configuration settings of the Apple provider.
	Apple ApplePtrInput `pulumi:"apple"`
	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory AzureActiveDirectoryPtrInput `pulumi:"azureActiveDirectory"`
	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps AzureStaticWebAppsPtrInput `pulumi:"azureStaticWebApps"`
	// The map of the name of the alias of each custom Open ID Connect provider to the
	// configuration settings of the custom Open ID Connect provider.
	CustomOpenIdConnectProviders CustomOpenIdConnectProviderMapInput `pulumi:"customOpenIdConnectProviders"`
	// The configuration settings of the Facebook provider.
	Facebook FacebookPtrInput `pulumi:"facebook"`
	// The configuration settings of the GitHub provider.
	GitHub GitHubPtrInput `pulumi:"gitHub"`
	// The configuration settings of the Google provider.
	Google GooglePtrInput `pulumi:"google"`
	// The configuration settings of the Twitter provider.
	Twitter TwitterPtrInput `pulumi:"twitter"`
}

func (IdentityProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviders)(nil)).Elem()
}

func (i IdentityProvidersArgs) ToIdentityProvidersOutput() IdentityProvidersOutput {
	return i.ToIdentityProvidersOutputWithContext(context.Background())
}

func (i IdentityProvidersArgs) ToIdentityProvidersOutputWithContext(ctx context.Context) IdentityProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProvidersOutput)
}

func (i IdentityProvidersArgs) ToOutput(ctx context.Context) pulumix.Output[IdentityProviders] {
	return pulumix.Output[IdentityProviders]{
		OutputState: i.ToIdentityProvidersOutputWithContext(ctx).OutputState,
	}
}

func (i IdentityProvidersArgs) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return i.ToIdentityProvidersPtrOutputWithContext(context.Background())
}

func (i IdentityProvidersArgs) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProvidersOutput).ToIdentityProvidersPtrOutputWithContext(ctx)
}

// IdentityProvidersPtrInput is an input type that accepts IdentityProvidersArgs, IdentityProvidersPtr and IdentityProvidersPtrOutput values.
// You can construct a concrete instance of `IdentityProvidersPtrInput` via:
//
//	        IdentityProvidersArgs{...}
//
//	or:
//
//	        nil
type IdentityProvidersPtrInput interface {
	pulumi.Input

	ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput
	ToIdentityProvidersPtrOutputWithContext(context.Context) IdentityProvidersPtrOutput
}

type identityProvidersPtrType IdentityProvidersArgs

func IdentityProvidersPtr(v *IdentityProvidersArgs) IdentityProvidersPtrInput {
	return (*identityProvidersPtrType)(v)
}

func (*identityProvidersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviders)(nil)).Elem()
}

func (i *identityProvidersPtrType) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return i.ToIdentityProvidersPtrOutputWithContext(context.Background())
}

func (i *identityProvidersPtrType) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProvidersPtrOutput)
}

func (i *identityProvidersPtrType) ToOutput(ctx context.Context) pulumix.Output[*IdentityProviders] {
	return pulumix.Output[*IdentityProviders]{
		OutputState: i.ToIdentityProvidersPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
type IdentityProvidersOutput struct{ *pulumi.OutputState }

func (IdentityProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProviders)(nil)).Elem()
}

func (o IdentityProvidersOutput) ToIdentityProvidersOutput() IdentityProvidersOutput {
	return o
}

func (o IdentityProvidersOutput) ToIdentityProvidersOutputWithContext(ctx context.Context) IdentityProvidersOutput {
	return o
}

func (o IdentityProvidersOutput) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return o.ToIdentityProvidersPtrOutputWithContext(context.Background())
}

func (o IdentityProvidersOutput) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProviders) *IdentityProviders {
		return &v
	}).(IdentityProvidersPtrOutput)
}

func (o IdentityProvidersOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityProviders] {
	return pulumix.Output[IdentityProviders]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersOutput) Apple() ApplePtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Apple { return v.Apple }).(ApplePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersOutput) AzureActiveDirectory() AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *AzureActiveDirectory { return v.AzureActiveDirectory }).(AzureActiveDirectoryPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersOutput) AzureStaticWebApps() AzureStaticWebAppsPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *AzureStaticWebApps { return v.AzureStaticWebApps }).(AzureStaticWebAppsPtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderMapOutput {
	return o.ApplyT(func(v IdentityProviders) map[string]CustomOpenIdConnectProvider {
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersOutput) Facebook() FacebookPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Facebook { return v.Facebook }).(FacebookPtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersOutput) GitHub() GitHubPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *GitHub { return v.GitHub }).(GitHubPtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersOutput) Google() GooglePtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Google { return v.Google }).(GooglePtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersOutput) Twitter() TwitterPtrOutput {
	return o.ApplyT(func(v IdentityProviders) *Twitter { return v.Twitter }).(TwitterPtrOutput)
}

type IdentityProvidersPtrOutput struct{ *pulumi.OutputState }

func (IdentityProvidersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProviders)(nil)).Elem()
}

func (o IdentityProvidersPtrOutput) ToIdentityProvidersPtrOutput() IdentityProvidersPtrOutput {
	return o
}

func (o IdentityProvidersPtrOutput) ToIdentityProvidersPtrOutputWithContext(ctx context.Context) IdentityProvidersPtrOutput {
	return o
}

func (o IdentityProvidersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityProviders] {
	return pulumix.Output[*IdentityProviders]{
		OutputState: o.OutputState,
	}
}

func (o IdentityProvidersPtrOutput) Elem() IdentityProvidersOutput {
	return o.ApplyT(func(v *IdentityProviders) IdentityProviders {
		if v != nil {
			return *v
		}
		var ret IdentityProviders
		return ret
	}).(IdentityProvidersOutput)
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersPtrOutput) Apple() ApplePtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Apple {
		if v == nil {
			return nil
		}
		return v.Apple
	}).(ApplePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersPtrOutput) AzureActiveDirectory() AzureActiveDirectoryPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *AzureActiveDirectory {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectory
	}).(AzureActiveDirectoryPtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersPtrOutput) AzureStaticWebApps() AzureStaticWebAppsPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *AzureStaticWebApps {
		if v == nil {
			return nil
		}
		return v.AzureStaticWebApps
	}).(AzureStaticWebAppsPtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersPtrOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderMapOutput {
	return o.ApplyT(func(v *IdentityProviders) map[string]CustomOpenIdConnectProvider {
		if v == nil {
			return nil
		}
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersPtrOutput) Facebook() FacebookPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Facebook {
		if v == nil {
			return nil
		}
		return v.Facebook
	}).(FacebookPtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersPtrOutput) GitHub() GitHubPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *GitHub {
		if v == nil {
			return nil
		}
		return v.GitHub
	}).(GitHubPtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersPtrOutput) Google() GooglePtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Google {
		if v == nil {
			return nil
		}
		return v.Google
	}).(GooglePtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersPtrOutput) Twitter() TwitterPtrOutput {
	return o.ApplyT(func(v *IdentityProviders) *Twitter {
		if v == nil {
			return nil
		}
		return v.Twitter
	}).(TwitterPtrOutput)
}

// The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
type IdentityProvidersResponse struct {
	// The configuration settings of the Apple provider.
	Apple *AppleResponse `pulumi:"apple"`
	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory *AzureActiveDirectoryResponse `pulumi:"azureActiveDirectory"`
	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps *AzureStaticWebAppsResponse `pulumi:"azureStaticWebApps"`
	// The map of the name of the alias of each custom Open ID Connect provider to the
	// configuration settings of the custom Open ID Connect provider.
	CustomOpenIdConnectProviders map[string]CustomOpenIdConnectProviderResponse `pulumi:"customOpenIdConnectProviders"`
	// The configuration settings of the Facebook provider.
	Facebook *FacebookResponse `pulumi:"facebook"`
	// The configuration settings of the GitHub provider.
	GitHub *GitHubResponse `pulumi:"gitHub"`
	// The configuration settings of the Google provider.
	Google *GoogleResponse `pulumi:"google"`
	// The configuration settings of the Twitter provider.
	Twitter *TwitterResponse `pulumi:"twitter"`
}

// The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
type IdentityProvidersResponseOutput struct{ *pulumi.OutputState }

func (IdentityProvidersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProvidersResponse)(nil)).Elem()
}

func (o IdentityProvidersResponseOutput) ToIdentityProvidersResponseOutput() IdentityProvidersResponseOutput {
	return o
}

func (o IdentityProvidersResponseOutput) ToIdentityProvidersResponseOutputWithContext(ctx context.Context) IdentityProvidersResponseOutput {
	return o
}

func (o IdentityProvidersResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityProvidersResponse] {
	return pulumix.Output[IdentityProvidersResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersResponseOutput) Apple() AppleResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *AppleResponse { return v.Apple }).(AppleResponsePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersResponseOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *AzureActiveDirectoryResponse { return v.AzureActiveDirectory }).(AzureActiveDirectoryResponsePtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersResponseOutput) AzureStaticWebApps() AzureStaticWebAppsResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *AzureStaticWebAppsResponse { return v.AzureStaticWebApps }).(AzureStaticWebAppsResponsePtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersResponseOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderResponseMapOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) map[string]CustomOpenIdConnectProviderResponse {
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderResponseMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersResponseOutput) Facebook() FacebookResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *FacebookResponse { return v.Facebook }).(FacebookResponsePtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersResponseOutput) GitHub() GitHubResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *GitHubResponse { return v.GitHub }).(GitHubResponsePtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersResponseOutput) Google() GoogleResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *GoogleResponse { return v.Google }).(GoogleResponsePtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersResponseOutput) Twitter() TwitterResponsePtrOutput {
	return o.ApplyT(func(v IdentityProvidersResponse) *TwitterResponse { return v.Twitter }).(TwitterResponsePtrOutput)
}

type IdentityProvidersResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityProvidersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProvidersResponse)(nil)).Elem()
}

func (o IdentityProvidersResponsePtrOutput) ToIdentityProvidersResponsePtrOutput() IdentityProvidersResponsePtrOutput {
	return o
}

func (o IdentityProvidersResponsePtrOutput) ToIdentityProvidersResponsePtrOutputWithContext(ctx context.Context) IdentityProvidersResponsePtrOutput {
	return o
}

func (o IdentityProvidersResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityProvidersResponse] {
	return pulumix.Output[*IdentityProvidersResponse]{
		OutputState: o.OutputState,
	}
}

func (o IdentityProvidersResponsePtrOutput) Elem() IdentityProvidersResponseOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) IdentityProvidersResponse {
		if v != nil {
			return *v
		}
		var ret IdentityProvidersResponse
		return ret
	}).(IdentityProvidersResponseOutput)
}

// The configuration settings of the Apple provider.
func (o IdentityProvidersResponsePtrOutput) Apple() AppleResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *AppleResponse {
		if v == nil {
			return nil
		}
		return v.Apple
	}).(AppleResponsePtrOutput)
}

// The configuration settings of the Azure Active directory provider.
func (o IdentityProvidersResponsePtrOutput) AzureActiveDirectory() AzureActiveDirectoryResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *AzureActiveDirectoryResponse {
		if v == nil {
			return nil
		}
		return v.AzureActiveDirectory
	}).(AzureActiveDirectoryResponsePtrOutput)
}

// The configuration settings of the Azure Static Web Apps provider.
func (o IdentityProvidersResponsePtrOutput) AzureStaticWebApps() AzureStaticWebAppsResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *AzureStaticWebAppsResponse {
		if v == nil {
			return nil
		}
		return v.AzureStaticWebApps
	}).(AzureStaticWebAppsResponsePtrOutput)
}

// The map of the name of the alias of each custom Open ID Connect provider to the
// configuration settings of the custom Open ID Connect provider.
func (o IdentityProvidersResponsePtrOutput) CustomOpenIdConnectProviders() CustomOpenIdConnectProviderResponseMapOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) map[string]CustomOpenIdConnectProviderResponse {
		if v == nil {
			return nil
		}
		return v.CustomOpenIdConnectProviders
	}).(CustomOpenIdConnectProviderResponseMapOutput)
}

// The configuration settings of the Facebook provider.
func (o IdentityProvidersResponsePtrOutput) Facebook() FacebookResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *FacebookResponse {
		if v == nil {
			return nil
		}
		return v.Facebook
	}).(FacebookResponsePtrOutput)
}

// The configuration settings of the GitHub provider.
func (o IdentityProvidersResponsePtrOutput) GitHub() GitHubResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *GitHubResponse {
		if v == nil {
			return nil
		}
		return v.GitHub
	}).(GitHubResponsePtrOutput)
}

// The configuration settings of the Google provider.
func (o IdentityProvidersResponsePtrOutput) Google() GoogleResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *GoogleResponse {
		if v == nil {
			return nil
		}
		return v.Google
	}).(GoogleResponsePtrOutput)
}

// The configuration settings of the Twitter provider.
func (o IdentityProvidersResponsePtrOutput) Twitter() TwitterResponsePtrOutput {
	return o.ApplyT(func(v *IdentityProvidersResponse) *TwitterResponse {
		if v == nil {
			return nil
		}
		return v.Twitter
	}).(TwitterResponsePtrOutput)
}

// Container App Ingress configuration.
type Ingress struct {
	// Settings to expose additional ports on container app
	AdditionalPortMappings []IngressPortMapping `pulumi:"additionalPortMappings"`
	// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// CORS policy for container app
	CorsPolicy *CorsPolicy `pulumi:"corsPolicy"`
	// custom domain bindings for Container Apps' hostnames.
	CustomDomains []CustomDomain `pulumi:"customDomains"`
	// Exposed Port in containers for TCP traffic from ingress
	ExposedPort *int `pulumi:"exposedPort"`
	// Bool indicating if app exposes an external http endpoint
	External *bool `pulumi:"external"`
	// Rules to restrict incoming IP address.
	IpSecurityRestrictions []IpSecurityRestrictionRule `pulumi:"ipSecurityRestrictions"`
	// Sticky Sessions for Single Revision Mode
	StickySessions *IngressStickySessions `pulumi:"stickySessions"`
	// Target Port in containers for traffic from ingress
	TargetPort *int `pulumi:"targetPort"`
	// Traffic weights for app's revisions
	Traffic []TrafficWeight `pulumi:"traffic"`
	// Ingress transport protocol
	Transport *string `pulumi:"transport"`
}

// Defaults sets the appropriate defaults for Ingress
func (val *Ingress) Defaults() *Ingress {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowInsecure == nil {
		allowInsecure_ := false
		tmp.AllowInsecure = &allowInsecure_
	}
	if tmp.External == nil {
		external_ := false
		tmp.External = &external_
	}
	if tmp.Transport == nil {
		transport_ := "auto"
		tmp.Transport = &transport_
	}
	return &tmp
}

// IngressInput is an input type that accepts IngressArgs and IngressOutput values.
// You can construct a concrete instance of `IngressInput` via:
//
//	IngressArgs{...}
type IngressInput interface {
	pulumi.Input

	ToIngressOutput() IngressOutput
	ToIngressOutputWithContext(context.Context) IngressOutput
}

// Container App Ingress configuration.
type IngressArgs struct {
	// Settings to expose additional ports on container app
	AdditionalPortMappings IngressPortMappingArrayInput `pulumi:"additionalPortMappings"`
	// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
	AllowInsecure pulumi.BoolPtrInput `pulumi:"allowInsecure"`
	// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
	ClientCertificateMode pulumi.StringPtrInput `pulumi:"clientCertificateMode"`
	// CORS policy for container app
	CorsPolicy CorsPolicyPtrInput `pulumi:"corsPolicy"`
	// custom domain bindings for Container Apps' hostnames.
	CustomDomains CustomDomainArrayInput `pulumi:"customDomains"`
	// Exposed Port in containers for TCP traffic from ingress
	ExposedPort pulumi.IntPtrInput `pulumi:"exposedPort"`
	// Bool indicating if app exposes an external http endpoint
	External pulumi.BoolPtrInput `pulumi:"external"`
	// Rules to restrict incoming IP address.
	IpSecurityRestrictions IpSecurityRestrictionRuleArrayInput `pulumi:"ipSecurityRestrictions"`
	// Sticky Sessions for Single Revision Mode
	StickySessions IngressStickySessionsPtrInput `pulumi:"stickySessions"`
	// Target Port in containers for traffic from ingress
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
	// Traffic weights for app's revisions
	Traffic TrafficWeightArrayInput `pulumi:"traffic"`
	// Ingress transport protocol
	Transport pulumi.StringPtrInput `pulumi:"transport"`
}

// Defaults sets the appropriate defaults for IngressArgs
func (val *IngressArgs) Defaults() *IngressArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowInsecure == nil {
		tmp.AllowInsecure = pulumi.BoolPtr(false)
	}
	if tmp.External == nil {
		tmp.External = pulumi.BoolPtr(false)
	}
	if tmp.Transport == nil {
		tmp.Transport = pulumi.StringPtr("auto")
	}
	return &tmp
}
func (IngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Ingress)(nil)).Elem()
}

func (i IngressArgs) ToIngressOutput() IngressOutput {
	return i.ToIngressOutputWithContext(context.Background())
}

func (i IngressArgs) ToIngressOutputWithContext(ctx context.Context) IngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressOutput)
}

func (i IngressArgs) ToOutput(ctx context.Context) pulumix.Output[Ingress] {
	return pulumix.Output[Ingress]{
		OutputState: i.ToIngressOutputWithContext(ctx).OutputState,
	}
}

func (i IngressArgs) ToIngressPtrOutput() IngressPtrOutput {
	return i.ToIngressPtrOutputWithContext(context.Background())
}

func (i IngressArgs) ToIngressPtrOutputWithContext(ctx context.Context) IngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressOutput).ToIngressPtrOutputWithContext(ctx)
}

// IngressPtrInput is an input type that accepts IngressArgs, IngressPtr and IngressPtrOutput values.
// You can construct a concrete instance of `IngressPtrInput` via:
//
//	        IngressArgs{...}
//
//	or:
//
//	        nil
type IngressPtrInput interface {
	pulumi.Input

	ToIngressPtrOutput() IngressPtrOutput
	ToIngressPtrOutputWithContext(context.Context) IngressPtrOutput
}

type ingressPtrType IngressArgs

func IngressPtr(v *IngressArgs) IngressPtrInput {
	return (*ingressPtrType)(v)
}

func (*ingressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ingress)(nil)).Elem()
}

func (i *ingressPtrType) ToIngressPtrOutput() IngressPtrOutput {
	return i.ToIngressPtrOutputWithContext(context.Background())
}

func (i *ingressPtrType) ToIngressPtrOutputWithContext(ctx context.Context) IngressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressPtrOutput)
}

func (i *ingressPtrType) ToOutput(ctx context.Context) pulumix.Output[*Ingress] {
	return pulumix.Output[*Ingress]{
		OutputState: i.ToIngressPtrOutputWithContext(ctx).OutputState,
	}
}

// Container App Ingress configuration.
type IngressOutput struct{ *pulumi.OutputState }

func (IngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ingress)(nil)).Elem()
}

func (o IngressOutput) ToIngressOutput() IngressOutput {
	return o
}

func (o IngressOutput) ToIngressOutputWithContext(ctx context.Context) IngressOutput {
	return o
}

func (o IngressOutput) ToIngressPtrOutput() IngressPtrOutput {
	return o.ToIngressPtrOutputWithContext(context.Background())
}

func (o IngressOutput) ToIngressPtrOutputWithContext(ctx context.Context) IngressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ingress) *Ingress {
		return &v
	}).(IngressPtrOutput)
}

func (o IngressOutput) ToOutput(ctx context.Context) pulumix.Output[Ingress] {
	return pulumix.Output[Ingress]{
		OutputState: o.OutputState,
	}
}

// Settings to expose additional ports on container app
func (o IngressOutput) AdditionalPortMappings() IngressPortMappingArrayOutput {
	return o.ApplyT(func(v Ingress) []IngressPortMapping { return v.AdditionalPortMappings }).(IngressPortMappingArrayOutput)
}

// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
func (o IngressOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Ingress) *bool { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
func (o IngressOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ingress) *string { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// CORS policy for container app
func (o IngressOutput) CorsPolicy() CorsPolicyPtrOutput {
	return o.ApplyT(func(v Ingress) *CorsPolicy { return v.CorsPolicy }).(CorsPolicyPtrOutput)
}

// custom domain bindings for Container Apps' hostnames.
func (o IngressOutput) CustomDomains() CustomDomainArrayOutput {
	return o.ApplyT(func(v Ingress) []CustomDomain { return v.CustomDomains }).(CustomDomainArrayOutput)
}

// Exposed Port in containers for TCP traffic from ingress
func (o IngressOutput) ExposedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ingress) *int { return v.ExposedPort }).(pulumi.IntPtrOutput)
}

// Bool indicating if app exposes an external http endpoint
func (o IngressOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Ingress) *bool { return v.External }).(pulumi.BoolPtrOutput)
}

// Rules to restrict incoming IP address.
func (o IngressOutput) IpSecurityRestrictions() IpSecurityRestrictionRuleArrayOutput {
	return o.ApplyT(func(v Ingress) []IpSecurityRestrictionRule { return v.IpSecurityRestrictions }).(IpSecurityRestrictionRuleArrayOutput)
}

// Sticky Sessions for Single Revision Mode
func (o IngressOutput) StickySessions() IngressStickySessionsPtrOutput {
	return o.ApplyT(func(v Ingress) *IngressStickySessions { return v.StickySessions }).(IngressStickySessionsPtrOutput)
}

// Target Port in containers for traffic from ingress
func (o IngressOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ingress) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

// Traffic weights for app's revisions
func (o IngressOutput) Traffic() TrafficWeightArrayOutput {
	return o.ApplyT(func(v Ingress) []TrafficWeight { return v.Traffic }).(TrafficWeightArrayOutput)
}

// Ingress transport protocol
func (o IngressOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ingress) *string { return v.Transport }).(pulumi.StringPtrOutput)
}

type IngressPtrOutput struct{ *pulumi.OutputState }

func (IngressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ingress)(nil)).Elem()
}

func (o IngressPtrOutput) ToIngressPtrOutput() IngressPtrOutput {
	return o
}

func (o IngressPtrOutput) ToIngressPtrOutputWithContext(ctx context.Context) IngressPtrOutput {
	return o
}

func (o IngressPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Ingress] {
	return pulumix.Output[*Ingress]{
		OutputState: o.OutputState,
	}
}

func (o IngressPtrOutput) Elem() IngressOutput {
	return o.ApplyT(func(v *Ingress) Ingress {
		if v != nil {
			return *v
		}
		var ret Ingress
		return ret
	}).(IngressOutput)
}

// Settings to expose additional ports on container app
func (o IngressPtrOutput) AdditionalPortMappings() IngressPortMappingArrayOutput {
	return o.ApplyT(func(v *Ingress) []IngressPortMapping {
		if v == nil {
			return nil
		}
		return v.AdditionalPortMappings
	}).(IngressPortMappingArrayOutput)
}

// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
func (o IngressPtrOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ingress) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInsecure
	}).(pulumi.BoolPtrOutput)
}

// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
func (o IngressPtrOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ingress) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificateMode
	}).(pulumi.StringPtrOutput)
}

// CORS policy for container app
func (o IngressPtrOutput) CorsPolicy() CorsPolicyPtrOutput {
	return o.ApplyT(func(v *Ingress) *CorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(CorsPolicyPtrOutput)
}

// custom domain bindings for Container Apps' hostnames.
func (o IngressPtrOutput) CustomDomains() CustomDomainArrayOutput {
	return o.ApplyT(func(v *Ingress) []CustomDomain {
		if v == nil {
			return nil
		}
		return v.CustomDomains
	}).(CustomDomainArrayOutput)
}

// Exposed Port in containers for TCP traffic from ingress
func (o IngressPtrOutput) ExposedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ingress) *int {
		if v == nil {
			return nil
		}
		return v.ExposedPort
	}).(pulumi.IntPtrOutput)
}

// Bool indicating if app exposes an external http endpoint
func (o IngressPtrOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ingress) *bool {
		if v == nil {
			return nil
		}
		return v.External
	}).(pulumi.BoolPtrOutput)
}

// Rules to restrict incoming IP address.
func (o IngressPtrOutput) IpSecurityRestrictions() IpSecurityRestrictionRuleArrayOutput {
	return o.ApplyT(func(v *Ingress) []IpSecurityRestrictionRule {
		if v == nil {
			return nil
		}
		return v.IpSecurityRestrictions
	}).(IpSecurityRestrictionRuleArrayOutput)
}

// Sticky Sessions for Single Revision Mode
func (o IngressPtrOutput) StickySessions() IngressStickySessionsPtrOutput {
	return o.ApplyT(func(v *Ingress) *IngressStickySessions {
		if v == nil {
			return nil
		}
		return v.StickySessions
	}).(IngressStickySessionsPtrOutput)
}

// Target Port in containers for traffic from ingress
func (o IngressPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ingress) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

// Traffic weights for app's revisions
func (o IngressPtrOutput) Traffic() TrafficWeightArrayOutput {
	return o.ApplyT(func(v *Ingress) []TrafficWeight {
		if v == nil {
			return nil
		}
		return v.Traffic
	}).(TrafficWeightArrayOutput)
}

// Ingress transport protocol
func (o IngressPtrOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ingress) *string {
		if v == nil {
			return nil
		}
		return v.Transport
	}).(pulumi.StringPtrOutput)
}

// Port mappings of container app ingress
type IngressPortMapping struct {
	// Specifies the exposed port for the target port. If not specified, it defaults to target port
	ExposedPort *int `pulumi:"exposedPort"`
	// Specifies whether the app port is accessible outside of the environment
	External bool `pulumi:"external"`
	// Specifies the port user's container listens on
	TargetPort int `pulumi:"targetPort"`
}

// IngressPortMappingInput is an input type that accepts IngressPortMappingArgs and IngressPortMappingOutput values.
// You can construct a concrete instance of `IngressPortMappingInput` via:
//
//	IngressPortMappingArgs{...}
type IngressPortMappingInput interface {
	pulumi.Input

	ToIngressPortMappingOutput() IngressPortMappingOutput
	ToIngressPortMappingOutputWithContext(context.Context) IngressPortMappingOutput
}

// Port mappings of container app ingress
type IngressPortMappingArgs struct {
	// Specifies the exposed port for the target port. If not specified, it defaults to target port
	ExposedPort pulumi.IntPtrInput `pulumi:"exposedPort"`
	// Specifies whether the app port is accessible outside of the environment
	External pulumi.BoolInput `pulumi:"external"`
	// Specifies the port user's container listens on
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
}

func (IngressPortMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressPortMapping)(nil)).Elem()
}

func (i IngressPortMappingArgs) ToIngressPortMappingOutput() IngressPortMappingOutput {
	return i.ToIngressPortMappingOutputWithContext(context.Background())
}

func (i IngressPortMappingArgs) ToIngressPortMappingOutputWithContext(ctx context.Context) IngressPortMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressPortMappingOutput)
}

func (i IngressPortMappingArgs) ToOutput(ctx context.Context) pulumix.Output[IngressPortMapping] {
	return pulumix.Output[IngressPortMapping]{
		OutputState: i.ToIngressPortMappingOutputWithContext(ctx).OutputState,
	}
}

// IngressPortMappingArrayInput is an input type that accepts IngressPortMappingArray and IngressPortMappingArrayOutput values.
// You can construct a concrete instance of `IngressPortMappingArrayInput` via:
//
//	IngressPortMappingArray{ IngressPortMappingArgs{...} }
type IngressPortMappingArrayInput interface {
	pulumi.Input

	ToIngressPortMappingArrayOutput() IngressPortMappingArrayOutput
	ToIngressPortMappingArrayOutputWithContext(context.Context) IngressPortMappingArrayOutput
}

type IngressPortMappingArray []IngressPortMappingInput

func (IngressPortMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressPortMapping)(nil)).Elem()
}

func (i IngressPortMappingArray) ToIngressPortMappingArrayOutput() IngressPortMappingArrayOutput {
	return i.ToIngressPortMappingArrayOutputWithContext(context.Background())
}

func (i IngressPortMappingArray) ToIngressPortMappingArrayOutputWithContext(ctx context.Context) IngressPortMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressPortMappingArrayOutput)
}

func (i IngressPortMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]IngressPortMapping] {
	return pulumix.Output[[]IngressPortMapping]{
		OutputState: i.ToIngressPortMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Port mappings of container app ingress
type IngressPortMappingOutput struct{ *pulumi.OutputState }

func (IngressPortMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressPortMapping)(nil)).Elem()
}

func (o IngressPortMappingOutput) ToIngressPortMappingOutput() IngressPortMappingOutput {
	return o
}

func (o IngressPortMappingOutput) ToIngressPortMappingOutputWithContext(ctx context.Context) IngressPortMappingOutput {
	return o
}

func (o IngressPortMappingOutput) ToOutput(ctx context.Context) pulumix.Output[IngressPortMapping] {
	return pulumix.Output[IngressPortMapping]{
		OutputState: o.OutputState,
	}
}

// Specifies the exposed port for the target port. If not specified, it defaults to target port
func (o IngressPortMappingOutput) ExposedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressPortMapping) *int { return v.ExposedPort }).(pulumi.IntPtrOutput)
}

// Specifies whether the app port is accessible outside of the environment
func (o IngressPortMappingOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v IngressPortMapping) bool { return v.External }).(pulumi.BoolOutput)
}

// Specifies the port user's container listens on
func (o IngressPortMappingOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v IngressPortMapping) int { return v.TargetPort }).(pulumi.IntOutput)
}

type IngressPortMappingArrayOutput struct{ *pulumi.OutputState }

func (IngressPortMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressPortMapping)(nil)).Elem()
}

func (o IngressPortMappingArrayOutput) ToIngressPortMappingArrayOutput() IngressPortMappingArrayOutput {
	return o
}

func (o IngressPortMappingArrayOutput) ToIngressPortMappingArrayOutputWithContext(ctx context.Context) IngressPortMappingArrayOutput {
	return o
}

func (o IngressPortMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IngressPortMapping] {
	return pulumix.Output[[]IngressPortMapping]{
		OutputState: o.OutputState,
	}
}

func (o IngressPortMappingArrayOutput) Index(i pulumi.IntInput) IngressPortMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressPortMapping {
		return vs[0].([]IngressPortMapping)[vs[1].(int)]
	}).(IngressPortMappingOutput)
}

// Port mappings of container app ingress
type IngressPortMappingResponse struct {
	// Specifies the exposed port for the target port. If not specified, it defaults to target port
	ExposedPort *int `pulumi:"exposedPort"`
	// Specifies whether the app port is accessible outside of the environment
	External bool `pulumi:"external"`
	// Specifies the port user's container listens on
	TargetPort int `pulumi:"targetPort"`
}

// Port mappings of container app ingress
type IngressPortMappingResponseOutput struct{ *pulumi.OutputState }

func (IngressPortMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressPortMappingResponse)(nil)).Elem()
}

func (o IngressPortMappingResponseOutput) ToIngressPortMappingResponseOutput() IngressPortMappingResponseOutput {
	return o
}

func (o IngressPortMappingResponseOutput) ToIngressPortMappingResponseOutputWithContext(ctx context.Context) IngressPortMappingResponseOutput {
	return o
}

func (o IngressPortMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IngressPortMappingResponse] {
	return pulumix.Output[IngressPortMappingResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies the exposed port for the target port. If not specified, it defaults to target port
func (o IngressPortMappingResponseOutput) ExposedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressPortMappingResponse) *int { return v.ExposedPort }).(pulumi.IntPtrOutput)
}

// Specifies whether the app port is accessible outside of the environment
func (o IngressPortMappingResponseOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v IngressPortMappingResponse) bool { return v.External }).(pulumi.BoolOutput)
}

// Specifies the port user's container listens on
func (o IngressPortMappingResponseOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v IngressPortMappingResponse) int { return v.TargetPort }).(pulumi.IntOutput)
}

type IngressPortMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (IngressPortMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IngressPortMappingResponse)(nil)).Elem()
}

func (o IngressPortMappingResponseArrayOutput) ToIngressPortMappingResponseArrayOutput() IngressPortMappingResponseArrayOutput {
	return o
}

func (o IngressPortMappingResponseArrayOutput) ToIngressPortMappingResponseArrayOutputWithContext(ctx context.Context) IngressPortMappingResponseArrayOutput {
	return o
}

func (o IngressPortMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IngressPortMappingResponse] {
	return pulumix.Output[[]IngressPortMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o IngressPortMappingResponseArrayOutput) Index(i pulumi.IntInput) IngressPortMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IngressPortMappingResponse {
		return vs[0].([]IngressPortMappingResponse)[vs[1].(int)]
	}).(IngressPortMappingResponseOutput)
}

// Container App Ingress configuration.
type IngressResponse struct {
	// Settings to expose additional ports on container app
	AdditionalPortMappings []IngressPortMappingResponse `pulumi:"additionalPortMappings"`
	// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
	AllowInsecure *bool `pulumi:"allowInsecure"`
	// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
	ClientCertificateMode *string `pulumi:"clientCertificateMode"`
	// CORS policy for container app
	CorsPolicy *CorsPolicyResponse `pulumi:"corsPolicy"`
	// custom domain bindings for Container Apps' hostnames.
	CustomDomains []CustomDomainResponse `pulumi:"customDomains"`
	// Exposed Port in containers for TCP traffic from ingress
	ExposedPort *int `pulumi:"exposedPort"`
	// Bool indicating if app exposes an external http endpoint
	External *bool `pulumi:"external"`
	// Hostname.
	Fqdn string `pulumi:"fqdn"`
	// Rules to restrict incoming IP address.
	IpSecurityRestrictions []IpSecurityRestrictionRuleResponse `pulumi:"ipSecurityRestrictions"`
	// Sticky Sessions for Single Revision Mode
	StickySessions *IngressResponseStickySessions `pulumi:"stickySessions"`
	// Target Port in containers for traffic from ingress
	TargetPort *int `pulumi:"targetPort"`
	// Traffic weights for app's revisions
	Traffic []TrafficWeightResponse `pulumi:"traffic"`
	// Ingress transport protocol
	Transport *string `pulumi:"transport"`
}

// Defaults sets the appropriate defaults for IngressResponse
func (val *IngressResponse) Defaults() *IngressResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowInsecure == nil {
		allowInsecure_ := false
		tmp.AllowInsecure = &allowInsecure_
	}
	if tmp.External == nil {
		external_ := false
		tmp.External = &external_
	}
	if tmp.Transport == nil {
		transport_ := "auto"
		tmp.Transport = &transport_
	}
	return &tmp
}

// Container App Ingress configuration.
type IngressResponseOutput struct{ *pulumi.OutputState }

func (IngressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressResponse)(nil)).Elem()
}

func (o IngressResponseOutput) ToIngressResponseOutput() IngressResponseOutput {
	return o
}

func (o IngressResponseOutput) ToIngressResponseOutputWithContext(ctx context.Context) IngressResponseOutput {
	return o
}

func (o IngressResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IngressResponse] {
	return pulumix.Output[IngressResponse]{
		OutputState: o.OutputState,
	}
}

// Settings to expose additional ports on container app
func (o IngressResponseOutput) AdditionalPortMappings() IngressPortMappingResponseArrayOutput {
	return o.ApplyT(func(v IngressResponse) []IngressPortMappingResponse { return v.AdditionalPortMappings }).(IngressPortMappingResponseArrayOutput)
}

// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
func (o IngressResponseOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IngressResponse) *bool { return v.AllowInsecure }).(pulumi.BoolPtrOutput)
}

// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
func (o IngressResponseOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressResponse) *string { return v.ClientCertificateMode }).(pulumi.StringPtrOutput)
}

// CORS policy for container app
func (o IngressResponseOutput) CorsPolicy() CorsPolicyResponsePtrOutput {
	return o.ApplyT(func(v IngressResponse) *CorsPolicyResponse { return v.CorsPolicy }).(CorsPolicyResponsePtrOutput)
}

// custom domain bindings for Container Apps' hostnames.
func (o IngressResponseOutput) CustomDomains() CustomDomainResponseArrayOutput {
	return o.ApplyT(func(v IngressResponse) []CustomDomainResponse { return v.CustomDomains }).(CustomDomainResponseArrayOutput)
}

// Exposed Port in containers for TCP traffic from ingress
func (o IngressResponseOutput) ExposedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressResponse) *int { return v.ExposedPort }).(pulumi.IntPtrOutput)
}

// Bool indicating if app exposes an external http endpoint
func (o IngressResponseOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IngressResponse) *bool { return v.External }).(pulumi.BoolPtrOutput)
}

// Hostname.
func (o IngressResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v IngressResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Rules to restrict incoming IP address.
func (o IngressResponseOutput) IpSecurityRestrictions() IpSecurityRestrictionRuleResponseArrayOutput {
	return o.ApplyT(func(v IngressResponse) []IpSecurityRestrictionRuleResponse { return v.IpSecurityRestrictions }).(IpSecurityRestrictionRuleResponseArrayOutput)
}

// Sticky Sessions for Single Revision Mode
func (o IngressResponseOutput) StickySessions() IngressResponseStickySessionsPtrOutput {
	return o.ApplyT(func(v IngressResponse) *IngressResponseStickySessions { return v.StickySessions }).(IngressResponseStickySessionsPtrOutput)
}

// Target Port in containers for traffic from ingress
func (o IngressResponseOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IngressResponse) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

// Traffic weights for app's revisions
func (o IngressResponseOutput) Traffic() TrafficWeightResponseArrayOutput {
	return o.ApplyT(func(v IngressResponse) []TrafficWeightResponse { return v.Traffic }).(TrafficWeightResponseArrayOutput)
}

// Ingress transport protocol
func (o IngressResponseOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressResponse) *string { return v.Transport }).(pulumi.StringPtrOutput)
}

type IngressResponsePtrOutput struct{ *pulumi.OutputState }

func (IngressResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressResponse)(nil)).Elem()
}

func (o IngressResponsePtrOutput) ToIngressResponsePtrOutput() IngressResponsePtrOutput {
	return o
}

func (o IngressResponsePtrOutput) ToIngressResponsePtrOutputWithContext(ctx context.Context) IngressResponsePtrOutput {
	return o
}

func (o IngressResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IngressResponse] {
	return pulumix.Output[*IngressResponse]{
		OutputState: o.OutputState,
	}
}

func (o IngressResponsePtrOutput) Elem() IngressResponseOutput {
	return o.ApplyT(func(v *IngressResponse) IngressResponse {
		if v != nil {
			return *v
		}
		var ret IngressResponse
		return ret
	}).(IngressResponseOutput)
}

// Settings to expose additional ports on container app
func (o IngressResponsePtrOutput) AdditionalPortMappings() IngressPortMappingResponseArrayOutput {
	return o.ApplyT(func(v *IngressResponse) []IngressPortMappingResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalPortMappings
	}).(IngressPortMappingResponseArrayOutput)
}

// Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
func (o IngressResponsePtrOutput) AllowInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInsecure
	}).(pulumi.BoolPtrOutput)
}

// Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate.
func (o IngressResponsePtrOutput) ClientCertificateMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificateMode
	}).(pulumi.StringPtrOutput)
}

// CORS policy for container app
func (o IngressResponsePtrOutput) CorsPolicy() CorsPolicyResponsePtrOutput {
	return o.ApplyT(func(v *IngressResponse) *CorsPolicyResponse {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(CorsPolicyResponsePtrOutput)
}

// custom domain bindings for Container Apps' hostnames.
func (o IngressResponsePtrOutput) CustomDomains() CustomDomainResponseArrayOutput {
	return o.ApplyT(func(v *IngressResponse) []CustomDomainResponse {
		if v == nil {
			return nil
		}
		return v.CustomDomains
	}).(CustomDomainResponseArrayOutput)
}

// Exposed Port in containers for TCP traffic from ingress
func (o IngressResponsePtrOutput) ExposedPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *int {
		if v == nil {
			return nil
		}
		return v.ExposedPort
	}).(pulumi.IntPtrOutput)
}

// Bool indicating if app exposes an external http endpoint
func (o IngressResponsePtrOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *bool {
		if v == nil {
			return nil
		}
		return v.External
	}).(pulumi.BoolPtrOutput)
}

// Hostname.
func (o IngressResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// Rules to restrict incoming IP address.
func (o IngressResponsePtrOutput) IpSecurityRestrictions() IpSecurityRestrictionRuleResponseArrayOutput {
	return o.ApplyT(func(v *IngressResponse) []IpSecurityRestrictionRuleResponse {
		if v == nil {
			return nil
		}
		return v.IpSecurityRestrictions
	}).(IpSecurityRestrictionRuleResponseArrayOutput)
}

// Sticky Sessions for Single Revision Mode
func (o IngressResponsePtrOutput) StickySessions() IngressResponseStickySessionsPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *IngressResponseStickySessions {
		if v == nil {
			return nil
		}
		return v.StickySessions
	}).(IngressResponseStickySessionsPtrOutput)
}

// Target Port in containers for traffic from ingress
func (o IngressResponsePtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

// Traffic weights for app's revisions
func (o IngressResponsePtrOutput) Traffic() TrafficWeightResponseArrayOutput {
	return o.ApplyT(func(v *IngressResponse) []TrafficWeightResponse {
		if v == nil {
			return nil
		}
		return v.Traffic
	}).(TrafficWeightResponseArrayOutput)
}

// Ingress transport protocol
func (o IngressResponsePtrOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressResponse) *string {
		if v == nil {
			return nil
		}
		return v.Transport
	}).(pulumi.StringPtrOutput)
}

// Sticky Sessions for Single Revision Mode
type IngressResponseStickySessions struct {
	// Sticky Session Affinity
	Affinity *string `pulumi:"affinity"`
}

// Sticky Sessions for Single Revision Mode
type IngressResponseStickySessionsOutput struct{ *pulumi.OutputState }

func (IngressResponseStickySessionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressResponseStickySessions)(nil)).Elem()
}

func (o IngressResponseStickySessionsOutput) ToIngressResponseStickySessionsOutput() IngressResponseStickySessionsOutput {
	return o
}

func (o IngressResponseStickySessionsOutput) ToIngressResponseStickySessionsOutputWithContext(ctx context.Context) IngressResponseStickySessionsOutput {
	return o
}

func (o IngressResponseStickySessionsOutput) ToOutput(ctx context.Context) pulumix.Output[IngressResponseStickySessions] {
	return pulumix.Output[IngressResponseStickySessions]{
		OutputState: o.OutputState,
	}
}

// Sticky Session Affinity
func (o IngressResponseStickySessionsOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressResponseStickySessions) *string { return v.Affinity }).(pulumi.StringPtrOutput)
}

type IngressResponseStickySessionsPtrOutput struct{ *pulumi.OutputState }

func (IngressResponseStickySessionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressResponseStickySessions)(nil)).Elem()
}

func (o IngressResponseStickySessionsPtrOutput) ToIngressResponseStickySessionsPtrOutput() IngressResponseStickySessionsPtrOutput {
	return o
}

func (o IngressResponseStickySessionsPtrOutput) ToIngressResponseStickySessionsPtrOutputWithContext(ctx context.Context) IngressResponseStickySessionsPtrOutput {
	return o
}

func (o IngressResponseStickySessionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IngressResponseStickySessions] {
	return pulumix.Output[*IngressResponseStickySessions]{
		OutputState: o.OutputState,
	}
}

func (o IngressResponseStickySessionsPtrOutput) Elem() IngressResponseStickySessionsOutput {
	return o.ApplyT(func(v *IngressResponseStickySessions) IngressResponseStickySessions {
		if v != nil {
			return *v
		}
		var ret IngressResponseStickySessions
		return ret
	}).(IngressResponseStickySessionsOutput)
}

// Sticky Session Affinity
func (o IngressResponseStickySessionsPtrOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressResponseStickySessions) *string {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(pulumi.StringPtrOutput)
}

// Sticky Sessions for Single Revision Mode
type IngressStickySessions struct {
	// Sticky Session Affinity
	Affinity *string `pulumi:"affinity"`
}

// IngressStickySessionsInput is an input type that accepts IngressStickySessionsArgs and IngressStickySessionsOutput values.
// You can construct a concrete instance of `IngressStickySessionsInput` via:
//
//	IngressStickySessionsArgs{...}
type IngressStickySessionsInput interface {
	pulumi.Input

	ToIngressStickySessionsOutput() IngressStickySessionsOutput
	ToIngressStickySessionsOutputWithContext(context.Context) IngressStickySessionsOutput
}

// Sticky Sessions for Single Revision Mode
type IngressStickySessionsArgs struct {
	// Sticky Session Affinity
	Affinity pulumi.StringPtrInput `pulumi:"affinity"`
}

func (IngressStickySessionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressStickySessions)(nil)).Elem()
}

func (i IngressStickySessionsArgs) ToIngressStickySessionsOutput() IngressStickySessionsOutput {
	return i.ToIngressStickySessionsOutputWithContext(context.Background())
}

func (i IngressStickySessionsArgs) ToIngressStickySessionsOutputWithContext(ctx context.Context) IngressStickySessionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStickySessionsOutput)
}

func (i IngressStickySessionsArgs) ToOutput(ctx context.Context) pulumix.Output[IngressStickySessions] {
	return pulumix.Output[IngressStickySessions]{
		OutputState: i.ToIngressStickySessionsOutputWithContext(ctx).OutputState,
	}
}

func (i IngressStickySessionsArgs) ToIngressStickySessionsPtrOutput() IngressStickySessionsPtrOutput {
	return i.ToIngressStickySessionsPtrOutputWithContext(context.Background())
}

func (i IngressStickySessionsArgs) ToIngressStickySessionsPtrOutputWithContext(ctx context.Context) IngressStickySessionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStickySessionsOutput).ToIngressStickySessionsPtrOutputWithContext(ctx)
}

// IngressStickySessionsPtrInput is an input type that accepts IngressStickySessionsArgs, IngressStickySessionsPtr and IngressStickySessionsPtrOutput values.
// You can construct a concrete instance of `IngressStickySessionsPtrInput` via:
//
//	        IngressStickySessionsArgs{...}
//
//	or:
//
//	        nil
type IngressStickySessionsPtrInput interface {
	pulumi.Input

	ToIngressStickySessionsPtrOutput() IngressStickySessionsPtrOutput
	ToIngressStickySessionsPtrOutputWithContext(context.Context) IngressStickySessionsPtrOutput
}

type ingressStickySessionsPtrType IngressStickySessionsArgs

func IngressStickySessionsPtr(v *IngressStickySessionsArgs) IngressStickySessionsPtrInput {
	return (*ingressStickySessionsPtrType)(v)
}

func (*ingressStickySessionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressStickySessions)(nil)).Elem()
}

func (i *ingressStickySessionsPtrType) ToIngressStickySessionsPtrOutput() IngressStickySessionsPtrOutput {
	return i.ToIngressStickySessionsPtrOutputWithContext(context.Background())
}

func (i *ingressStickySessionsPtrType) ToIngressStickySessionsPtrOutputWithContext(ctx context.Context) IngressStickySessionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressStickySessionsPtrOutput)
}

func (i *ingressStickySessionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*IngressStickySessions] {
	return pulumix.Output[*IngressStickySessions]{
		OutputState: i.ToIngressStickySessionsPtrOutputWithContext(ctx).OutputState,
	}
}

// Sticky Sessions for Single Revision Mode
type IngressStickySessionsOutput struct{ *pulumi.OutputState }

func (IngressStickySessionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngressStickySessions)(nil)).Elem()
}

func (o IngressStickySessionsOutput) ToIngressStickySessionsOutput() IngressStickySessionsOutput {
	return o
}

func (o IngressStickySessionsOutput) ToIngressStickySessionsOutputWithContext(ctx context.Context) IngressStickySessionsOutput {
	return o
}

func (o IngressStickySessionsOutput) ToIngressStickySessionsPtrOutput() IngressStickySessionsPtrOutput {
	return o.ToIngressStickySessionsPtrOutputWithContext(context.Background())
}

func (o IngressStickySessionsOutput) ToIngressStickySessionsPtrOutputWithContext(ctx context.Context) IngressStickySessionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngressStickySessions) *IngressStickySessions {
		return &v
	}).(IngressStickySessionsPtrOutput)
}

func (o IngressStickySessionsOutput) ToOutput(ctx context.Context) pulumix.Output[IngressStickySessions] {
	return pulumix.Output[IngressStickySessions]{
		OutputState: o.OutputState,
	}
}

// Sticky Session Affinity
func (o IngressStickySessionsOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IngressStickySessions) *string { return v.Affinity }).(pulumi.StringPtrOutput)
}

type IngressStickySessionsPtrOutput struct{ *pulumi.OutputState }

func (IngressStickySessionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressStickySessions)(nil)).Elem()
}

func (o IngressStickySessionsPtrOutput) ToIngressStickySessionsPtrOutput() IngressStickySessionsPtrOutput {
	return o
}

func (o IngressStickySessionsPtrOutput) ToIngressStickySessionsPtrOutputWithContext(ctx context.Context) IngressStickySessionsPtrOutput {
	return o
}

func (o IngressStickySessionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IngressStickySessions] {
	return pulumix.Output[*IngressStickySessions]{
		OutputState: o.OutputState,
	}
}

func (o IngressStickySessionsPtrOutput) Elem() IngressStickySessionsOutput {
	return o.ApplyT(func(v *IngressStickySessions) IngressStickySessions {
		if v != nil {
			return *v
		}
		var ret IngressStickySessions
		return ret
	}).(IngressStickySessionsOutput)
}

// Sticky Session Affinity
func (o IngressStickySessionsPtrOutput) Affinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IngressStickySessions) *string {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(pulumi.StringPtrOutput)
}

// Container App init container definition
type InitContainer struct {
	// Container start command arguments.
	Args []string `pulumi:"args"`
	// Container start command.
	Command []string `pulumi:"command"`
	// Container environment variables.
	Env []EnvironmentVar `pulumi:"env"`
	// Container image tag.
	Image *string `pulumi:"image"`
	// Custom container name.
	Name *string `pulumi:"name"`
	// Container resource requirements.
	Resources *ContainerResources `pulumi:"resources"`
	// Container volume mounts.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
}

// InitContainerInput is an input type that accepts InitContainerArgs and InitContainerOutput values.
// You can construct a concrete instance of `InitContainerInput` via:
//
//	InitContainerArgs{...}
type InitContainerInput interface {
	pulumi.Input

	ToInitContainerOutput() InitContainerOutput
	ToInitContainerOutputWithContext(context.Context) InitContainerOutput
}

// Container App init container definition
type InitContainerArgs struct {
	// Container start command arguments.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Container start command.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Container environment variables.
	Env EnvironmentVarArrayInput `pulumi:"env"`
	// Container image tag.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Custom container name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Container resource requirements.
	Resources ContainerResourcesPtrInput `pulumi:"resources"`
	// Container volume mounts.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (InitContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainer)(nil)).Elem()
}

func (i InitContainerArgs) ToInitContainerOutput() InitContainerOutput {
	return i.ToInitContainerOutputWithContext(context.Background())
}

func (i InitContainerArgs) ToInitContainerOutputWithContext(ctx context.Context) InitContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitContainerOutput)
}

func (i InitContainerArgs) ToOutput(ctx context.Context) pulumix.Output[InitContainer] {
	return pulumix.Output[InitContainer]{
		OutputState: i.ToInitContainerOutputWithContext(ctx).OutputState,
	}
}

// InitContainerArrayInput is an input type that accepts InitContainerArray and InitContainerArrayOutput values.
// You can construct a concrete instance of `InitContainerArrayInput` via:
//
//	InitContainerArray{ InitContainerArgs{...} }
type InitContainerArrayInput interface {
	pulumi.Input

	ToInitContainerArrayOutput() InitContainerArrayOutput
	ToInitContainerArrayOutputWithContext(context.Context) InitContainerArrayOutput
}

type InitContainerArray []InitContainerInput

func (InitContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitContainer)(nil)).Elem()
}

func (i InitContainerArray) ToInitContainerArrayOutput() InitContainerArrayOutput {
	return i.ToInitContainerArrayOutputWithContext(context.Background())
}

func (i InitContainerArray) ToInitContainerArrayOutputWithContext(ctx context.Context) InitContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitContainerArrayOutput)
}

func (i InitContainerArray) ToOutput(ctx context.Context) pulumix.Output[[]InitContainer] {
	return pulumix.Output[[]InitContainer]{
		OutputState: i.ToInitContainerArrayOutputWithContext(ctx).OutputState,
	}
}

// Container App init container definition
type InitContainerOutput struct{ *pulumi.OutputState }

func (InitContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainer)(nil)).Elem()
}

func (o InitContainerOutput) ToInitContainerOutput() InitContainerOutput {
	return o
}

func (o InitContainerOutput) ToInitContainerOutputWithContext(ctx context.Context) InitContainerOutput {
	return o
}

func (o InitContainerOutput) ToOutput(ctx context.Context) pulumix.Output[InitContainer] {
	return pulumix.Output[InitContainer]{
		OutputState: o.OutputState,
	}
}

// Container start command arguments.
func (o InitContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitContainer) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Container start command.
func (o InitContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitContainer) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container environment variables.
func (o InitContainerOutput) Env() EnvironmentVarArrayOutput {
	return o.ApplyT(func(v InitContainer) []EnvironmentVar { return v.Env }).(EnvironmentVarArrayOutput)
}

// Container image tag.
func (o InitContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InitContainer) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Custom container name.
func (o InitContainerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InitContainer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Container resource requirements.
func (o InitContainerOutput) Resources() ContainerResourcesPtrOutput {
	return o.ApplyT(func(v InitContainer) *ContainerResources { return v.Resources }).(ContainerResourcesPtrOutput)
}

// Container volume mounts.
func (o InitContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v InitContainer) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

type InitContainerArrayOutput struct{ *pulumi.OutputState }

func (InitContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitContainer)(nil)).Elem()
}

func (o InitContainerArrayOutput) ToInitContainerArrayOutput() InitContainerArrayOutput {
	return o
}

func (o InitContainerArrayOutput) ToInitContainerArrayOutputWithContext(ctx context.Context) InitContainerArrayOutput {
	return o
}

func (o InitContainerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InitContainer] {
	return pulumix.Output[[]InitContainer]{
		OutputState: o.OutputState,
	}
}

func (o InitContainerArrayOutput) Index(i pulumi.IntInput) InitContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InitContainer {
		return vs[0].([]InitContainer)[vs[1].(int)]
	}).(InitContainerOutput)
}

// Container App init container definition
type InitContainerResponse struct {
	// Container start command arguments.
	Args []string `pulumi:"args"`
	// Container start command.
	Command []string `pulumi:"command"`
	// Container environment variables.
	Env []EnvironmentVarResponse `pulumi:"env"`
	// Container image tag.
	Image *string `pulumi:"image"`
	// Custom container name.
	Name *string `pulumi:"name"`
	// Container resource requirements.
	Resources *ContainerResourcesResponse `pulumi:"resources"`
	// Container volume mounts.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
}

// Container App init container definition
type InitContainerResponseOutput struct{ *pulumi.OutputState }

func (InitContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainerResponse)(nil)).Elem()
}

func (o InitContainerResponseOutput) ToInitContainerResponseOutput() InitContainerResponseOutput {
	return o
}

func (o InitContainerResponseOutput) ToInitContainerResponseOutputWithContext(ctx context.Context) InitContainerResponseOutput {
	return o
}

func (o InitContainerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InitContainerResponse] {
	return pulumix.Output[InitContainerResponse]{
		OutputState: o.OutputState,
	}
}

// Container start command arguments.
func (o InitContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Container start command.
func (o InitContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Container environment variables.
func (o InitContainerResponseOutput) Env() EnvironmentVarResponseArrayOutput {
	return o.ApplyT(func(v InitContainerResponse) []EnvironmentVarResponse { return v.Env }).(EnvironmentVarResponseArrayOutput)
}

// Container image tag.
func (o InitContainerResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InitContainerResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Custom container name.
func (o InitContainerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InitContainerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Container resource requirements.
func (o InitContainerResponseOutput) Resources() ContainerResourcesResponsePtrOutput {
	return o.ApplyT(func(v InitContainerResponse) *ContainerResourcesResponse { return v.Resources }).(ContainerResourcesResponsePtrOutput)
}

// Container volume mounts.
func (o InitContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v InitContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

type InitContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (InitContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitContainerResponse)(nil)).Elem()
}

func (o InitContainerResponseArrayOutput) ToInitContainerResponseArrayOutput() InitContainerResponseArrayOutput {
	return o
}

func (o InitContainerResponseArrayOutput) ToInitContainerResponseArrayOutputWithContext(ctx context.Context) InitContainerResponseArrayOutput {
	return o
}

func (o InitContainerResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InitContainerResponse] {
	return pulumix.Output[[]InitContainerResponse]{
		OutputState: o.OutputState,
	}
}

func (o InitContainerResponseArrayOutput) Index(i pulumi.IntInput) InitContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InitContainerResponse {
		return vs[0].([]InitContainerResponse)[vs[1].(int)]
	}).(InitContainerResponseOutput)
}

// Rule to restrict incoming IP address.
type IpSecurityRestrictionRule struct {
	// Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
	Action string `pulumi:"action"`
	// Describe the IP restriction rule that is being sent to the container-app. This is an optional field.
	Description *string `pulumi:"description"`
	// CIDR notation to match incoming IP address
	IpAddressRange string `pulumi:"ipAddressRange"`
	// Name for the IP restriction rule.
	Name string `pulumi:"name"`
}

// IpSecurityRestrictionRuleInput is an input type that accepts IpSecurityRestrictionRuleArgs and IpSecurityRestrictionRuleOutput values.
// You can construct a concrete instance of `IpSecurityRestrictionRuleInput` via:
//
//	IpSecurityRestrictionRuleArgs{...}
type IpSecurityRestrictionRuleInput interface {
	pulumi.Input

	ToIpSecurityRestrictionRuleOutput() IpSecurityRestrictionRuleOutput
	ToIpSecurityRestrictionRuleOutputWithContext(context.Context) IpSecurityRestrictionRuleOutput
}

// Rule to restrict incoming IP address.
type IpSecurityRestrictionRuleArgs struct {
	// Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
	Action pulumi.StringInput `pulumi:"action"`
	// Describe the IP restriction rule that is being sent to the container-app. This is an optional field.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// CIDR notation to match incoming IP address
	IpAddressRange pulumi.StringInput `pulumi:"ipAddressRange"`
	// Name for the IP restriction rule.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IpSecurityRestrictionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpSecurityRestrictionRule)(nil)).Elem()
}

func (i IpSecurityRestrictionRuleArgs) ToIpSecurityRestrictionRuleOutput() IpSecurityRestrictionRuleOutput {
	return i.ToIpSecurityRestrictionRuleOutputWithContext(context.Background())
}

func (i IpSecurityRestrictionRuleArgs) ToIpSecurityRestrictionRuleOutputWithContext(ctx context.Context) IpSecurityRestrictionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSecurityRestrictionRuleOutput)
}

func (i IpSecurityRestrictionRuleArgs) ToOutput(ctx context.Context) pulumix.Output[IpSecurityRestrictionRule] {
	return pulumix.Output[IpSecurityRestrictionRule]{
		OutputState: i.ToIpSecurityRestrictionRuleOutputWithContext(ctx).OutputState,
	}
}

// IpSecurityRestrictionRuleArrayInput is an input type that accepts IpSecurityRestrictionRuleArray and IpSecurityRestrictionRuleArrayOutput values.
// You can construct a concrete instance of `IpSecurityRestrictionRuleArrayInput` via:
//
//	IpSecurityRestrictionRuleArray{ IpSecurityRestrictionRuleArgs{...} }
type IpSecurityRestrictionRuleArrayInput interface {
	pulumi.Input

	ToIpSecurityRestrictionRuleArrayOutput() IpSecurityRestrictionRuleArrayOutput
	ToIpSecurityRestrictionRuleArrayOutputWithContext(context.Context) IpSecurityRestrictionRuleArrayOutput
}

type IpSecurityRestrictionRuleArray []IpSecurityRestrictionRuleInput

func (IpSecurityRestrictionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpSecurityRestrictionRule)(nil)).Elem()
}

func (i IpSecurityRestrictionRuleArray) ToIpSecurityRestrictionRuleArrayOutput() IpSecurityRestrictionRuleArrayOutput {
	return i.ToIpSecurityRestrictionRuleArrayOutputWithContext(context.Background())
}

func (i IpSecurityRestrictionRuleArray) ToIpSecurityRestrictionRuleArrayOutputWithContext(ctx context.Context) IpSecurityRestrictionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSecurityRestrictionRuleArrayOutput)
}

func (i IpSecurityRestrictionRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]IpSecurityRestrictionRule] {
	return pulumix.Output[[]IpSecurityRestrictionRule]{
		OutputState: i.ToIpSecurityRestrictionRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Rule to restrict incoming IP address.
type IpSecurityRestrictionRuleOutput struct{ *pulumi.OutputState }

func (IpSecurityRestrictionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpSecurityRestrictionRule)(nil)).Elem()
}

func (o IpSecurityRestrictionRuleOutput) ToIpSecurityRestrictionRuleOutput() IpSecurityRestrictionRuleOutput {
	return o
}

func (o IpSecurityRestrictionRuleOutput) ToIpSecurityRestrictionRuleOutputWithContext(ctx context.Context) IpSecurityRestrictionRuleOutput {
	return o
}

func (o IpSecurityRestrictionRuleOutput) ToOutput(ctx context.Context) pulumix.Output[IpSecurityRestrictionRule] {
	return pulumix.Output[IpSecurityRestrictionRule]{
		OutputState: o.OutputState,
	}
}

// Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
func (o IpSecurityRestrictionRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRule) string { return v.Action }).(pulumi.StringOutput)
}

// Describe the IP restriction rule that is being sent to the container-app. This is an optional field.
func (o IpSecurityRestrictionRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// CIDR notation to match incoming IP address
func (o IpSecurityRestrictionRuleOutput) IpAddressRange() pulumi.StringOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRule) string { return v.IpAddressRange }).(pulumi.StringOutput)
}

// Name for the IP restriction rule.
func (o IpSecurityRestrictionRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRule) string { return v.Name }).(pulumi.StringOutput)
}

type IpSecurityRestrictionRuleArrayOutput struct{ *pulumi.OutputState }

func (IpSecurityRestrictionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpSecurityRestrictionRule)(nil)).Elem()
}

func (o IpSecurityRestrictionRuleArrayOutput) ToIpSecurityRestrictionRuleArrayOutput() IpSecurityRestrictionRuleArrayOutput {
	return o
}

func (o IpSecurityRestrictionRuleArrayOutput) ToIpSecurityRestrictionRuleArrayOutputWithContext(ctx context.Context) IpSecurityRestrictionRuleArrayOutput {
	return o
}

func (o IpSecurityRestrictionRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IpSecurityRestrictionRule] {
	return pulumix.Output[[]IpSecurityRestrictionRule]{
		OutputState: o.OutputState,
	}
}

func (o IpSecurityRestrictionRuleArrayOutput) Index(i pulumi.IntInput) IpSecurityRestrictionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpSecurityRestrictionRule {
		return vs[0].([]IpSecurityRestrictionRule)[vs[1].(int)]
	}).(IpSecurityRestrictionRuleOutput)
}

// Rule to restrict incoming IP address.
type IpSecurityRestrictionRuleResponse struct {
	// Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
	Action string `pulumi:"action"`
	// Describe the IP restriction rule that is being sent to the container-app. This is an optional field.
	Description *string `pulumi:"description"`
	// CIDR notation to match incoming IP address
	IpAddressRange string `pulumi:"ipAddressRange"`
	// Name for the IP restriction rule.
	Name string `pulumi:"name"`
}

// Rule to restrict incoming IP address.
type IpSecurityRestrictionRuleResponseOutput struct{ *pulumi.OutputState }

func (IpSecurityRestrictionRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpSecurityRestrictionRuleResponse)(nil)).Elem()
}

func (o IpSecurityRestrictionRuleResponseOutput) ToIpSecurityRestrictionRuleResponseOutput() IpSecurityRestrictionRuleResponseOutput {
	return o
}

func (o IpSecurityRestrictionRuleResponseOutput) ToIpSecurityRestrictionRuleResponseOutputWithContext(ctx context.Context) IpSecurityRestrictionRuleResponseOutput {
	return o
}

func (o IpSecurityRestrictionRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IpSecurityRestrictionRuleResponse] {
	return pulumix.Output[IpSecurityRestrictionRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny
func (o IpSecurityRestrictionRuleResponseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRuleResponse) string { return v.Action }).(pulumi.StringOutput)
}

// Describe the IP restriction rule that is being sent to the container-app. This is an optional field.
func (o IpSecurityRestrictionRuleResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRuleResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// CIDR notation to match incoming IP address
func (o IpSecurityRestrictionRuleResponseOutput) IpAddressRange() pulumi.StringOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRuleResponse) string { return v.IpAddressRange }).(pulumi.StringOutput)
}

// Name for the IP restriction rule.
func (o IpSecurityRestrictionRuleResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IpSecurityRestrictionRuleResponse) string { return v.Name }).(pulumi.StringOutput)
}

type IpSecurityRestrictionRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (IpSecurityRestrictionRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpSecurityRestrictionRuleResponse)(nil)).Elem()
}

func (o IpSecurityRestrictionRuleResponseArrayOutput) ToIpSecurityRestrictionRuleResponseArrayOutput() IpSecurityRestrictionRuleResponseArrayOutput {
	return o
}

func (o IpSecurityRestrictionRuleResponseArrayOutput) ToIpSecurityRestrictionRuleResponseArrayOutputWithContext(ctx context.Context) IpSecurityRestrictionRuleResponseArrayOutput {
	return o
}

func (o IpSecurityRestrictionRuleResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IpSecurityRestrictionRuleResponse] {
	return pulumix.Output[[]IpSecurityRestrictionRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o IpSecurityRestrictionRuleResponseArrayOutput) Index(i pulumi.IntInput) IpSecurityRestrictionRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpSecurityRestrictionRuleResponse {
		return vs[0].([]IpSecurityRestrictionRuleResponse)[vs[1].(int)]
	}).(IpSecurityRestrictionRuleResponseOutput)
}

// Non versioned Container Apps Job configuration properties
type JobConfiguration struct {
	// Trigger configuration of an event driven job.
	EventTriggerConfig *JobConfigurationEventTriggerConfig `pulumi:"eventTriggerConfig"`
	// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
	ManualTriggerConfig *JobConfigurationManualTriggerConfig `pulumi:"manualTriggerConfig"`
	// Collection of private container registry credentials used by a Container apps job
	Registries []RegistryCredentials `pulumi:"registries"`
	// Maximum number of retries before failing the job.
	ReplicaRetryLimit *int `pulumi:"replicaRetryLimit"`
	// Maximum number of seconds a replica is allowed to run.
	ReplicaTimeout int `pulumi:"replicaTimeout"`
	// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
	ScheduleTriggerConfig *JobConfigurationScheduleTriggerConfig `pulumi:"scheduleTriggerConfig"`
	// Collection of secrets used by a Container Apps Job
	Secrets []Secret `pulumi:"secrets"`
	// Trigger type of the job
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for JobConfiguration
func (val *JobConfiguration) Defaults() *JobConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EventTriggerConfig = tmp.EventTriggerConfig.Defaults()

	if utilities.IsZero(tmp.TriggerType) {
		tmp.TriggerType = "Manual"
	}
	return &tmp
}

// JobConfigurationInput is an input type that accepts JobConfigurationArgs and JobConfigurationOutput values.
// You can construct a concrete instance of `JobConfigurationInput` via:
//
//	JobConfigurationArgs{...}
type JobConfigurationInput interface {
	pulumi.Input

	ToJobConfigurationOutput() JobConfigurationOutput
	ToJobConfigurationOutputWithContext(context.Context) JobConfigurationOutput
}

// Non versioned Container Apps Job configuration properties
type JobConfigurationArgs struct {
	// Trigger configuration of an event driven job.
	EventTriggerConfig JobConfigurationEventTriggerConfigPtrInput `pulumi:"eventTriggerConfig"`
	// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
	ManualTriggerConfig JobConfigurationManualTriggerConfigPtrInput `pulumi:"manualTriggerConfig"`
	// Collection of private container registry credentials used by a Container apps job
	Registries RegistryCredentialsArrayInput `pulumi:"registries"`
	// Maximum number of retries before failing the job.
	ReplicaRetryLimit pulumi.IntPtrInput `pulumi:"replicaRetryLimit"`
	// Maximum number of seconds a replica is allowed to run.
	ReplicaTimeout pulumi.IntInput `pulumi:"replicaTimeout"`
	// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
	ScheduleTriggerConfig JobConfigurationScheduleTriggerConfigPtrInput `pulumi:"scheduleTriggerConfig"`
	// Collection of secrets used by a Container Apps Job
	Secrets SecretArrayInput `pulumi:"secrets"`
	// Trigger type of the job
	TriggerType pulumi.StringInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for JobConfigurationArgs
func (val *JobConfigurationArgs) Defaults() *JobConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.TriggerType == nil {
		tmp.TriggerType = pulumi.String("Manual")
	}
	return &tmp
}
func (JobConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (i JobConfigurationArgs) ToJobConfigurationOutput() JobConfigurationOutput {
	return i.ToJobConfigurationOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput)
}

func (i JobConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[JobConfiguration] {
	return pulumix.Output[JobConfiguration]{
		OutputState: i.ToJobConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i JobConfigurationArgs) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return i.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput).ToJobConfigurationPtrOutputWithContext(ctx)
}

// JobConfigurationPtrInput is an input type that accepts JobConfigurationArgs, JobConfigurationPtr and JobConfigurationPtrOutput values.
// You can construct a concrete instance of `JobConfigurationPtrInput` via:
//
//	        JobConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationPtrInput interface {
	pulumi.Input

	ToJobConfigurationPtrOutput() JobConfigurationPtrOutput
	ToJobConfigurationPtrOutputWithContext(context.Context) JobConfigurationPtrOutput
}

type jobConfigurationPtrType JobConfigurationArgs

func JobConfigurationPtr(v *JobConfigurationArgs) JobConfigurationPtrInput {
	return (*jobConfigurationPtrType)(v)
}

func (*jobConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfiguration)(nil)).Elem()
}

func (i *jobConfigurationPtrType) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return i.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationPtrType) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationPtrOutput)
}

func (i *jobConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobConfiguration] {
	return pulumix.Output[*JobConfiguration]{
		OutputState: i.ToJobConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Non versioned Container Apps Job configuration properties
type JobConfigurationOutput struct{ *pulumi.OutputState }

func (JobConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationOutput) ToJobConfigurationOutput() JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return o.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (o JobConfigurationOutput) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfiguration) *JobConfiguration {
		return &v
	}).(JobConfigurationPtrOutput)
}

func (o JobConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfiguration] {
	return pulumix.Output[JobConfiguration]{
		OutputState: o.OutputState,
	}
}

// Trigger configuration of an event driven job.
func (o JobConfigurationOutput) EventTriggerConfig() JobConfigurationEventTriggerConfigPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationEventTriggerConfig { return v.EventTriggerConfig }).(JobConfigurationEventTriggerConfigPtrOutput)
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
func (o JobConfigurationOutput) ManualTriggerConfig() JobConfigurationManualTriggerConfigPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationManualTriggerConfig { return v.ManualTriggerConfig }).(JobConfigurationManualTriggerConfigPtrOutput)
}

// Collection of private container registry credentials used by a Container apps job
func (o JobConfigurationOutput) Registries() RegistryCredentialsArrayOutput {
	return o.ApplyT(func(v JobConfiguration) []RegistryCredentials { return v.Registries }).(RegistryCredentialsArrayOutput)
}

// Maximum number of retries before failing the job.
func (o JobConfigurationOutput) ReplicaRetryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *int { return v.ReplicaRetryLimit }).(pulumi.IntPtrOutput)
}

// Maximum number of seconds a replica is allowed to run.
func (o JobConfigurationOutput) ReplicaTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfiguration) int { return v.ReplicaTimeout }).(pulumi.IntOutput)
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
func (o JobConfigurationOutput) ScheduleTriggerConfig() JobConfigurationScheduleTriggerConfigPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationScheduleTriggerConfig { return v.ScheduleTriggerConfig }).(JobConfigurationScheduleTriggerConfigPtrOutput)
}

// Collection of secrets used by a Container Apps Job
func (o JobConfigurationOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v JobConfiguration) []Secret { return v.Secrets }).(SecretArrayOutput)
}

// Trigger type of the job
func (o JobConfigurationOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfiguration) string { return v.TriggerType }).(pulumi.StringOutput)
}

type JobConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationPtrOutput) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return o
}

func (o JobConfigurationPtrOutput) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return o
}

func (o JobConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfiguration] {
	return pulumix.Output[*JobConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationPtrOutput) Elem() JobConfigurationOutput {
	return o.ApplyT(func(v *JobConfiguration) JobConfiguration {
		if v != nil {
			return *v
		}
		var ret JobConfiguration
		return ret
	}).(JobConfigurationOutput)
}

// Trigger configuration of an event driven job.
func (o JobConfigurationPtrOutput) EventTriggerConfig() JobConfigurationEventTriggerConfigPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationEventTriggerConfig {
		if v == nil {
			return nil
		}
		return v.EventTriggerConfig
	}).(JobConfigurationEventTriggerConfigPtrOutput)
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
func (o JobConfigurationPtrOutput) ManualTriggerConfig() JobConfigurationManualTriggerConfigPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationManualTriggerConfig {
		if v == nil {
			return nil
		}
		return v.ManualTriggerConfig
	}).(JobConfigurationManualTriggerConfigPtrOutput)
}

// Collection of private container registry credentials used by a Container apps job
func (o JobConfigurationPtrOutput) Registries() RegistryCredentialsArrayOutput {
	return o.ApplyT(func(v *JobConfiguration) []RegistryCredentials {
		if v == nil {
			return nil
		}
		return v.Registries
	}).(RegistryCredentialsArrayOutput)
}

// Maximum number of retries before failing the job.
func (o JobConfigurationPtrOutput) ReplicaRetryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaRetryLimit
	}).(pulumi.IntPtrOutput)
}

// Maximum number of seconds a replica is allowed to run.
func (o JobConfigurationPtrOutput) ReplicaTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *int {
		if v == nil {
			return nil
		}
		return &v.ReplicaTimeout
	}).(pulumi.IntPtrOutput)
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
func (o JobConfigurationPtrOutput) ScheduleTriggerConfig() JobConfigurationScheduleTriggerConfigPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationScheduleTriggerConfig {
		if v == nil {
			return nil
		}
		return v.ScheduleTriggerConfig
	}).(JobConfigurationScheduleTriggerConfigPtrOutput)
}

// Collection of secrets used by a Container Apps Job
func (o JobConfigurationPtrOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v *JobConfiguration) []Secret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretArrayOutput)
}

// Trigger type of the job
func (o JobConfigurationPtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

// Trigger configuration of an event driven job.
type JobConfigurationEventTriggerConfig struct {
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *int `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *int `pulumi:"replicaCompletionCount"`
	// Scaling configurations for event driven jobs.
	Scale *JobScale `pulumi:"scale"`
}

// Defaults sets the appropriate defaults for JobConfigurationEventTriggerConfig
func (val *JobConfigurationEventTriggerConfig) Defaults() *JobConfigurationEventTriggerConfig {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Scale = tmp.Scale.Defaults()

	return &tmp
}

// JobConfigurationEventTriggerConfigInput is an input type that accepts JobConfigurationEventTriggerConfigArgs and JobConfigurationEventTriggerConfigOutput values.
// You can construct a concrete instance of `JobConfigurationEventTriggerConfigInput` via:
//
//	JobConfigurationEventTriggerConfigArgs{...}
type JobConfigurationEventTriggerConfigInput interface {
	pulumi.Input

	ToJobConfigurationEventTriggerConfigOutput() JobConfigurationEventTriggerConfigOutput
	ToJobConfigurationEventTriggerConfigOutputWithContext(context.Context) JobConfigurationEventTriggerConfigOutput
}

// Trigger configuration of an event driven job.
type JobConfigurationEventTriggerConfigArgs struct {
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount pulumi.IntPtrInput `pulumi:"replicaCompletionCount"`
	// Scaling configurations for event driven jobs.
	Scale JobScalePtrInput `pulumi:"scale"`
}

// Defaults sets the appropriate defaults for JobConfigurationEventTriggerConfigArgs
func (val *JobConfigurationEventTriggerConfigArgs) Defaults() *JobConfigurationEventTriggerConfigArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (JobConfigurationEventTriggerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationEventTriggerConfig)(nil)).Elem()
}

func (i JobConfigurationEventTriggerConfigArgs) ToJobConfigurationEventTriggerConfigOutput() JobConfigurationEventTriggerConfigOutput {
	return i.ToJobConfigurationEventTriggerConfigOutputWithContext(context.Background())
}

func (i JobConfigurationEventTriggerConfigArgs) ToJobConfigurationEventTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationEventTriggerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationEventTriggerConfigOutput)
}

func (i JobConfigurationEventTriggerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationEventTriggerConfig] {
	return pulumix.Output[JobConfigurationEventTriggerConfig]{
		OutputState: i.ToJobConfigurationEventTriggerConfigOutputWithContext(ctx).OutputState,
	}
}

func (i JobConfigurationEventTriggerConfigArgs) ToJobConfigurationEventTriggerConfigPtrOutput() JobConfigurationEventTriggerConfigPtrOutput {
	return i.ToJobConfigurationEventTriggerConfigPtrOutputWithContext(context.Background())
}

func (i JobConfigurationEventTriggerConfigArgs) ToJobConfigurationEventTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationEventTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationEventTriggerConfigOutput).ToJobConfigurationEventTriggerConfigPtrOutputWithContext(ctx)
}

// JobConfigurationEventTriggerConfigPtrInput is an input type that accepts JobConfigurationEventTriggerConfigArgs, JobConfigurationEventTriggerConfigPtr and JobConfigurationEventTriggerConfigPtrOutput values.
// You can construct a concrete instance of `JobConfigurationEventTriggerConfigPtrInput` via:
//
//	        JobConfigurationEventTriggerConfigArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationEventTriggerConfigPtrInput interface {
	pulumi.Input

	ToJobConfigurationEventTriggerConfigPtrOutput() JobConfigurationEventTriggerConfigPtrOutput
	ToJobConfigurationEventTriggerConfigPtrOutputWithContext(context.Context) JobConfigurationEventTriggerConfigPtrOutput
}

type jobConfigurationEventTriggerConfigPtrType JobConfigurationEventTriggerConfigArgs

func JobConfigurationEventTriggerConfigPtr(v *JobConfigurationEventTriggerConfigArgs) JobConfigurationEventTriggerConfigPtrInput {
	return (*jobConfigurationEventTriggerConfigPtrType)(v)
}

func (*jobConfigurationEventTriggerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationEventTriggerConfig)(nil)).Elem()
}

func (i *jobConfigurationEventTriggerConfigPtrType) ToJobConfigurationEventTriggerConfigPtrOutput() JobConfigurationEventTriggerConfigPtrOutput {
	return i.ToJobConfigurationEventTriggerConfigPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationEventTriggerConfigPtrType) ToJobConfigurationEventTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationEventTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationEventTriggerConfigPtrOutput)
}

func (i *jobConfigurationEventTriggerConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationEventTriggerConfig] {
	return pulumix.Output[*JobConfigurationEventTriggerConfig]{
		OutputState: i.ToJobConfigurationEventTriggerConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Trigger configuration of an event driven job.
type JobConfigurationEventTriggerConfigOutput struct{ *pulumi.OutputState }

func (JobConfigurationEventTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationEventTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationEventTriggerConfigOutput) ToJobConfigurationEventTriggerConfigOutput() JobConfigurationEventTriggerConfigOutput {
	return o
}

func (o JobConfigurationEventTriggerConfigOutput) ToJobConfigurationEventTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationEventTriggerConfigOutput {
	return o
}

func (o JobConfigurationEventTriggerConfigOutput) ToJobConfigurationEventTriggerConfigPtrOutput() JobConfigurationEventTriggerConfigPtrOutput {
	return o.ToJobConfigurationEventTriggerConfigPtrOutputWithContext(context.Background())
}

func (o JobConfigurationEventTriggerConfigOutput) ToJobConfigurationEventTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationEventTriggerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationEventTriggerConfig) *JobConfigurationEventTriggerConfig {
		return &v
	}).(JobConfigurationEventTriggerConfigPtrOutput)
}

func (o JobConfigurationEventTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationEventTriggerConfig] {
	return pulumix.Output[JobConfigurationEventTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationEventTriggerConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationEventTriggerConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationEventTriggerConfigOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationEventTriggerConfig) *int { return v.ReplicaCompletionCount }).(pulumi.IntPtrOutput)
}

// Scaling configurations for event driven jobs.
func (o JobConfigurationEventTriggerConfigOutput) Scale() JobScalePtrOutput {
	return o.ApplyT(func(v JobConfigurationEventTriggerConfig) *JobScale { return v.Scale }).(JobScalePtrOutput)
}

type JobConfigurationEventTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationEventTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationEventTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationEventTriggerConfigPtrOutput) ToJobConfigurationEventTriggerConfigPtrOutput() JobConfigurationEventTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationEventTriggerConfigPtrOutput) ToJobConfigurationEventTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationEventTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationEventTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationEventTriggerConfig] {
	return pulumix.Output[*JobConfigurationEventTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationEventTriggerConfigPtrOutput) Elem() JobConfigurationEventTriggerConfigOutput {
	return o.ApplyT(func(v *JobConfigurationEventTriggerConfig) JobConfigurationEventTriggerConfig {
		if v != nil {
			return *v
		}
		var ret JobConfigurationEventTriggerConfig
		return ret
	}).(JobConfigurationEventTriggerConfigOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationEventTriggerConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationEventTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationEventTriggerConfigPtrOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationEventTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCompletionCount
	}).(pulumi.IntPtrOutput)
}

// Scaling configurations for event driven jobs.
func (o JobConfigurationEventTriggerConfigPtrOutput) Scale() JobScalePtrOutput {
	return o.ApplyT(func(v *JobConfigurationEventTriggerConfig) *JobScale {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(JobScalePtrOutput)
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
type JobConfigurationManualTriggerConfig struct {
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *int `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *int `pulumi:"replicaCompletionCount"`
}

// JobConfigurationManualTriggerConfigInput is an input type that accepts JobConfigurationManualTriggerConfigArgs and JobConfigurationManualTriggerConfigOutput values.
// You can construct a concrete instance of `JobConfigurationManualTriggerConfigInput` via:
//
//	JobConfigurationManualTriggerConfigArgs{...}
type JobConfigurationManualTriggerConfigInput interface {
	pulumi.Input

	ToJobConfigurationManualTriggerConfigOutput() JobConfigurationManualTriggerConfigOutput
	ToJobConfigurationManualTriggerConfigOutputWithContext(context.Context) JobConfigurationManualTriggerConfigOutput
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
type JobConfigurationManualTriggerConfigArgs struct {
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount pulumi.IntPtrInput `pulumi:"replicaCompletionCount"`
}

func (JobConfigurationManualTriggerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationManualTriggerConfig)(nil)).Elem()
}

func (i JobConfigurationManualTriggerConfigArgs) ToJobConfigurationManualTriggerConfigOutput() JobConfigurationManualTriggerConfigOutput {
	return i.ToJobConfigurationManualTriggerConfigOutputWithContext(context.Background())
}

func (i JobConfigurationManualTriggerConfigArgs) ToJobConfigurationManualTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationManualTriggerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationManualTriggerConfigOutput)
}

func (i JobConfigurationManualTriggerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationManualTriggerConfig] {
	return pulumix.Output[JobConfigurationManualTriggerConfig]{
		OutputState: i.ToJobConfigurationManualTriggerConfigOutputWithContext(ctx).OutputState,
	}
}

func (i JobConfigurationManualTriggerConfigArgs) ToJobConfigurationManualTriggerConfigPtrOutput() JobConfigurationManualTriggerConfigPtrOutput {
	return i.ToJobConfigurationManualTriggerConfigPtrOutputWithContext(context.Background())
}

func (i JobConfigurationManualTriggerConfigArgs) ToJobConfigurationManualTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationManualTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationManualTriggerConfigOutput).ToJobConfigurationManualTriggerConfigPtrOutputWithContext(ctx)
}

// JobConfigurationManualTriggerConfigPtrInput is an input type that accepts JobConfigurationManualTriggerConfigArgs, JobConfigurationManualTriggerConfigPtr and JobConfigurationManualTriggerConfigPtrOutput values.
// You can construct a concrete instance of `JobConfigurationManualTriggerConfigPtrInput` via:
//
//	        JobConfigurationManualTriggerConfigArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationManualTriggerConfigPtrInput interface {
	pulumi.Input

	ToJobConfigurationManualTriggerConfigPtrOutput() JobConfigurationManualTriggerConfigPtrOutput
	ToJobConfigurationManualTriggerConfigPtrOutputWithContext(context.Context) JobConfigurationManualTriggerConfigPtrOutput
}

type jobConfigurationManualTriggerConfigPtrType JobConfigurationManualTriggerConfigArgs

func JobConfigurationManualTriggerConfigPtr(v *JobConfigurationManualTriggerConfigArgs) JobConfigurationManualTriggerConfigPtrInput {
	return (*jobConfigurationManualTriggerConfigPtrType)(v)
}

func (*jobConfigurationManualTriggerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationManualTriggerConfig)(nil)).Elem()
}

func (i *jobConfigurationManualTriggerConfigPtrType) ToJobConfigurationManualTriggerConfigPtrOutput() JobConfigurationManualTriggerConfigPtrOutput {
	return i.ToJobConfigurationManualTriggerConfigPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationManualTriggerConfigPtrType) ToJobConfigurationManualTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationManualTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationManualTriggerConfigPtrOutput)
}

func (i *jobConfigurationManualTriggerConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationManualTriggerConfig] {
	return pulumix.Output[*JobConfigurationManualTriggerConfig]{
		OutputState: i.ToJobConfigurationManualTriggerConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
type JobConfigurationManualTriggerConfigOutput struct{ *pulumi.OutputState }

func (JobConfigurationManualTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationManualTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationManualTriggerConfigOutput) ToJobConfigurationManualTriggerConfigOutput() JobConfigurationManualTriggerConfigOutput {
	return o
}

func (o JobConfigurationManualTriggerConfigOutput) ToJobConfigurationManualTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationManualTriggerConfigOutput {
	return o
}

func (o JobConfigurationManualTriggerConfigOutput) ToJobConfigurationManualTriggerConfigPtrOutput() JobConfigurationManualTriggerConfigPtrOutput {
	return o.ToJobConfigurationManualTriggerConfigPtrOutputWithContext(context.Background())
}

func (o JobConfigurationManualTriggerConfigOutput) ToJobConfigurationManualTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationManualTriggerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationManualTriggerConfig) *JobConfigurationManualTriggerConfig {
		return &v
	}).(JobConfigurationManualTriggerConfigPtrOutput)
}

func (o JobConfigurationManualTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationManualTriggerConfig] {
	return pulumix.Output[JobConfigurationManualTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationManualTriggerConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationManualTriggerConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationManualTriggerConfigOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationManualTriggerConfig) *int { return v.ReplicaCompletionCount }).(pulumi.IntPtrOutput)
}

type JobConfigurationManualTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationManualTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationManualTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationManualTriggerConfigPtrOutput) ToJobConfigurationManualTriggerConfigPtrOutput() JobConfigurationManualTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationManualTriggerConfigPtrOutput) ToJobConfigurationManualTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationManualTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationManualTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationManualTriggerConfig] {
	return pulumix.Output[*JobConfigurationManualTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationManualTriggerConfigPtrOutput) Elem() JobConfigurationManualTriggerConfigOutput {
	return o.ApplyT(func(v *JobConfigurationManualTriggerConfig) JobConfigurationManualTriggerConfig {
		if v != nil {
			return *v
		}
		var ret JobConfigurationManualTriggerConfig
		return ret
	}).(JobConfigurationManualTriggerConfigOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationManualTriggerConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationManualTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationManualTriggerConfigPtrOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationManualTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCompletionCount
	}).(pulumi.IntPtrOutput)
}

// Non versioned Container Apps Job configuration properties
type JobConfigurationResponse struct {
	// Trigger configuration of an event driven job.
	EventTriggerConfig *JobConfigurationResponseEventTriggerConfig `pulumi:"eventTriggerConfig"`
	// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
	ManualTriggerConfig *JobConfigurationResponseManualTriggerConfig `pulumi:"manualTriggerConfig"`
	// Collection of private container registry credentials used by a Container apps job
	Registries []RegistryCredentialsResponse `pulumi:"registries"`
	// Maximum number of retries before failing the job.
	ReplicaRetryLimit *int `pulumi:"replicaRetryLimit"`
	// Maximum number of seconds a replica is allowed to run.
	ReplicaTimeout int `pulumi:"replicaTimeout"`
	// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
	ScheduleTriggerConfig *JobConfigurationResponseScheduleTriggerConfig `pulumi:"scheduleTriggerConfig"`
	// Collection of secrets used by a Container Apps Job
	Secrets []SecretResponse `pulumi:"secrets"`
	// Trigger type of the job
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for JobConfigurationResponse
func (val *JobConfigurationResponse) Defaults() *JobConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EventTriggerConfig = tmp.EventTriggerConfig.Defaults()

	if utilities.IsZero(tmp.TriggerType) {
		tmp.TriggerType = "Manual"
	}
	return &tmp
}

// Non versioned Container Apps Job configuration properties
type JobConfigurationResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationResponse)(nil)).Elem()
}

func (o JobConfigurationResponseOutput) ToJobConfigurationResponseOutput() JobConfigurationResponseOutput {
	return o
}

func (o JobConfigurationResponseOutput) ToJobConfigurationResponseOutputWithContext(ctx context.Context) JobConfigurationResponseOutput {
	return o
}

func (o JobConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationResponse] {
	return pulumix.Output[JobConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Trigger configuration of an event driven job.
func (o JobConfigurationResponseOutput) EventTriggerConfig() JobConfigurationResponseEventTriggerConfigPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponse) *JobConfigurationResponseEventTriggerConfig {
		return v.EventTriggerConfig
	}).(JobConfigurationResponseEventTriggerConfigPtrOutput)
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
func (o JobConfigurationResponseOutput) ManualTriggerConfig() JobConfigurationResponseManualTriggerConfigPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponse) *JobConfigurationResponseManualTriggerConfig {
		return v.ManualTriggerConfig
	}).(JobConfigurationResponseManualTriggerConfigPtrOutput)
}

// Collection of private container registry credentials used by a Container apps job
func (o JobConfigurationResponseOutput) Registries() RegistryCredentialsResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationResponse) []RegistryCredentialsResponse { return v.Registries }).(RegistryCredentialsResponseArrayOutput)
}

// Maximum number of retries before failing the job.
func (o JobConfigurationResponseOutput) ReplicaRetryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponse) *int { return v.ReplicaRetryLimit }).(pulumi.IntPtrOutput)
}

// Maximum number of seconds a replica is allowed to run.
func (o JobConfigurationResponseOutput) ReplicaTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationResponse) int { return v.ReplicaTimeout }).(pulumi.IntOutput)
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
func (o JobConfigurationResponseOutput) ScheduleTriggerConfig() JobConfigurationResponseScheduleTriggerConfigPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponse) *JobConfigurationResponseScheduleTriggerConfig {
		return v.ScheduleTriggerConfig
	}).(JobConfigurationResponseScheduleTriggerConfigPtrOutput)
}

// Collection of secrets used by a Container Apps Job
func (o JobConfigurationResponseOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationResponse) []SecretResponse { return v.Secrets }).(SecretResponseArrayOutput)
}

// Trigger type of the job
func (o JobConfigurationResponseOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationResponse) string { return v.TriggerType }).(pulumi.StringOutput)
}

type JobConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationResponse)(nil)).Elem()
}

func (o JobConfigurationResponsePtrOutput) ToJobConfigurationResponsePtrOutput() JobConfigurationResponsePtrOutput {
	return o
}

func (o JobConfigurationResponsePtrOutput) ToJobConfigurationResponsePtrOutputWithContext(ctx context.Context) JobConfigurationResponsePtrOutput {
	return o
}

func (o JobConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationResponse] {
	return pulumix.Output[*JobConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationResponsePtrOutput) Elem() JobConfigurationResponseOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) JobConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret JobConfigurationResponse
		return ret
	}).(JobConfigurationResponseOutput)
}

// Trigger configuration of an event driven job.
func (o JobConfigurationResponsePtrOutput) EventTriggerConfig() JobConfigurationResponseEventTriggerConfigPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) *JobConfigurationResponseEventTriggerConfig {
		if v == nil {
			return nil
		}
		return v.EventTriggerConfig
	}).(JobConfigurationResponseEventTriggerConfigPtrOutput)
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
func (o JobConfigurationResponsePtrOutput) ManualTriggerConfig() JobConfigurationResponseManualTriggerConfigPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) *JobConfigurationResponseManualTriggerConfig {
		if v == nil {
			return nil
		}
		return v.ManualTriggerConfig
	}).(JobConfigurationResponseManualTriggerConfigPtrOutput)
}

// Collection of private container registry credentials used by a Container apps job
func (o JobConfigurationResponsePtrOutput) Registries() RegistryCredentialsResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) []RegistryCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.Registries
	}).(RegistryCredentialsResponseArrayOutput)
}

// Maximum number of retries before failing the job.
func (o JobConfigurationResponsePtrOutput) ReplicaRetryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaRetryLimit
	}).(pulumi.IntPtrOutput)
}

// Maximum number of seconds a replica is allowed to run.
func (o JobConfigurationResponsePtrOutput) ReplicaTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return &v.ReplicaTimeout
	}).(pulumi.IntPtrOutput)
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
func (o JobConfigurationResponsePtrOutput) ScheduleTriggerConfig() JobConfigurationResponseScheduleTriggerConfigPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) *JobConfigurationResponseScheduleTriggerConfig {
		if v == nil {
			return nil
		}
		return v.ScheduleTriggerConfig
	}).(JobConfigurationResponseScheduleTriggerConfigPtrOutput)
}

// Collection of secrets used by a Container Apps Job
func (o JobConfigurationResponsePtrOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) []SecretResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretResponseArrayOutput)
}

// Trigger type of the job
func (o JobConfigurationResponsePtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

// Trigger configuration of an event driven job.
type JobConfigurationResponseEventTriggerConfig struct {
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *int `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *int `pulumi:"replicaCompletionCount"`
	// Scaling configurations for event driven jobs.
	Scale *JobScaleResponse `pulumi:"scale"`
}

// Defaults sets the appropriate defaults for JobConfigurationResponseEventTriggerConfig
func (val *JobConfigurationResponseEventTriggerConfig) Defaults() *JobConfigurationResponseEventTriggerConfig {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Scale = tmp.Scale.Defaults()

	return &tmp
}

// Trigger configuration of an event driven job.
type JobConfigurationResponseEventTriggerConfigOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseEventTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationResponseEventTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationResponseEventTriggerConfigOutput) ToJobConfigurationResponseEventTriggerConfigOutput() JobConfigurationResponseEventTriggerConfigOutput {
	return o
}

func (o JobConfigurationResponseEventTriggerConfigOutput) ToJobConfigurationResponseEventTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationResponseEventTriggerConfigOutput {
	return o
}

func (o JobConfigurationResponseEventTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationResponseEventTriggerConfig] {
	return pulumix.Output[JobConfigurationResponseEventTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationResponseEventTriggerConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseEventTriggerConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationResponseEventTriggerConfigOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseEventTriggerConfig) *int { return v.ReplicaCompletionCount }).(pulumi.IntPtrOutput)
}

// Scaling configurations for event driven jobs.
func (o JobConfigurationResponseEventTriggerConfigOutput) Scale() JobScaleResponsePtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseEventTriggerConfig) *JobScaleResponse { return v.Scale }).(JobScaleResponsePtrOutput)
}

type JobConfigurationResponseEventTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseEventTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationResponseEventTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationResponseEventTriggerConfigPtrOutput) ToJobConfigurationResponseEventTriggerConfigPtrOutput() JobConfigurationResponseEventTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationResponseEventTriggerConfigPtrOutput) ToJobConfigurationResponseEventTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationResponseEventTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationResponseEventTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationResponseEventTriggerConfig] {
	return pulumix.Output[*JobConfigurationResponseEventTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationResponseEventTriggerConfigPtrOutput) Elem() JobConfigurationResponseEventTriggerConfigOutput {
	return o.ApplyT(func(v *JobConfigurationResponseEventTriggerConfig) JobConfigurationResponseEventTriggerConfig {
		if v != nil {
			return *v
		}
		var ret JobConfigurationResponseEventTriggerConfig
		return ret
	}).(JobConfigurationResponseEventTriggerConfigOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationResponseEventTriggerConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseEventTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationResponseEventTriggerConfigPtrOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseEventTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCompletionCount
	}).(pulumi.IntPtrOutput)
}

// Scaling configurations for event driven jobs.
func (o JobConfigurationResponseEventTriggerConfigPtrOutput) Scale() JobScaleResponsePtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseEventTriggerConfig) *JobScaleResponse {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(JobScaleResponsePtrOutput)
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
type JobConfigurationResponseManualTriggerConfig struct {
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *int `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *int `pulumi:"replicaCompletionCount"`
}

// Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default
type JobConfigurationResponseManualTriggerConfigOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseManualTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationResponseManualTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationResponseManualTriggerConfigOutput) ToJobConfigurationResponseManualTriggerConfigOutput() JobConfigurationResponseManualTriggerConfigOutput {
	return o
}

func (o JobConfigurationResponseManualTriggerConfigOutput) ToJobConfigurationResponseManualTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationResponseManualTriggerConfigOutput {
	return o
}

func (o JobConfigurationResponseManualTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationResponseManualTriggerConfig] {
	return pulumix.Output[JobConfigurationResponseManualTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationResponseManualTriggerConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseManualTriggerConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationResponseManualTriggerConfigOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseManualTriggerConfig) *int { return v.ReplicaCompletionCount }).(pulumi.IntPtrOutput)
}

type JobConfigurationResponseManualTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseManualTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationResponseManualTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationResponseManualTriggerConfigPtrOutput) ToJobConfigurationResponseManualTriggerConfigPtrOutput() JobConfigurationResponseManualTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationResponseManualTriggerConfigPtrOutput) ToJobConfigurationResponseManualTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationResponseManualTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationResponseManualTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationResponseManualTriggerConfig] {
	return pulumix.Output[*JobConfigurationResponseManualTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationResponseManualTriggerConfigPtrOutput) Elem() JobConfigurationResponseManualTriggerConfigOutput {
	return o.ApplyT(func(v *JobConfigurationResponseManualTriggerConfig) JobConfigurationResponseManualTriggerConfig {
		if v != nil {
			return *v
		}
		var ret JobConfigurationResponseManualTriggerConfig
		return ret
	}).(JobConfigurationResponseManualTriggerConfigOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationResponseManualTriggerConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseManualTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationResponseManualTriggerConfigPtrOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseManualTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCompletionCount
	}).(pulumi.IntPtrOutput)
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
type JobConfigurationResponseScheduleTriggerConfig struct {
	// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
	CronExpression string `pulumi:"cronExpression"`
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *int `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *int `pulumi:"replicaCompletionCount"`
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
type JobConfigurationResponseScheduleTriggerConfigOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseScheduleTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationResponseScheduleTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationResponseScheduleTriggerConfigOutput) ToJobConfigurationResponseScheduleTriggerConfigOutput() JobConfigurationResponseScheduleTriggerConfigOutput {
	return o
}

func (o JobConfigurationResponseScheduleTriggerConfigOutput) ToJobConfigurationResponseScheduleTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationResponseScheduleTriggerConfigOutput {
	return o
}

func (o JobConfigurationResponseScheduleTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationResponseScheduleTriggerConfig] {
	return pulumix.Output[JobConfigurationResponseScheduleTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
func (o JobConfigurationResponseScheduleTriggerConfigOutput) CronExpression() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationResponseScheduleTriggerConfig) string { return v.CronExpression }).(pulumi.StringOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationResponseScheduleTriggerConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseScheduleTriggerConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationResponseScheduleTriggerConfigOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationResponseScheduleTriggerConfig) *int { return v.ReplicaCompletionCount }).(pulumi.IntPtrOutput)
}

type JobConfigurationResponseScheduleTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseScheduleTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationResponseScheduleTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) ToJobConfigurationResponseScheduleTriggerConfigPtrOutput() JobConfigurationResponseScheduleTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) ToJobConfigurationResponseScheduleTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationResponseScheduleTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationResponseScheduleTriggerConfig] {
	return pulumix.Output[*JobConfigurationResponseScheduleTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) Elem() JobConfigurationResponseScheduleTriggerConfigOutput {
	return o.ApplyT(func(v *JobConfigurationResponseScheduleTriggerConfig) JobConfigurationResponseScheduleTriggerConfig {
		if v != nil {
			return *v
		}
		var ret JobConfigurationResponseScheduleTriggerConfig
		return ret
	}).(JobConfigurationResponseScheduleTriggerConfigOutput)
}

// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) CronExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseScheduleTriggerConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CronExpression
	}).(pulumi.StringPtrOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseScheduleTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationResponseScheduleTriggerConfigPtrOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationResponseScheduleTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCompletionCount
	}).(pulumi.IntPtrOutput)
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
type JobConfigurationScheduleTriggerConfig struct {
	// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
	CronExpression string `pulumi:"cronExpression"`
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism *int `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount *int `pulumi:"replicaCompletionCount"`
}

// JobConfigurationScheduleTriggerConfigInput is an input type that accepts JobConfigurationScheduleTriggerConfigArgs and JobConfigurationScheduleTriggerConfigOutput values.
// You can construct a concrete instance of `JobConfigurationScheduleTriggerConfigInput` via:
//
//	JobConfigurationScheduleTriggerConfigArgs{...}
type JobConfigurationScheduleTriggerConfigInput interface {
	pulumi.Input

	ToJobConfigurationScheduleTriggerConfigOutput() JobConfigurationScheduleTriggerConfigOutput
	ToJobConfigurationScheduleTriggerConfigOutputWithContext(context.Context) JobConfigurationScheduleTriggerConfigOutput
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
type JobConfigurationScheduleTriggerConfigArgs struct {
	// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
	CronExpression pulumi.StringInput `pulumi:"cronExpression"`
	// Number of parallel replicas of a job that can run at a given time.
	Parallelism pulumi.IntPtrInput `pulumi:"parallelism"`
	// Minimum number of successful replica completions before overall job completion.
	ReplicaCompletionCount pulumi.IntPtrInput `pulumi:"replicaCompletionCount"`
}

func (JobConfigurationScheduleTriggerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationScheduleTriggerConfig)(nil)).Elem()
}

func (i JobConfigurationScheduleTriggerConfigArgs) ToJobConfigurationScheduleTriggerConfigOutput() JobConfigurationScheduleTriggerConfigOutput {
	return i.ToJobConfigurationScheduleTriggerConfigOutputWithContext(context.Background())
}

func (i JobConfigurationScheduleTriggerConfigArgs) ToJobConfigurationScheduleTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationScheduleTriggerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationScheduleTriggerConfigOutput)
}

func (i JobConfigurationScheduleTriggerConfigArgs) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationScheduleTriggerConfig] {
	return pulumix.Output[JobConfigurationScheduleTriggerConfig]{
		OutputState: i.ToJobConfigurationScheduleTriggerConfigOutputWithContext(ctx).OutputState,
	}
}

func (i JobConfigurationScheduleTriggerConfigArgs) ToJobConfigurationScheduleTriggerConfigPtrOutput() JobConfigurationScheduleTriggerConfigPtrOutput {
	return i.ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(context.Background())
}

func (i JobConfigurationScheduleTriggerConfigArgs) ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationScheduleTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationScheduleTriggerConfigOutput).ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(ctx)
}

// JobConfigurationScheduleTriggerConfigPtrInput is an input type that accepts JobConfigurationScheduleTriggerConfigArgs, JobConfigurationScheduleTriggerConfigPtr and JobConfigurationScheduleTriggerConfigPtrOutput values.
// You can construct a concrete instance of `JobConfigurationScheduleTriggerConfigPtrInput` via:
//
//	        JobConfigurationScheduleTriggerConfigArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationScheduleTriggerConfigPtrInput interface {
	pulumi.Input

	ToJobConfigurationScheduleTriggerConfigPtrOutput() JobConfigurationScheduleTriggerConfigPtrOutput
	ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(context.Context) JobConfigurationScheduleTriggerConfigPtrOutput
}

type jobConfigurationScheduleTriggerConfigPtrType JobConfigurationScheduleTriggerConfigArgs

func JobConfigurationScheduleTriggerConfigPtr(v *JobConfigurationScheduleTriggerConfigArgs) JobConfigurationScheduleTriggerConfigPtrInput {
	return (*jobConfigurationScheduleTriggerConfigPtrType)(v)
}

func (*jobConfigurationScheduleTriggerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationScheduleTriggerConfig)(nil)).Elem()
}

func (i *jobConfigurationScheduleTriggerConfigPtrType) ToJobConfigurationScheduleTriggerConfigPtrOutput() JobConfigurationScheduleTriggerConfigPtrOutput {
	return i.ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationScheduleTriggerConfigPtrType) ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationScheduleTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationScheduleTriggerConfigPtrOutput)
}

func (i *jobConfigurationScheduleTriggerConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationScheduleTriggerConfig] {
	return pulumix.Output[*JobConfigurationScheduleTriggerConfig]{
		OutputState: i.ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default
type JobConfigurationScheduleTriggerConfigOutput struct{ *pulumi.OutputState }

func (JobConfigurationScheduleTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationScheduleTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationScheduleTriggerConfigOutput) ToJobConfigurationScheduleTriggerConfigOutput() JobConfigurationScheduleTriggerConfigOutput {
	return o
}

func (o JobConfigurationScheduleTriggerConfigOutput) ToJobConfigurationScheduleTriggerConfigOutputWithContext(ctx context.Context) JobConfigurationScheduleTriggerConfigOutput {
	return o
}

func (o JobConfigurationScheduleTriggerConfigOutput) ToJobConfigurationScheduleTriggerConfigPtrOutput() JobConfigurationScheduleTriggerConfigPtrOutput {
	return o.ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(context.Background())
}

func (o JobConfigurationScheduleTriggerConfigOutput) ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationScheduleTriggerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationScheduleTriggerConfig) *JobConfigurationScheduleTriggerConfig {
		return &v
	}).(JobConfigurationScheduleTriggerConfigPtrOutput)
}

func (o JobConfigurationScheduleTriggerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[JobConfigurationScheduleTriggerConfig] {
	return pulumix.Output[JobConfigurationScheduleTriggerConfig]{
		OutputState: o.OutputState,
	}
}

// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
func (o JobConfigurationScheduleTriggerConfigOutput) CronExpression() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationScheduleTriggerConfig) string { return v.CronExpression }).(pulumi.StringOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationScheduleTriggerConfigOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationScheduleTriggerConfig) *int { return v.Parallelism }).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationScheduleTriggerConfigOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationScheduleTriggerConfig) *int { return v.ReplicaCompletionCount }).(pulumi.IntPtrOutput)
}

type JobConfigurationScheduleTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationScheduleTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationScheduleTriggerConfig)(nil)).Elem()
}

func (o JobConfigurationScheduleTriggerConfigPtrOutput) ToJobConfigurationScheduleTriggerConfigPtrOutput() JobConfigurationScheduleTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationScheduleTriggerConfigPtrOutput) ToJobConfigurationScheduleTriggerConfigPtrOutputWithContext(ctx context.Context) JobConfigurationScheduleTriggerConfigPtrOutput {
	return o
}

func (o JobConfigurationScheduleTriggerConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobConfigurationScheduleTriggerConfig] {
	return pulumix.Output[*JobConfigurationScheduleTriggerConfig]{
		OutputState: o.OutputState,
	}
}

func (o JobConfigurationScheduleTriggerConfigPtrOutput) Elem() JobConfigurationScheduleTriggerConfigOutput {
	return o.ApplyT(func(v *JobConfigurationScheduleTriggerConfig) JobConfigurationScheduleTriggerConfig {
		if v != nil {
			return *v
		}
		var ret JobConfigurationScheduleTriggerConfig
		return ret
	}).(JobConfigurationScheduleTriggerConfigOutput)
}

// Cron formatted repeating schedule ("* * * * *") of a Cron Job.
func (o JobConfigurationScheduleTriggerConfigPtrOutput) CronExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationScheduleTriggerConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CronExpression
	}).(pulumi.StringPtrOutput)
}

// Number of parallel replicas of a job that can run at a given time.
func (o JobConfigurationScheduleTriggerConfigPtrOutput) Parallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationScheduleTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.Parallelism
	}).(pulumi.IntPtrOutput)
}

// Minimum number of successful replica completions before overall job completion.
func (o JobConfigurationScheduleTriggerConfigPtrOutput) ReplicaCompletionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationScheduleTriggerConfig) *int {
		if v == nil {
			return nil
		}
		return v.ReplicaCompletionCount
	}).(pulumi.IntPtrOutput)
}

// Scaling configurations for event driven jobs.
type JobScale struct {
	// Maximum number of job executions that are created for a trigger, default 100.
	MaxExecutions *int `pulumi:"maxExecutions"`
	// Minimum number of job executions that are created for a trigger, default 0
	MinExecutions *int `pulumi:"minExecutions"`
	// Interval to check each event source in seconds. Defaults to 30s
	PollingInterval *int `pulumi:"pollingInterval"`
	// Scaling rules.
	Rules []JobScaleRule `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for JobScale
func (val *JobScale) Defaults() *JobScale {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxExecutions == nil {
		maxExecutions_ := 100
		tmp.MaxExecutions = &maxExecutions_
	}
	if tmp.MinExecutions == nil {
		minExecutions_ := 0
		tmp.MinExecutions = &minExecutions_
	}
	return &tmp
}

// JobScaleInput is an input type that accepts JobScaleArgs and JobScaleOutput values.
// You can construct a concrete instance of `JobScaleInput` via:
//
//	JobScaleArgs{...}
type JobScaleInput interface {
	pulumi.Input

	ToJobScaleOutput() JobScaleOutput
	ToJobScaleOutputWithContext(context.Context) JobScaleOutput
}

// Scaling configurations for event driven jobs.
type JobScaleArgs struct {
	// Maximum number of job executions that are created for a trigger, default 100.
	MaxExecutions pulumi.IntPtrInput `pulumi:"maxExecutions"`
	// Minimum number of job executions that are created for a trigger, default 0
	MinExecutions pulumi.IntPtrInput `pulumi:"minExecutions"`
	// Interval to check each event source in seconds. Defaults to 30s
	PollingInterval pulumi.IntPtrInput `pulumi:"pollingInterval"`
	// Scaling rules.
	Rules JobScaleRuleArrayInput `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for JobScaleArgs
func (val *JobScaleArgs) Defaults() *JobScaleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxExecutions == nil {
		tmp.MaxExecutions = pulumi.IntPtr(100)
	}
	if tmp.MinExecutions == nil {
		tmp.MinExecutions = pulumi.IntPtr(0)
	}
	return &tmp
}
func (JobScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScale)(nil)).Elem()
}

func (i JobScaleArgs) ToJobScaleOutput() JobScaleOutput {
	return i.ToJobScaleOutputWithContext(context.Background())
}

func (i JobScaleArgs) ToJobScaleOutputWithContext(ctx context.Context) JobScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScaleOutput)
}

func (i JobScaleArgs) ToOutput(ctx context.Context) pulumix.Output[JobScale] {
	return pulumix.Output[JobScale]{
		OutputState: i.ToJobScaleOutputWithContext(ctx).OutputState,
	}
}

func (i JobScaleArgs) ToJobScalePtrOutput() JobScalePtrOutput {
	return i.ToJobScalePtrOutputWithContext(context.Background())
}

func (i JobScaleArgs) ToJobScalePtrOutputWithContext(ctx context.Context) JobScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScaleOutput).ToJobScalePtrOutputWithContext(ctx)
}

// JobScalePtrInput is an input type that accepts JobScaleArgs, JobScalePtr and JobScalePtrOutput values.
// You can construct a concrete instance of `JobScalePtrInput` via:
//
//	        JobScaleArgs{...}
//
//	or:
//
//	        nil
type JobScalePtrInput interface {
	pulumi.Input

	ToJobScalePtrOutput() JobScalePtrOutput
	ToJobScalePtrOutputWithContext(context.Context) JobScalePtrOutput
}

type jobScalePtrType JobScaleArgs

func JobScalePtr(v *JobScaleArgs) JobScalePtrInput {
	return (*jobScalePtrType)(v)
}

func (*jobScalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobScale)(nil)).Elem()
}

func (i *jobScalePtrType) ToJobScalePtrOutput() JobScalePtrOutput {
	return i.ToJobScalePtrOutputWithContext(context.Background())
}

func (i *jobScalePtrType) ToJobScalePtrOutputWithContext(ctx context.Context) JobScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScalePtrOutput)
}

func (i *jobScalePtrType) ToOutput(ctx context.Context) pulumix.Output[*JobScale] {
	return pulumix.Output[*JobScale]{
		OutputState: i.ToJobScalePtrOutputWithContext(ctx).OutputState,
	}
}

// Scaling configurations for event driven jobs.
type JobScaleOutput struct{ *pulumi.OutputState }

func (JobScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScale)(nil)).Elem()
}

func (o JobScaleOutput) ToJobScaleOutput() JobScaleOutput {
	return o
}

func (o JobScaleOutput) ToJobScaleOutputWithContext(ctx context.Context) JobScaleOutput {
	return o
}

func (o JobScaleOutput) ToJobScalePtrOutput() JobScalePtrOutput {
	return o.ToJobScalePtrOutputWithContext(context.Background())
}

func (o JobScaleOutput) ToJobScalePtrOutputWithContext(ctx context.Context) JobScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobScale) *JobScale {
		return &v
	}).(JobScalePtrOutput)
}

func (o JobScaleOutput) ToOutput(ctx context.Context) pulumix.Output[JobScale] {
	return pulumix.Output[JobScale]{
		OutputState: o.OutputState,
	}
}

// Maximum number of job executions that are created for a trigger, default 100.
func (o JobScaleOutput) MaxExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobScale) *int { return v.MaxExecutions }).(pulumi.IntPtrOutput)
}

// Minimum number of job executions that are created for a trigger, default 0
func (o JobScaleOutput) MinExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobScale) *int { return v.MinExecutions }).(pulumi.IntPtrOutput)
}

// Interval to check each event source in seconds. Defaults to 30s
func (o JobScaleOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobScale) *int { return v.PollingInterval }).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o JobScaleOutput) Rules() JobScaleRuleArrayOutput {
	return o.ApplyT(func(v JobScale) []JobScaleRule { return v.Rules }).(JobScaleRuleArrayOutput)
}

type JobScalePtrOutput struct{ *pulumi.OutputState }

func (JobScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobScale)(nil)).Elem()
}

func (o JobScalePtrOutput) ToJobScalePtrOutput() JobScalePtrOutput {
	return o
}

func (o JobScalePtrOutput) ToJobScalePtrOutputWithContext(ctx context.Context) JobScalePtrOutput {
	return o
}

func (o JobScalePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobScale] {
	return pulumix.Output[*JobScale]{
		OutputState: o.OutputState,
	}
}

func (o JobScalePtrOutput) Elem() JobScaleOutput {
	return o.ApplyT(func(v *JobScale) JobScale {
		if v != nil {
			return *v
		}
		var ret JobScale
		return ret
	}).(JobScaleOutput)
}

// Maximum number of job executions that are created for a trigger, default 100.
func (o JobScalePtrOutput) MaxExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobScale) *int {
		if v == nil {
			return nil
		}
		return v.MaxExecutions
	}).(pulumi.IntPtrOutput)
}

// Minimum number of job executions that are created for a trigger, default 0
func (o JobScalePtrOutput) MinExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobScale) *int {
		if v == nil {
			return nil
		}
		return v.MinExecutions
	}).(pulumi.IntPtrOutput)
}

// Interval to check each event source in seconds. Defaults to 30s
func (o JobScalePtrOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobScale) *int {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o JobScalePtrOutput) Rules() JobScaleRuleArrayOutput {
	return o.ApplyT(func(v *JobScale) []JobScaleRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(JobScaleRuleArrayOutput)
}

// Scaling configurations for event driven jobs.
type JobScaleResponse struct {
	// Maximum number of job executions that are created for a trigger, default 100.
	MaxExecutions *int `pulumi:"maxExecutions"`
	// Minimum number of job executions that are created for a trigger, default 0
	MinExecutions *int `pulumi:"minExecutions"`
	// Interval to check each event source in seconds. Defaults to 30s
	PollingInterval *int `pulumi:"pollingInterval"`
	// Scaling rules.
	Rules []JobScaleRuleResponse `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for JobScaleResponse
func (val *JobScaleResponse) Defaults() *JobScaleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxExecutions == nil {
		maxExecutions_ := 100
		tmp.MaxExecutions = &maxExecutions_
	}
	if tmp.MinExecutions == nil {
		minExecutions_ := 0
		tmp.MinExecutions = &minExecutions_
	}
	return &tmp
}

// Scaling configurations for event driven jobs.
type JobScaleResponseOutput struct{ *pulumi.OutputState }

func (JobScaleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScaleResponse)(nil)).Elem()
}

func (o JobScaleResponseOutput) ToJobScaleResponseOutput() JobScaleResponseOutput {
	return o
}

func (o JobScaleResponseOutput) ToJobScaleResponseOutputWithContext(ctx context.Context) JobScaleResponseOutput {
	return o
}

func (o JobScaleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JobScaleResponse] {
	return pulumix.Output[JobScaleResponse]{
		OutputState: o.OutputState,
	}
}

// Maximum number of job executions that are created for a trigger, default 100.
func (o JobScaleResponseOutput) MaxExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobScaleResponse) *int { return v.MaxExecutions }).(pulumi.IntPtrOutput)
}

// Minimum number of job executions that are created for a trigger, default 0
func (o JobScaleResponseOutput) MinExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobScaleResponse) *int { return v.MinExecutions }).(pulumi.IntPtrOutput)
}

// Interval to check each event source in seconds. Defaults to 30s
func (o JobScaleResponseOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobScaleResponse) *int { return v.PollingInterval }).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o JobScaleResponseOutput) Rules() JobScaleRuleResponseArrayOutput {
	return o.ApplyT(func(v JobScaleResponse) []JobScaleRuleResponse { return v.Rules }).(JobScaleRuleResponseArrayOutput)
}

type JobScaleResponsePtrOutput struct{ *pulumi.OutputState }

func (JobScaleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobScaleResponse)(nil)).Elem()
}

func (o JobScaleResponsePtrOutput) ToJobScaleResponsePtrOutput() JobScaleResponsePtrOutput {
	return o
}

func (o JobScaleResponsePtrOutput) ToJobScaleResponsePtrOutputWithContext(ctx context.Context) JobScaleResponsePtrOutput {
	return o
}

func (o JobScaleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobScaleResponse] {
	return pulumix.Output[*JobScaleResponse]{
		OutputState: o.OutputState,
	}
}

func (o JobScaleResponsePtrOutput) Elem() JobScaleResponseOutput {
	return o.ApplyT(func(v *JobScaleResponse) JobScaleResponse {
		if v != nil {
			return *v
		}
		var ret JobScaleResponse
		return ret
	}).(JobScaleResponseOutput)
}

// Maximum number of job executions that are created for a trigger, default 100.
func (o JobScaleResponsePtrOutput) MaxExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobScaleResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxExecutions
	}).(pulumi.IntPtrOutput)
}

// Minimum number of job executions that are created for a trigger, default 0
func (o JobScaleResponsePtrOutput) MinExecutions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobScaleResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinExecutions
	}).(pulumi.IntPtrOutput)
}

// Interval to check each event source in seconds. Defaults to 30s
func (o JobScaleResponsePtrOutput) PollingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobScaleResponse) *int {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o JobScaleResponsePtrOutput) Rules() JobScaleRuleResponseArrayOutput {
	return o.ApplyT(func(v *JobScaleResponse) []JobScaleRuleResponse {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(JobScaleRuleResponseArrayOutput)
}

// Scaling rule.
type JobScaleRule struct {
	// Authentication secrets for the scale rule.
	Auth []ScaleRuleAuth `pulumi:"auth"`
	// Metadata properties to describe the scale rule.
	Metadata interface{} `pulumi:"metadata"`
	// Scale Rule Name
	Name *string `pulumi:"name"`
	// Type of the scale rule
	// eg: azure-servicebus, redis etc.
	Type *string `pulumi:"type"`
}

// JobScaleRuleInput is an input type that accepts JobScaleRuleArgs and JobScaleRuleOutput values.
// You can construct a concrete instance of `JobScaleRuleInput` via:
//
//	JobScaleRuleArgs{...}
type JobScaleRuleInput interface {
	pulumi.Input

	ToJobScaleRuleOutput() JobScaleRuleOutput
	ToJobScaleRuleOutputWithContext(context.Context) JobScaleRuleOutput
}

// Scaling rule.
type JobScaleRuleArgs struct {
	// Authentication secrets for the scale rule.
	Auth ScaleRuleAuthArrayInput `pulumi:"auth"`
	// Metadata properties to describe the scale rule.
	Metadata pulumi.Input `pulumi:"metadata"`
	// Scale Rule Name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the scale rule
	// eg: azure-servicebus, redis etc.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (JobScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScaleRule)(nil)).Elem()
}

func (i JobScaleRuleArgs) ToJobScaleRuleOutput() JobScaleRuleOutput {
	return i.ToJobScaleRuleOutputWithContext(context.Background())
}

func (i JobScaleRuleArgs) ToJobScaleRuleOutputWithContext(ctx context.Context) JobScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScaleRuleOutput)
}

func (i JobScaleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[JobScaleRule] {
	return pulumix.Output[JobScaleRule]{
		OutputState: i.ToJobScaleRuleOutputWithContext(ctx).OutputState,
	}
}

// JobScaleRuleArrayInput is an input type that accepts JobScaleRuleArray and JobScaleRuleArrayOutput values.
// You can construct a concrete instance of `JobScaleRuleArrayInput` via:
//
//	JobScaleRuleArray{ JobScaleRuleArgs{...} }
type JobScaleRuleArrayInput interface {
	pulumi.Input

	ToJobScaleRuleArrayOutput() JobScaleRuleArrayOutput
	ToJobScaleRuleArrayOutputWithContext(context.Context) JobScaleRuleArrayOutput
}

type JobScaleRuleArray []JobScaleRuleInput

func (JobScaleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobScaleRule)(nil)).Elem()
}

func (i JobScaleRuleArray) ToJobScaleRuleArrayOutput() JobScaleRuleArrayOutput {
	return i.ToJobScaleRuleArrayOutputWithContext(context.Background())
}

func (i JobScaleRuleArray) ToJobScaleRuleArrayOutputWithContext(ctx context.Context) JobScaleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScaleRuleArrayOutput)
}

func (i JobScaleRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]JobScaleRule] {
	return pulumix.Output[[]JobScaleRule]{
		OutputState: i.ToJobScaleRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Scaling rule.
type JobScaleRuleOutput struct{ *pulumi.OutputState }

func (JobScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScaleRule)(nil)).Elem()
}

func (o JobScaleRuleOutput) ToJobScaleRuleOutput() JobScaleRuleOutput {
	return o
}

func (o JobScaleRuleOutput) ToJobScaleRuleOutputWithContext(ctx context.Context) JobScaleRuleOutput {
	return o
}

func (o JobScaleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[JobScaleRule] {
	return pulumix.Output[JobScaleRule]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the scale rule.
func (o JobScaleRuleOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v JobScaleRule) []ScaleRuleAuth { return v.Auth }).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe the scale rule.
func (o JobScaleRuleOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v JobScaleRule) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// Scale Rule Name
func (o JobScaleRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobScaleRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the scale rule
// eg: azure-servicebus, redis etc.
func (o JobScaleRuleOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobScaleRule) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JobScaleRuleArrayOutput struct{ *pulumi.OutputState }

func (JobScaleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobScaleRule)(nil)).Elem()
}

func (o JobScaleRuleArrayOutput) ToJobScaleRuleArrayOutput() JobScaleRuleArrayOutput {
	return o
}

func (o JobScaleRuleArrayOutput) ToJobScaleRuleArrayOutputWithContext(ctx context.Context) JobScaleRuleArrayOutput {
	return o
}

func (o JobScaleRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]JobScaleRule] {
	return pulumix.Output[[]JobScaleRule]{
		OutputState: o.OutputState,
	}
}

func (o JobScaleRuleArrayOutput) Index(i pulumi.IntInput) JobScaleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobScaleRule {
		return vs[0].([]JobScaleRule)[vs[1].(int)]
	}).(JobScaleRuleOutput)
}

// Scaling rule.
type JobScaleRuleResponse struct {
	// Authentication secrets for the scale rule.
	Auth []ScaleRuleAuthResponse `pulumi:"auth"`
	// Metadata properties to describe the scale rule.
	Metadata interface{} `pulumi:"metadata"`
	// Scale Rule Name
	Name *string `pulumi:"name"`
	// Type of the scale rule
	// eg: azure-servicebus, redis etc.
	Type *string `pulumi:"type"`
}

// Scaling rule.
type JobScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (JobScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScaleRuleResponse)(nil)).Elem()
}

func (o JobScaleRuleResponseOutput) ToJobScaleRuleResponseOutput() JobScaleRuleResponseOutput {
	return o
}

func (o JobScaleRuleResponseOutput) ToJobScaleRuleResponseOutputWithContext(ctx context.Context) JobScaleRuleResponseOutput {
	return o
}

func (o JobScaleRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JobScaleRuleResponse] {
	return pulumix.Output[JobScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the scale rule.
func (o JobScaleRuleResponseOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v JobScaleRuleResponse) []ScaleRuleAuthResponse { return v.Auth }).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe the scale rule.
func (o JobScaleRuleResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v JobScaleRuleResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

// Scale Rule Name
func (o JobScaleRuleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobScaleRuleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the scale rule
// eg: azure-servicebus, redis etc.
func (o JobScaleRuleResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobScaleRuleResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type JobScaleRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (JobScaleRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobScaleRuleResponse)(nil)).Elem()
}

func (o JobScaleRuleResponseArrayOutput) ToJobScaleRuleResponseArrayOutput() JobScaleRuleResponseArrayOutput {
	return o
}

func (o JobScaleRuleResponseArrayOutput) ToJobScaleRuleResponseArrayOutputWithContext(ctx context.Context) JobScaleRuleResponseArrayOutput {
	return o
}

func (o JobScaleRuleResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]JobScaleRuleResponse] {
	return pulumix.Output[[]JobScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o JobScaleRuleResponseArrayOutput) Index(i pulumi.IntInput) JobScaleRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobScaleRuleResponse {
		return vs[0].([]JobScaleRuleResponse)[vs[1].(int)]
	}).(JobScaleRuleResponseOutput)
}

// Container Apps Job versioned application definition. Defines the desired state of an immutable revision. Any changes to this section Will result in a new revision being created
type JobTemplate struct {
	// List of container definitions for the Container App.
	Containers []Container `pulumi:"containers"`
	// List of specialized containers that run before app containers.
	InitContainers []InitContainer `pulumi:"initContainers"`
	// List of volume definitions for the Container App.
	Volumes []Volume `pulumi:"volumes"`
}

// JobTemplateInput is an input type that accepts JobTemplateArgs and JobTemplateOutput values.
// You can construct a concrete instance of `JobTemplateInput` via:
//
//	JobTemplateArgs{...}
type JobTemplateInput interface {
	pulumi.Input

	ToJobTemplateOutput() JobTemplateOutput
	ToJobTemplateOutputWithContext(context.Context) JobTemplateOutput
}

// Container Apps Job versioned application definition. Defines the desired state of an immutable revision. Any changes to this section Will result in a new revision being created
type JobTemplateArgs struct {
	// List of container definitions for the Container App.
	Containers ContainerArrayInput `pulumi:"containers"`
	// List of specialized containers that run before app containers.
	InitContainers InitContainerArrayInput `pulumi:"initContainers"`
	// List of volume definitions for the Container App.
	Volumes VolumeArrayInput `pulumi:"volumes"`
}

func (JobTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplate)(nil)).Elem()
}

func (i JobTemplateArgs) ToJobTemplateOutput() JobTemplateOutput {
	return i.ToJobTemplateOutputWithContext(context.Background())
}

func (i JobTemplateArgs) ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateOutput)
}

func (i JobTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[JobTemplate] {
	return pulumix.Output[JobTemplate]{
		OutputState: i.ToJobTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i JobTemplateArgs) ToJobTemplatePtrOutput() JobTemplatePtrOutput {
	return i.ToJobTemplatePtrOutputWithContext(context.Background())
}

func (i JobTemplateArgs) ToJobTemplatePtrOutputWithContext(ctx context.Context) JobTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplateOutput).ToJobTemplatePtrOutputWithContext(ctx)
}

// JobTemplatePtrInput is an input type that accepts JobTemplateArgs, JobTemplatePtr and JobTemplatePtrOutput values.
// You can construct a concrete instance of `JobTemplatePtrInput` via:
//
//	        JobTemplateArgs{...}
//
//	or:
//
//	        nil
type JobTemplatePtrInput interface {
	pulumi.Input

	ToJobTemplatePtrOutput() JobTemplatePtrOutput
	ToJobTemplatePtrOutputWithContext(context.Context) JobTemplatePtrOutput
}

type jobTemplatePtrType JobTemplateArgs

func JobTemplatePtr(v *JobTemplateArgs) JobTemplatePtrInput {
	return (*jobTemplatePtrType)(v)
}

func (*jobTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplate)(nil)).Elem()
}

func (i *jobTemplatePtrType) ToJobTemplatePtrOutput() JobTemplatePtrOutput {
	return i.ToJobTemplatePtrOutputWithContext(context.Background())
}

func (i *jobTemplatePtrType) ToJobTemplatePtrOutputWithContext(ctx context.Context) JobTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobTemplatePtrOutput)
}

func (i *jobTemplatePtrType) ToOutput(ctx context.Context) pulumix.Output[*JobTemplate] {
	return pulumix.Output[*JobTemplate]{
		OutputState: i.ToJobTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

// Container Apps Job versioned application definition. Defines the desired state of an immutable revision. Any changes to this section Will result in a new revision being created
type JobTemplateOutput struct{ *pulumi.OutputState }

func (JobTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplate)(nil)).Elem()
}

func (o JobTemplateOutput) ToJobTemplateOutput() JobTemplateOutput {
	return o
}

func (o JobTemplateOutput) ToJobTemplateOutputWithContext(ctx context.Context) JobTemplateOutput {
	return o
}

func (o JobTemplateOutput) ToJobTemplatePtrOutput() JobTemplatePtrOutput {
	return o.ToJobTemplatePtrOutputWithContext(context.Background())
}

func (o JobTemplateOutput) ToJobTemplatePtrOutputWithContext(ctx context.Context) JobTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobTemplate) *JobTemplate {
		return &v
	}).(JobTemplatePtrOutput)
}

func (o JobTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[JobTemplate] {
	return pulumix.Output[JobTemplate]{
		OutputState: o.OutputState,
	}
}

// List of container definitions for the Container App.
func (o JobTemplateOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v JobTemplate) []Container { return v.Containers }).(ContainerArrayOutput)
}

// List of specialized containers that run before app containers.
func (o JobTemplateOutput) InitContainers() InitContainerArrayOutput {
	return o.ApplyT(func(v JobTemplate) []InitContainer { return v.InitContainers }).(InitContainerArrayOutput)
}

// List of volume definitions for the Container App.
func (o JobTemplateOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v JobTemplate) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

type JobTemplatePtrOutput struct{ *pulumi.OutputState }

func (JobTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplate)(nil)).Elem()
}

func (o JobTemplatePtrOutput) ToJobTemplatePtrOutput() JobTemplatePtrOutput {
	return o
}

func (o JobTemplatePtrOutput) ToJobTemplatePtrOutputWithContext(ctx context.Context) JobTemplatePtrOutput {
	return o
}

func (o JobTemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobTemplate] {
	return pulumix.Output[*JobTemplate]{
		OutputState: o.OutputState,
	}
}

func (o JobTemplatePtrOutput) Elem() JobTemplateOutput {
	return o.ApplyT(func(v *JobTemplate) JobTemplate {
		if v != nil {
			return *v
		}
		var ret JobTemplate
		return ret
	}).(JobTemplateOutput)
}

// List of container definitions for the Container App.
func (o JobTemplatePtrOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v *JobTemplate) []Container {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerArrayOutput)
}

// List of specialized containers that run before app containers.
func (o JobTemplatePtrOutput) InitContainers() InitContainerArrayOutput {
	return o.ApplyT(func(v *JobTemplate) []InitContainer {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(InitContainerArrayOutput)
}

// List of volume definitions for the Container App.
func (o JobTemplatePtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *JobTemplate) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// Container Apps Job versioned application definition. Defines the desired state of an immutable revision. Any changes to this section Will result in a new revision being created
type JobTemplateResponse struct {
	// List of container definitions for the Container App.
	Containers []ContainerResponse `pulumi:"containers"`
	// List of specialized containers that run before app containers.
	InitContainers []InitContainerResponse `pulumi:"initContainers"`
	// List of volume definitions for the Container App.
	Volumes []VolumeResponse `pulumi:"volumes"`
}

// Container Apps Job versioned application definition. Defines the desired state of an immutable revision. Any changes to this section Will result in a new revision being created
type JobTemplateResponseOutput struct{ *pulumi.OutputState }

func (JobTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobTemplateResponse)(nil)).Elem()
}

func (o JobTemplateResponseOutput) ToJobTemplateResponseOutput() JobTemplateResponseOutput {
	return o
}

func (o JobTemplateResponseOutput) ToJobTemplateResponseOutputWithContext(ctx context.Context) JobTemplateResponseOutput {
	return o
}

func (o JobTemplateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JobTemplateResponse] {
	return pulumix.Output[JobTemplateResponse]{
		OutputState: o.OutputState,
	}
}

// List of container definitions for the Container App.
func (o JobTemplateResponseOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v JobTemplateResponse) []ContainerResponse { return v.Containers }).(ContainerResponseArrayOutput)
}

// List of specialized containers that run before app containers.
func (o JobTemplateResponseOutput) InitContainers() InitContainerResponseArrayOutput {
	return o.ApplyT(func(v JobTemplateResponse) []InitContainerResponse { return v.InitContainers }).(InitContainerResponseArrayOutput)
}

// List of volume definitions for the Container App.
func (o JobTemplateResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v JobTemplateResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

type JobTemplateResponsePtrOutput struct{ *pulumi.OutputState }

func (JobTemplateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobTemplateResponse)(nil)).Elem()
}

func (o JobTemplateResponsePtrOutput) ToJobTemplateResponsePtrOutput() JobTemplateResponsePtrOutput {
	return o
}

func (o JobTemplateResponsePtrOutput) ToJobTemplateResponsePtrOutputWithContext(ctx context.Context) JobTemplateResponsePtrOutput {
	return o
}

func (o JobTemplateResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JobTemplateResponse] {
	return pulumix.Output[*JobTemplateResponse]{
		OutputState: o.OutputState,
	}
}

func (o JobTemplateResponsePtrOutput) Elem() JobTemplateResponseOutput {
	return o.ApplyT(func(v *JobTemplateResponse) JobTemplateResponse {
		if v != nil {
			return *v
		}
		var ret JobTemplateResponse
		return ret
	}).(JobTemplateResponseOutput)
}

// List of container definitions for the Container App.
func (o JobTemplateResponsePtrOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v *JobTemplateResponse) []ContainerResponse {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerResponseArrayOutput)
}

// List of specialized containers that run before app containers.
func (o JobTemplateResponsePtrOutput) InitContainers() InitContainerResponseArrayOutput {
	return o.ApplyT(func(v *JobTemplateResponse) []InitContainerResponse {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(InitContainerResponseArrayOutput)
}

// List of volume definitions for the Container App.
func (o JobTemplateResponsePtrOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v *JobTemplateResponse) []VolumeResponse {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeResponseArrayOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecks struct {
	// The list of the allowed client applications.
	AllowedClientApplications []string `pulumi:"allowedClientApplications"`
	// The list of the allowed groups.
	AllowedGroups []string `pulumi:"allowedGroups"`
}

// JwtClaimChecksInput is an input type that accepts JwtClaimChecksArgs and JwtClaimChecksOutput values.
// You can construct a concrete instance of `JwtClaimChecksInput` via:
//
//	JwtClaimChecksArgs{...}
type JwtClaimChecksInput interface {
	pulumi.Input

	ToJwtClaimChecksOutput() JwtClaimChecksOutput
	ToJwtClaimChecksOutputWithContext(context.Context) JwtClaimChecksOutput
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksArgs struct {
	// The list of the allowed client applications.
	AllowedClientApplications pulumi.StringArrayInput `pulumi:"allowedClientApplications"`
	// The list of the allowed groups.
	AllowedGroups pulumi.StringArrayInput `pulumi:"allowedGroups"`
}

func (JwtClaimChecksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimChecks)(nil)).Elem()
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksOutput() JwtClaimChecksOutput {
	return i.ToJwtClaimChecksOutputWithContext(context.Background())
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksOutputWithContext(ctx context.Context) JwtClaimChecksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimChecksOutput)
}

func (i JwtClaimChecksArgs) ToOutput(ctx context.Context) pulumix.Output[JwtClaimChecks] {
	return pulumix.Output[JwtClaimChecks]{
		OutputState: i.ToJwtClaimChecksOutputWithContext(ctx).OutputState,
	}
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return i.ToJwtClaimChecksPtrOutputWithContext(context.Background())
}

func (i JwtClaimChecksArgs) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimChecksOutput).ToJwtClaimChecksPtrOutputWithContext(ctx)
}

// JwtClaimChecksPtrInput is an input type that accepts JwtClaimChecksArgs, JwtClaimChecksPtr and JwtClaimChecksPtrOutput values.
// You can construct a concrete instance of `JwtClaimChecksPtrInput` via:
//
//	        JwtClaimChecksArgs{...}
//
//	or:
//
//	        nil
type JwtClaimChecksPtrInput interface {
	pulumi.Input

	ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput
	ToJwtClaimChecksPtrOutputWithContext(context.Context) JwtClaimChecksPtrOutput
}

type jwtClaimChecksPtrType JwtClaimChecksArgs

func JwtClaimChecksPtr(v *JwtClaimChecksArgs) JwtClaimChecksPtrInput {
	return (*jwtClaimChecksPtrType)(v)
}

func (*jwtClaimChecksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaimChecks)(nil)).Elem()
}

func (i *jwtClaimChecksPtrType) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return i.ToJwtClaimChecksPtrOutputWithContext(context.Background())
}

func (i *jwtClaimChecksPtrType) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JwtClaimChecksPtrOutput)
}

func (i *jwtClaimChecksPtrType) ToOutput(ctx context.Context) pulumix.Output[*JwtClaimChecks] {
	return pulumix.Output[*JwtClaimChecks]{
		OutputState: i.ToJwtClaimChecksPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimChecks)(nil)).Elem()
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksOutput() JwtClaimChecksOutput {
	return o
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksOutputWithContext(ctx context.Context) JwtClaimChecksOutput {
	return o
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return o.ToJwtClaimChecksPtrOutputWithContext(context.Background())
}

func (o JwtClaimChecksOutput) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JwtClaimChecks) *JwtClaimChecks {
		return &v
	}).(JwtClaimChecksPtrOutput)
}

func (o JwtClaimChecksOutput) ToOutput(ctx context.Context) pulumix.Output[JwtClaimChecks] {
	return pulumix.Output[JwtClaimChecks]{
		OutputState: o.OutputState,
	}
}

// The list of the allowed client applications.
func (o JwtClaimChecksOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecks) []string { return v.AllowedClientApplications }).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecks) []string { return v.AllowedGroups }).(pulumi.StringArrayOutput)
}

type JwtClaimChecksPtrOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaimChecks)(nil)).Elem()
}

func (o JwtClaimChecksPtrOutput) ToJwtClaimChecksPtrOutput() JwtClaimChecksPtrOutput {
	return o
}

func (o JwtClaimChecksPtrOutput) ToJwtClaimChecksPtrOutputWithContext(ctx context.Context) JwtClaimChecksPtrOutput {
	return o
}

func (o JwtClaimChecksPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JwtClaimChecks] {
	return pulumix.Output[*JwtClaimChecks]{
		OutputState: o.OutputState,
	}
}

func (o JwtClaimChecksPtrOutput) Elem() JwtClaimChecksOutput {
	return o.ApplyT(func(v *JwtClaimChecks) JwtClaimChecks {
		if v != nil {
			return *v
		}
		var ret JwtClaimChecks
		return ret
	}).(JwtClaimChecksOutput)
}

// The list of the allowed client applications.
func (o JwtClaimChecksPtrOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecks) []string {
		if v == nil {
			return nil
		}
		return v.AllowedClientApplications
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksPtrOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecks) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGroups
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksResponse struct {
	// The list of the allowed client applications.
	AllowedClientApplications []string `pulumi:"allowedClientApplications"`
	// The list of the allowed groups.
	AllowedGroups []string `pulumi:"allowedGroups"`
}

// The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecksResponseOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JwtClaimChecksResponse)(nil)).Elem()
}

func (o JwtClaimChecksResponseOutput) ToJwtClaimChecksResponseOutput() JwtClaimChecksResponseOutput {
	return o
}

func (o JwtClaimChecksResponseOutput) ToJwtClaimChecksResponseOutputWithContext(ctx context.Context) JwtClaimChecksResponseOutput {
	return o
}

func (o JwtClaimChecksResponseOutput) ToOutput(ctx context.Context) pulumix.Output[JwtClaimChecksResponse] {
	return pulumix.Output[JwtClaimChecksResponse]{
		OutputState: o.OutputState,
	}
}

// The list of the allowed client applications.
func (o JwtClaimChecksResponseOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecksResponse) []string { return v.AllowedClientApplications }).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksResponseOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JwtClaimChecksResponse) []string { return v.AllowedGroups }).(pulumi.StringArrayOutput)
}

type JwtClaimChecksResponsePtrOutput struct{ *pulumi.OutputState }

func (JwtClaimChecksResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JwtClaimChecksResponse)(nil)).Elem()
}

func (o JwtClaimChecksResponsePtrOutput) ToJwtClaimChecksResponsePtrOutput() JwtClaimChecksResponsePtrOutput {
	return o
}

func (o JwtClaimChecksResponsePtrOutput) ToJwtClaimChecksResponsePtrOutputWithContext(ctx context.Context) JwtClaimChecksResponsePtrOutput {
	return o
}

func (o JwtClaimChecksResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*JwtClaimChecksResponse] {
	return pulumix.Output[*JwtClaimChecksResponse]{
		OutputState: o.OutputState,
	}
}

func (o JwtClaimChecksResponsePtrOutput) Elem() JwtClaimChecksResponseOutput {
	return o.ApplyT(func(v *JwtClaimChecksResponse) JwtClaimChecksResponse {
		if v != nil {
			return *v
		}
		var ret JwtClaimChecksResponse
		return ret
	}).(JwtClaimChecksResponseOutput)
}

// The list of the allowed client applications.
func (o JwtClaimChecksResponsePtrOutput) AllowedClientApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecksResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedClientApplications
	}).(pulumi.StringArrayOutput)
}

// The list of the allowed groups.
func (o JwtClaimChecksResponsePtrOutput) AllowedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JwtClaimChecksResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedGroups
	}).(pulumi.StringArrayOutput)
}

// Configuration properties Keda component
type KedaConfigurationResponse struct {
	// The version of Keda
	Version string `pulumi:"version"`
}

// Configuration properties Keda component
type KedaConfigurationResponseOutput struct{ *pulumi.OutputState }

func (KedaConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KedaConfigurationResponse)(nil)).Elem()
}

func (o KedaConfigurationResponseOutput) ToKedaConfigurationResponseOutput() KedaConfigurationResponseOutput {
	return o
}

func (o KedaConfigurationResponseOutput) ToKedaConfigurationResponseOutputWithContext(ctx context.Context) KedaConfigurationResponseOutput {
	return o
}

func (o KedaConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KedaConfigurationResponse] {
	return pulumix.Output[KedaConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The version of Keda
func (o KedaConfigurationResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v KedaConfigurationResponse) string { return v.Version }).(pulumi.StringOutput)
}

type KedaConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (KedaConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KedaConfigurationResponse)(nil)).Elem()
}

func (o KedaConfigurationResponsePtrOutput) ToKedaConfigurationResponsePtrOutput() KedaConfigurationResponsePtrOutput {
	return o
}

func (o KedaConfigurationResponsePtrOutput) ToKedaConfigurationResponsePtrOutputWithContext(ctx context.Context) KedaConfigurationResponsePtrOutput {
	return o
}

func (o KedaConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KedaConfigurationResponse] {
	return pulumix.Output[*KedaConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o KedaConfigurationResponsePtrOutput) Elem() KedaConfigurationResponseOutput {
	return o.ApplyT(func(v *KedaConfigurationResponse) KedaConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret KedaConfigurationResponse
		return ret
	}).(KedaConfigurationResponseOutput)
}

// The version of Keda
func (o KedaConfigurationResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KedaConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
type LogAnalyticsConfiguration struct {
	// Log analytics customer id
	CustomerId *string `pulumi:"customerId"`
	// Log analytics customer key
	SharedKey *string `pulumi:"sharedKey"`
}

// LogAnalyticsConfigurationInput is an input type that accepts LogAnalyticsConfigurationArgs and LogAnalyticsConfigurationOutput values.
// You can construct a concrete instance of `LogAnalyticsConfigurationInput` via:
//
//	LogAnalyticsConfigurationArgs{...}
type LogAnalyticsConfigurationInput interface {
	pulumi.Input

	ToLogAnalyticsConfigurationOutput() LogAnalyticsConfigurationOutput
	ToLogAnalyticsConfigurationOutputWithContext(context.Context) LogAnalyticsConfigurationOutput
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
type LogAnalyticsConfigurationArgs struct {
	// Log analytics customer id
	CustomerId pulumi.StringPtrInput `pulumi:"customerId"`
	// Log analytics customer key
	SharedKey pulumi.StringPtrInput `pulumi:"sharedKey"`
}

func (LogAnalyticsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfiguration)(nil)).Elem()
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationOutput() LogAnalyticsConfigurationOutput {
	return i.ToLogAnalyticsConfigurationOutputWithContext(context.Background())
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationOutputWithContext(ctx context.Context) LogAnalyticsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsConfigurationOutput)
}

func (i LogAnalyticsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[LogAnalyticsConfiguration] {
	return pulumix.Output[LogAnalyticsConfiguration]{
		OutputState: i.ToLogAnalyticsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return i.ToLogAnalyticsConfigurationPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsConfigurationArgs) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsConfigurationOutput).ToLogAnalyticsConfigurationPtrOutputWithContext(ctx)
}

// LogAnalyticsConfigurationPtrInput is an input type that accepts LogAnalyticsConfigurationArgs, LogAnalyticsConfigurationPtr and LogAnalyticsConfigurationPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsConfigurationPtrInput` via:
//
//	        LogAnalyticsConfigurationArgs{...}
//
//	or:
//
//	        nil
type LogAnalyticsConfigurationPtrInput interface {
	pulumi.Input

	ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput
	ToLogAnalyticsConfigurationPtrOutputWithContext(context.Context) LogAnalyticsConfigurationPtrOutput
}

type logAnalyticsConfigurationPtrType LogAnalyticsConfigurationArgs

func LogAnalyticsConfigurationPtr(v *LogAnalyticsConfigurationArgs) LogAnalyticsConfigurationPtrInput {
	return (*logAnalyticsConfigurationPtrType)(v)
}

func (*logAnalyticsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsConfiguration)(nil)).Elem()
}

func (i *logAnalyticsConfigurationPtrType) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return i.ToLogAnalyticsConfigurationPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsConfigurationPtrType) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsConfigurationPtrOutput)
}

func (i *logAnalyticsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogAnalyticsConfiguration] {
	return pulumix.Output[*LogAnalyticsConfiguration]{
		OutputState: i.ToLogAnalyticsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
type LogAnalyticsConfigurationOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfiguration)(nil)).Elem()
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationOutput() LogAnalyticsConfigurationOutput {
	return o
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationOutputWithContext(ctx context.Context) LogAnalyticsConfigurationOutput {
	return o
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return o.ToLogAnalyticsConfigurationPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsConfigurationOutput) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnalyticsConfiguration) *LogAnalyticsConfiguration {
		return &v
	}).(LogAnalyticsConfigurationPtrOutput)
}

func (o LogAnalyticsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[LogAnalyticsConfiguration] {
	return pulumix.Output[LogAnalyticsConfiguration]{
		OutputState: o.OutputState,
	}
}

// Log analytics customer id
func (o LogAnalyticsConfigurationOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfiguration) *string { return v.CustomerId }).(pulumi.StringPtrOutput)
}

// Log analytics customer key
func (o LogAnalyticsConfigurationOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfiguration) *string { return v.SharedKey }).(pulumi.StringPtrOutput)
}

type LogAnalyticsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsConfiguration)(nil)).Elem()
}

func (o LogAnalyticsConfigurationPtrOutput) ToLogAnalyticsConfigurationPtrOutput() LogAnalyticsConfigurationPtrOutput {
	return o
}

func (o LogAnalyticsConfigurationPtrOutput) ToLogAnalyticsConfigurationPtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationPtrOutput {
	return o
}

func (o LogAnalyticsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogAnalyticsConfiguration] {
	return pulumix.Output[*LogAnalyticsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o LogAnalyticsConfigurationPtrOutput) Elem() LogAnalyticsConfigurationOutput {
	return o.ApplyT(func(v *LogAnalyticsConfiguration) LogAnalyticsConfiguration {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsConfiguration
		return ret
	}).(LogAnalyticsConfigurationOutput)
}

// Log analytics customer id
func (o LogAnalyticsConfigurationPtrOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CustomerId
	}).(pulumi.StringPtrOutput)
}

// Log analytics customer key
func (o LogAnalyticsConfigurationPtrOutput) SharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SharedKey
	}).(pulumi.StringPtrOutput)
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
type LogAnalyticsConfigurationResponse struct {
	// Log analytics customer id
	CustomerId *string `pulumi:"customerId"`
}

// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
type LogAnalyticsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsConfigurationResponse)(nil)).Elem()
}

func (o LogAnalyticsConfigurationResponseOutput) ToLogAnalyticsConfigurationResponseOutput() LogAnalyticsConfigurationResponseOutput {
	return o
}

func (o LogAnalyticsConfigurationResponseOutput) ToLogAnalyticsConfigurationResponseOutputWithContext(ctx context.Context) LogAnalyticsConfigurationResponseOutput {
	return o
}

func (o LogAnalyticsConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LogAnalyticsConfigurationResponse] {
	return pulumix.Output[LogAnalyticsConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Log analytics customer id
func (o LogAnalyticsConfigurationResponseOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsConfigurationResponse) *string { return v.CustomerId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsConfigurationResponse)(nil)).Elem()
}

func (o LogAnalyticsConfigurationResponsePtrOutput) ToLogAnalyticsConfigurationResponsePtrOutput() LogAnalyticsConfigurationResponsePtrOutput {
	return o
}

func (o LogAnalyticsConfigurationResponsePtrOutput) ToLogAnalyticsConfigurationResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsConfigurationResponsePtrOutput {
	return o
}

func (o LogAnalyticsConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogAnalyticsConfigurationResponse] {
	return pulumix.Output[*LogAnalyticsConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o LogAnalyticsConfigurationResponsePtrOutput) Elem() LogAnalyticsConfigurationResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsConfigurationResponse) LogAnalyticsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsConfigurationResponse
		return ret
	}).(LogAnalyticsConfigurationResponseOutput)
}

// Log analytics customer id
func (o LogAnalyticsConfigurationResponsePtrOutput) CustomerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomerId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
type Login struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
	// This is an advanced setting typically only needed by Windows Store application backends.
	// Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls []string `pulumi:"allowedExternalRedirectUrls"`
	// The configuration settings of the session cookie's expiration.
	CookieExpiration *CookieExpiration `pulumi:"cookieExpiration"`
	// The configuration settings of the nonce used in the login flow.
	Nonce *Nonce `pulumi:"nonce"`
	// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
	PreserveUrlFragmentsForLogins *bool `pulumi:"preserveUrlFragmentsForLogins"`
	// The routes that specify the endpoints used for login and logout requests.
	Routes *LoginRoutes `pulumi:"routes"`
	// The configuration settings of the token store.
	TokenStore *TokenStore `pulumi:"tokenStore"`
}

// LoginInput is an input type that accepts LoginArgs and LoginOutput values.
// You can construct a concrete instance of `LoginInput` via:
//
//	LoginArgs{...}
type LoginInput interface {
	pulumi.Input

	ToLoginOutput() LoginOutput
	ToLoginOutputWithContext(context.Context) LoginOutput
}

// The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
type LoginArgs struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
	// This is an advanced setting typically only needed by Windows Store application backends.
	// Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls pulumi.StringArrayInput `pulumi:"allowedExternalRedirectUrls"`
	// The configuration settings of the session cookie's expiration.
	CookieExpiration CookieExpirationPtrInput `pulumi:"cookieExpiration"`
	// The configuration settings of the nonce used in the login flow.
	Nonce NoncePtrInput `pulumi:"nonce"`
	// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
	PreserveUrlFragmentsForLogins pulumi.BoolPtrInput `pulumi:"preserveUrlFragmentsForLogins"`
	// The routes that specify the endpoints used for login and logout requests.
	Routes LoginRoutesPtrInput `pulumi:"routes"`
	// The configuration settings of the token store.
	TokenStore TokenStorePtrInput `pulumi:"tokenStore"`
}

func (LoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Login)(nil)).Elem()
}

func (i LoginArgs) ToLoginOutput() LoginOutput {
	return i.ToLoginOutputWithContext(context.Background())
}

func (i LoginArgs) ToLoginOutputWithContext(ctx context.Context) LoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginOutput)
}

func (i LoginArgs) ToOutput(ctx context.Context) pulumix.Output[Login] {
	return pulumix.Output[Login]{
		OutputState: i.ToLoginOutputWithContext(ctx).OutputState,
	}
}

func (i LoginArgs) ToLoginPtrOutput() LoginPtrOutput {
	return i.ToLoginPtrOutputWithContext(context.Background())
}

func (i LoginArgs) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginOutput).ToLoginPtrOutputWithContext(ctx)
}

// LoginPtrInput is an input type that accepts LoginArgs, LoginPtr and LoginPtrOutput values.
// You can construct a concrete instance of `LoginPtrInput` via:
//
//	        LoginArgs{...}
//
//	or:
//
//	        nil
type LoginPtrInput interface {
	pulumi.Input

	ToLoginPtrOutput() LoginPtrOutput
	ToLoginPtrOutputWithContext(context.Context) LoginPtrOutput
}

type loginPtrType LoginArgs

func LoginPtr(v *LoginArgs) LoginPtrInput {
	return (*loginPtrType)(v)
}

func (*loginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Login)(nil)).Elem()
}

func (i *loginPtrType) ToLoginPtrOutput() LoginPtrOutput {
	return i.ToLoginPtrOutputWithContext(context.Background())
}

func (i *loginPtrType) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginPtrOutput)
}

func (i *loginPtrType) ToOutput(ctx context.Context) pulumix.Output[*Login] {
	return pulumix.Output[*Login]{
		OutputState: i.ToLoginPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
type LoginOutput struct{ *pulumi.OutputState }

func (LoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Login)(nil)).Elem()
}

func (o LoginOutput) ToLoginOutput() LoginOutput {
	return o
}

func (o LoginOutput) ToLoginOutputWithContext(ctx context.Context) LoginOutput {
	return o
}

func (o LoginOutput) ToLoginPtrOutput() LoginPtrOutput {
	return o.ToLoginPtrOutputWithContext(context.Background())
}

func (o LoginOutput) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Login) *Login {
		return &v
	}).(LoginPtrOutput)
}

func (o LoginOutput) ToOutput(ctx context.Context) pulumix.Output[Login] {
	return pulumix.Output[Login]{
		OutputState: o.OutputState,
	}
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Login) []string { return v.AllowedExternalRedirectUrls }).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginOutput) CookieExpiration() CookieExpirationPtrOutput {
	return o.ApplyT(func(v Login) *CookieExpiration { return v.CookieExpiration }).(CookieExpirationPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginOutput) Nonce() NoncePtrOutput {
	return o.ApplyT(func(v Login) *Nonce { return v.Nonce }).(NoncePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Login) *bool { return v.PreserveUrlFragmentsForLogins }).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginOutput) Routes() LoginRoutesPtrOutput {
	return o.ApplyT(func(v Login) *LoginRoutes { return v.Routes }).(LoginRoutesPtrOutput)
}

// The configuration settings of the token store.
func (o LoginOutput) TokenStore() TokenStorePtrOutput {
	return o.ApplyT(func(v Login) *TokenStore { return v.TokenStore }).(TokenStorePtrOutput)
}

type LoginPtrOutput struct{ *pulumi.OutputState }

func (LoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Login)(nil)).Elem()
}

func (o LoginPtrOutput) ToLoginPtrOutput() LoginPtrOutput {
	return o
}

func (o LoginPtrOutput) ToLoginPtrOutputWithContext(ctx context.Context) LoginPtrOutput {
	return o
}

func (o LoginPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Login] {
	return pulumix.Output[*Login]{
		OutputState: o.OutputState,
	}
}

func (o LoginPtrOutput) Elem() LoginOutput {
	return o.ApplyT(func(v *Login) Login {
		if v != nil {
			return *v
		}
		var ret Login
		return ret
	}).(LoginOutput)
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginPtrOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Login) []string {
		if v == nil {
			return nil
		}
		return v.AllowedExternalRedirectUrls
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginPtrOutput) CookieExpiration() CookieExpirationPtrOutput {
	return o.ApplyT(func(v *Login) *CookieExpiration {
		if v == nil {
			return nil
		}
		return v.CookieExpiration
	}).(CookieExpirationPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginPtrOutput) Nonce() NoncePtrOutput {
	return o.ApplyT(func(v *Login) *Nonce {
		if v == nil {
			return nil
		}
		return v.Nonce
	}).(NoncePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginPtrOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Login) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveUrlFragmentsForLogins
	}).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginPtrOutput) Routes() LoginRoutesPtrOutput {
	return o.ApplyT(func(v *Login) *LoginRoutes {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(LoginRoutesPtrOutput)
}

// The configuration settings of the token store.
func (o LoginPtrOutput) TokenStore() TokenStorePtrOutput {
	return o.ApplyT(func(v *Login) *TokenStore {
		if v == nil {
			return nil
		}
		return v.TokenStore
	}).(TokenStorePtrOutput)
}

// The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
type LoginResponse struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
	// This is an advanced setting typically only needed by Windows Store application backends.
	// Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls []string `pulumi:"allowedExternalRedirectUrls"`
	// The configuration settings of the session cookie's expiration.
	CookieExpiration *CookieExpirationResponse `pulumi:"cookieExpiration"`
	// The configuration settings of the nonce used in the login flow.
	Nonce *NonceResponse `pulumi:"nonce"`
	// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
	PreserveUrlFragmentsForLogins *bool `pulumi:"preserveUrlFragmentsForLogins"`
	// The routes that specify the endpoints used for login and logout requests.
	Routes *LoginRoutesResponse `pulumi:"routes"`
	// The configuration settings of the token store.
	TokenStore *TokenStoreResponse `pulumi:"tokenStore"`
}

// The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
type LoginResponseOutput struct{ *pulumi.OutputState }

func (LoginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginResponse)(nil)).Elem()
}

func (o LoginResponseOutput) ToLoginResponseOutput() LoginResponseOutput {
	return o
}

func (o LoginResponseOutput) ToLoginResponseOutputWithContext(ctx context.Context) LoginResponseOutput {
	return o
}

func (o LoginResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LoginResponse] {
	return pulumix.Output[LoginResponse]{
		OutputState: o.OutputState,
	}
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginResponseOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoginResponse) []string { return v.AllowedExternalRedirectUrls }).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginResponseOutput) CookieExpiration() CookieExpirationResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *CookieExpirationResponse { return v.CookieExpiration }).(CookieExpirationResponsePtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginResponseOutput) Nonce() NonceResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *NonceResponse { return v.Nonce }).(NonceResponsePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginResponseOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoginResponse) *bool { return v.PreserveUrlFragmentsForLogins }).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginResponseOutput) Routes() LoginRoutesResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *LoginRoutesResponse { return v.Routes }).(LoginRoutesResponsePtrOutput)
}

// The configuration settings of the token store.
func (o LoginResponseOutput) TokenStore() TokenStoreResponsePtrOutput {
	return o.ApplyT(func(v LoginResponse) *TokenStoreResponse { return v.TokenStore }).(TokenStoreResponsePtrOutput)
}

type LoginResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginResponse)(nil)).Elem()
}

func (o LoginResponsePtrOutput) ToLoginResponsePtrOutput() LoginResponsePtrOutput {
	return o
}

func (o LoginResponsePtrOutput) ToLoginResponsePtrOutputWithContext(ctx context.Context) LoginResponsePtrOutput {
	return o
}

func (o LoginResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoginResponse] {
	return pulumix.Output[*LoginResponse]{
		OutputState: o.OutputState,
	}
}

func (o LoginResponsePtrOutput) Elem() LoginResponseOutput {
	return o.ApplyT(func(v *LoginResponse) LoginResponse {
		if v != nil {
			return *v
		}
		var ret LoginResponse
		return ret
	}).(LoginResponseOutput)
}

// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
// This is an advanced setting typically only needed by Windows Store application backends.
// Note that URLs within the current domain are always implicitly allowed.
func (o LoginResponsePtrOutput) AllowedExternalRedirectUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoginResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedExternalRedirectUrls
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the session cookie's expiration.
func (o LoginResponsePtrOutput) CookieExpiration() CookieExpirationResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *CookieExpirationResponse {
		if v == nil {
			return nil
		}
		return v.CookieExpiration
	}).(CookieExpirationResponsePtrOutput)
}

// The configuration settings of the nonce used in the login flow.
func (o LoginResponsePtrOutput) Nonce() NonceResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *NonceResponse {
		if v == nil {
			return nil
		}
		return v.Nonce
	}).(NonceResponsePtrOutput)
}

// <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>.
func (o LoginResponsePtrOutput) PreserveUrlFragmentsForLogins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoginResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveUrlFragmentsForLogins
	}).(pulumi.BoolPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
func (o LoginResponsePtrOutput) Routes() LoginRoutesResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *LoginRoutesResponse {
		if v == nil {
			return nil
		}
		return v.Routes
	}).(LoginRoutesResponsePtrOutput)
}

// The configuration settings of the token store.
func (o LoginResponsePtrOutput) TokenStore() TokenStoreResponsePtrOutput {
	return o.ApplyT(func(v *LoginResponse) *TokenStoreResponse {
		if v == nil {
			return nil
		}
		return v.TokenStore
	}).(TokenStoreResponsePtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutes struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint *string `pulumi:"logoutEndpoint"`
}

// LoginRoutesInput is an input type that accepts LoginRoutesArgs and LoginRoutesOutput values.
// You can construct a concrete instance of `LoginRoutesInput` via:
//
//	LoginRoutesArgs{...}
type LoginRoutesInput interface {
	pulumi.Input

	ToLoginRoutesOutput() LoginRoutesOutput
	ToLoginRoutesOutputWithContext(context.Context) LoginRoutesOutput
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesArgs struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint pulumi.StringPtrInput `pulumi:"logoutEndpoint"`
}

func (LoginRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginRoutes)(nil)).Elem()
}

func (i LoginRoutesArgs) ToLoginRoutesOutput() LoginRoutesOutput {
	return i.ToLoginRoutesOutputWithContext(context.Background())
}

func (i LoginRoutesArgs) ToLoginRoutesOutputWithContext(ctx context.Context) LoginRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginRoutesOutput)
}

func (i LoginRoutesArgs) ToOutput(ctx context.Context) pulumix.Output[LoginRoutes] {
	return pulumix.Output[LoginRoutes]{
		OutputState: i.ToLoginRoutesOutputWithContext(ctx).OutputState,
	}
}

func (i LoginRoutesArgs) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return i.ToLoginRoutesPtrOutputWithContext(context.Background())
}

func (i LoginRoutesArgs) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginRoutesOutput).ToLoginRoutesPtrOutputWithContext(ctx)
}

// LoginRoutesPtrInput is an input type that accepts LoginRoutesArgs, LoginRoutesPtr and LoginRoutesPtrOutput values.
// You can construct a concrete instance of `LoginRoutesPtrInput` via:
//
//	        LoginRoutesArgs{...}
//
//	or:
//
//	        nil
type LoginRoutesPtrInput interface {
	pulumi.Input

	ToLoginRoutesPtrOutput() LoginRoutesPtrOutput
	ToLoginRoutesPtrOutputWithContext(context.Context) LoginRoutesPtrOutput
}

type loginRoutesPtrType LoginRoutesArgs

func LoginRoutesPtr(v *LoginRoutesArgs) LoginRoutesPtrInput {
	return (*loginRoutesPtrType)(v)
}

func (*loginRoutesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginRoutes)(nil)).Elem()
}

func (i *loginRoutesPtrType) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return i.ToLoginRoutesPtrOutputWithContext(context.Background())
}

func (i *loginRoutesPtrType) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginRoutesPtrOutput)
}

func (i *loginRoutesPtrType) ToOutput(ctx context.Context) pulumix.Output[*LoginRoutes] {
	return pulumix.Output[*LoginRoutes]{
		OutputState: i.ToLoginRoutesPtrOutputWithContext(ctx).OutputState,
	}
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesOutput struct{ *pulumi.OutputState }

func (LoginRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginRoutes)(nil)).Elem()
}

func (o LoginRoutesOutput) ToLoginRoutesOutput() LoginRoutesOutput {
	return o
}

func (o LoginRoutesOutput) ToLoginRoutesOutputWithContext(ctx context.Context) LoginRoutesOutput {
	return o
}

func (o LoginRoutesOutput) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return o.ToLoginRoutesPtrOutputWithContext(context.Background())
}

func (o LoginRoutesOutput) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginRoutes) *LoginRoutes {
		return &v
	}).(LoginRoutesPtrOutput)
}

func (o LoginRoutesOutput) ToOutput(ctx context.Context) pulumix.Output[LoginRoutes] {
	return pulumix.Output[LoginRoutes]{
		OutputState: o.OutputState,
	}
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoginRoutes) *string { return v.LogoutEndpoint }).(pulumi.StringPtrOutput)
}

type LoginRoutesPtrOutput struct{ *pulumi.OutputState }

func (LoginRoutesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginRoutes)(nil)).Elem()
}

func (o LoginRoutesPtrOutput) ToLoginRoutesPtrOutput() LoginRoutesPtrOutput {
	return o
}

func (o LoginRoutesPtrOutput) ToLoginRoutesPtrOutputWithContext(ctx context.Context) LoginRoutesPtrOutput {
	return o
}

func (o LoginRoutesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoginRoutes] {
	return pulumix.Output[*LoginRoutes]{
		OutputState: o.OutputState,
	}
}

func (o LoginRoutesPtrOutput) Elem() LoginRoutesOutput {
	return o.ApplyT(func(v *LoginRoutes) LoginRoutes {
		if v != nil {
			return *v
		}
		var ret LoginRoutes
		return ret
	}).(LoginRoutesOutput)
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesPtrOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginRoutes) *string {
		if v == nil {
			return nil
		}
		return v.LogoutEndpoint
	}).(pulumi.StringPtrOutput)
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesResponse struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint *string `pulumi:"logoutEndpoint"`
}

// The routes that specify the endpoints used for login and logout requests.
type LoginRoutesResponseOutput struct{ *pulumi.OutputState }

func (LoginRoutesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginRoutesResponse)(nil)).Elem()
}

func (o LoginRoutesResponseOutput) ToLoginRoutesResponseOutput() LoginRoutesResponseOutput {
	return o
}

func (o LoginRoutesResponseOutput) ToLoginRoutesResponseOutputWithContext(ctx context.Context) LoginRoutesResponseOutput {
	return o
}

func (o LoginRoutesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LoginRoutesResponse] {
	return pulumix.Output[LoginRoutesResponse]{
		OutputState: o.OutputState,
	}
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesResponseOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoginRoutesResponse) *string { return v.LogoutEndpoint }).(pulumi.StringPtrOutput)
}

type LoginRoutesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginRoutesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginRoutesResponse)(nil)).Elem()
}

func (o LoginRoutesResponsePtrOutput) ToLoginRoutesResponsePtrOutput() LoginRoutesResponsePtrOutput {
	return o
}

func (o LoginRoutesResponsePtrOutput) ToLoginRoutesResponsePtrOutputWithContext(ctx context.Context) LoginRoutesResponsePtrOutput {
	return o
}

func (o LoginRoutesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoginRoutesResponse] {
	return pulumix.Output[*LoginRoutesResponse]{
		OutputState: o.OutputState,
	}
}

func (o LoginRoutesResponsePtrOutput) Elem() LoginRoutesResponseOutput {
	return o.ApplyT(func(v *LoginRoutesResponse) LoginRoutesResponse {
		if v != nil {
			return *v
		}
		var ret LoginRoutesResponse
		return ret
	}).(LoginRoutesResponseOutput)
}

// The endpoint at which a logout request should be made.
func (o LoginRoutesResponsePtrOutput) LogoutEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoginRoutesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogoutEndpoint
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopes struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// LoginScopesInput is an input type that accepts LoginScopesArgs and LoginScopesOutput values.
// You can construct a concrete instance of `LoginScopesInput` via:
//
//	LoginScopesArgs{...}
type LoginScopesInput interface {
	pulumi.Input

	ToLoginScopesOutput() LoginScopesOutput
	ToLoginScopesOutputWithContext(context.Context) LoginScopesOutput
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesArgs struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (LoginScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginScopes)(nil)).Elem()
}

func (i LoginScopesArgs) ToLoginScopesOutput() LoginScopesOutput {
	return i.ToLoginScopesOutputWithContext(context.Background())
}

func (i LoginScopesArgs) ToLoginScopesOutputWithContext(ctx context.Context) LoginScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginScopesOutput)
}

func (i LoginScopesArgs) ToOutput(ctx context.Context) pulumix.Output[LoginScopes] {
	return pulumix.Output[LoginScopes]{
		OutputState: i.ToLoginScopesOutputWithContext(ctx).OutputState,
	}
}

func (i LoginScopesArgs) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return i.ToLoginScopesPtrOutputWithContext(context.Background())
}

func (i LoginScopesArgs) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginScopesOutput).ToLoginScopesPtrOutputWithContext(ctx)
}

// LoginScopesPtrInput is an input type that accepts LoginScopesArgs, LoginScopesPtr and LoginScopesPtrOutput values.
// You can construct a concrete instance of `LoginScopesPtrInput` via:
//
//	        LoginScopesArgs{...}
//
//	or:
//
//	        nil
type LoginScopesPtrInput interface {
	pulumi.Input

	ToLoginScopesPtrOutput() LoginScopesPtrOutput
	ToLoginScopesPtrOutputWithContext(context.Context) LoginScopesPtrOutput
}

type loginScopesPtrType LoginScopesArgs

func LoginScopesPtr(v *LoginScopesArgs) LoginScopesPtrInput {
	return (*loginScopesPtrType)(v)
}

func (*loginScopesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginScopes)(nil)).Elem()
}

func (i *loginScopesPtrType) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return i.ToLoginScopesPtrOutputWithContext(context.Background())
}

func (i *loginScopesPtrType) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoginScopesPtrOutput)
}

func (i *loginScopesPtrType) ToOutput(ctx context.Context) pulumix.Output[*LoginScopes] {
	return pulumix.Output[*LoginScopes]{
		OutputState: i.ToLoginScopesPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesOutput struct{ *pulumi.OutputState }

func (LoginScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginScopes)(nil)).Elem()
}

func (o LoginScopesOutput) ToLoginScopesOutput() LoginScopesOutput {
	return o
}

func (o LoginScopesOutput) ToLoginScopesOutputWithContext(ctx context.Context) LoginScopesOutput {
	return o
}

func (o LoginScopesOutput) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return o.ToLoginScopesPtrOutputWithContext(context.Background())
}

func (o LoginScopesOutput) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoginScopes) *LoginScopes {
		return &v
	}).(LoginScopesPtrOutput)
}

func (o LoginScopesOutput) ToOutput(ctx context.Context) pulumix.Output[LoginScopes] {
	return pulumix.Output[LoginScopes]{
		OutputState: o.OutputState,
	}
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoginScopes) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type LoginScopesPtrOutput struct{ *pulumi.OutputState }

func (LoginScopesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginScopes)(nil)).Elem()
}

func (o LoginScopesPtrOutput) ToLoginScopesPtrOutput() LoginScopesPtrOutput {
	return o
}

func (o LoginScopesPtrOutput) ToLoginScopesPtrOutputWithContext(ctx context.Context) LoginScopesPtrOutput {
	return o
}

func (o LoginScopesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoginScopes] {
	return pulumix.Output[*LoginScopes]{
		OutputState: o.OutputState,
	}
}

func (o LoginScopesPtrOutput) Elem() LoginScopesOutput {
	return o.ApplyT(func(v *LoginScopes) LoginScopes {
		if v != nil {
			return *v
		}
		var ret LoginScopes
		return ret
	}).(LoginScopesOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoginScopes) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesResponse struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopesResponseOutput struct{ *pulumi.OutputState }

func (LoginScopesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoginScopesResponse)(nil)).Elem()
}

func (o LoginScopesResponseOutput) ToLoginScopesResponseOutput() LoginScopesResponseOutput {
	return o
}

func (o LoginScopesResponseOutput) ToLoginScopesResponseOutputWithContext(ctx context.Context) LoginScopesResponseOutput {
	return o
}

func (o LoginScopesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LoginScopesResponse] {
	return pulumix.Output[LoginScopesResponse]{
		OutputState: o.OutputState,
	}
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoginScopesResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type LoginScopesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoginScopesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoginScopesResponse)(nil)).Elem()
}

func (o LoginScopesResponsePtrOutput) ToLoginScopesResponsePtrOutput() LoginScopesResponsePtrOutput {
	return o
}

func (o LoginScopesResponsePtrOutput) ToLoginScopesResponsePtrOutputWithContext(ctx context.Context) LoginScopesResponsePtrOutput {
	return o
}

func (o LoginScopesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LoginScopesResponse] {
	return pulumix.Output[*LoginScopesResponse]{
		OutputState: o.OutputState,
	}
}

func (o LoginScopesResponsePtrOutput) Elem() LoginScopesResponseOutput {
	return o.ApplyT(func(v *LoginScopesResponse) LoginScopesResponse {
		if v != nil {
			return *v
		}
		var ret LoginScopesResponse
		return ret
	}).(LoginScopesResponseOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o LoginScopesResponsePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoginScopesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Certificate resource specific properties
type ManagedCertificateProperties struct {
	// Selected type of domain control validation for managed certificates.
	DomainControlValidation *string `pulumi:"domainControlValidation"`
	// Subject name of the certificate.
	SubjectName *string `pulumi:"subjectName"`
}

// ManagedCertificatePropertiesInput is an input type that accepts ManagedCertificatePropertiesArgs and ManagedCertificatePropertiesOutput values.
// You can construct a concrete instance of `ManagedCertificatePropertiesInput` via:
//
//	ManagedCertificatePropertiesArgs{...}
type ManagedCertificatePropertiesInput interface {
	pulumi.Input

	ToManagedCertificatePropertiesOutput() ManagedCertificatePropertiesOutput
	ToManagedCertificatePropertiesOutputWithContext(context.Context) ManagedCertificatePropertiesOutput
}

// Certificate resource specific properties
type ManagedCertificatePropertiesArgs struct {
	// Selected type of domain control validation for managed certificates.
	DomainControlValidation pulumi.StringPtrInput `pulumi:"domainControlValidation"`
	// Subject name of the certificate.
	SubjectName pulumi.StringPtrInput `pulumi:"subjectName"`
}

func (ManagedCertificatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateProperties)(nil)).Elem()
}

func (i ManagedCertificatePropertiesArgs) ToManagedCertificatePropertiesOutput() ManagedCertificatePropertiesOutput {
	return i.ToManagedCertificatePropertiesOutputWithContext(context.Background())
}

func (i ManagedCertificatePropertiesArgs) ToManagedCertificatePropertiesOutputWithContext(ctx context.Context) ManagedCertificatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificatePropertiesOutput)
}

func (i ManagedCertificatePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedCertificateProperties] {
	return pulumix.Output[ManagedCertificateProperties]{
		OutputState: i.ToManagedCertificatePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedCertificatePropertiesArgs) ToManagedCertificatePropertiesPtrOutput() ManagedCertificatePropertiesPtrOutput {
	return i.ToManagedCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i ManagedCertificatePropertiesArgs) ToManagedCertificatePropertiesPtrOutputWithContext(ctx context.Context) ManagedCertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificatePropertiesOutput).ToManagedCertificatePropertiesPtrOutputWithContext(ctx)
}

// ManagedCertificatePropertiesPtrInput is an input type that accepts ManagedCertificatePropertiesArgs, ManagedCertificatePropertiesPtr and ManagedCertificatePropertiesPtrOutput values.
// You can construct a concrete instance of `ManagedCertificatePropertiesPtrInput` via:
//
//	        ManagedCertificatePropertiesArgs{...}
//
//	or:
//
//	        nil
type ManagedCertificatePropertiesPtrInput interface {
	pulumi.Input

	ToManagedCertificatePropertiesPtrOutput() ManagedCertificatePropertiesPtrOutput
	ToManagedCertificatePropertiesPtrOutputWithContext(context.Context) ManagedCertificatePropertiesPtrOutput
}

type managedCertificatePropertiesPtrType ManagedCertificatePropertiesArgs

func ManagedCertificatePropertiesPtr(v *ManagedCertificatePropertiesArgs) ManagedCertificatePropertiesPtrInput {
	return (*managedCertificatePropertiesPtrType)(v)
}

func (*managedCertificatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificateProperties)(nil)).Elem()
}

func (i *managedCertificatePropertiesPtrType) ToManagedCertificatePropertiesPtrOutput() ManagedCertificatePropertiesPtrOutput {
	return i.ToManagedCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i *managedCertificatePropertiesPtrType) ToManagedCertificatePropertiesPtrOutputWithContext(ctx context.Context) ManagedCertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificatePropertiesPtrOutput)
}

func (i *managedCertificatePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedCertificateProperties] {
	return pulumix.Output[*ManagedCertificateProperties]{
		OutputState: i.ToManagedCertificatePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Certificate resource specific properties
type ManagedCertificatePropertiesOutput struct{ *pulumi.OutputState }

func (ManagedCertificatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateProperties)(nil)).Elem()
}

func (o ManagedCertificatePropertiesOutput) ToManagedCertificatePropertiesOutput() ManagedCertificatePropertiesOutput {
	return o
}

func (o ManagedCertificatePropertiesOutput) ToManagedCertificatePropertiesOutputWithContext(ctx context.Context) ManagedCertificatePropertiesOutput {
	return o
}

func (o ManagedCertificatePropertiesOutput) ToManagedCertificatePropertiesPtrOutput() ManagedCertificatePropertiesPtrOutput {
	return o.ToManagedCertificatePropertiesPtrOutputWithContext(context.Background())
}

func (o ManagedCertificatePropertiesOutput) ToManagedCertificatePropertiesPtrOutputWithContext(ctx context.Context) ManagedCertificatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedCertificateProperties) *ManagedCertificateProperties {
		return &v
	}).(ManagedCertificatePropertiesPtrOutput)
}

func (o ManagedCertificatePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedCertificateProperties] {
	return pulumix.Output[ManagedCertificateProperties]{
		OutputState: o.OutputState,
	}
}

// Selected type of domain control validation for managed certificates.
func (o ManagedCertificatePropertiesOutput) DomainControlValidation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificateProperties) *string { return v.DomainControlValidation }).(pulumi.StringPtrOutput)
}

// Subject name of the certificate.
func (o ManagedCertificatePropertiesOutput) SubjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificateProperties) *string { return v.SubjectName }).(pulumi.StringPtrOutput)
}

type ManagedCertificatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagedCertificatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificateProperties)(nil)).Elem()
}

func (o ManagedCertificatePropertiesPtrOutput) ToManagedCertificatePropertiesPtrOutput() ManagedCertificatePropertiesPtrOutput {
	return o
}

func (o ManagedCertificatePropertiesPtrOutput) ToManagedCertificatePropertiesPtrOutputWithContext(ctx context.Context) ManagedCertificatePropertiesPtrOutput {
	return o
}

func (o ManagedCertificatePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedCertificateProperties] {
	return pulumix.Output[*ManagedCertificateProperties]{
		OutputState: o.OutputState,
	}
}

func (o ManagedCertificatePropertiesPtrOutput) Elem() ManagedCertificatePropertiesOutput {
	return o.ApplyT(func(v *ManagedCertificateProperties) ManagedCertificateProperties {
		if v != nil {
			return *v
		}
		var ret ManagedCertificateProperties
		return ret
	}).(ManagedCertificatePropertiesOutput)
}

// Selected type of domain control validation for managed certificates.
func (o ManagedCertificatePropertiesPtrOutput) DomainControlValidation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedCertificateProperties) *string {
		if v == nil {
			return nil
		}
		return v.DomainControlValidation
	}).(pulumi.StringPtrOutput)
}

// Subject name of the certificate.
func (o ManagedCertificatePropertiesPtrOutput) SubjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedCertificateProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubjectName
	}).(pulumi.StringPtrOutput)
}

// Certificate resource specific properties
type ManagedCertificateResponseProperties struct {
	// Selected type of domain control validation for managed certificates.
	DomainControlValidation *string `pulumi:"domainControlValidation"`
	// Any error occurred during the certificate provision.
	Error string `pulumi:"error"`
	// Provisioning state of the certificate.
	ProvisioningState string `pulumi:"provisioningState"`
	// Subject name of the certificate.
	SubjectName *string `pulumi:"subjectName"`
	// A TXT token used for DNS TXT domain control validation when issuing this type of managed certificates.
	ValidationToken string `pulumi:"validationToken"`
}

// Certificate resource specific properties
type ManagedCertificateResponsePropertiesOutput struct{ *pulumi.OutputState }

func (ManagedCertificateResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateResponseProperties)(nil)).Elem()
}

func (o ManagedCertificateResponsePropertiesOutput) ToManagedCertificateResponsePropertiesOutput() ManagedCertificateResponsePropertiesOutput {
	return o
}

func (o ManagedCertificateResponsePropertiesOutput) ToManagedCertificateResponsePropertiesOutputWithContext(ctx context.Context) ManagedCertificateResponsePropertiesOutput {
	return o
}

func (o ManagedCertificateResponsePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedCertificateResponseProperties] {
	return pulumix.Output[ManagedCertificateResponseProperties]{
		OutputState: o.OutputState,
	}
}

// Selected type of domain control validation for managed certificates.
func (o ManagedCertificateResponsePropertiesOutput) DomainControlValidation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificateResponseProperties) *string { return v.DomainControlValidation }).(pulumi.StringPtrOutput)
}

// Any error occurred during the certificate provision.
func (o ManagedCertificateResponsePropertiesOutput) Error() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponseProperties) string { return v.Error }).(pulumi.StringOutput)
}

// Provisioning state of the certificate.
func (o ManagedCertificateResponsePropertiesOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponseProperties) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Subject name of the certificate.
func (o ManagedCertificateResponsePropertiesOutput) SubjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificateResponseProperties) *string { return v.SubjectName }).(pulumi.StringPtrOutput)
}

// A TXT token used for DNS TXT domain control validation when issuing this type of managed certificates.
func (o ManagedCertificateResponsePropertiesOutput) ValidationToken() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponseProperties) string { return v.ValidationToken }).(pulumi.StringOutput)
}

// Peer authentication settings for the Managed Environment
type ManagedEnvironmentPeerAuthentication struct {
	// Mutual TLS authentication settings for the Managed Environment
	Mtls *Mtls `pulumi:"mtls"`
}

// ManagedEnvironmentPeerAuthenticationInput is an input type that accepts ManagedEnvironmentPeerAuthenticationArgs and ManagedEnvironmentPeerAuthenticationOutput values.
// You can construct a concrete instance of `ManagedEnvironmentPeerAuthenticationInput` via:
//
//	ManagedEnvironmentPeerAuthenticationArgs{...}
type ManagedEnvironmentPeerAuthenticationInput interface {
	pulumi.Input

	ToManagedEnvironmentPeerAuthenticationOutput() ManagedEnvironmentPeerAuthenticationOutput
	ToManagedEnvironmentPeerAuthenticationOutputWithContext(context.Context) ManagedEnvironmentPeerAuthenticationOutput
}

// Peer authentication settings for the Managed Environment
type ManagedEnvironmentPeerAuthenticationArgs struct {
	// Mutual TLS authentication settings for the Managed Environment
	Mtls MtlsPtrInput `pulumi:"mtls"`
}

func (ManagedEnvironmentPeerAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedEnvironmentPeerAuthentication)(nil)).Elem()
}

func (i ManagedEnvironmentPeerAuthenticationArgs) ToManagedEnvironmentPeerAuthenticationOutput() ManagedEnvironmentPeerAuthenticationOutput {
	return i.ToManagedEnvironmentPeerAuthenticationOutputWithContext(context.Background())
}

func (i ManagedEnvironmentPeerAuthenticationArgs) ToManagedEnvironmentPeerAuthenticationOutputWithContext(ctx context.Context) ManagedEnvironmentPeerAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedEnvironmentPeerAuthenticationOutput)
}

func (i ManagedEnvironmentPeerAuthenticationArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedEnvironmentPeerAuthentication] {
	return pulumix.Output[ManagedEnvironmentPeerAuthentication]{
		OutputState: i.ToManagedEnvironmentPeerAuthenticationOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedEnvironmentPeerAuthenticationArgs) ToManagedEnvironmentPeerAuthenticationPtrOutput() ManagedEnvironmentPeerAuthenticationPtrOutput {
	return i.ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(context.Background())
}

func (i ManagedEnvironmentPeerAuthenticationArgs) ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(ctx context.Context) ManagedEnvironmentPeerAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedEnvironmentPeerAuthenticationOutput).ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(ctx)
}

// ManagedEnvironmentPeerAuthenticationPtrInput is an input type that accepts ManagedEnvironmentPeerAuthenticationArgs, ManagedEnvironmentPeerAuthenticationPtr and ManagedEnvironmentPeerAuthenticationPtrOutput values.
// You can construct a concrete instance of `ManagedEnvironmentPeerAuthenticationPtrInput` via:
//
//	        ManagedEnvironmentPeerAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ManagedEnvironmentPeerAuthenticationPtrInput interface {
	pulumi.Input

	ToManagedEnvironmentPeerAuthenticationPtrOutput() ManagedEnvironmentPeerAuthenticationPtrOutput
	ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(context.Context) ManagedEnvironmentPeerAuthenticationPtrOutput
}

type managedEnvironmentPeerAuthenticationPtrType ManagedEnvironmentPeerAuthenticationArgs

func ManagedEnvironmentPeerAuthenticationPtr(v *ManagedEnvironmentPeerAuthenticationArgs) ManagedEnvironmentPeerAuthenticationPtrInput {
	return (*managedEnvironmentPeerAuthenticationPtrType)(v)
}

func (*managedEnvironmentPeerAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedEnvironmentPeerAuthentication)(nil)).Elem()
}

func (i *managedEnvironmentPeerAuthenticationPtrType) ToManagedEnvironmentPeerAuthenticationPtrOutput() ManagedEnvironmentPeerAuthenticationPtrOutput {
	return i.ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(context.Background())
}

func (i *managedEnvironmentPeerAuthenticationPtrType) ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(ctx context.Context) ManagedEnvironmentPeerAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedEnvironmentPeerAuthenticationPtrOutput)
}

func (i *managedEnvironmentPeerAuthenticationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedEnvironmentPeerAuthentication] {
	return pulumix.Output[*ManagedEnvironmentPeerAuthentication]{
		OutputState: i.ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(ctx).OutputState,
	}
}

// Peer authentication settings for the Managed Environment
type ManagedEnvironmentPeerAuthenticationOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentPeerAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedEnvironmentPeerAuthentication)(nil)).Elem()
}

func (o ManagedEnvironmentPeerAuthenticationOutput) ToManagedEnvironmentPeerAuthenticationOutput() ManagedEnvironmentPeerAuthenticationOutput {
	return o
}

func (o ManagedEnvironmentPeerAuthenticationOutput) ToManagedEnvironmentPeerAuthenticationOutputWithContext(ctx context.Context) ManagedEnvironmentPeerAuthenticationOutput {
	return o
}

func (o ManagedEnvironmentPeerAuthenticationOutput) ToManagedEnvironmentPeerAuthenticationPtrOutput() ManagedEnvironmentPeerAuthenticationPtrOutput {
	return o.ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(context.Background())
}

func (o ManagedEnvironmentPeerAuthenticationOutput) ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(ctx context.Context) ManagedEnvironmentPeerAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedEnvironmentPeerAuthentication) *ManagedEnvironmentPeerAuthentication {
		return &v
	}).(ManagedEnvironmentPeerAuthenticationPtrOutput)
}

func (o ManagedEnvironmentPeerAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedEnvironmentPeerAuthentication] {
	return pulumix.Output[ManagedEnvironmentPeerAuthentication]{
		OutputState: o.OutputState,
	}
}

// Mutual TLS authentication settings for the Managed Environment
func (o ManagedEnvironmentPeerAuthenticationOutput) Mtls() MtlsPtrOutput {
	return o.ApplyT(func(v ManagedEnvironmentPeerAuthentication) *Mtls { return v.Mtls }).(MtlsPtrOutput)
}

type ManagedEnvironmentPeerAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentPeerAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedEnvironmentPeerAuthentication)(nil)).Elem()
}

func (o ManagedEnvironmentPeerAuthenticationPtrOutput) ToManagedEnvironmentPeerAuthenticationPtrOutput() ManagedEnvironmentPeerAuthenticationPtrOutput {
	return o
}

func (o ManagedEnvironmentPeerAuthenticationPtrOutput) ToManagedEnvironmentPeerAuthenticationPtrOutputWithContext(ctx context.Context) ManagedEnvironmentPeerAuthenticationPtrOutput {
	return o
}

func (o ManagedEnvironmentPeerAuthenticationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedEnvironmentPeerAuthentication] {
	return pulumix.Output[*ManagedEnvironmentPeerAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ManagedEnvironmentPeerAuthenticationPtrOutput) Elem() ManagedEnvironmentPeerAuthenticationOutput {
	return o.ApplyT(func(v *ManagedEnvironmentPeerAuthentication) ManagedEnvironmentPeerAuthentication {
		if v != nil {
			return *v
		}
		var ret ManagedEnvironmentPeerAuthentication
		return ret
	}).(ManagedEnvironmentPeerAuthenticationOutput)
}

// Mutual TLS authentication settings for the Managed Environment
func (o ManagedEnvironmentPeerAuthenticationPtrOutput) Mtls() MtlsPtrOutput {
	return o.ApplyT(func(v *ManagedEnvironmentPeerAuthentication) *Mtls {
		if v == nil {
			return nil
		}
		return v.Mtls
	}).(MtlsPtrOutput)
}

// Peer authentication settings for the Managed Environment
type ManagedEnvironmentResponsePeerAuthentication struct {
	// Mutual TLS authentication settings for the Managed Environment
	Mtls *MtlsResponse `pulumi:"mtls"`
}

// Peer authentication settings for the Managed Environment
type ManagedEnvironmentResponsePeerAuthenticationOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentResponsePeerAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedEnvironmentResponsePeerAuthentication)(nil)).Elem()
}

func (o ManagedEnvironmentResponsePeerAuthenticationOutput) ToManagedEnvironmentResponsePeerAuthenticationOutput() ManagedEnvironmentResponsePeerAuthenticationOutput {
	return o
}

func (o ManagedEnvironmentResponsePeerAuthenticationOutput) ToManagedEnvironmentResponsePeerAuthenticationOutputWithContext(ctx context.Context) ManagedEnvironmentResponsePeerAuthenticationOutput {
	return o
}

func (o ManagedEnvironmentResponsePeerAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedEnvironmentResponsePeerAuthentication] {
	return pulumix.Output[ManagedEnvironmentResponsePeerAuthentication]{
		OutputState: o.OutputState,
	}
}

// Mutual TLS authentication settings for the Managed Environment
func (o ManagedEnvironmentResponsePeerAuthenticationOutput) Mtls() MtlsResponsePtrOutput {
	return o.ApplyT(func(v ManagedEnvironmentResponsePeerAuthentication) *MtlsResponse { return v.Mtls }).(MtlsResponsePtrOutput)
}

type ManagedEnvironmentResponsePeerAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentResponsePeerAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedEnvironmentResponsePeerAuthentication)(nil)).Elem()
}

func (o ManagedEnvironmentResponsePeerAuthenticationPtrOutput) ToManagedEnvironmentResponsePeerAuthenticationPtrOutput() ManagedEnvironmentResponsePeerAuthenticationPtrOutput {
	return o
}

func (o ManagedEnvironmentResponsePeerAuthenticationPtrOutput) ToManagedEnvironmentResponsePeerAuthenticationPtrOutputWithContext(ctx context.Context) ManagedEnvironmentResponsePeerAuthenticationPtrOutput {
	return o
}

func (o ManagedEnvironmentResponsePeerAuthenticationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedEnvironmentResponsePeerAuthentication] {
	return pulumix.Output[*ManagedEnvironmentResponsePeerAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o ManagedEnvironmentResponsePeerAuthenticationPtrOutput) Elem() ManagedEnvironmentResponsePeerAuthenticationOutput {
	return o.ApplyT(func(v *ManagedEnvironmentResponsePeerAuthentication) ManagedEnvironmentResponsePeerAuthentication {
		if v != nil {
			return *v
		}
		var ret ManagedEnvironmentResponsePeerAuthentication
		return ret
	}).(ManagedEnvironmentResponsePeerAuthenticationOutput)
}

// Mutual TLS authentication settings for the Managed Environment
func (o ManagedEnvironmentResponsePeerAuthenticationPtrOutput) Mtls() MtlsResponsePtrOutput {
	return o.ApplyT(func(v *ManagedEnvironmentResponsePeerAuthentication) *MtlsResponse {
		if v == nil {
			return nil
		}
		return v.Mtls
	}).(MtlsResponsePtrOutput)
}

// Storage properties
type ManagedEnvironmentStorageProperties struct {
	// Azure file properties
	AzureFile *AzureFileProperties `pulumi:"azureFile"`
}

// ManagedEnvironmentStoragePropertiesInput is an input type that accepts ManagedEnvironmentStoragePropertiesArgs and ManagedEnvironmentStoragePropertiesOutput values.
// You can construct a concrete instance of `ManagedEnvironmentStoragePropertiesInput` via:
//
//	ManagedEnvironmentStoragePropertiesArgs{...}
type ManagedEnvironmentStoragePropertiesInput interface {
	pulumi.Input

	ToManagedEnvironmentStoragePropertiesOutput() ManagedEnvironmentStoragePropertiesOutput
	ToManagedEnvironmentStoragePropertiesOutputWithContext(context.Context) ManagedEnvironmentStoragePropertiesOutput
}

// Storage properties
type ManagedEnvironmentStoragePropertiesArgs struct {
	// Azure file properties
	AzureFile AzureFilePropertiesPtrInput `pulumi:"azureFile"`
}

func (ManagedEnvironmentStoragePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedEnvironmentStorageProperties)(nil)).Elem()
}

func (i ManagedEnvironmentStoragePropertiesArgs) ToManagedEnvironmentStoragePropertiesOutput() ManagedEnvironmentStoragePropertiesOutput {
	return i.ToManagedEnvironmentStoragePropertiesOutputWithContext(context.Background())
}

func (i ManagedEnvironmentStoragePropertiesArgs) ToManagedEnvironmentStoragePropertiesOutputWithContext(ctx context.Context) ManagedEnvironmentStoragePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedEnvironmentStoragePropertiesOutput)
}

func (i ManagedEnvironmentStoragePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedEnvironmentStorageProperties] {
	return pulumix.Output[ManagedEnvironmentStorageProperties]{
		OutputState: i.ToManagedEnvironmentStoragePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedEnvironmentStoragePropertiesArgs) ToManagedEnvironmentStoragePropertiesPtrOutput() ManagedEnvironmentStoragePropertiesPtrOutput {
	return i.ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(context.Background())
}

func (i ManagedEnvironmentStoragePropertiesArgs) ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ManagedEnvironmentStoragePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedEnvironmentStoragePropertiesOutput).ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(ctx)
}

// ManagedEnvironmentStoragePropertiesPtrInput is an input type that accepts ManagedEnvironmentStoragePropertiesArgs, ManagedEnvironmentStoragePropertiesPtr and ManagedEnvironmentStoragePropertiesPtrOutput values.
// You can construct a concrete instance of `ManagedEnvironmentStoragePropertiesPtrInput` via:
//
//	        ManagedEnvironmentStoragePropertiesArgs{...}
//
//	or:
//
//	        nil
type ManagedEnvironmentStoragePropertiesPtrInput interface {
	pulumi.Input

	ToManagedEnvironmentStoragePropertiesPtrOutput() ManagedEnvironmentStoragePropertiesPtrOutput
	ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(context.Context) ManagedEnvironmentStoragePropertiesPtrOutput
}

type managedEnvironmentStoragePropertiesPtrType ManagedEnvironmentStoragePropertiesArgs

func ManagedEnvironmentStoragePropertiesPtr(v *ManagedEnvironmentStoragePropertiesArgs) ManagedEnvironmentStoragePropertiesPtrInput {
	return (*managedEnvironmentStoragePropertiesPtrType)(v)
}

func (*managedEnvironmentStoragePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedEnvironmentStorageProperties)(nil)).Elem()
}

func (i *managedEnvironmentStoragePropertiesPtrType) ToManagedEnvironmentStoragePropertiesPtrOutput() ManagedEnvironmentStoragePropertiesPtrOutput {
	return i.ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(context.Background())
}

func (i *managedEnvironmentStoragePropertiesPtrType) ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ManagedEnvironmentStoragePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedEnvironmentStoragePropertiesPtrOutput)
}

func (i *managedEnvironmentStoragePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedEnvironmentStorageProperties] {
	return pulumix.Output[*ManagedEnvironmentStorageProperties]{
		OutputState: i.ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Storage properties
type ManagedEnvironmentStoragePropertiesOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentStoragePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedEnvironmentStorageProperties)(nil)).Elem()
}

func (o ManagedEnvironmentStoragePropertiesOutput) ToManagedEnvironmentStoragePropertiesOutput() ManagedEnvironmentStoragePropertiesOutput {
	return o
}

func (o ManagedEnvironmentStoragePropertiesOutput) ToManagedEnvironmentStoragePropertiesOutputWithContext(ctx context.Context) ManagedEnvironmentStoragePropertiesOutput {
	return o
}

func (o ManagedEnvironmentStoragePropertiesOutput) ToManagedEnvironmentStoragePropertiesPtrOutput() ManagedEnvironmentStoragePropertiesPtrOutput {
	return o.ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(context.Background())
}

func (o ManagedEnvironmentStoragePropertiesOutput) ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ManagedEnvironmentStoragePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedEnvironmentStorageProperties) *ManagedEnvironmentStorageProperties {
		return &v
	}).(ManagedEnvironmentStoragePropertiesPtrOutput)
}

func (o ManagedEnvironmentStoragePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedEnvironmentStorageProperties] {
	return pulumix.Output[ManagedEnvironmentStorageProperties]{
		OutputState: o.OutputState,
	}
}

// Azure file properties
func (o ManagedEnvironmentStoragePropertiesOutput) AzureFile() AzureFilePropertiesPtrOutput {
	return o.ApplyT(func(v ManagedEnvironmentStorageProperties) *AzureFileProperties { return v.AzureFile }).(AzureFilePropertiesPtrOutput)
}

type ManagedEnvironmentStoragePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentStoragePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedEnvironmentStorageProperties)(nil)).Elem()
}

func (o ManagedEnvironmentStoragePropertiesPtrOutput) ToManagedEnvironmentStoragePropertiesPtrOutput() ManagedEnvironmentStoragePropertiesPtrOutput {
	return o
}

func (o ManagedEnvironmentStoragePropertiesPtrOutput) ToManagedEnvironmentStoragePropertiesPtrOutputWithContext(ctx context.Context) ManagedEnvironmentStoragePropertiesPtrOutput {
	return o
}

func (o ManagedEnvironmentStoragePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedEnvironmentStorageProperties] {
	return pulumix.Output[*ManagedEnvironmentStorageProperties]{
		OutputState: o.OutputState,
	}
}

func (o ManagedEnvironmentStoragePropertiesPtrOutput) Elem() ManagedEnvironmentStoragePropertiesOutput {
	return o.ApplyT(func(v *ManagedEnvironmentStorageProperties) ManagedEnvironmentStorageProperties {
		if v != nil {
			return *v
		}
		var ret ManagedEnvironmentStorageProperties
		return ret
	}).(ManagedEnvironmentStoragePropertiesOutput)
}

// Azure file properties
func (o ManagedEnvironmentStoragePropertiesPtrOutput) AzureFile() AzureFilePropertiesPtrOutput {
	return o.ApplyT(func(v *ManagedEnvironmentStorageProperties) *AzureFileProperties {
		if v == nil {
			return nil
		}
		return v.AzureFile
	}).(AzureFilePropertiesPtrOutput)
}

// Storage properties
type ManagedEnvironmentStorageResponseProperties struct {
	// Azure file properties
	AzureFile *AzureFilePropertiesResponse `pulumi:"azureFile"`
}

// Storage properties
type ManagedEnvironmentStorageResponsePropertiesOutput struct{ *pulumi.OutputState }

func (ManagedEnvironmentStorageResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedEnvironmentStorageResponseProperties)(nil)).Elem()
}

func (o ManagedEnvironmentStorageResponsePropertiesOutput) ToManagedEnvironmentStorageResponsePropertiesOutput() ManagedEnvironmentStorageResponsePropertiesOutput {
	return o
}

func (o ManagedEnvironmentStorageResponsePropertiesOutput) ToManagedEnvironmentStorageResponsePropertiesOutputWithContext(ctx context.Context) ManagedEnvironmentStorageResponsePropertiesOutput {
	return o
}

func (o ManagedEnvironmentStorageResponsePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedEnvironmentStorageResponseProperties] {
	return pulumix.Output[ManagedEnvironmentStorageResponseProperties]{
		OutputState: o.OutputState,
	}
}

// Azure file properties
func (o ManagedEnvironmentStorageResponsePropertiesOutput) AzureFile() AzureFilePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ManagedEnvironmentStorageResponseProperties) *AzureFilePropertiesResponse { return v.AzureFile }).(AzureFilePropertiesResponsePtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

func (i *managedServiceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

func (o ManagedServiceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentityResponse] {
	return pulumix.Output[ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentityResponse] {
	return pulumix.Output[*ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Configuration properties for mutual TLS authentication
type Mtls struct {
	// Boolean indicating whether the mutual TLS authentication is enabled
	Enabled *bool `pulumi:"enabled"`
}

// MtlsInput is an input type that accepts MtlsArgs and MtlsOutput values.
// You can construct a concrete instance of `MtlsInput` via:
//
//	MtlsArgs{...}
type MtlsInput interface {
	pulumi.Input

	ToMtlsOutput() MtlsOutput
	ToMtlsOutputWithContext(context.Context) MtlsOutput
}

// Configuration properties for mutual TLS authentication
type MtlsArgs struct {
	// Boolean indicating whether the mutual TLS authentication is enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (MtlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Mtls)(nil)).Elem()
}

func (i MtlsArgs) ToMtlsOutput() MtlsOutput {
	return i.ToMtlsOutputWithContext(context.Background())
}

func (i MtlsArgs) ToMtlsOutputWithContext(ctx context.Context) MtlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlsOutput)
}

func (i MtlsArgs) ToOutput(ctx context.Context) pulumix.Output[Mtls] {
	return pulumix.Output[Mtls]{
		OutputState: i.ToMtlsOutputWithContext(ctx).OutputState,
	}
}

func (i MtlsArgs) ToMtlsPtrOutput() MtlsPtrOutput {
	return i.ToMtlsPtrOutputWithContext(context.Background())
}

func (i MtlsArgs) ToMtlsPtrOutputWithContext(ctx context.Context) MtlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlsOutput).ToMtlsPtrOutputWithContext(ctx)
}

// MtlsPtrInput is an input type that accepts MtlsArgs, MtlsPtr and MtlsPtrOutput values.
// You can construct a concrete instance of `MtlsPtrInput` via:
//
//	        MtlsArgs{...}
//
//	or:
//
//	        nil
type MtlsPtrInput interface {
	pulumi.Input

	ToMtlsPtrOutput() MtlsPtrOutput
	ToMtlsPtrOutputWithContext(context.Context) MtlsPtrOutput
}

type mtlsPtrType MtlsArgs

func MtlsPtr(v *MtlsArgs) MtlsPtrInput {
	return (*mtlsPtrType)(v)
}

func (*mtlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Mtls)(nil)).Elem()
}

func (i *mtlsPtrType) ToMtlsPtrOutput() MtlsPtrOutput {
	return i.ToMtlsPtrOutputWithContext(context.Background())
}

func (i *mtlsPtrType) ToMtlsPtrOutputWithContext(ctx context.Context) MtlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtlsPtrOutput)
}

func (i *mtlsPtrType) ToOutput(ctx context.Context) pulumix.Output[*Mtls] {
	return pulumix.Output[*Mtls]{
		OutputState: i.ToMtlsPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration properties for mutual TLS authentication
type MtlsOutput struct{ *pulumi.OutputState }

func (MtlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mtls)(nil)).Elem()
}

func (o MtlsOutput) ToMtlsOutput() MtlsOutput {
	return o
}

func (o MtlsOutput) ToMtlsOutputWithContext(ctx context.Context) MtlsOutput {
	return o
}

func (o MtlsOutput) ToMtlsPtrOutput() MtlsPtrOutput {
	return o.ToMtlsPtrOutputWithContext(context.Background())
}

func (o MtlsOutput) ToMtlsPtrOutputWithContext(ctx context.Context) MtlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mtls) *Mtls {
		return &v
	}).(MtlsPtrOutput)
}

func (o MtlsOutput) ToOutput(ctx context.Context) pulumix.Output[Mtls] {
	return pulumix.Output[Mtls]{
		OutputState: o.OutputState,
	}
}

// Boolean indicating whether the mutual TLS authentication is enabled
func (o MtlsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Mtls) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type MtlsPtrOutput struct{ *pulumi.OutputState }

func (MtlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mtls)(nil)).Elem()
}

func (o MtlsPtrOutput) ToMtlsPtrOutput() MtlsPtrOutput {
	return o
}

func (o MtlsPtrOutput) ToMtlsPtrOutputWithContext(ctx context.Context) MtlsPtrOutput {
	return o
}

func (o MtlsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Mtls] {
	return pulumix.Output[*Mtls]{
		OutputState: o.OutputState,
	}
}

func (o MtlsPtrOutput) Elem() MtlsOutput {
	return o.ApplyT(func(v *Mtls) Mtls {
		if v != nil {
			return *v
		}
		var ret Mtls
		return ret
	}).(MtlsOutput)
}

// Boolean indicating whether the mutual TLS authentication is enabled
func (o MtlsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Mtls) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration properties for mutual TLS authentication
type MtlsResponse struct {
	// Boolean indicating whether the mutual TLS authentication is enabled
	Enabled *bool `pulumi:"enabled"`
}

// Configuration properties for mutual TLS authentication
type MtlsResponseOutput struct{ *pulumi.OutputState }

func (MtlsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MtlsResponse)(nil)).Elem()
}

func (o MtlsResponseOutput) ToMtlsResponseOutput() MtlsResponseOutput {
	return o
}

func (o MtlsResponseOutput) ToMtlsResponseOutputWithContext(ctx context.Context) MtlsResponseOutput {
	return o
}

func (o MtlsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MtlsResponse] {
	return pulumix.Output[MtlsResponse]{
		OutputState: o.OutputState,
	}
}

// Boolean indicating whether the mutual TLS authentication is enabled
func (o MtlsResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MtlsResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type MtlsResponsePtrOutput struct{ *pulumi.OutputState }

func (MtlsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MtlsResponse)(nil)).Elem()
}

func (o MtlsResponsePtrOutput) ToMtlsResponsePtrOutput() MtlsResponsePtrOutput {
	return o
}

func (o MtlsResponsePtrOutput) ToMtlsResponsePtrOutputWithContext(ctx context.Context) MtlsResponsePtrOutput {
	return o
}

func (o MtlsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MtlsResponse] {
	return pulumix.Output[*MtlsResponse]{
		OutputState: o.OutputState,
	}
}

func (o MtlsResponsePtrOutput) Elem() MtlsResponseOutput {
	return o.ApplyT(func(v *MtlsResponse) MtlsResponse {
		if v != nil {
			return *v
		}
		var ret MtlsResponse
		return ret
	}).(MtlsResponseOutput)
}

// Boolean indicating whether the mutual TLS authentication is enabled
func (o MtlsResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MtlsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
type Nonce struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval *string `pulumi:"nonceExpirationInterval"`
	// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
	ValidateNonce *bool `pulumi:"validateNonce"`
}

// NonceInput is an input type that accepts NonceArgs and NonceOutput values.
// You can construct a concrete instance of `NonceInput` via:
//
//	NonceArgs{...}
type NonceInput interface {
	pulumi.Input

	ToNonceOutput() NonceOutput
	ToNonceOutputWithContext(context.Context) NonceOutput
}

// The configuration settings of the nonce used in the login flow.
type NonceArgs struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval pulumi.StringPtrInput `pulumi:"nonceExpirationInterval"`
	// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
	ValidateNonce pulumi.BoolPtrInput `pulumi:"validateNonce"`
}

func (NonceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Nonce)(nil)).Elem()
}

func (i NonceArgs) ToNonceOutput() NonceOutput {
	return i.ToNonceOutputWithContext(context.Background())
}

func (i NonceArgs) ToNonceOutputWithContext(ctx context.Context) NonceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonceOutput)
}

func (i NonceArgs) ToOutput(ctx context.Context) pulumix.Output[Nonce] {
	return pulumix.Output[Nonce]{
		OutputState: i.ToNonceOutputWithContext(ctx).OutputState,
	}
}

func (i NonceArgs) ToNoncePtrOutput() NoncePtrOutput {
	return i.ToNoncePtrOutputWithContext(context.Background())
}

func (i NonceArgs) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NonceOutput).ToNoncePtrOutputWithContext(ctx)
}

// NoncePtrInput is an input type that accepts NonceArgs, NoncePtr and NoncePtrOutput values.
// You can construct a concrete instance of `NoncePtrInput` via:
//
//	        NonceArgs{...}
//
//	or:
//
//	        nil
type NoncePtrInput interface {
	pulumi.Input

	ToNoncePtrOutput() NoncePtrOutput
	ToNoncePtrOutputWithContext(context.Context) NoncePtrOutput
}

type noncePtrType NonceArgs

func NoncePtr(v *NonceArgs) NoncePtrInput {
	return (*noncePtrType)(v)
}

func (*noncePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Nonce)(nil)).Elem()
}

func (i *noncePtrType) ToNoncePtrOutput() NoncePtrOutput {
	return i.ToNoncePtrOutputWithContext(context.Background())
}

func (i *noncePtrType) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoncePtrOutput)
}

func (i *noncePtrType) ToOutput(ctx context.Context) pulumix.Output[*Nonce] {
	return pulumix.Output[*Nonce]{
		OutputState: i.ToNoncePtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the nonce used in the login flow.
type NonceOutput struct{ *pulumi.OutputState }

func (NonceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Nonce)(nil)).Elem()
}

func (o NonceOutput) ToNonceOutput() NonceOutput {
	return o
}

func (o NonceOutput) ToNonceOutputWithContext(ctx context.Context) NonceOutput {
	return o
}

func (o NonceOutput) ToNoncePtrOutput() NoncePtrOutput {
	return o.ToNoncePtrOutputWithContext(context.Background())
}

func (o NonceOutput) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Nonce) *Nonce {
		return &v
	}).(NoncePtrOutput)
}

func (o NonceOutput) ToOutput(ctx context.Context) pulumix.Output[Nonce] {
	return pulumix.Output[Nonce]{
		OutputState: o.OutputState,
	}
}

// The time after the request is made when the nonce should expire.
func (o NonceOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Nonce) *string { return v.NonceExpirationInterval }).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NonceOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Nonce) *bool { return v.ValidateNonce }).(pulumi.BoolPtrOutput)
}

type NoncePtrOutput struct{ *pulumi.OutputState }

func (NoncePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nonce)(nil)).Elem()
}

func (o NoncePtrOutput) ToNoncePtrOutput() NoncePtrOutput {
	return o
}

func (o NoncePtrOutput) ToNoncePtrOutputWithContext(ctx context.Context) NoncePtrOutput {
	return o
}

func (o NoncePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Nonce] {
	return pulumix.Output[*Nonce]{
		OutputState: o.OutputState,
	}
}

func (o NoncePtrOutput) Elem() NonceOutput {
	return o.ApplyT(func(v *Nonce) Nonce {
		if v != nil {
			return *v
		}
		var ret Nonce
		return ret
	}).(NonceOutput)
}

// The time after the request is made when the nonce should expire.
func (o NoncePtrOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Nonce) *string {
		if v == nil {
			return nil
		}
		return v.NonceExpirationInterval
	}).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NoncePtrOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Nonce) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateNonce
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the nonce used in the login flow.
type NonceResponse struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval *string `pulumi:"nonceExpirationInterval"`
	// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
	ValidateNonce *bool `pulumi:"validateNonce"`
}

// The configuration settings of the nonce used in the login flow.
type NonceResponseOutput struct{ *pulumi.OutputState }

func (NonceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NonceResponse)(nil)).Elem()
}

func (o NonceResponseOutput) ToNonceResponseOutput() NonceResponseOutput {
	return o
}

func (o NonceResponseOutput) ToNonceResponseOutputWithContext(ctx context.Context) NonceResponseOutput {
	return o
}

func (o NonceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NonceResponse] {
	return pulumix.Output[NonceResponse]{
		OutputState: o.OutputState,
	}
}

// The time after the request is made when the nonce should expire.
func (o NonceResponseOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NonceResponse) *string { return v.NonceExpirationInterval }).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NonceResponseOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NonceResponse) *bool { return v.ValidateNonce }).(pulumi.BoolPtrOutput)
}

type NonceResponsePtrOutput struct{ *pulumi.OutputState }

func (NonceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NonceResponse)(nil)).Elem()
}

func (o NonceResponsePtrOutput) ToNonceResponsePtrOutput() NonceResponsePtrOutput {
	return o
}

func (o NonceResponsePtrOutput) ToNonceResponsePtrOutputWithContext(ctx context.Context) NonceResponsePtrOutput {
	return o
}

func (o NonceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NonceResponse] {
	return pulumix.Output[*NonceResponse]{
		OutputState: o.OutputState,
	}
}

func (o NonceResponsePtrOutput) Elem() NonceResponseOutput {
	return o.ApplyT(func(v *NonceResponse) NonceResponse {
		if v != nil {
			return *v
		}
		var ret NonceResponse
		return ret
	}).(NonceResponseOutput)
}

// The time after the request is made when the nonce should expire.
func (o NonceResponsePtrOutput) NonceExpirationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NonceResponse) *string {
		if v == nil {
			return nil
		}
		return v.NonceExpirationInterval
	}).(pulumi.StringPtrOutput)
}

// <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>.
func (o NonceResponsePtrOutput) ValidateNonce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NonceResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ValidateNonce
	}).(pulumi.BoolPtrOutput)
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredential struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The method that should be used to authenticate the user.
	Method *ClientCredentialMethod `pulumi:"method"`
}

// OpenIdConnectClientCredentialInput is an input type that accepts OpenIdConnectClientCredentialArgs and OpenIdConnectClientCredentialOutput values.
// You can construct a concrete instance of `OpenIdConnectClientCredentialInput` via:
//
//	OpenIdConnectClientCredentialArgs{...}
type OpenIdConnectClientCredentialInput interface {
	pulumi.Input

	ToOpenIdConnectClientCredentialOutput() OpenIdConnectClientCredentialOutput
	ToOpenIdConnectClientCredentialOutputWithContext(context.Context) OpenIdConnectClientCredentialOutput
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialArgs struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName pulumi.StringPtrInput `pulumi:"clientSecretSettingName"`
	// The method that should be used to authenticate the user.
	Method ClientCredentialMethodPtrInput `pulumi:"method"`
}

func (OpenIdConnectClientCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectClientCredential)(nil)).Elem()
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialOutput() OpenIdConnectClientCredentialOutput {
	return i.ToOpenIdConnectClientCredentialOutputWithContext(context.Background())
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectClientCredentialOutput)
}

func (i OpenIdConnectClientCredentialArgs) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectClientCredential] {
	return pulumix.Output[OpenIdConnectClientCredential]{
		OutputState: i.ToOpenIdConnectClientCredentialOutputWithContext(ctx).OutputState,
	}
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return i.ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectClientCredentialArgs) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectClientCredentialOutput).ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx)
}

// OpenIdConnectClientCredentialPtrInput is an input type that accepts OpenIdConnectClientCredentialArgs, OpenIdConnectClientCredentialPtr and OpenIdConnectClientCredentialPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectClientCredentialPtrInput` via:
//
//	        OpenIdConnectClientCredentialArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectClientCredentialPtrInput interface {
	pulumi.Input

	ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput
	ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Context) OpenIdConnectClientCredentialPtrOutput
}

type openIdConnectClientCredentialPtrType OpenIdConnectClientCredentialArgs

func OpenIdConnectClientCredentialPtr(v *OpenIdConnectClientCredentialArgs) OpenIdConnectClientCredentialPtrInput {
	return (*openIdConnectClientCredentialPtrType)(v)
}

func (*openIdConnectClientCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectClientCredential)(nil)).Elem()
}

func (i *openIdConnectClientCredentialPtrType) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return i.ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Background())
}

func (i *openIdConnectClientCredentialPtrType) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectClientCredentialPtrOutput)
}

func (i *openIdConnectClientCredentialPtrType) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectClientCredential] {
	return pulumix.Output[*OpenIdConnectClientCredential]{
		OutputState: i.ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx).OutputState,
	}
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectClientCredential)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialOutput() OpenIdConnectClientCredentialOutput {
	return o
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialOutput {
	return o
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return o.ToOpenIdConnectClientCredentialPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectClientCredentialOutput) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectClientCredential) *OpenIdConnectClientCredential {
		return &v
	}).(OpenIdConnectClientCredentialPtrOutput)
}

func (o OpenIdConnectClientCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectClientCredential] {
	return pulumix.Output[OpenIdConnectClientCredential]{
		OutputState: o.OutputState,
	}
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredential) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialOutput) Method() ClientCredentialMethodPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredential) *ClientCredentialMethod { return v.Method }).(ClientCredentialMethodPtrOutput)
}

type OpenIdConnectClientCredentialPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectClientCredential)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialPtrOutput) ToOpenIdConnectClientCredentialPtrOutput() OpenIdConnectClientCredentialPtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialPtrOutput) ToOpenIdConnectClientCredentialPtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialPtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectClientCredential] {
	return pulumix.Output[*OpenIdConnectClientCredential]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectClientCredentialPtrOutput) Elem() OpenIdConnectClientCredentialOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredential) OpenIdConnectClientCredential {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectClientCredential
		return ret
	}).(OpenIdConnectClientCredentialOutput)
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialPtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredential) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialPtrOutput) Method() ClientCredentialMethodPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredential) *ClientCredentialMethod {
		if v == nil {
			return nil
		}
		return v.Method
	}).(ClientCredentialMethodPtrOutput)
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialResponse struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName *string `pulumi:"clientSecretSettingName"`
	// The method that should be used to authenticate the user.
	Method *string `pulumi:"method"`
}

// The authentication client credentials of the custom Open ID Connect provider.
type OpenIdConnectClientCredentialResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectClientCredentialResponse)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialResponseOutput) ToOpenIdConnectClientCredentialResponseOutput() OpenIdConnectClientCredentialResponseOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponseOutput) ToOpenIdConnectClientCredentialResponseOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialResponseOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectClientCredentialResponse] {
	return pulumix.Output[OpenIdConnectClientCredentialResponse]{
		OutputState: o.OutputState,
	}
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialResponseOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredentialResponse) *string { return v.ClientSecretSettingName }).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialResponseOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectClientCredentialResponse) *string { return v.Method }).(pulumi.StringPtrOutput)
}

type OpenIdConnectClientCredentialResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectClientCredentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectClientCredentialResponse)(nil)).Elem()
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) ToOpenIdConnectClientCredentialResponsePtrOutput() OpenIdConnectClientCredentialResponsePtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) ToOpenIdConnectClientCredentialResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectClientCredentialResponsePtrOutput {
	return o
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectClientCredentialResponse] {
	return pulumix.Output[*OpenIdConnectClientCredentialResponse]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectClientCredentialResponsePtrOutput) Elem() OpenIdConnectClientCredentialResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredentialResponse) OpenIdConnectClientCredentialResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectClientCredentialResponse
		return ret
	}).(OpenIdConnectClientCredentialResponseOutput)
}

// The app setting that contains the client secret for the custom Open ID Connect provider.
func (o OpenIdConnectClientCredentialResponsePtrOutput) ClientSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The method that should be used to authenticate the user.
func (o OpenIdConnectClientCredentialResponsePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectClientCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfig struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The endpoint that provides the keys necessary to validate the token.
	CertificationUri *string `pulumi:"certificationUri"`
	// The endpoint that issues the token.
	Issuer *string `pulumi:"issuer"`
	// The endpoint to be used to request a token.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIdConfiguration *string `pulumi:"wellKnownOpenIdConfiguration"`
}

// OpenIdConnectConfigInput is an input type that accepts OpenIdConnectConfigArgs and OpenIdConnectConfigOutput values.
// You can construct a concrete instance of `OpenIdConnectConfigInput` via:
//
//	OpenIdConnectConfigArgs{...}
type OpenIdConnectConfigInput interface {
	pulumi.Input

	ToOpenIdConnectConfigOutput() OpenIdConnectConfigOutput
	ToOpenIdConnectConfigOutputWithContext(context.Context) OpenIdConnectConfigOutput
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigArgs struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// The endpoint that provides the keys necessary to validate the token.
	CertificationUri pulumi.StringPtrInput `pulumi:"certificationUri"`
	// The endpoint that issues the token.
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// The endpoint to be used to request a token.
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIdConfiguration pulumi.StringPtrInput `pulumi:"wellKnownOpenIdConfiguration"`
}

func (OpenIdConnectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectConfig)(nil)).Elem()
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigOutput() OpenIdConnectConfigOutput {
	return i.ToOpenIdConnectConfigOutputWithContext(context.Background())
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigOutputWithContext(ctx context.Context) OpenIdConnectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectConfigOutput)
}

func (i OpenIdConnectConfigArgs) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectConfig] {
	return pulumix.Output[OpenIdConnectConfig]{
		OutputState: i.ToOpenIdConnectConfigOutputWithContext(ctx).OutputState,
	}
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return i.ToOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectConfigArgs) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectConfigOutput).ToOpenIdConnectConfigPtrOutputWithContext(ctx)
}

// OpenIdConnectConfigPtrInput is an input type that accepts OpenIdConnectConfigArgs, OpenIdConnectConfigPtr and OpenIdConnectConfigPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectConfigPtrInput` via:
//
//	        OpenIdConnectConfigArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectConfigPtrInput interface {
	pulumi.Input

	ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput
	ToOpenIdConnectConfigPtrOutputWithContext(context.Context) OpenIdConnectConfigPtrOutput
}

type openIdConnectConfigPtrType OpenIdConnectConfigArgs

func OpenIdConnectConfigPtr(v *OpenIdConnectConfigArgs) OpenIdConnectConfigPtrInput {
	return (*openIdConnectConfigPtrType)(v)
}

func (*openIdConnectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectConfig)(nil)).Elem()
}

func (i *openIdConnectConfigPtrType) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return i.ToOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (i *openIdConnectConfigPtrType) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectConfigPtrOutput)
}

func (i *openIdConnectConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectConfig] {
	return pulumix.Output[*OpenIdConnectConfig]{
		OutputState: i.ToOpenIdConnectConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectConfig)(nil)).Elem()
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigOutput() OpenIdConnectConfigOutput {
	return o
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigOutputWithContext(ctx context.Context) OpenIdConnectConfigOutput {
	return o
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return o.ToOpenIdConnectConfigPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectConfigOutput) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectConfig) *OpenIdConnectConfig {
		return &v
	}).(OpenIdConnectConfigPtrOutput)
}

func (o OpenIdConnectConfigOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectConfig] {
	return pulumix.Output[OpenIdConnectConfig]{
		OutputState: o.OutputState,
	}
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.CertificationUri }).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfig) *string { return v.WellKnownOpenIdConfiguration }).(pulumi.StringPtrOutput)
}

type OpenIdConnectConfigPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectConfig)(nil)).Elem()
}

func (o OpenIdConnectConfigPtrOutput) ToOpenIdConnectConfigPtrOutput() OpenIdConnectConfigPtrOutput {
	return o
}

func (o OpenIdConnectConfigPtrOutput) ToOpenIdConnectConfigPtrOutputWithContext(ctx context.Context) OpenIdConnectConfigPtrOutput {
	return o
}

func (o OpenIdConnectConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectConfig] {
	return pulumix.Output[*OpenIdConnectConfig]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectConfigPtrOutput) Elem() OpenIdConnectConfigOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) OpenIdConnectConfig {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectConfig
		return ret
	}).(OpenIdConnectConfigOutput)
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigPtrOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertificationUri
	}).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigPtrOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfig) *string {
		if v == nil {
			return nil
		}
		return v.WellKnownOpenIdConfiguration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigResponse struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The endpoint that provides the keys necessary to validate the token.
	CertificationUri *string `pulumi:"certificationUri"`
	// The endpoint that issues the token.
	Issuer *string `pulumi:"issuer"`
	// The endpoint to be used to request a token.
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIdConfiguration *string `pulumi:"wellKnownOpenIdConfiguration"`
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIdConnectConfigResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectConfigResponse)(nil)).Elem()
}

func (o OpenIdConnectConfigResponseOutput) ToOpenIdConnectConfigResponseOutput() OpenIdConnectConfigResponseOutput {
	return o
}

func (o OpenIdConnectConfigResponseOutput) ToOpenIdConnectConfigResponseOutputWithContext(ctx context.Context) OpenIdConnectConfigResponseOutput {
	return o
}

func (o OpenIdConnectConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectConfigResponse] {
	return pulumix.Output[OpenIdConnectConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigResponseOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigResponseOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.CertificationUri }).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigResponseOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigResponseOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigResponseOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectConfigResponse) *string { return v.WellKnownOpenIdConfiguration }).(pulumi.StringPtrOutput)
}

type OpenIdConnectConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectConfigResponse)(nil)).Elem()
}

func (o OpenIdConnectConfigResponsePtrOutput) ToOpenIdConnectConfigResponsePtrOutput() OpenIdConnectConfigResponsePtrOutput {
	return o
}

func (o OpenIdConnectConfigResponsePtrOutput) ToOpenIdConnectConfigResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectConfigResponsePtrOutput {
	return o
}

func (o OpenIdConnectConfigResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectConfigResponse] {
	return pulumix.Output[*OpenIdConnectConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectConfigResponsePtrOutput) Elem() OpenIdConnectConfigResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) OpenIdConnectConfigResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectConfigResponse
		return ret
	}).(OpenIdConnectConfigResponseOutput)
}

// The endpoint to be used to make an authorization request.
func (o OpenIdConnectConfigResponsePtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that provides the keys necessary to validate the token.
func (o OpenIdConnectConfigResponsePtrOutput) CertificationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificationUri
	}).(pulumi.StringPtrOutput)
}

// The endpoint that issues the token.
func (o OpenIdConnectConfigResponsePtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// The endpoint to be used to request a token.
func (o OpenIdConnectConfigResponsePtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The endpoint that contains all the configuration endpoints for the provider.
func (o OpenIdConnectConfigResponsePtrOutput) WellKnownOpenIdConfiguration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.WellKnownOpenIdConfiguration
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLogin struct {
	// The name of the claim that contains the users name.
	NameClaimType *string `pulumi:"nameClaimType"`
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// OpenIdConnectLoginInput is an input type that accepts OpenIdConnectLoginArgs and OpenIdConnectLoginOutput values.
// You can construct a concrete instance of `OpenIdConnectLoginInput` via:
//
//	OpenIdConnectLoginArgs{...}
type OpenIdConnectLoginInput interface {
	pulumi.Input

	ToOpenIdConnectLoginOutput() OpenIdConnectLoginOutput
	ToOpenIdConnectLoginOutputWithContext(context.Context) OpenIdConnectLoginOutput
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginArgs struct {
	// The name of the claim that contains the users name.
	NameClaimType pulumi.StringPtrInput `pulumi:"nameClaimType"`
	// A list of the scopes that should be requested while authenticating.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
}

func (OpenIdConnectLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectLogin)(nil)).Elem()
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginOutput() OpenIdConnectLoginOutput {
	return i.ToOpenIdConnectLoginOutputWithContext(context.Background())
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginOutputWithContext(ctx context.Context) OpenIdConnectLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectLoginOutput)
}

func (i OpenIdConnectLoginArgs) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectLogin] {
	return pulumix.Output[OpenIdConnectLogin]{
		OutputState: i.ToOpenIdConnectLoginOutputWithContext(ctx).OutputState,
	}
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return i.ToOpenIdConnectLoginPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectLoginArgs) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectLoginOutput).ToOpenIdConnectLoginPtrOutputWithContext(ctx)
}

// OpenIdConnectLoginPtrInput is an input type that accepts OpenIdConnectLoginArgs, OpenIdConnectLoginPtr and OpenIdConnectLoginPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectLoginPtrInput` via:
//
//	        OpenIdConnectLoginArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectLoginPtrInput interface {
	pulumi.Input

	ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput
	ToOpenIdConnectLoginPtrOutputWithContext(context.Context) OpenIdConnectLoginPtrOutput
}

type openIdConnectLoginPtrType OpenIdConnectLoginArgs

func OpenIdConnectLoginPtr(v *OpenIdConnectLoginArgs) OpenIdConnectLoginPtrInput {
	return (*openIdConnectLoginPtrType)(v)
}

func (*openIdConnectLoginPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectLogin)(nil)).Elem()
}

func (i *openIdConnectLoginPtrType) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return i.ToOpenIdConnectLoginPtrOutputWithContext(context.Background())
}

func (i *openIdConnectLoginPtrType) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectLoginPtrOutput)
}

func (i *openIdConnectLoginPtrType) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectLogin] {
	return pulumix.Output[*OpenIdConnectLogin]{
		OutputState: i.ToOpenIdConnectLoginPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectLogin)(nil)).Elem()
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginOutput() OpenIdConnectLoginOutput {
	return o
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginOutputWithContext(ctx context.Context) OpenIdConnectLoginOutput {
	return o
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return o.ToOpenIdConnectLoginPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectLoginOutput) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectLogin) *OpenIdConnectLogin {
		return &v
	}).(OpenIdConnectLoginPtrOutput)
}

func (o OpenIdConnectLoginOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectLogin] {
	return pulumix.Output[OpenIdConnectLogin]{
		OutputState: o.OutputState,
	}
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectLogin) *string { return v.NameClaimType }).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpenIdConnectLogin) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OpenIdConnectLoginPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectLogin)(nil)).Elem()
}

func (o OpenIdConnectLoginPtrOutput) ToOpenIdConnectLoginPtrOutput() OpenIdConnectLoginPtrOutput {
	return o
}

func (o OpenIdConnectLoginPtrOutput) ToOpenIdConnectLoginPtrOutputWithContext(ctx context.Context) OpenIdConnectLoginPtrOutput {
	return o
}

func (o OpenIdConnectLoginPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectLogin] {
	return pulumix.Output[*OpenIdConnectLogin]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectLoginPtrOutput) Elem() OpenIdConnectLoginOutput {
	return o.ApplyT(func(v *OpenIdConnectLogin) OpenIdConnectLogin {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectLogin
		return ret
	}).(OpenIdConnectLoginOutput)
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginPtrOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectLogin) *string {
		if v == nil {
			return nil
		}
		return v.NameClaimType
	}).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenIdConnectLogin) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginResponse struct {
	// The name of the claim that contains the users name.
	NameClaimType *string `pulumi:"nameClaimType"`
	// A list of the scopes that should be requested while authenticating.
	Scopes []string `pulumi:"scopes"`
}

// The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIdConnectLoginResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectLoginResponse)(nil)).Elem()
}

func (o OpenIdConnectLoginResponseOutput) ToOpenIdConnectLoginResponseOutput() OpenIdConnectLoginResponseOutput {
	return o
}

func (o OpenIdConnectLoginResponseOutput) ToOpenIdConnectLoginResponseOutputWithContext(ctx context.Context) OpenIdConnectLoginResponseOutput {
	return o
}

func (o OpenIdConnectLoginResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectLoginResponse] {
	return pulumix.Output[OpenIdConnectLoginResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginResponseOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectLoginResponse) *string { return v.NameClaimType }).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OpenIdConnectLoginResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OpenIdConnectLoginResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectLoginResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectLoginResponse)(nil)).Elem()
}

func (o OpenIdConnectLoginResponsePtrOutput) ToOpenIdConnectLoginResponsePtrOutput() OpenIdConnectLoginResponsePtrOutput {
	return o
}

func (o OpenIdConnectLoginResponsePtrOutput) ToOpenIdConnectLoginResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectLoginResponsePtrOutput {
	return o
}

func (o OpenIdConnectLoginResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectLoginResponse] {
	return pulumix.Output[*OpenIdConnectLoginResponse]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectLoginResponsePtrOutput) Elem() OpenIdConnectLoginResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectLoginResponse) OpenIdConnectLoginResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectLoginResponse
		return ret
	}).(OpenIdConnectLoginResponseOutput)
}

// The name of the claim that contains the users name.
func (o OpenIdConnectLoginResponsePtrOutput) NameClaimType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectLoginResponse) *string {
		if v == nil {
			return nil
		}
		return v.NameClaimType
	}).(pulumi.StringPtrOutput)
}

// A list of the scopes that should be requested while authenticating.
func (o OpenIdConnectLoginResponsePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OpenIdConnectLoginResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistration struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential *OpenIdConnectClientCredential `pulumi:"clientCredential"`
	// The client id of the custom Open ID Connect provider.
	ClientId *string `pulumi:"clientId"`
	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIdConnectConfiguration *OpenIdConnectConfig `pulumi:"openIdConnectConfiguration"`
}

// OpenIdConnectRegistrationInput is an input type that accepts OpenIdConnectRegistrationArgs and OpenIdConnectRegistrationOutput values.
// You can construct a concrete instance of `OpenIdConnectRegistrationInput` via:
//
//	OpenIdConnectRegistrationArgs{...}
type OpenIdConnectRegistrationInput interface {
	pulumi.Input

	ToOpenIdConnectRegistrationOutput() OpenIdConnectRegistrationOutput
	ToOpenIdConnectRegistrationOutputWithContext(context.Context) OpenIdConnectRegistrationOutput
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationArgs struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential OpenIdConnectClientCredentialPtrInput `pulumi:"clientCredential"`
	// The client id of the custom Open ID Connect provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIdConnectConfiguration OpenIdConnectConfigPtrInput `pulumi:"openIdConnectConfiguration"`
}

func (OpenIdConnectRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectRegistration)(nil)).Elem()
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationOutput() OpenIdConnectRegistrationOutput {
	return i.ToOpenIdConnectRegistrationOutputWithContext(context.Background())
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationOutputWithContext(ctx context.Context) OpenIdConnectRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectRegistrationOutput)
}

func (i OpenIdConnectRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectRegistration] {
	return pulumix.Output[OpenIdConnectRegistration]{
		OutputState: i.ToOpenIdConnectRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return i.ToOpenIdConnectRegistrationPtrOutputWithContext(context.Background())
}

func (i OpenIdConnectRegistrationArgs) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectRegistrationOutput).ToOpenIdConnectRegistrationPtrOutputWithContext(ctx)
}

// OpenIdConnectRegistrationPtrInput is an input type that accepts OpenIdConnectRegistrationArgs, OpenIdConnectRegistrationPtr and OpenIdConnectRegistrationPtrOutput values.
// You can construct a concrete instance of `OpenIdConnectRegistrationPtrInput` via:
//
//	        OpenIdConnectRegistrationArgs{...}
//
//	or:
//
//	        nil
type OpenIdConnectRegistrationPtrInput interface {
	pulumi.Input

	ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput
	ToOpenIdConnectRegistrationPtrOutputWithContext(context.Context) OpenIdConnectRegistrationPtrOutput
}

type openIdConnectRegistrationPtrType OpenIdConnectRegistrationArgs

func OpenIdConnectRegistrationPtr(v *OpenIdConnectRegistrationArgs) OpenIdConnectRegistrationPtrInput {
	return (*openIdConnectRegistrationPtrType)(v)
}

func (*openIdConnectRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectRegistration)(nil)).Elem()
}

func (i *openIdConnectRegistrationPtrType) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return i.ToOpenIdConnectRegistrationPtrOutputWithContext(context.Background())
}

func (i *openIdConnectRegistrationPtrType) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenIdConnectRegistrationPtrOutput)
}

func (i *openIdConnectRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectRegistration] {
	return pulumix.Output[*OpenIdConnectRegistration]{
		OutputState: i.ToOpenIdConnectRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectRegistration)(nil)).Elem()
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationOutput() OpenIdConnectRegistrationOutput {
	return o
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationOutputWithContext(ctx context.Context) OpenIdConnectRegistrationOutput {
	return o
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return o.ToOpenIdConnectRegistrationPtrOutputWithContext(context.Background())
}

func (o OpenIdConnectRegistrationOutput) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OpenIdConnectRegistration) *OpenIdConnectRegistration {
		return &v
	}).(OpenIdConnectRegistrationPtrOutput)
}

func (o OpenIdConnectRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectRegistration] {
	return pulumix.Output[OpenIdConnectRegistration]{
		OutputState: o.OutputState,
	}
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationOutput) ClientCredential() OpenIdConnectClientCredentialPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistration) *OpenIdConnectClientCredential { return v.ClientCredential }).(OpenIdConnectClientCredentialPtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistration) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationOutput) OpenIdConnectConfiguration() OpenIdConnectConfigPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistration) *OpenIdConnectConfig { return v.OpenIdConnectConfiguration }).(OpenIdConnectConfigPtrOutput)
}

type OpenIdConnectRegistrationPtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectRegistration)(nil)).Elem()
}

func (o OpenIdConnectRegistrationPtrOutput) ToOpenIdConnectRegistrationPtrOutput() OpenIdConnectRegistrationPtrOutput {
	return o
}

func (o OpenIdConnectRegistrationPtrOutput) ToOpenIdConnectRegistrationPtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationPtrOutput {
	return o
}

func (o OpenIdConnectRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectRegistration] {
	return pulumix.Output[*OpenIdConnectRegistration]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectRegistrationPtrOutput) Elem() OpenIdConnectRegistrationOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) OpenIdConnectRegistration {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectRegistration
		return ret
	}).(OpenIdConnectRegistrationOutput)
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationPtrOutput) ClientCredential() OpenIdConnectClientCredentialPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) *OpenIdConnectClientCredential {
		if v == nil {
			return nil
		}
		return v.ClientCredential
	}).(OpenIdConnectClientCredentialPtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationPtrOutput) OpenIdConnectConfiguration() OpenIdConnectConfigPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistration) *OpenIdConnectConfig {
		if v == nil {
			return nil
		}
		return v.OpenIdConnectConfiguration
	}).(OpenIdConnectConfigPtrOutput)
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationResponse struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential *OpenIdConnectClientCredentialResponse `pulumi:"clientCredential"`
	// The client id of the custom Open ID Connect provider.
	ClientId *string `pulumi:"clientId"`
	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIdConnectConfiguration *OpenIdConnectConfigResponse `pulumi:"openIdConnectConfiguration"`
}

// The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIdConnectRegistrationResponseOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenIdConnectRegistrationResponse)(nil)).Elem()
}

func (o OpenIdConnectRegistrationResponseOutput) ToOpenIdConnectRegistrationResponseOutput() OpenIdConnectRegistrationResponseOutput {
	return o
}

func (o OpenIdConnectRegistrationResponseOutput) ToOpenIdConnectRegistrationResponseOutputWithContext(ctx context.Context) OpenIdConnectRegistrationResponseOutput {
	return o
}

func (o OpenIdConnectRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OpenIdConnectRegistrationResponse] {
	return pulumix.Output[OpenIdConnectRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponseOutput) ClientCredential() OpenIdConnectClientCredentialResponsePtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistrationResponse) *OpenIdConnectClientCredentialResponse {
		return v.ClientCredential
	}).(OpenIdConnectClientCredentialResponsePtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistrationResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponseOutput) OpenIdConnectConfiguration() OpenIdConnectConfigResponsePtrOutput {
	return o.ApplyT(func(v OpenIdConnectRegistrationResponse) *OpenIdConnectConfigResponse {
		return v.OpenIdConnectConfiguration
	}).(OpenIdConnectConfigResponsePtrOutput)
}

type OpenIdConnectRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (OpenIdConnectRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenIdConnectRegistrationResponse)(nil)).Elem()
}

func (o OpenIdConnectRegistrationResponsePtrOutput) ToOpenIdConnectRegistrationResponsePtrOutput() OpenIdConnectRegistrationResponsePtrOutput {
	return o
}

func (o OpenIdConnectRegistrationResponsePtrOutput) ToOpenIdConnectRegistrationResponsePtrOutputWithContext(ctx context.Context) OpenIdConnectRegistrationResponsePtrOutput {
	return o
}

func (o OpenIdConnectRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OpenIdConnectRegistrationResponse] {
	return pulumix.Output[*OpenIdConnectRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o OpenIdConnectRegistrationResponsePtrOutput) Elem() OpenIdConnectRegistrationResponseOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) OpenIdConnectRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret OpenIdConnectRegistrationResponse
		return ret
	}).(OpenIdConnectRegistrationResponseOutput)
}

// The authentication credentials of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponsePtrOutput) ClientCredential() OpenIdConnectClientCredentialResponsePtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) *OpenIdConnectClientCredentialResponse {
		if v == nil {
			return nil
		}
		return v.ClientCredential
	}).(OpenIdConnectClientCredentialResponsePtrOutput)
}

// The client id of the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the endpoints used for the custom Open ID Connect provider.
func (o OpenIdConnectRegistrationResponsePtrOutput) OpenIdConnectConfiguration() OpenIdConnectConfigResponsePtrOutput {
	return o.ApplyT(func(v *OpenIdConnectRegistrationResponse) *OpenIdConnectConfigResponse {
		if v == nil {
			return nil
		}
		return v.OpenIdConnectConfiguration
	}).(OpenIdConnectConfigResponsePtrOutput)
}

// Container App container Azure Queue based scaling rule.
type QueueScaleRule struct {
	// Authentication secrets for the queue scale rule.
	Auth []ScaleRuleAuth `pulumi:"auth"`
	// Queue length.
	QueueLength *int `pulumi:"queueLength"`
	// Queue name.
	QueueName *string `pulumi:"queueName"`
}

// QueueScaleRuleInput is an input type that accepts QueueScaleRuleArgs and QueueScaleRuleOutput values.
// You can construct a concrete instance of `QueueScaleRuleInput` via:
//
//	QueueScaleRuleArgs{...}
type QueueScaleRuleInput interface {
	pulumi.Input

	ToQueueScaleRuleOutput() QueueScaleRuleOutput
	ToQueueScaleRuleOutputWithContext(context.Context) QueueScaleRuleOutput
}

// Container App container Azure Queue based scaling rule.
type QueueScaleRuleArgs struct {
	// Authentication secrets for the queue scale rule.
	Auth ScaleRuleAuthArrayInput `pulumi:"auth"`
	// Queue length.
	QueueLength pulumi.IntPtrInput `pulumi:"queueLength"`
	// Queue name.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
}

func (QueueScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueScaleRule)(nil)).Elem()
}

func (i QueueScaleRuleArgs) ToQueueScaleRuleOutput() QueueScaleRuleOutput {
	return i.ToQueueScaleRuleOutputWithContext(context.Background())
}

func (i QueueScaleRuleArgs) ToQueueScaleRuleOutputWithContext(ctx context.Context) QueueScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueScaleRuleOutput)
}

func (i QueueScaleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[QueueScaleRule] {
	return pulumix.Output[QueueScaleRule]{
		OutputState: i.ToQueueScaleRuleOutputWithContext(ctx).OutputState,
	}
}

func (i QueueScaleRuleArgs) ToQueueScaleRulePtrOutput() QueueScaleRulePtrOutput {
	return i.ToQueueScaleRulePtrOutputWithContext(context.Background())
}

func (i QueueScaleRuleArgs) ToQueueScaleRulePtrOutputWithContext(ctx context.Context) QueueScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueScaleRuleOutput).ToQueueScaleRulePtrOutputWithContext(ctx)
}

// QueueScaleRulePtrInput is an input type that accepts QueueScaleRuleArgs, QueueScaleRulePtr and QueueScaleRulePtrOutput values.
// You can construct a concrete instance of `QueueScaleRulePtrInput` via:
//
//	        QueueScaleRuleArgs{...}
//
//	or:
//
//	        nil
type QueueScaleRulePtrInput interface {
	pulumi.Input

	ToQueueScaleRulePtrOutput() QueueScaleRulePtrOutput
	ToQueueScaleRulePtrOutputWithContext(context.Context) QueueScaleRulePtrOutput
}

type queueScaleRulePtrType QueueScaleRuleArgs

func QueueScaleRulePtr(v *QueueScaleRuleArgs) QueueScaleRulePtrInput {
	return (*queueScaleRulePtrType)(v)
}

func (*queueScaleRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueScaleRule)(nil)).Elem()
}

func (i *queueScaleRulePtrType) ToQueueScaleRulePtrOutput() QueueScaleRulePtrOutput {
	return i.ToQueueScaleRulePtrOutputWithContext(context.Background())
}

func (i *queueScaleRulePtrType) ToQueueScaleRulePtrOutputWithContext(ctx context.Context) QueueScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueScaleRulePtrOutput)
}

func (i *queueScaleRulePtrType) ToOutput(ctx context.Context) pulumix.Output[*QueueScaleRule] {
	return pulumix.Output[*QueueScaleRule]{
		OutputState: i.ToQueueScaleRulePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App container Azure Queue based scaling rule.
type QueueScaleRuleOutput struct{ *pulumi.OutputState }

func (QueueScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueScaleRule)(nil)).Elem()
}

func (o QueueScaleRuleOutput) ToQueueScaleRuleOutput() QueueScaleRuleOutput {
	return o
}

func (o QueueScaleRuleOutput) ToQueueScaleRuleOutputWithContext(ctx context.Context) QueueScaleRuleOutput {
	return o
}

func (o QueueScaleRuleOutput) ToQueueScaleRulePtrOutput() QueueScaleRulePtrOutput {
	return o.ToQueueScaleRulePtrOutputWithContext(context.Background())
}

func (o QueueScaleRuleOutput) ToQueueScaleRulePtrOutputWithContext(ctx context.Context) QueueScaleRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueScaleRule) *QueueScaleRule {
		return &v
	}).(QueueScaleRulePtrOutput)
}

func (o QueueScaleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[QueueScaleRule] {
	return pulumix.Output[QueueScaleRule]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the queue scale rule.
func (o QueueScaleRuleOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v QueueScaleRule) []ScaleRuleAuth { return v.Auth }).(ScaleRuleAuthArrayOutput)
}

// Queue length.
func (o QueueScaleRuleOutput) QueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueScaleRule) *int { return v.QueueLength }).(pulumi.IntPtrOutput)
}

// Queue name.
func (o QueueScaleRuleOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueScaleRule) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

type QueueScaleRulePtrOutput struct{ *pulumi.OutputState }

func (QueueScaleRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueScaleRule)(nil)).Elem()
}

func (o QueueScaleRulePtrOutput) ToQueueScaleRulePtrOutput() QueueScaleRulePtrOutput {
	return o
}

func (o QueueScaleRulePtrOutput) ToQueueScaleRulePtrOutputWithContext(ctx context.Context) QueueScaleRulePtrOutput {
	return o
}

func (o QueueScaleRulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*QueueScaleRule] {
	return pulumix.Output[*QueueScaleRule]{
		OutputState: o.OutputState,
	}
}

func (o QueueScaleRulePtrOutput) Elem() QueueScaleRuleOutput {
	return o.ApplyT(func(v *QueueScaleRule) QueueScaleRule {
		if v != nil {
			return *v
		}
		var ret QueueScaleRule
		return ret
	}).(QueueScaleRuleOutput)
}

// Authentication secrets for the queue scale rule.
func (o QueueScaleRulePtrOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v *QueueScaleRule) []ScaleRuleAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthArrayOutput)
}

// Queue length.
func (o QueueScaleRulePtrOutput) QueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueScaleRule) *int {
		if v == nil {
			return nil
		}
		return v.QueueLength
	}).(pulumi.IntPtrOutput)
}

// Queue name.
func (o QueueScaleRulePtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueScaleRule) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Container App container Azure Queue based scaling rule.
type QueueScaleRuleResponse struct {
	// Authentication secrets for the queue scale rule.
	Auth []ScaleRuleAuthResponse `pulumi:"auth"`
	// Queue length.
	QueueLength *int `pulumi:"queueLength"`
	// Queue name.
	QueueName *string `pulumi:"queueName"`
}

// Container App container Azure Queue based scaling rule.
type QueueScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (QueueScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueScaleRuleResponse)(nil)).Elem()
}

func (o QueueScaleRuleResponseOutput) ToQueueScaleRuleResponseOutput() QueueScaleRuleResponseOutput {
	return o
}

func (o QueueScaleRuleResponseOutput) ToQueueScaleRuleResponseOutputWithContext(ctx context.Context) QueueScaleRuleResponseOutput {
	return o
}

func (o QueueScaleRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[QueueScaleRuleResponse] {
	return pulumix.Output[QueueScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the queue scale rule.
func (o QueueScaleRuleResponseOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v QueueScaleRuleResponse) []ScaleRuleAuthResponse { return v.Auth }).(ScaleRuleAuthResponseArrayOutput)
}

// Queue length.
func (o QueueScaleRuleResponseOutput) QueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueScaleRuleResponse) *int { return v.QueueLength }).(pulumi.IntPtrOutput)
}

// Queue name.
func (o QueueScaleRuleResponseOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueScaleRuleResponse) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

type QueueScaleRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (QueueScaleRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueScaleRuleResponse)(nil)).Elem()
}

func (o QueueScaleRuleResponsePtrOutput) ToQueueScaleRuleResponsePtrOutput() QueueScaleRuleResponsePtrOutput {
	return o
}

func (o QueueScaleRuleResponsePtrOutput) ToQueueScaleRuleResponsePtrOutputWithContext(ctx context.Context) QueueScaleRuleResponsePtrOutput {
	return o
}

func (o QueueScaleRuleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*QueueScaleRuleResponse] {
	return pulumix.Output[*QueueScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o QueueScaleRuleResponsePtrOutput) Elem() QueueScaleRuleResponseOutput {
	return o.ApplyT(func(v *QueueScaleRuleResponse) QueueScaleRuleResponse {
		if v != nil {
			return *v
		}
		var ret QueueScaleRuleResponse
		return ret
	}).(QueueScaleRuleResponseOutput)
}

// Authentication secrets for the queue scale rule.
func (o QueueScaleRuleResponsePtrOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v *QueueScaleRuleResponse) []ScaleRuleAuthResponse {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthResponseArrayOutput)
}

// Queue length.
func (o QueueScaleRuleResponsePtrOutput) QueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueScaleRuleResponse) *int {
		if v == nil {
			return nil
		}
		return v.QueueLength
	}).(pulumi.IntPtrOutput)
}

// Queue name.
func (o QueueScaleRuleResponsePtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueScaleRuleResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// Container App Private Registry
type RegistryCredentials struct {
	// A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'
	Identity *string `pulumi:"identity"`
	// The name of the Secret that contains the registry login password
	PasswordSecretRef *string `pulumi:"passwordSecretRef"`
	// Container Registry Server
	Server *string `pulumi:"server"`
	// Container Registry Username
	Username *string `pulumi:"username"`
}

// RegistryCredentialsInput is an input type that accepts RegistryCredentialsArgs and RegistryCredentialsOutput values.
// You can construct a concrete instance of `RegistryCredentialsInput` via:
//
//	RegistryCredentialsArgs{...}
type RegistryCredentialsInput interface {
	pulumi.Input

	ToRegistryCredentialsOutput() RegistryCredentialsOutput
	ToRegistryCredentialsOutputWithContext(context.Context) RegistryCredentialsOutput
}

// Container App Private Registry
type RegistryCredentialsArgs struct {
	// A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The name of the Secret that contains the registry login password
	PasswordSecretRef pulumi.StringPtrInput `pulumi:"passwordSecretRef"`
	// Container Registry Server
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Container Registry Username
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RegistryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentials)(nil)).Elem()
}

func (i RegistryCredentialsArgs) ToRegistryCredentialsOutput() RegistryCredentialsOutput {
	return i.ToRegistryCredentialsOutputWithContext(context.Background())
}

func (i RegistryCredentialsArgs) ToRegistryCredentialsOutputWithContext(ctx context.Context) RegistryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialsOutput)
}

func (i RegistryCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[RegistryCredentials] {
	return pulumix.Output[RegistryCredentials]{
		OutputState: i.ToRegistryCredentialsOutputWithContext(ctx).OutputState,
	}
}

// RegistryCredentialsArrayInput is an input type that accepts RegistryCredentialsArray and RegistryCredentialsArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialsArrayInput` via:
//
//	RegistryCredentialsArray{ RegistryCredentialsArgs{...} }
type RegistryCredentialsArrayInput interface {
	pulumi.Input

	ToRegistryCredentialsArrayOutput() RegistryCredentialsArrayOutput
	ToRegistryCredentialsArrayOutputWithContext(context.Context) RegistryCredentialsArrayOutput
}

type RegistryCredentialsArray []RegistryCredentialsInput

func (RegistryCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentials)(nil)).Elem()
}

func (i RegistryCredentialsArray) ToRegistryCredentialsArrayOutput() RegistryCredentialsArrayOutput {
	return i.ToRegistryCredentialsArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialsArray) ToRegistryCredentialsArrayOutputWithContext(ctx context.Context) RegistryCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialsArrayOutput)
}

func (i RegistryCredentialsArray) ToOutput(ctx context.Context) pulumix.Output[[]RegistryCredentials] {
	return pulumix.Output[[]RegistryCredentials]{
		OutputState: i.ToRegistryCredentialsArrayOutputWithContext(ctx).OutputState,
	}
}

// Container App Private Registry
type RegistryCredentialsOutput struct{ *pulumi.OutputState }

func (RegistryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentials)(nil)).Elem()
}

func (o RegistryCredentialsOutput) ToRegistryCredentialsOutput() RegistryCredentialsOutput {
	return o
}

func (o RegistryCredentialsOutput) ToRegistryCredentialsOutputWithContext(ctx context.Context) RegistryCredentialsOutput {
	return o
}

func (o RegistryCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryCredentials] {
	return pulumix.Output[RegistryCredentials]{
		OutputState: o.OutputState,
	}
}

// A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'
func (o RegistryCredentialsOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentials) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The name of the Secret that contains the registry login password
func (o RegistryCredentialsOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentials) *string { return v.PasswordSecretRef }).(pulumi.StringPtrOutput)
}

// Container Registry Server
func (o RegistryCredentialsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentials) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Container Registry Username
func (o RegistryCredentialsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentials) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RegistryCredentialsArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentials)(nil)).Elem()
}

func (o RegistryCredentialsArrayOutput) ToRegistryCredentialsArrayOutput() RegistryCredentialsArrayOutput {
	return o
}

func (o RegistryCredentialsArrayOutput) ToRegistryCredentialsArrayOutputWithContext(ctx context.Context) RegistryCredentialsArrayOutput {
	return o
}

func (o RegistryCredentialsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RegistryCredentials] {
	return pulumix.Output[[]RegistryCredentials]{
		OutputState: o.OutputState,
	}
}

func (o RegistryCredentialsArrayOutput) Index(i pulumi.IntInput) RegistryCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredentials {
		return vs[0].([]RegistryCredentials)[vs[1].(int)]
	}).(RegistryCredentialsOutput)
}

// Container App Private Registry
type RegistryCredentialsResponse struct {
	// A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'
	Identity *string `pulumi:"identity"`
	// The name of the Secret that contains the registry login password
	PasswordSecretRef *string `pulumi:"passwordSecretRef"`
	// Container Registry Server
	Server *string `pulumi:"server"`
	// Container Registry Username
	Username *string `pulumi:"username"`
}

// Container App Private Registry
type RegistryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (RegistryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryCredentialsResponse)(nil)).Elem()
}

func (o RegistryCredentialsResponseOutput) ToRegistryCredentialsResponseOutput() RegistryCredentialsResponseOutput {
	return o
}

func (o RegistryCredentialsResponseOutput) ToRegistryCredentialsResponseOutputWithContext(ctx context.Context) RegistryCredentialsResponseOutput {
	return o
}

func (o RegistryCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryCredentialsResponse] {
	return pulumix.Output[RegistryCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system'
func (o RegistryCredentialsResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentialsResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The name of the Secret that contains the registry login password
func (o RegistryCredentialsResponseOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentialsResponse) *string { return v.PasswordSecretRef }).(pulumi.StringPtrOutput)
}

// Container Registry Server
func (o RegistryCredentialsResponseOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentialsResponse) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Container Registry Username
func (o RegistryCredentialsResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryCredentialsResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RegistryCredentialsResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryCredentialsResponse)(nil)).Elem()
}

func (o RegistryCredentialsResponseArrayOutput) ToRegistryCredentialsResponseArrayOutput() RegistryCredentialsResponseArrayOutput {
	return o
}

func (o RegistryCredentialsResponseArrayOutput) ToRegistryCredentialsResponseArrayOutputWithContext(ctx context.Context) RegistryCredentialsResponseArrayOutput {
	return o
}

func (o RegistryCredentialsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RegistryCredentialsResponse] {
	return pulumix.Output[[]RegistryCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

func (o RegistryCredentialsResponseArrayOutput) Index(i pulumi.IntInput) RegistryCredentialsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryCredentialsResponse {
		return vs[0].([]RegistryCredentialsResponse)[vs[1].(int)]
	}).(RegistryCredentialsResponseOutput)
}

// Container App registry information.
type RegistryInfo struct {
	// registry secret.
	RegistryPassword *string `pulumi:"registryPassword"`
	// registry server Url.
	RegistryUrl *string `pulumi:"registryUrl"`
	// registry username.
	RegistryUserName *string `pulumi:"registryUserName"`
}

// RegistryInfoInput is an input type that accepts RegistryInfoArgs and RegistryInfoOutput values.
// You can construct a concrete instance of `RegistryInfoInput` via:
//
//	RegistryInfoArgs{...}
type RegistryInfoInput interface {
	pulumi.Input

	ToRegistryInfoOutput() RegistryInfoOutput
	ToRegistryInfoOutputWithContext(context.Context) RegistryInfoOutput
}

// Container App registry information.
type RegistryInfoArgs struct {
	// registry secret.
	RegistryPassword pulumi.StringPtrInput `pulumi:"registryPassword"`
	// registry server Url.
	RegistryUrl pulumi.StringPtrInput `pulumi:"registryUrl"`
	// registry username.
	RegistryUserName pulumi.StringPtrInput `pulumi:"registryUserName"`
}

func (RegistryInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryInfo)(nil)).Elem()
}

func (i RegistryInfoArgs) ToRegistryInfoOutput() RegistryInfoOutput {
	return i.ToRegistryInfoOutputWithContext(context.Background())
}

func (i RegistryInfoArgs) ToRegistryInfoOutputWithContext(ctx context.Context) RegistryInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryInfoOutput)
}

func (i RegistryInfoArgs) ToOutput(ctx context.Context) pulumix.Output[RegistryInfo] {
	return pulumix.Output[RegistryInfo]{
		OutputState: i.ToRegistryInfoOutputWithContext(ctx).OutputState,
	}
}

func (i RegistryInfoArgs) ToRegistryInfoPtrOutput() RegistryInfoPtrOutput {
	return i.ToRegistryInfoPtrOutputWithContext(context.Background())
}

func (i RegistryInfoArgs) ToRegistryInfoPtrOutputWithContext(ctx context.Context) RegistryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryInfoOutput).ToRegistryInfoPtrOutputWithContext(ctx)
}

// RegistryInfoPtrInput is an input type that accepts RegistryInfoArgs, RegistryInfoPtr and RegistryInfoPtrOutput values.
// You can construct a concrete instance of `RegistryInfoPtrInput` via:
//
//	        RegistryInfoArgs{...}
//
//	or:
//
//	        nil
type RegistryInfoPtrInput interface {
	pulumi.Input

	ToRegistryInfoPtrOutput() RegistryInfoPtrOutput
	ToRegistryInfoPtrOutputWithContext(context.Context) RegistryInfoPtrOutput
}

type registryInfoPtrType RegistryInfoArgs

func RegistryInfoPtr(v *RegistryInfoArgs) RegistryInfoPtrInput {
	return (*registryInfoPtrType)(v)
}

func (*registryInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryInfo)(nil)).Elem()
}

func (i *registryInfoPtrType) ToRegistryInfoPtrOutput() RegistryInfoPtrOutput {
	return i.ToRegistryInfoPtrOutputWithContext(context.Background())
}

func (i *registryInfoPtrType) ToRegistryInfoPtrOutputWithContext(ctx context.Context) RegistryInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryInfoPtrOutput)
}

func (i *registryInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*RegistryInfo] {
	return pulumix.Output[*RegistryInfo]{
		OutputState: i.ToRegistryInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// Container App registry information.
type RegistryInfoOutput struct{ *pulumi.OutputState }

func (RegistryInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryInfo)(nil)).Elem()
}

func (o RegistryInfoOutput) ToRegistryInfoOutput() RegistryInfoOutput {
	return o
}

func (o RegistryInfoOutput) ToRegistryInfoOutputWithContext(ctx context.Context) RegistryInfoOutput {
	return o
}

func (o RegistryInfoOutput) ToRegistryInfoPtrOutput() RegistryInfoPtrOutput {
	return o.ToRegistryInfoPtrOutputWithContext(context.Background())
}

func (o RegistryInfoOutput) ToRegistryInfoPtrOutputWithContext(ctx context.Context) RegistryInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryInfo) *RegistryInfo {
		return &v
	}).(RegistryInfoPtrOutput)
}

func (o RegistryInfoOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryInfo] {
	return pulumix.Output[RegistryInfo]{
		OutputState: o.OutputState,
	}
}

// registry secret.
func (o RegistryInfoOutput) RegistryPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryInfo) *string { return v.RegistryPassword }).(pulumi.StringPtrOutput)
}

// registry server Url.
func (o RegistryInfoOutput) RegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryInfo) *string { return v.RegistryUrl }).(pulumi.StringPtrOutput)
}

// registry username.
func (o RegistryInfoOutput) RegistryUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryInfo) *string { return v.RegistryUserName }).(pulumi.StringPtrOutput)
}

type RegistryInfoPtrOutput struct{ *pulumi.OutputState }

func (RegistryInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryInfo)(nil)).Elem()
}

func (o RegistryInfoPtrOutput) ToRegistryInfoPtrOutput() RegistryInfoPtrOutput {
	return o
}

func (o RegistryInfoPtrOutput) ToRegistryInfoPtrOutputWithContext(ctx context.Context) RegistryInfoPtrOutput {
	return o
}

func (o RegistryInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RegistryInfo] {
	return pulumix.Output[*RegistryInfo]{
		OutputState: o.OutputState,
	}
}

func (o RegistryInfoPtrOutput) Elem() RegistryInfoOutput {
	return o.ApplyT(func(v *RegistryInfo) RegistryInfo {
		if v != nil {
			return *v
		}
		var ret RegistryInfo
		return ret
	}).(RegistryInfoOutput)
}

// registry secret.
func (o RegistryInfoPtrOutput) RegistryPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryInfo) *string {
		if v == nil {
			return nil
		}
		return v.RegistryPassword
	}).(pulumi.StringPtrOutput)
}

// registry server Url.
func (o RegistryInfoPtrOutput) RegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryInfo) *string {
		if v == nil {
			return nil
		}
		return v.RegistryUrl
	}).(pulumi.StringPtrOutput)
}

// registry username.
func (o RegistryInfoPtrOutput) RegistryUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryInfo) *string {
		if v == nil {
			return nil
		}
		return v.RegistryUserName
	}).(pulumi.StringPtrOutput)
}

// Container App registry information.
type RegistryInfoResponse struct {
	// registry server Url.
	RegistryUrl *string `pulumi:"registryUrl"`
	// registry username.
	RegistryUserName *string `pulumi:"registryUserName"`
}

// Container App registry information.
type RegistryInfoResponseOutput struct{ *pulumi.OutputState }

func (RegistryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryInfoResponse)(nil)).Elem()
}

func (o RegistryInfoResponseOutput) ToRegistryInfoResponseOutput() RegistryInfoResponseOutput {
	return o
}

func (o RegistryInfoResponseOutput) ToRegistryInfoResponseOutputWithContext(ctx context.Context) RegistryInfoResponseOutput {
	return o
}

func (o RegistryInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RegistryInfoResponse] {
	return pulumix.Output[RegistryInfoResponse]{
		OutputState: o.OutputState,
	}
}

// registry server Url.
func (o RegistryInfoResponseOutput) RegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryInfoResponse) *string { return v.RegistryUrl }).(pulumi.StringPtrOutput)
}

// registry username.
func (o RegistryInfoResponseOutput) RegistryUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryInfoResponse) *string { return v.RegistryUserName }).(pulumi.StringPtrOutput)
}

type RegistryInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryInfoResponse)(nil)).Elem()
}

func (o RegistryInfoResponsePtrOutput) ToRegistryInfoResponsePtrOutput() RegistryInfoResponsePtrOutput {
	return o
}

func (o RegistryInfoResponsePtrOutput) ToRegistryInfoResponsePtrOutputWithContext(ctx context.Context) RegistryInfoResponsePtrOutput {
	return o
}

func (o RegistryInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RegistryInfoResponse] {
	return pulumix.Output[*RegistryInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o RegistryInfoResponsePtrOutput) Elem() RegistryInfoResponseOutput {
	return o.ApplyT(func(v *RegistryInfoResponse) RegistryInfoResponse {
		if v != nil {
			return *v
		}
		var ret RegistryInfoResponse
		return ret
	}).(RegistryInfoResponseOutput)
}

// registry server Url.
func (o RegistryInfoResponsePtrOutput) RegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistryUrl
	}).(pulumi.StringPtrOutput)
}

// registry username.
func (o RegistryInfoResponsePtrOutput) RegistryUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistryUserName
	}).(pulumi.StringPtrOutput)
}

// Container App scaling configurations.
type Scale struct {
	// Optional. Maximum number of container replicas. Defaults to 10 if not set.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// Optional. Minimum number of container replicas.
	MinReplicas *int `pulumi:"minReplicas"`
	// Scaling rules.
	Rules []ScaleRule `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for Scale
func (val *Scale) Defaults() *Scale {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxReplicas == nil {
		maxReplicas_ := 10
		tmp.MaxReplicas = &maxReplicas_
	}
	return &tmp
}

// ScaleInput is an input type that accepts ScaleArgs and ScaleOutput values.
// You can construct a concrete instance of `ScaleInput` via:
//
//	ScaleArgs{...}
type ScaleInput interface {
	pulumi.Input

	ToScaleOutput() ScaleOutput
	ToScaleOutputWithContext(context.Context) ScaleOutput
}

// Container App scaling configurations.
type ScaleArgs struct {
	// Optional. Maximum number of container replicas. Defaults to 10 if not set.
	MaxReplicas pulumi.IntPtrInput `pulumi:"maxReplicas"`
	// Optional. Minimum number of container replicas.
	MinReplicas pulumi.IntPtrInput `pulumi:"minReplicas"`
	// Scaling rules.
	Rules ScaleRuleArrayInput `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for ScaleArgs
func (val *ScaleArgs) Defaults() *ScaleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxReplicas == nil {
		tmp.MaxReplicas = pulumi.IntPtr(10)
	}
	return &tmp
}
func (ScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (i ScaleArgs) ToScaleOutput() ScaleOutput {
	return i.ToScaleOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput)
}

func (i ScaleArgs) ToOutput(ctx context.Context) pulumix.Output[Scale] {
	return pulumix.Output[Scale]{
		OutputState: i.ToScaleOutputWithContext(ctx).OutputState,
	}
}

func (i ScaleArgs) ToScalePtrOutput() ScalePtrOutput {
	return i.ToScalePtrOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScalePtrOutputWithContext(ctx context.Context) ScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput).ToScalePtrOutputWithContext(ctx)
}

// ScalePtrInput is an input type that accepts ScaleArgs, ScalePtr and ScalePtrOutput values.
// You can construct a concrete instance of `ScalePtrInput` via:
//
//	        ScaleArgs{...}
//
//	or:
//
//	        nil
type ScalePtrInput interface {
	pulumi.Input

	ToScalePtrOutput() ScalePtrOutput
	ToScalePtrOutputWithContext(context.Context) ScalePtrOutput
}

type scalePtrType ScaleArgs

func ScalePtr(v *ScaleArgs) ScalePtrInput {
	return (*scalePtrType)(v)
}

func (*scalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scale)(nil)).Elem()
}

func (i *scalePtrType) ToScalePtrOutput() ScalePtrOutput {
	return i.ToScalePtrOutputWithContext(context.Background())
}

func (i *scalePtrType) ToScalePtrOutputWithContext(ctx context.Context) ScalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalePtrOutput)
}

func (i *scalePtrType) ToOutput(ctx context.Context) pulumix.Output[*Scale] {
	return pulumix.Output[*Scale]{
		OutputState: i.ToScalePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App scaling configurations.
type ScaleOutput struct{ *pulumi.OutputState }

func (ScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (o ScaleOutput) ToScaleOutput() ScaleOutput {
	return o
}

func (o ScaleOutput) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return o
}

func (o ScaleOutput) ToScalePtrOutput() ScalePtrOutput {
	return o.ToScalePtrOutputWithContext(context.Background())
}

func (o ScaleOutput) ToScalePtrOutputWithContext(ctx context.Context) ScalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Scale) *Scale {
		return &v
	}).(ScalePtrOutput)
}

func (o ScaleOutput) ToOutput(ctx context.Context) pulumix.Output[Scale] {
	return pulumix.Output[Scale]{
		OutputState: o.OutputState,
	}
}

// Optional. Maximum number of container replicas. Defaults to 10 if not set.
func (o ScaleOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Scale) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// Optional. Minimum number of container replicas.
func (o ScaleOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Scale) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o ScaleOutput) Rules() ScaleRuleArrayOutput {
	return o.ApplyT(func(v Scale) []ScaleRule { return v.Rules }).(ScaleRuleArrayOutput)
}

type ScalePtrOutput struct{ *pulumi.OutputState }

func (ScalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scale)(nil)).Elem()
}

func (o ScalePtrOutput) ToScalePtrOutput() ScalePtrOutput {
	return o
}

func (o ScalePtrOutput) ToScalePtrOutputWithContext(ctx context.Context) ScalePtrOutput {
	return o
}

func (o ScalePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Scale] {
	return pulumix.Output[*Scale]{
		OutputState: o.OutputState,
	}
}

func (o ScalePtrOutput) Elem() ScaleOutput {
	return o.ApplyT(func(v *Scale) Scale {
		if v != nil {
			return *v
		}
		var ret Scale
		return ret
	}).(ScaleOutput)
}

// Optional. Maximum number of container replicas. Defaults to 10 if not set.
func (o ScalePtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Scale) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Optional. Minimum number of container replicas.
func (o ScalePtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Scale) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o ScalePtrOutput) Rules() ScaleRuleArrayOutput {
	return o.ApplyT(func(v *Scale) []ScaleRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ScaleRuleArrayOutput)
}

// Container App scaling configurations.
type ScaleResponse struct {
	// Optional. Maximum number of container replicas. Defaults to 10 if not set.
	MaxReplicas *int `pulumi:"maxReplicas"`
	// Optional. Minimum number of container replicas.
	MinReplicas *int `pulumi:"minReplicas"`
	// Scaling rules.
	Rules []ScaleRuleResponse `pulumi:"rules"`
}

// Defaults sets the appropriate defaults for ScaleResponse
func (val *ScaleResponse) Defaults() *ScaleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxReplicas == nil {
		maxReplicas_ := 10
		tmp.MaxReplicas = &maxReplicas_
	}
	return &tmp
}

// Container App scaling configurations.
type ScaleResponseOutput struct{ *pulumi.OutputState }

func (ScaleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleResponse)(nil)).Elem()
}

func (o ScaleResponseOutput) ToScaleResponseOutput() ScaleResponseOutput {
	return o
}

func (o ScaleResponseOutput) ToScaleResponseOutputWithContext(ctx context.Context) ScaleResponseOutput {
	return o
}

func (o ScaleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScaleResponse] {
	return pulumix.Output[ScaleResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Maximum number of container replicas. Defaults to 10 if not set.
func (o ScaleResponseOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleResponse) *int { return v.MaxReplicas }).(pulumi.IntPtrOutput)
}

// Optional. Minimum number of container replicas.
func (o ScaleResponseOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleResponse) *int { return v.MinReplicas }).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o ScaleResponseOutput) Rules() ScaleRuleResponseArrayOutput {
	return o.ApplyT(func(v ScaleResponse) []ScaleRuleResponse { return v.Rules }).(ScaleRuleResponseArrayOutput)
}

type ScaleResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleResponse)(nil)).Elem()
}

func (o ScaleResponsePtrOutput) ToScaleResponsePtrOutput() ScaleResponsePtrOutput {
	return o
}

func (o ScaleResponsePtrOutput) ToScaleResponsePtrOutputWithContext(ctx context.Context) ScaleResponsePtrOutput {
	return o
}

func (o ScaleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScaleResponse] {
	return pulumix.Output[*ScaleResponse]{
		OutputState: o.OutputState,
	}
}

func (o ScaleResponsePtrOutput) Elem() ScaleResponseOutput {
	return o.ApplyT(func(v *ScaleResponse) ScaleResponse {
		if v != nil {
			return *v
		}
		var ret ScaleResponse
		return ret
	}).(ScaleResponseOutput)
}

// Optional. Maximum number of container replicas. Defaults to 10 if not set.
func (o ScaleResponsePtrOutput) MaxReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxReplicas
	}).(pulumi.IntPtrOutput)
}

// Optional. Minimum number of container replicas.
func (o ScaleResponsePtrOutput) MinReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinReplicas
	}).(pulumi.IntPtrOutput)
}

// Scaling rules.
func (o ScaleResponsePtrOutput) Rules() ScaleRuleResponseArrayOutput {
	return o.ApplyT(func(v *ScaleResponse) []ScaleRuleResponse {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ScaleRuleResponseArrayOutput)
}

// Container App container scaling rule.
type ScaleRule struct {
	// Azure Queue based scaling.
	AzureQueue *QueueScaleRule `pulumi:"azureQueue"`
	// Custom scale rule.
	Custom *CustomScaleRule `pulumi:"custom"`
	// HTTP requests based scaling.
	Http *HttpScaleRule `pulumi:"http"`
	// Scale Rule Name
	Name *string `pulumi:"name"`
	// Tcp requests based scaling.
	Tcp *TcpScaleRule `pulumi:"tcp"`
}

// ScaleRuleInput is an input type that accepts ScaleRuleArgs and ScaleRuleOutput values.
// You can construct a concrete instance of `ScaleRuleInput` via:
//
//	ScaleRuleArgs{...}
type ScaleRuleInput interface {
	pulumi.Input

	ToScaleRuleOutput() ScaleRuleOutput
	ToScaleRuleOutputWithContext(context.Context) ScaleRuleOutput
}

// Container App container scaling rule.
type ScaleRuleArgs struct {
	// Azure Queue based scaling.
	AzureQueue QueueScaleRulePtrInput `pulumi:"azureQueue"`
	// Custom scale rule.
	Custom CustomScaleRulePtrInput `pulumi:"custom"`
	// HTTP requests based scaling.
	Http HttpScaleRulePtrInput `pulumi:"http"`
	// Scale Rule Name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tcp requests based scaling.
	Tcp TcpScaleRulePtrInput `pulumi:"tcp"`
}

func (ScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRule)(nil)).Elem()
}

func (i ScaleRuleArgs) ToScaleRuleOutput() ScaleRuleOutput {
	return i.ToScaleRuleOutputWithContext(context.Background())
}

func (i ScaleRuleArgs) ToScaleRuleOutputWithContext(ctx context.Context) ScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleOutput)
}

func (i ScaleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[ScaleRule] {
	return pulumix.Output[ScaleRule]{
		OutputState: i.ToScaleRuleOutputWithContext(ctx).OutputState,
	}
}

// ScaleRuleArrayInput is an input type that accepts ScaleRuleArray and ScaleRuleArrayOutput values.
// You can construct a concrete instance of `ScaleRuleArrayInput` via:
//
//	ScaleRuleArray{ ScaleRuleArgs{...} }
type ScaleRuleArrayInput interface {
	pulumi.Input

	ToScaleRuleArrayOutput() ScaleRuleArrayOutput
	ToScaleRuleArrayOutputWithContext(context.Context) ScaleRuleArrayOutput
}

type ScaleRuleArray []ScaleRuleInput

func (ScaleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRule)(nil)).Elem()
}

func (i ScaleRuleArray) ToScaleRuleArrayOutput() ScaleRuleArrayOutput {
	return i.ToScaleRuleArrayOutputWithContext(context.Background())
}

func (i ScaleRuleArray) ToScaleRuleArrayOutputWithContext(ctx context.Context) ScaleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleArrayOutput)
}

func (i ScaleRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]ScaleRule] {
	return pulumix.Output[[]ScaleRule]{
		OutputState: i.ToScaleRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Container App container scaling rule.
type ScaleRuleOutput struct{ *pulumi.OutputState }

func (ScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRule)(nil)).Elem()
}

func (o ScaleRuleOutput) ToScaleRuleOutput() ScaleRuleOutput {
	return o
}

func (o ScaleRuleOutput) ToScaleRuleOutputWithContext(ctx context.Context) ScaleRuleOutput {
	return o
}

func (o ScaleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[ScaleRule] {
	return pulumix.Output[ScaleRule]{
		OutputState: o.OutputState,
	}
}

// Azure Queue based scaling.
func (o ScaleRuleOutput) AzureQueue() QueueScaleRulePtrOutput {
	return o.ApplyT(func(v ScaleRule) *QueueScaleRule { return v.AzureQueue }).(QueueScaleRulePtrOutput)
}

// Custom scale rule.
func (o ScaleRuleOutput) Custom() CustomScaleRulePtrOutput {
	return o.ApplyT(func(v ScaleRule) *CustomScaleRule { return v.Custom }).(CustomScaleRulePtrOutput)
}

// HTTP requests based scaling.
func (o ScaleRuleOutput) Http() HttpScaleRulePtrOutput {
	return o.ApplyT(func(v ScaleRule) *HttpScaleRule { return v.Http }).(HttpScaleRulePtrOutput)
}

// Scale Rule Name
func (o ScaleRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleRule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tcp requests based scaling.
func (o ScaleRuleOutput) Tcp() TcpScaleRulePtrOutput {
	return o.ApplyT(func(v ScaleRule) *TcpScaleRule { return v.Tcp }).(TcpScaleRulePtrOutput)
}

type ScaleRuleArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRule)(nil)).Elem()
}

func (o ScaleRuleArrayOutput) ToScaleRuleArrayOutput() ScaleRuleArrayOutput {
	return o
}

func (o ScaleRuleArrayOutput) ToScaleRuleArrayOutputWithContext(ctx context.Context) ScaleRuleArrayOutput {
	return o
}

func (o ScaleRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScaleRule] {
	return pulumix.Output[[]ScaleRule]{
		OutputState: o.OutputState,
	}
}

func (o ScaleRuleArrayOutput) Index(i pulumi.IntInput) ScaleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRule {
		return vs[0].([]ScaleRule)[vs[1].(int)]
	}).(ScaleRuleOutput)
}

// Auth Secrets for Scale Rule
type ScaleRuleAuth struct {
	// Name of the secret from which to pull the auth params.
	SecretRef *string `pulumi:"secretRef"`
	// Trigger Parameter that uses the secret
	TriggerParameter *string `pulumi:"triggerParameter"`
}

// ScaleRuleAuthInput is an input type that accepts ScaleRuleAuthArgs and ScaleRuleAuthOutput values.
// You can construct a concrete instance of `ScaleRuleAuthInput` via:
//
//	ScaleRuleAuthArgs{...}
type ScaleRuleAuthInput interface {
	pulumi.Input

	ToScaleRuleAuthOutput() ScaleRuleAuthOutput
	ToScaleRuleAuthOutputWithContext(context.Context) ScaleRuleAuthOutput
}

// Auth Secrets for Scale Rule
type ScaleRuleAuthArgs struct {
	// Name of the secret from which to pull the auth params.
	SecretRef pulumi.StringPtrInput `pulumi:"secretRef"`
	// Trigger Parameter that uses the secret
	TriggerParameter pulumi.StringPtrInput `pulumi:"triggerParameter"`
}

func (ScaleRuleAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleAuth)(nil)).Elem()
}

func (i ScaleRuleAuthArgs) ToScaleRuleAuthOutput() ScaleRuleAuthOutput {
	return i.ToScaleRuleAuthOutputWithContext(context.Background())
}

func (i ScaleRuleAuthArgs) ToScaleRuleAuthOutputWithContext(ctx context.Context) ScaleRuleAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleAuthOutput)
}

func (i ScaleRuleAuthArgs) ToOutput(ctx context.Context) pulumix.Output[ScaleRuleAuth] {
	return pulumix.Output[ScaleRuleAuth]{
		OutputState: i.ToScaleRuleAuthOutputWithContext(ctx).OutputState,
	}
}

// ScaleRuleAuthArrayInput is an input type that accepts ScaleRuleAuthArray and ScaleRuleAuthArrayOutput values.
// You can construct a concrete instance of `ScaleRuleAuthArrayInput` via:
//
//	ScaleRuleAuthArray{ ScaleRuleAuthArgs{...} }
type ScaleRuleAuthArrayInput interface {
	pulumi.Input

	ToScaleRuleAuthArrayOutput() ScaleRuleAuthArrayOutput
	ToScaleRuleAuthArrayOutputWithContext(context.Context) ScaleRuleAuthArrayOutput
}

type ScaleRuleAuthArray []ScaleRuleAuthInput

func (ScaleRuleAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleAuth)(nil)).Elem()
}

func (i ScaleRuleAuthArray) ToScaleRuleAuthArrayOutput() ScaleRuleAuthArrayOutput {
	return i.ToScaleRuleAuthArrayOutputWithContext(context.Background())
}

func (i ScaleRuleAuthArray) ToScaleRuleAuthArrayOutputWithContext(ctx context.Context) ScaleRuleAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleAuthArrayOutput)
}

func (i ScaleRuleAuthArray) ToOutput(ctx context.Context) pulumix.Output[[]ScaleRuleAuth] {
	return pulumix.Output[[]ScaleRuleAuth]{
		OutputState: i.ToScaleRuleAuthArrayOutputWithContext(ctx).OutputState,
	}
}

// Auth Secrets for Scale Rule
type ScaleRuleAuthOutput struct{ *pulumi.OutputState }

func (ScaleRuleAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleAuth)(nil)).Elem()
}

func (o ScaleRuleAuthOutput) ToScaleRuleAuthOutput() ScaleRuleAuthOutput {
	return o
}

func (o ScaleRuleAuthOutput) ToScaleRuleAuthOutputWithContext(ctx context.Context) ScaleRuleAuthOutput {
	return o
}

func (o ScaleRuleAuthOutput) ToOutput(ctx context.Context) pulumix.Output[ScaleRuleAuth] {
	return pulumix.Output[ScaleRuleAuth]{
		OutputState: o.OutputState,
	}
}

// Name of the secret from which to pull the auth params.
func (o ScaleRuleAuthOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleRuleAuth) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Trigger Parameter that uses the secret
func (o ScaleRuleAuthOutput) TriggerParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleRuleAuth) *string { return v.TriggerParameter }).(pulumi.StringPtrOutput)
}

type ScaleRuleAuthArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleAuth)(nil)).Elem()
}

func (o ScaleRuleAuthArrayOutput) ToScaleRuleAuthArrayOutput() ScaleRuleAuthArrayOutput {
	return o
}

func (o ScaleRuleAuthArrayOutput) ToScaleRuleAuthArrayOutputWithContext(ctx context.Context) ScaleRuleAuthArrayOutput {
	return o
}

func (o ScaleRuleAuthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScaleRuleAuth] {
	return pulumix.Output[[]ScaleRuleAuth]{
		OutputState: o.OutputState,
	}
}

func (o ScaleRuleAuthArrayOutput) Index(i pulumi.IntInput) ScaleRuleAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRuleAuth {
		return vs[0].([]ScaleRuleAuth)[vs[1].(int)]
	}).(ScaleRuleAuthOutput)
}

// Auth Secrets for Scale Rule
type ScaleRuleAuthResponse struct {
	// Name of the secret from which to pull the auth params.
	SecretRef *string `pulumi:"secretRef"`
	// Trigger Parameter that uses the secret
	TriggerParameter *string `pulumi:"triggerParameter"`
}

// Auth Secrets for Scale Rule
type ScaleRuleAuthResponseOutput struct{ *pulumi.OutputState }

func (ScaleRuleAuthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleAuthResponse)(nil)).Elem()
}

func (o ScaleRuleAuthResponseOutput) ToScaleRuleAuthResponseOutput() ScaleRuleAuthResponseOutput {
	return o
}

func (o ScaleRuleAuthResponseOutput) ToScaleRuleAuthResponseOutputWithContext(ctx context.Context) ScaleRuleAuthResponseOutput {
	return o
}

func (o ScaleRuleAuthResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScaleRuleAuthResponse] {
	return pulumix.Output[ScaleRuleAuthResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the secret from which to pull the auth params.
func (o ScaleRuleAuthResponseOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleRuleAuthResponse) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Trigger Parameter that uses the secret
func (o ScaleRuleAuthResponseOutput) TriggerParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleRuleAuthResponse) *string { return v.TriggerParameter }).(pulumi.StringPtrOutput)
}

type ScaleRuleAuthResponseArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleAuthResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleAuthResponse)(nil)).Elem()
}

func (o ScaleRuleAuthResponseArrayOutput) ToScaleRuleAuthResponseArrayOutput() ScaleRuleAuthResponseArrayOutput {
	return o
}

func (o ScaleRuleAuthResponseArrayOutput) ToScaleRuleAuthResponseArrayOutputWithContext(ctx context.Context) ScaleRuleAuthResponseArrayOutput {
	return o
}

func (o ScaleRuleAuthResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScaleRuleAuthResponse] {
	return pulumix.Output[[]ScaleRuleAuthResponse]{
		OutputState: o.OutputState,
	}
}

func (o ScaleRuleAuthResponseArrayOutput) Index(i pulumi.IntInput) ScaleRuleAuthResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRuleAuthResponse {
		return vs[0].([]ScaleRuleAuthResponse)[vs[1].(int)]
	}).(ScaleRuleAuthResponseOutput)
}

// Container App container scaling rule.
type ScaleRuleResponse struct {
	// Azure Queue based scaling.
	AzureQueue *QueueScaleRuleResponse `pulumi:"azureQueue"`
	// Custom scale rule.
	Custom *CustomScaleRuleResponse `pulumi:"custom"`
	// HTTP requests based scaling.
	Http *HttpScaleRuleResponse `pulumi:"http"`
	// Scale Rule Name
	Name *string `pulumi:"name"`
	// Tcp requests based scaling.
	Tcp *TcpScaleRuleResponse `pulumi:"tcp"`
}

// Container App container scaling rule.
type ScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (ScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleResponse)(nil)).Elem()
}

func (o ScaleRuleResponseOutput) ToScaleRuleResponseOutput() ScaleRuleResponseOutput {
	return o
}

func (o ScaleRuleResponseOutput) ToScaleRuleResponseOutputWithContext(ctx context.Context) ScaleRuleResponseOutput {
	return o
}

func (o ScaleRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScaleRuleResponse] {
	return pulumix.Output[ScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Azure Queue based scaling.
func (o ScaleRuleResponseOutput) AzureQueue() QueueScaleRuleResponsePtrOutput {
	return o.ApplyT(func(v ScaleRuleResponse) *QueueScaleRuleResponse { return v.AzureQueue }).(QueueScaleRuleResponsePtrOutput)
}

// Custom scale rule.
func (o ScaleRuleResponseOutput) Custom() CustomScaleRuleResponsePtrOutput {
	return o.ApplyT(func(v ScaleRuleResponse) *CustomScaleRuleResponse { return v.Custom }).(CustomScaleRuleResponsePtrOutput)
}

// HTTP requests based scaling.
func (o ScaleRuleResponseOutput) Http() HttpScaleRuleResponsePtrOutput {
	return o.ApplyT(func(v ScaleRuleResponse) *HttpScaleRuleResponse { return v.Http }).(HttpScaleRuleResponsePtrOutput)
}

// Scale Rule Name
func (o ScaleRuleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleRuleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tcp requests based scaling.
func (o ScaleRuleResponseOutput) Tcp() TcpScaleRuleResponsePtrOutput {
	return o.ApplyT(func(v ScaleRuleResponse) *TcpScaleRuleResponse { return v.Tcp }).(TcpScaleRuleResponsePtrOutput)
}

type ScaleRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleResponse)(nil)).Elem()
}

func (o ScaleRuleResponseArrayOutput) ToScaleRuleResponseArrayOutput() ScaleRuleResponseArrayOutput {
	return o
}

func (o ScaleRuleResponseArrayOutput) ToScaleRuleResponseArrayOutputWithContext(ctx context.Context) ScaleRuleResponseArrayOutput {
	return o
}

func (o ScaleRuleResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ScaleRuleResponse] {
	return pulumix.Output[[]ScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o ScaleRuleResponseArrayOutput) Index(i pulumi.IntInput) ScaleRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRuleResponse {
		return vs[0].([]ScaleRuleResponse)[vs[1].(int)]
	}).(ScaleRuleResponseOutput)
}

// Secret definition.
type Secret struct {
	// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
	Identity *string `pulumi:"identity"`
	// Azure Key Vault URL pointing to the secret referenced by the container app.
	KeyVaultUrl *string `pulumi:"keyVaultUrl"`
	// Secret Name.
	Name *string `pulumi:"name"`
	// Secret Value.
	Value *string `pulumi:"value"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//	SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// Secret definition.
type SecretArgs struct {
	// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// Azure Key Vault URL pointing to the secret referenced by the container app.
	KeyVaultUrl pulumi.StringPtrInput `pulumi:"keyVaultUrl"`
	// Secret Name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Secret Value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

func (i SecretArgs) ToOutput(ctx context.Context) pulumix.Output[Secret] {
	return pulumix.Output[Secret]{
		OutputState: i.ToSecretOutputWithContext(ctx).OutputState,
	}
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

func (i SecretArray) ToOutput(ctx context.Context) pulumix.Output[[]Secret] {
	return pulumix.Output[[]Secret]{
		OutputState: i.ToSecretArrayOutputWithContext(ctx).OutputState,
	}
}

// Secret definition.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

func (o SecretOutput) ToOutput(ctx context.Context) pulumix.Output[Secret] {
	return pulumix.Output[Secret]{
		OutputState: o.OutputState,
	}
}

// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
func (o SecretOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// Azure Key Vault URL pointing to the secret referenced by the container app.
func (o SecretOutput) KeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.KeyVaultUrl }).(pulumi.StringPtrOutput)
}

// Secret Name.
func (o SecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Secret Value.
func (o SecretOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Secret] {
	return pulumix.Output[[]Secret]{
		OutputState: o.OutputState,
	}
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Secret {
		return vs[0].([]Secret)[vs[1].(int)]
	}).(SecretOutput)
}

// Secret definition.
type SecretResponse struct {
	// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
	Identity *string `pulumi:"identity"`
	// Azure Key Vault URL pointing to the secret referenced by the container app.
	KeyVaultUrl *string `pulumi:"keyVaultUrl"`
	// Secret Name.
	Name *string `pulumi:"name"`
}

// Secret definition.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretResponse] {
	return pulumix.Output[SecretResponse]{
		OutputState: o.OutputState,
	}
}

// Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
func (o SecretResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// Azure Key Vault URL pointing to the secret referenced by the container app.
func (o SecretResponseOutput) KeyVaultUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretResponse) *string { return v.KeyVaultUrl }).(pulumi.StringPtrOutput)
}

// Secret Name.
func (o SecretResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SecretResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretResponse)(nil)).Elem()
}

func (o SecretResponseArrayOutput) ToSecretResponseArrayOutput() SecretResponseArrayOutput {
	return o
}

func (o SecretResponseArrayOutput) ToSecretResponseArrayOutputWithContext(ctx context.Context) SecretResponseArrayOutput {
	return o
}

func (o SecretResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretResponse] {
	return pulumix.Output[[]SecretResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecretResponseArrayOutput) Index(i pulumi.IntInput) SecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretResponse {
		return vs[0].([]SecretResponse)[vs[1].(int)]
	}).(SecretResponseOutput)
}

// Secret to be added to volume.
type SecretVolumeItem struct {
	// Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.
	Path *string `pulumi:"path"`
	// Name of the Container App secret from which to pull the secret value.
	SecretRef *string `pulumi:"secretRef"`
}

// SecretVolumeItemInput is an input type that accepts SecretVolumeItemArgs and SecretVolumeItemOutput values.
// You can construct a concrete instance of `SecretVolumeItemInput` via:
//
//	SecretVolumeItemArgs{...}
type SecretVolumeItemInput interface {
	pulumi.Input

	ToSecretVolumeItemOutput() SecretVolumeItemOutput
	ToSecretVolumeItemOutputWithContext(context.Context) SecretVolumeItemOutput
}

// Secret to be added to volume.
type SecretVolumeItemArgs struct {
	// Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name of the Container App secret from which to pull the secret value.
	SecretRef pulumi.StringPtrInput `pulumi:"secretRef"`
}

func (SecretVolumeItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeItem)(nil)).Elem()
}

func (i SecretVolumeItemArgs) ToSecretVolumeItemOutput() SecretVolumeItemOutput {
	return i.ToSecretVolumeItemOutputWithContext(context.Background())
}

func (i SecretVolumeItemArgs) ToSecretVolumeItemOutputWithContext(ctx context.Context) SecretVolumeItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeItemOutput)
}

func (i SecretVolumeItemArgs) ToOutput(ctx context.Context) pulumix.Output[SecretVolumeItem] {
	return pulumix.Output[SecretVolumeItem]{
		OutputState: i.ToSecretVolumeItemOutputWithContext(ctx).OutputState,
	}
}

// SecretVolumeItemArrayInput is an input type that accepts SecretVolumeItemArray and SecretVolumeItemArrayOutput values.
// You can construct a concrete instance of `SecretVolumeItemArrayInput` via:
//
//	SecretVolumeItemArray{ SecretVolumeItemArgs{...} }
type SecretVolumeItemArrayInput interface {
	pulumi.Input

	ToSecretVolumeItemArrayOutput() SecretVolumeItemArrayOutput
	ToSecretVolumeItemArrayOutputWithContext(context.Context) SecretVolumeItemArrayOutput
}

type SecretVolumeItemArray []SecretVolumeItemInput

func (SecretVolumeItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVolumeItem)(nil)).Elem()
}

func (i SecretVolumeItemArray) ToSecretVolumeItemArrayOutput() SecretVolumeItemArrayOutput {
	return i.ToSecretVolumeItemArrayOutputWithContext(context.Background())
}

func (i SecretVolumeItemArray) ToSecretVolumeItemArrayOutputWithContext(ctx context.Context) SecretVolumeItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretVolumeItemArrayOutput)
}

func (i SecretVolumeItemArray) ToOutput(ctx context.Context) pulumix.Output[[]SecretVolumeItem] {
	return pulumix.Output[[]SecretVolumeItem]{
		OutputState: i.ToSecretVolumeItemArrayOutputWithContext(ctx).OutputState,
	}
}

// Secret to be added to volume.
type SecretVolumeItemOutput struct{ *pulumi.OutputState }

func (SecretVolumeItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeItem)(nil)).Elem()
}

func (o SecretVolumeItemOutput) ToSecretVolumeItemOutput() SecretVolumeItemOutput {
	return o
}

func (o SecretVolumeItemOutput) ToSecretVolumeItemOutputWithContext(ctx context.Context) SecretVolumeItemOutput {
	return o
}

func (o SecretVolumeItemOutput) ToOutput(ctx context.Context) pulumix.Output[SecretVolumeItem] {
	return pulumix.Output[SecretVolumeItem]{
		OutputState: o.OutputState,
	}
}

// Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.
func (o SecretVolumeItemOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeItem) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name of the Container App secret from which to pull the secret value.
func (o SecretVolumeItemOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeItem) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

type SecretVolumeItemArrayOutput struct{ *pulumi.OutputState }

func (SecretVolumeItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVolumeItem)(nil)).Elem()
}

func (o SecretVolumeItemArrayOutput) ToSecretVolumeItemArrayOutput() SecretVolumeItemArrayOutput {
	return o
}

func (o SecretVolumeItemArrayOutput) ToSecretVolumeItemArrayOutputWithContext(ctx context.Context) SecretVolumeItemArrayOutput {
	return o
}

func (o SecretVolumeItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretVolumeItem] {
	return pulumix.Output[[]SecretVolumeItem]{
		OutputState: o.OutputState,
	}
}

func (o SecretVolumeItemArrayOutput) Index(i pulumi.IntInput) SecretVolumeItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretVolumeItem {
		return vs[0].([]SecretVolumeItem)[vs[1].(int)]
	}).(SecretVolumeItemOutput)
}

// Secret to be added to volume.
type SecretVolumeItemResponse struct {
	// Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.
	Path *string `pulumi:"path"`
	// Name of the Container App secret from which to pull the secret value.
	SecretRef *string `pulumi:"secretRef"`
}

// Secret to be added to volume.
type SecretVolumeItemResponseOutput struct{ *pulumi.OutputState }

func (SecretVolumeItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretVolumeItemResponse)(nil)).Elem()
}

func (o SecretVolumeItemResponseOutput) ToSecretVolumeItemResponseOutput() SecretVolumeItemResponseOutput {
	return o
}

func (o SecretVolumeItemResponseOutput) ToSecretVolumeItemResponseOutputWithContext(ctx context.Context) SecretVolumeItemResponseOutput {
	return o
}

func (o SecretVolumeItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretVolumeItemResponse] {
	return pulumix.Output[SecretVolumeItemResponse]{
		OutputState: o.OutputState,
	}
}

// Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef.
func (o SecretVolumeItemResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeItemResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name of the Container App secret from which to pull the secret value.
func (o SecretVolumeItemResponseOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretVolumeItemResponse) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

type SecretVolumeItemResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretVolumeItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretVolumeItemResponse)(nil)).Elem()
}

func (o SecretVolumeItemResponseArrayOutput) ToSecretVolumeItemResponseArrayOutput() SecretVolumeItemResponseArrayOutput {
	return o
}

func (o SecretVolumeItemResponseArrayOutput) ToSecretVolumeItemResponseArrayOutputWithContext(ctx context.Context) SecretVolumeItemResponseArrayOutput {
	return o
}

func (o SecretVolumeItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecretVolumeItemResponse] {
	return pulumix.Output[[]SecretVolumeItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecretVolumeItemResponseArrayOutput) Index(i pulumi.IntInput) SecretVolumeItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretVolumeItemResponse {
		return vs[0].([]SecretVolumeItemResponse)[vs[1].(int)]
	}).(SecretVolumeItemResponseOutput)
}

// Container App to be a dev service
type Service struct {
	// Dev ContainerApp service type
	Type string `pulumi:"type"`
}

// ServiceInput is an input type that accepts ServiceArgs and ServiceOutput values.
// You can construct a concrete instance of `ServiceInput` via:
//
//	ServiceArgs{...}
type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(context.Context) ServiceOutput
}

// Container App to be a dev service
type ServiceArgs struct {
	// Dev ContainerApp service type
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (i ServiceArgs) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i ServiceArgs) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

func (i ServiceArgs) ToOutput(ctx context.Context) pulumix.Output[Service] {
	return pulumix.Output[Service]{
		OutputState: i.ToServiceOutputWithContext(ctx).OutputState,
	}
}

func (i ServiceArgs) ToServicePtrOutput() ServicePtrOutput {
	return i.ToServicePtrOutputWithContext(context.Background())
}

func (i ServiceArgs) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput).ToServicePtrOutputWithContext(ctx)
}

// ServicePtrInput is an input type that accepts ServiceArgs, ServicePtr and ServicePtrOutput values.
// You can construct a concrete instance of `ServicePtrInput` via:
//
//	        ServiceArgs{...}
//
//	or:
//
//	        nil
type ServicePtrInput interface {
	pulumi.Input

	ToServicePtrOutput() ServicePtrOutput
	ToServicePtrOutputWithContext(context.Context) ServicePtrOutput
}

type servicePtrType ServiceArgs

func ServicePtr(v *ServiceArgs) ServicePtrInput {
	return (*servicePtrType)(v)
}

func (*servicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *servicePtrType) ToServicePtrOutput() ServicePtrOutput {
	return i.ToServicePtrOutputWithContext(context.Background())
}

func (i *servicePtrType) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePtrOutput)
}

func (i *servicePtrType) ToOutput(ctx context.Context) pulumix.Output[*Service] {
	return pulumix.Output[*Service]{
		OutputState: i.ToServicePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App to be a dev service
type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToServicePtrOutput() ServicePtrOutput {
	return o.ToServicePtrOutputWithContext(context.Background())
}

func (o ServiceOutput) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Service) *Service {
		return &v
	}).(ServicePtrOutput)
}

func (o ServiceOutput) ToOutput(ctx context.Context) pulumix.Output[Service] {
	return pulumix.Output[Service]{
		OutputState: o.OutputState,
	}
}

// Dev ContainerApp service type
func (o ServiceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Service) string { return v.Type }).(pulumi.StringOutput)
}

type ServicePtrOutput struct{ *pulumi.OutputState }

func (ServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServicePtrOutput) ToServicePtrOutput() ServicePtrOutput {
	return o
}

func (o ServicePtrOutput) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return o
}

func (o ServicePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Service] {
	return pulumix.Output[*Service]{
		OutputState: o.OutputState,
	}
}

func (o ServicePtrOutput) Elem() ServiceOutput {
	return o.ApplyT(func(v *Service) Service {
		if v != nil {
			return *v
		}
		var ret Service
		return ret
	}).(ServiceOutput)
}

// Dev ContainerApp service type
func (o ServicePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Configuration to bind a ContainerApp to a dev ContainerApp Service
type ServiceBind struct {
	// Name of the service bind
	Name *string `pulumi:"name"`
	// Resource id of the target service
	ServiceId *string `pulumi:"serviceId"`
}

// ServiceBindInput is an input type that accepts ServiceBindArgs and ServiceBindOutput values.
// You can construct a concrete instance of `ServiceBindInput` via:
//
//	ServiceBindArgs{...}
type ServiceBindInput interface {
	pulumi.Input

	ToServiceBindOutput() ServiceBindOutput
	ToServiceBindOutputWithContext(context.Context) ServiceBindOutput
}

// Configuration to bind a ContainerApp to a dev ContainerApp Service
type ServiceBindArgs struct {
	// Name of the service bind
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource id of the target service
	ServiceId pulumi.StringPtrInput `pulumi:"serviceId"`
}

func (ServiceBindArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBind)(nil)).Elem()
}

func (i ServiceBindArgs) ToServiceBindOutput() ServiceBindOutput {
	return i.ToServiceBindOutputWithContext(context.Background())
}

func (i ServiceBindArgs) ToServiceBindOutputWithContext(ctx context.Context) ServiceBindOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBindOutput)
}

func (i ServiceBindArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceBind] {
	return pulumix.Output[ServiceBind]{
		OutputState: i.ToServiceBindOutputWithContext(ctx).OutputState,
	}
}

// ServiceBindArrayInput is an input type that accepts ServiceBindArray and ServiceBindArrayOutput values.
// You can construct a concrete instance of `ServiceBindArrayInput` via:
//
//	ServiceBindArray{ ServiceBindArgs{...} }
type ServiceBindArrayInput interface {
	pulumi.Input

	ToServiceBindArrayOutput() ServiceBindArrayOutput
	ToServiceBindArrayOutputWithContext(context.Context) ServiceBindArrayOutput
}

type ServiceBindArray []ServiceBindInput

func (ServiceBindArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceBind)(nil)).Elem()
}

func (i ServiceBindArray) ToServiceBindArrayOutput() ServiceBindArrayOutput {
	return i.ToServiceBindArrayOutputWithContext(context.Background())
}

func (i ServiceBindArray) ToServiceBindArrayOutputWithContext(ctx context.Context) ServiceBindArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBindArrayOutput)
}

func (i ServiceBindArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceBind] {
	return pulumix.Output[[]ServiceBind]{
		OutputState: i.ToServiceBindArrayOutputWithContext(ctx).OutputState,
	}
}

// Configuration to bind a ContainerApp to a dev ContainerApp Service
type ServiceBindOutput struct{ *pulumi.OutputState }

func (ServiceBindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBind)(nil)).Elem()
}

func (o ServiceBindOutput) ToServiceBindOutput() ServiceBindOutput {
	return o
}

func (o ServiceBindOutput) ToServiceBindOutputWithContext(ctx context.Context) ServiceBindOutput {
	return o
}

func (o ServiceBindOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceBind] {
	return pulumix.Output[ServiceBind]{
		OutputState: o.OutputState,
	}
}

// Name of the service bind
func (o ServiceBindOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBind) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource id of the target service
func (o ServiceBindOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBind) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

type ServiceBindArrayOutput struct{ *pulumi.OutputState }

func (ServiceBindArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceBind)(nil)).Elem()
}

func (o ServiceBindArrayOutput) ToServiceBindArrayOutput() ServiceBindArrayOutput {
	return o
}

func (o ServiceBindArrayOutput) ToServiceBindArrayOutputWithContext(ctx context.Context) ServiceBindArrayOutput {
	return o
}

func (o ServiceBindArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceBind] {
	return pulumix.Output[[]ServiceBind]{
		OutputState: o.OutputState,
	}
}

func (o ServiceBindArrayOutput) Index(i pulumi.IntInput) ServiceBindOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceBind {
		return vs[0].([]ServiceBind)[vs[1].(int)]
	}).(ServiceBindOutput)
}

// Configuration to bind a ContainerApp to a dev ContainerApp Service
type ServiceBindResponse struct {
	// Name of the service bind
	Name *string `pulumi:"name"`
	// Resource id of the target service
	ServiceId *string `pulumi:"serviceId"`
}

// Configuration to bind a ContainerApp to a dev ContainerApp Service
type ServiceBindResponseOutput struct{ *pulumi.OutputState }

func (ServiceBindResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBindResponse)(nil)).Elem()
}

func (o ServiceBindResponseOutput) ToServiceBindResponseOutput() ServiceBindResponseOutput {
	return o
}

func (o ServiceBindResponseOutput) ToServiceBindResponseOutputWithContext(ctx context.Context) ServiceBindResponseOutput {
	return o
}

func (o ServiceBindResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceBindResponse] {
	return pulumix.Output[ServiceBindResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the service bind
func (o ServiceBindResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBindResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource id of the target service
func (o ServiceBindResponseOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBindResponse) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

type ServiceBindResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceBindResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceBindResponse)(nil)).Elem()
}

func (o ServiceBindResponseArrayOutput) ToServiceBindResponseArrayOutput() ServiceBindResponseArrayOutput {
	return o
}

func (o ServiceBindResponseArrayOutput) ToServiceBindResponseArrayOutputWithContext(ctx context.Context) ServiceBindResponseArrayOutput {
	return o
}

func (o ServiceBindResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceBindResponse] {
	return pulumix.Output[[]ServiceBindResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServiceBindResponseArrayOutput) Index(i pulumi.IntInput) ServiceBindResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceBindResponse {
		return vs[0].([]ServiceBindResponse)[vs[1].(int)]
	}).(ServiceBindResponseOutput)
}

// Container App to be a dev service
type ServiceResponse struct {
	// Dev ContainerApp service type
	Type string `pulumi:"type"`
}

// Container App to be a dev service
type ServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResponse)(nil)).Elem()
}

func (o ServiceResponseOutput) ToServiceResponseOutput() ServiceResponseOutput {
	return o
}

func (o ServiceResponseOutput) ToServiceResponseOutputWithContext(ctx context.Context) ServiceResponseOutput {
	return o
}

func (o ServiceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceResponse] {
	return pulumix.Output[ServiceResponse]{
		OutputState: o.OutputState,
	}
}

// Dev ContainerApp service type
func (o ServiceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceResponse)(nil)).Elem()
}

func (o ServiceResponsePtrOutput) ToServiceResponsePtrOutput() ServiceResponsePtrOutput {
	return o
}

func (o ServiceResponsePtrOutput) ToServiceResponsePtrOutputWithContext(ctx context.Context) ServiceResponsePtrOutput {
	return o
}

func (o ServiceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceResponse] {
	return pulumix.Output[*ServiceResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServiceResponsePtrOutput) Elem() ServiceResponseOutput {
	return o.ApplyT(func(v *ServiceResponse) ServiceResponse {
		if v != nil {
			return *v
		}
		var ret ServiceResponse
		return ret
	}).(ServiceResponseOutput)
}

// Dev ContainerApp service type
func (o ServiceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Container App container Tcp scaling rule.
type TcpScaleRule struct {
	// Authentication secrets for the tcp scale rule.
	Auth []ScaleRuleAuth `pulumi:"auth"`
	// Metadata properties to describe tcp scale rule.
	Metadata map[string]string `pulumi:"metadata"`
}

// TcpScaleRuleInput is an input type that accepts TcpScaleRuleArgs and TcpScaleRuleOutput values.
// You can construct a concrete instance of `TcpScaleRuleInput` via:
//
//	TcpScaleRuleArgs{...}
type TcpScaleRuleInput interface {
	pulumi.Input

	ToTcpScaleRuleOutput() TcpScaleRuleOutput
	ToTcpScaleRuleOutputWithContext(context.Context) TcpScaleRuleOutput
}

// Container App container Tcp scaling rule.
type TcpScaleRuleArgs struct {
	// Authentication secrets for the tcp scale rule.
	Auth ScaleRuleAuthArrayInput `pulumi:"auth"`
	// Metadata properties to describe tcp scale rule.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
}

func (TcpScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpScaleRule)(nil)).Elem()
}

func (i TcpScaleRuleArgs) ToTcpScaleRuleOutput() TcpScaleRuleOutput {
	return i.ToTcpScaleRuleOutputWithContext(context.Background())
}

func (i TcpScaleRuleArgs) ToTcpScaleRuleOutputWithContext(ctx context.Context) TcpScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpScaleRuleOutput)
}

func (i TcpScaleRuleArgs) ToOutput(ctx context.Context) pulumix.Output[TcpScaleRule] {
	return pulumix.Output[TcpScaleRule]{
		OutputState: i.ToTcpScaleRuleOutputWithContext(ctx).OutputState,
	}
}

func (i TcpScaleRuleArgs) ToTcpScaleRulePtrOutput() TcpScaleRulePtrOutput {
	return i.ToTcpScaleRulePtrOutputWithContext(context.Background())
}

func (i TcpScaleRuleArgs) ToTcpScaleRulePtrOutputWithContext(ctx context.Context) TcpScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpScaleRuleOutput).ToTcpScaleRulePtrOutputWithContext(ctx)
}

// TcpScaleRulePtrInput is an input type that accepts TcpScaleRuleArgs, TcpScaleRulePtr and TcpScaleRulePtrOutput values.
// You can construct a concrete instance of `TcpScaleRulePtrInput` via:
//
//	        TcpScaleRuleArgs{...}
//
//	or:
//
//	        nil
type TcpScaleRulePtrInput interface {
	pulumi.Input

	ToTcpScaleRulePtrOutput() TcpScaleRulePtrOutput
	ToTcpScaleRulePtrOutputWithContext(context.Context) TcpScaleRulePtrOutput
}

type tcpScaleRulePtrType TcpScaleRuleArgs

func TcpScaleRulePtr(v *TcpScaleRuleArgs) TcpScaleRulePtrInput {
	return (*tcpScaleRulePtrType)(v)
}

func (*tcpScaleRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpScaleRule)(nil)).Elem()
}

func (i *tcpScaleRulePtrType) ToTcpScaleRulePtrOutput() TcpScaleRulePtrOutput {
	return i.ToTcpScaleRulePtrOutputWithContext(context.Background())
}

func (i *tcpScaleRulePtrType) ToTcpScaleRulePtrOutputWithContext(ctx context.Context) TcpScaleRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpScaleRulePtrOutput)
}

func (i *tcpScaleRulePtrType) ToOutput(ctx context.Context) pulumix.Output[*TcpScaleRule] {
	return pulumix.Output[*TcpScaleRule]{
		OutputState: i.ToTcpScaleRulePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App container Tcp scaling rule.
type TcpScaleRuleOutput struct{ *pulumi.OutputState }

func (TcpScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpScaleRule)(nil)).Elem()
}

func (o TcpScaleRuleOutput) ToTcpScaleRuleOutput() TcpScaleRuleOutput {
	return o
}

func (o TcpScaleRuleOutput) ToTcpScaleRuleOutputWithContext(ctx context.Context) TcpScaleRuleOutput {
	return o
}

func (o TcpScaleRuleOutput) ToTcpScaleRulePtrOutput() TcpScaleRulePtrOutput {
	return o.ToTcpScaleRulePtrOutputWithContext(context.Background())
}

func (o TcpScaleRuleOutput) ToTcpScaleRulePtrOutputWithContext(ctx context.Context) TcpScaleRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpScaleRule) *TcpScaleRule {
		return &v
	}).(TcpScaleRulePtrOutput)
}

func (o TcpScaleRuleOutput) ToOutput(ctx context.Context) pulumix.Output[TcpScaleRule] {
	return pulumix.Output[TcpScaleRule]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the tcp scale rule.
func (o TcpScaleRuleOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v TcpScaleRule) []ScaleRuleAuth { return v.Auth }).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe tcp scale rule.
func (o TcpScaleRuleOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v TcpScaleRule) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

type TcpScaleRulePtrOutput struct{ *pulumi.OutputState }

func (TcpScaleRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpScaleRule)(nil)).Elem()
}

func (o TcpScaleRulePtrOutput) ToTcpScaleRulePtrOutput() TcpScaleRulePtrOutput {
	return o
}

func (o TcpScaleRulePtrOutput) ToTcpScaleRulePtrOutputWithContext(ctx context.Context) TcpScaleRulePtrOutput {
	return o
}

func (o TcpScaleRulePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TcpScaleRule] {
	return pulumix.Output[*TcpScaleRule]{
		OutputState: o.OutputState,
	}
}

func (o TcpScaleRulePtrOutput) Elem() TcpScaleRuleOutput {
	return o.ApplyT(func(v *TcpScaleRule) TcpScaleRule {
		if v != nil {
			return *v
		}
		var ret TcpScaleRule
		return ret
	}).(TcpScaleRuleOutput)
}

// Authentication secrets for the tcp scale rule.
func (o TcpScaleRulePtrOutput) Auth() ScaleRuleAuthArrayOutput {
	return o.ApplyT(func(v *TcpScaleRule) []ScaleRuleAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthArrayOutput)
}

// Metadata properties to describe tcp scale rule.
func (o TcpScaleRulePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TcpScaleRule) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Container App container Tcp scaling rule.
type TcpScaleRuleResponse struct {
	// Authentication secrets for the tcp scale rule.
	Auth []ScaleRuleAuthResponse `pulumi:"auth"`
	// Metadata properties to describe tcp scale rule.
	Metadata map[string]string `pulumi:"metadata"`
}

// Container App container Tcp scaling rule.
type TcpScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (TcpScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpScaleRuleResponse)(nil)).Elem()
}

func (o TcpScaleRuleResponseOutput) ToTcpScaleRuleResponseOutput() TcpScaleRuleResponseOutput {
	return o
}

func (o TcpScaleRuleResponseOutput) ToTcpScaleRuleResponseOutputWithContext(ctx context.Context) TcpScaleRuleResponseOutput {
	return o
}

func (o TcpScaleRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TcpScaleRuleResponse] {
	return pulumix.Output[TcpScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Authentication secrets for the tcp scale rule.
func (o TcpScaleRuleResponseOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v TcpScaleRuleResponse) []ScaleRuleAuthResponse { return v.Auth }).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe tcp scale rule.
func (o TcpScaleRuleResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v TcpScaleRuleResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

type TcpScaleRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (TcpScaleRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpScaleRuleResponse)(nil)).Elem()
}

func (o TcpScaleRuleResponsePtrOutput) ToTcpScaleRuleResponsePtrOutput() TcpScaleRuleResponsePtrOutput {
	return o
}

func (o TcpScaleRuleResponsePtrOutput) ToTcpScaleRuleResponsePtrOutputWithContext(ctx context.Context) TcpScaleRuleResponsePtrOutput {
	return o
}

func (o TcpScaleRuleResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TcpScaleRuleResponse] {
	return pulumix.Output[*TcpScaleRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o TcpScaleRuleResponsePtrOutput) Elem() TcpScaleRuleResponseOutput {
	return o.ApplyT(func(v *TcpScaleRuleResponse) TcpScaleRuleResponse {
		if v != nil {
			return *v
		}
		var ret TcpScaleRuleResponse
		return ret
	}).(TcpScaleRuleResponseOutput)
}

// Authentication secrets for the tcp scale rule.
func (o TcpScaleRuleResponsePtrOutput) Auth() ScaleRuleAuthResponseArrayOutput {
	return o.ApplyT(func(v *TcpScaleRuleResponse) []ScaleRuleAuthResponse {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ScaleRuleAuthResponseArrayOutput)
}

// Metadata properties to describe tcp scale rule.
func (o TcpScaleRuleResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TcpScaleRuleResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// Container App versioned application definition.
// Defines the desired state of an immutable revision.
// Any changes to this section Will result in a new revision being created
type Template struct {
	// List of container definitions for the Container App.
	Containers []Container `pulumi:"containers"`
	// List of specialized containers that run before app containers.
	InitContainers []InitContainer `pulumi:"initContainers"`
	// User friendly suffix that is appended to the revision name
	RevisionSuffix *string `pulumi:"revisionSuffix"`
	// Scaling properties for the Container App.
	Scale *Scale `pulumi:"scale"`
	// List of container app services bound to the app
	ServiceBinds []ServiceBind `pulumi:"serviceBinds"`
	// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `pulumi:"terminationGracePeriodSeconds"`
	// List of volume definitions for the Container App.
	Volumes []Volume `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for Template
func (val *Template) Defaults() *Template {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Scale = tmp.Scale.Defaults()

	return &tmp
}

// TemplateInput is an input type that accepts TemplateArgs and TemplateOutput values.
// You can construct a concrete instance of `TemplateInput` via:
//
//	TemplateArgs{...}
type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(context.Context) TemplateOutput
}

// Container App versioned application definition.
// Defines the desired state of an immutable revision.
// Any changes to this section Will result in a new revision being created
type TemplateArgs struct {
	// List of container definitions for the Container App.
	Containers ContainerArrayInput `pulumi:"containers"`
	// List of specialized containers that run before app containers.
	InitContainers InitContainerArrayInput `pulumi:"initContainers"`
	// User friendly suffix that is appended to the revision name
	RevisionSuffix pulumi.StringPtrInput `pulumi:"revisionSuffix"`
	// Scaling properties for the Container App.
	Scale ScalePtrInput `pulumi:"scale"`
	// List of container app services bound to the app
	ServiceBinds ServiceBindArrayInput `pulumi:"serviceBinds"`
	// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds pulumi.Float64PtrInput `pulumi:"terminationGracePeriodSeconds"`
	// List of volume definitions for the Container App.
	Volumes VolumeArrayInput `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for TemplateArgs
func (val *TemplateArgs) Defaults() *TemplateArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Template)(nil)).Elem()
}

func (i TemplateArgs) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i TemplateArgs) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

func (i TemplateArgs) ToOutput(ctx context.Context) pulumix.Output[Template] {
	return pulumix.Output[Template]{
		OutputState: i.ToTemplateOutputWithContext(ctx).OutputState,
	}
}

func (i TemplateArgs) ToTemplatePtrOutput() TemplatePtrOutput {
	return i.ToTemplatePtrOutputWithContext(context.Background())
}

func (i TemplateArgs) ToTemplatePtrOutputWithContext(ctx context.Context) TemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput).ToTemplatePtrOutputWithContext(ctx)
}

// TemplatePtrInput is an input type that accepts TemplateArgs, TemplatePtr and TemplatePtrOutput values.
// You can construct a concrete instance of `TemplatePtrInput` via:
//
//	        TemplateArgs{...}
//
//	or:
//
//	        nil
type TemplatePtrInput interface {
	pulumi.Input

	ToTemplatePtrOutput() TemplatePtrOutput
	ToTemplatePtrOutputWithContext(context.Context) TemplatePtrOutput
}

type templatePtrType TemplateArgs

func TemplatePtr(v *TemplateArgs) TemplatePtrInput {
	return (*templatePtrType)(v)
}

func (*templatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *templatePtrType) ToTemplatePtrOutput() TemplatePtrOutput {
	return i.ToTemplatePtrOutputWithContext(context.Background())
}

func (i *templatePtrType) ToTemplatePtrOutputWithContext(ctx context.Context) TemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplatePtrOutput)
}

func (i *templatePtrType) ToOutput(ctx context.Context) pulumix.Output[*Template] {
	return pulumix.Output[*Template]{
		OutputState: i.ToTemplatePtrOutputWithContext(ctx).OutputState,
	}
}

// Container App versioned application definition.
// Defines the desired state of an immutable revision.
// Any changes to this section Will result in a new revision being created
type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplatePtrOutput() TemplatePtrOutput {
	return o.ToTemplatePtrOutputWithContext(context.Background())
}

func (o TemplateOutput) ToTemplatePtrOutputWithContext(ctx context.Context) TemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Template) *Template {
		return &v
	}).(TemplatePtrOutput)
}

func (o TemplateOutput) ToOutput(ctx context.Context) pulumix.Output[Template] {
	return pulumix.Output[Template]{
		OutputState: o.OutputState,
	}
}

// List of container definitions for the Container App.
func (o TemplateOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v Template) []Container { return v.Containers }).(ContainerArrayOutput)
}

// List of specialized containers that run before app containers.
func (o TemplateOutput) InitContainers() InitContainerArrayOutput {
	return o.ApplyT(func(v Template) []InitContainer { return v.InitContainers }).(InitContainerArrayOutput)
}

// User friendly suffix that is appended to the revision name
func (o TemplateOutput) RevisionSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Template) *string { return v.RevisionSuffix }).(pulumi.StringPtrOutput)
}

// Scaling properties for the Container App.
func (o TemplateOutput) Scale() ScalePtrOutput {
	return o.ApplyT(func(v Template) *Scale { return v.Scale }).(ScalePtrOutput)
}

// List of container app services bound to the app
func (o TemplateOutput) ServiceBinds() ServiceBindArrayOutput {
	return o.ApplyT(func(v Template) []ServiceBind { return v.ServiceBinds }).(ServiceBindArrayOutput)
}

// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o TemplateOutput) TerminationGracePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Template) *float64 { return v.TerminationGracePeriodSeconds }).(pulumi.Float64PtrOutput)
}

// List of volume definitions for the Container App.
func (o TemplateOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v Template) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

type TemplatePtrOutput struct{ *pulumi.OutputState }

func (TemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplatePtrOutput) ToTemplatePtrOutput() TemplatePtrOutput {
	return o
}

func (o TemplatePtrOutput) ToTemplatePtrOutputWithContext(ctx context.Context) TemplatePtrOutput {
	return o
}

func (o TemplatePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Template] {
	return pulumix.Output[*Template]{
		OutputState: o.OutputState,
	}
}

func (o TemplatePtrOutput) Elem() TemplateOutput {
	return o.ApplyT(func(v *Template) Template {
		if v != nil {
			return *v
		}
		var ret Template
		return ret
	}).(TemplateOutput)
}

// List of container definitions for the Container App.
func (o TemplatePtrOutput) Containers() ContainerArrayOutput {
	return o.ApplyT(func(v *Template) []Container {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerArrayOutput)
}

// List of specialized containers that run before app containers.
func (o TemplatePtrOutput) InitContainers() InitContainerArrayOutput {
	return o.ApplyT(func(v *Template) []InitContainer {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(InitContainerArrayOutput)
}

// User friendly suffix that is appended to the revision name
func (o TemplatePtrOutput) RevisionSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Template) *string {
		if v == nil {
			return nil
		}
		return v.RevisionSuffix
	}).(pulumi.StringPtrOutput)
}

// Scaling properties for the Container App.
func (o TemplatePtrOutput) Scale() ScalePtrOutput {
	return o.ApplyT(func(v *Template) *Scale {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(ScalePtrOutput)
}

// List of container app services bound to the app
func (o TemplatePtrOutput) ServiceBinds() ServiceBindArrayOutput {
	return o.ApplyT(func(v *Template) []ServiceBind {
		if v == nil {
			return nil
		}
		return v.ServiceBinds
	}).(ServiceBindArrayOutput)
}

// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o TemplatePtrOutput) TerminationGracePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Template) *float64 {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.Float64PtrOutput)
}

// List of volume definitions for the Container App.
func (o TemplatePtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *Template) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// Container App versioned application definition.
// Defines the desired state of an immutable revision.
// Any changes to this section Will result in a new revision being created
type TemplateResponse struct {
	// List of container definitions for the Container App.
	Containers []ContainerResponse `pulumi:"containers"`
	// List of specialized containers that run before app containers.
	InitContainers []InitContainerResponse `pulumi:"initContainers"`
	// User friendly suffix that is appended to the revision name
	RevisionSuffix *string `pulumi:"revisionSuffix"`
	// Scaling properties for the Container App.
	Scale *ScaleResponse `pulumi:"scale"`
	// List of container app services bound to the app
	ServiceBinds []ServiceBindResponse `pulumi:"serviceBinds"`
	// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *float64 `pulumi:"terminationGracePeriodSeconds"`
	// List of volume definitions for the Container App.
	Volumes []VolumeResponse `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for TemplateResponse
func (val *TemplateResponse) Defaults() *TemplateResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Scale = tmp.Scale.Defaults()

	return &tmp
}

// Container App versioned application definition.
// Defines the desired state of an immutable revision.
// Any changes to this section Will result in a new revision being created
type TemplateResponseOutput struct{ *pulumi.OutputState }

func (TemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateResponse)(nil)).Elem()
}

func (o TemplateResponseOutput) ToTemplateResponseOutput() TemplateResponseOutput {
	return o
}

func (o TemplateResponseOutput) ToTemplateResponseOutputWithContext(ctx context.Context) TemplateResponseOutput {
	return o
}

func (o TemplateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateResponse] {
	return pulumix.Output[TemplateResponse]{
		OutputState: o.OutputState,
	}
}

// List of container definitions for the Container App.
func (o TemplateResponseOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v TemplateResponse) []ContainerResponse { return v.Containers }).(ContainerResponseArrayOutput)
}

// List of specialized containers that run before app containers.
func (o TemplateResponseOutput) InitContainers() InitContainerResponseArrayOutput {
	return o.ApplyT(func(v TemplateResponse) []InitContainerResponse { return v.InitContainers }).(InitContainerResponseArrayOutput)
}

// User friendly suffix that is appended to the revision name
func (o TemplateResponseOutput) RevisionSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateResponse) *string { return v.RevisionSuffix }).(pulumi.StringPtrOutput)
}

// Scaling properties for the Container App.
func (o TemplateResponseOutput) Scale() ScaleResponsePtrOutput {
	return o.ApplyT(func(v TemplateResponse) *ScaleResponse { return v.Scale }).(ScaleResponsePtrOutput)
}

// List of container app services bound to the app
func (o TemplateResponseOutput) ServiceBinds() ServiceBindResponseArrayOutput {
	return o.ApplyT(func(v TemplateResponse) []ServiceBindResponse { return v.ServiceBinds }).(ServiceBindResponseArrayOutput)
}

// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o TemplateResponseOutput) TerminationGracePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TemplateResponse) *float64 { return v.TerminationGracePeriodSeconds }).(pulumi.Float64PtrOutput)
}

// List of volume definitions for the Container App.
func (o TemplateResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v TemplateResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

type TemplateResponsePtrOutput struct{ *pulumi.OutputState }

func (TemplateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TemplateResponse)(nil)).Elem()
}

func (o TemplateResponsePtrOutput) ToTemplateResponsePtrOutput() TemplateResponsePtrOutput {
	return o
}

func (o TemplateResponsePtrOutput) ToTemplateResponsePtrOutputWithContext(ctx context.Context) TemplateResponsePtrOutput {
	return o
}

func (o TemplateResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TemplateResponse] {
	return pulumix.Output[*TemplateResponse]{
		OutputState: o.OutputState,
	}
}

func (o TemplateResponsePtrOutput) Elem() TemplateResponseOutput {
	return o.ApplyT(func(v *TemplateResponse) TemplateResponse {
		if v != nil {
			return *v
		}
		var ret TemplateResponse
		return ret
	}).(TemplateResponseOutput)
}

// List of container definitions for the Container App.
func (o TemplateResponsePtrOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v *TemplateResponse) []ContainerResponse {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ContainerResponseArrayOutput)
}

// List of specialized containers that run before app containers.
func (o TemplateResponsePtrOutput) InitContainers() InitContainerResponseArrayOutput {
	return o.ApplyT(func(v *TemplateResponse) []InitContainerResponse {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(InitContainerResponseArrayOutput)
}

// User friendly suffix that is appended to the revision name
func (o TemplateResponsePtrOutput) RevisionSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TemplateResponse) *string {
		if v == nil {
			return nil
		}
		return v.RevisionSuffix
	}).(pulumi.StringPtrOutput)
}

// Scaling properties for the Container App.
func (o TemplateResponsePtrOutput) Scale() ScaleResponsePtrOutput {
	return o.ApplyT(func(v *TemplateResponse) *ScaleResponse {
		if v == nil {
			return nil
		}
		return v.Scale
	}).(ScaleResponsePtrOutput)
}

// List of container app services bound to the app
func (o TemplateResponsePtrOutput) ServiceBinds() ServiceBindResponseArrayOutput {
	return o.ApplyT(func(v *TemplateResponse) []ServiceBindResponse {
		if v == nil {
			return nil
		}
		return v.ServiceBinds
	}).(ServiceBindResponseArrayOutput)
}

// Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
func (o TemplateResponsePtrOutput) TerminationGracePeriodSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TemplateResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.Float64PtrOutput)
}

// List of volume definitions for the Container App.
func (o TemplateResponsePtrOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v *TemplateResponse) []VolumeResponse {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeResponseArrayOutput)
}

// The configuration settings of the token store.
type TokenStore struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage *BlobStorageTokenStore `pulumi:"azureBlobStorage"`
	// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
	//  The default is <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The number of hours after session token expiration that a session token can be used to
	// call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours *float64 `pulumi:"tokenRefreshExtensionHours"`
}

// TokenStoreInput is an input type that accepts TokenStoreArgs and TokenStoreOutput values.
// You can construct a concrete instance of `TokenStoreInput` via:
//
//	TokenStoreArgs{...}
type TokenStoreInput interface {
	pulumi.Input

	ToTokenStoreOutput() TokenStoreOutput
	ToTokenStoreOutputWithContext(context.Context) TokenStoreOutput
}

// The configuration settings of the token store.
type TokenStoreArgs struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage BlobStorageTokenStorePtrInput `pulumi:"azureBlobStorage"`
	// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
	//  The default is <code>false</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The number of hours after session token expiration that a session token can be used to
	// call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours pulumi.Float64PtrInput `pulumi:"tokenRefreshExtensionHours"`
}

func (TokenStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenStore)(nil)).Elem()
}

func (i TokenStoreArgs) ToTokenStoreOutput() TokenStoreOutput {
	return i.ToTokenStoreOutputWithContext(context.Background())
}

func (i TokenStoreArgs) ToTokenStoreOutputWithContext(ctx context.Context) TokenStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenStoreOutput)
}

func (i TokenStoreArgs) ToOutput(ctx context.Context) pulumix.Output[TokenStore] {
	return pulumix.Output[TokenStore]{
		OutputState: i.ToTokenStoreOutputWithContext(ctx).OutputState,
	}
}

func (i TokenStoreArgs) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return i.ToTokenStorePtrOutputWithContext(context.Background())
}

func (i TokenStoreArgs) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenStoreOutput).ToTokenStorePtrOutputWithContext(ctx)
}

// TokenStorePtrInput is an input type that accepts TokenStoreArgs, TokenStorePtr and TokenStorePtrOutput values.
// You can construct a concrete instance of `TokenStorePtrInput` via:
//
//	        TokenStoreArgs{...}
//
//	or:
//
//	        nil
type TokenStorePtrInput interface {
	pulumi.Input

	ToTokenStorePtrOutput() TokenStorePtrOutput
	ToTokenStorePtrOutputWithContext(context.Context) TokenStorePtrOutput
}

type tokenStorePtrType TokenStoreArgs

func TokenStorePtr(v *TokenStoreArgs) TokenStorePtrInput {
	return (*tokenStorePtrType)(v)
}

func (*tokenStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenStore)(nil)).Elem()
}

func (i *tokenStorePtrType) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return i.ToTokenStorePtrOutputWithContext(context.Background())
}

func (i *tokenStorePtrType) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenStorePtrOutput)
}

func (i *tokenStorePtrType) ToOutput(ctx context.Context) pulumix.Output[*TokenStore] {
	return pulumix.Output[*TokenStore]{
		OutputState: i.ToTokenStorePtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the token store.
type TokenStoreOutput struct{ *pulumi.OutputState }

func (TokenStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenStore)(nil)).Elem()
}

func (o TokenStoreOutput) ToTokenStoreOutput() TokenStoreOutput {
	return o
}

func (o TokenStoreOutput) ToTokenStoreOutputWithContext(ctx context.Context) TokenStoreOutput {
	return o
}

func (o TokenStoreOutput) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return o.ToTokenStorePtrOutputWithContext(context.Background())
}

func (o TokenStoreOutput) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TokenStore) *TokenStore {
		return &v
	}).(TokenStorePtrOutput)
}

func (o TokenStoreOutput) ToOutput(ctx context.Context) pulumix.Output[TokenStore] {
	return pulumix.Output[TokenStore]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStoreOutput) AzureBlobStorage() BlobStorageTokenStorePtrOutput {
	return o.ApplyT(func(v TokenStore) *BlobStorageTokenStore { return v.AzureBlobStorage }).(BlobStorageTokenStorePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStoreOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenStore) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStoreOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TokenStore) *float64 { return v.TokenRefreshExtensionHours }).(pulumi.Float64PtrOutput)
}

type TokenStorePtrOutput struct{ *pulumi.OutputState }

func (TokenStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenStore)(nil)).Elem()
}

func (o TokenStorePtrOutput) ToTokenStorePtrOutput() TokenStorePtrOutput {
	return o
}

func (o TokenStorePtrOutput) ToTokenStorePtrOutputWithContext(ctx context.Context) TokenStorePtrOutput {
	return o
}

func (o TokenStorePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TokenStore] {
	return pulumix.Output[*TokenStore]{
		OutputState: o.OutputState,
	}
}

func (o TokenStorePtrOutput) Elem() TokenStoreOutput {
	return o.ApplyT(func(v *TokenStore) TokenStore {
		if v != nil {
			return *v
		}
		var ret TokenStore
		return ret
	}).(TokenStoreOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStorePtrOutput) AzureBlobStorage() BlobStorageTokenStorePtrOutput {
	return o.ApplyT(func(v *TokenStore) *BlobStorageTokenStore {
		if v == nil {
			return nil
		}
		return v.AzureBlobStorage
	}).(BlobStorageTokenStorePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStorePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenStore) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStorePtrOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TokenStore) *float64 {
		if v == nil {
			return nil
		}
		return v.TokenRefreshExtensionHours
	}).(pulumi.Float64PtrOutput)
}

// The configuration settings of the token store.
type TokenStoreResponse struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage *BlobStorageTokenStoreResponse `pulumi:"azureBlobStorage"`
	// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
	//  The default is <code>false</code>.
	Enabled *bool `pulumi:"enabled"`
	// The number of hours after session token expiration that a session token can be used to
	// call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours *float64 `pulumi:"tokenRefreshExtensionHours"`
}

// The configuration settings of the token store.
type TokenStoreResponseOutput struct{ *pulumi.OutputState }

func (TokenStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TokenStoreResponse)(nil)).Elem()
}

func (o TokenStoreResponseOutput) ToTokenStoreResponseOutput() TokenStoreResponseOutput {
	return o
}

func (o TokenStoreResponseOutput) ToTokenStoreResponseOutputWithContext(ctx context.Context) TokenStoreResponseOutput {
	return o
}

func (o TokenStoreResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TokenStoreResponse] {
	return pulumix.Output[TokenStoreResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStoreResponseOutput) AzureBlobStorage() BlobStorageTokenStoreResponsePtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *BlobStorageTokenStoreResponse { return v.AzureBlobStorage }).(BlobStorageTokenStoreResponsePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStoreResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStoreResponseOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TokenStoreResponse) *float64 { return v.TokenRefreshExtensionHours }).(pulumi.Float64PtrOutput)
}

type TokenStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (TokenStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenStoreResponse)(nil)).Elem()
}

func (o TokenStoreResponsePtrOutput) ToTokenStoreResponsePtrOutput() TokenStoreResponsePtrOutput {
	return o
}

func (o TokenStoreResponsePtrOutput) ToTokenStoreResponsePtrOutputWithContext(ctx context.Context) TokenStoreResponsePtrOutput {
	return o
}

func (o TokenStoreResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TokenStoreResponse] {
	return pulumix.Output[*TokenStoreResponse]{
		OutputState: o.OutputState,
	}
}

func (o TokenStoreResponsePtrOutput) Elem() TokenStoreResponseOutput {
	return o.ApplyT(func(v *TokenStoreResponse) TokenStoreResponse {
		if v != nil {
			return *v
		}
		var ret TokenStoreResponse
		return ret
	}).(TokenStoreResponseOutput)
}

// The configuration settings of the storage of the tokens if blob storage is used.
func (o TokenStoreResponsePtrOutput) AzureBlobStorage() BlobStorageTokenStoreResponsePtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *BlobStorageTokenStoreResponse {
		if v == nil {
			return nil
		}
		return v.AzureBlobStorage
	}).(BlobStorageTokenStoreResponsePtrOutput)
}

// <code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.
//
//	The default is <code>false</code>.
func (o TokenStoreResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The number of hours after session token expiration that a session token can be used to
// call the token refresh API. The default is 72 hours.
func (o TokenStoreResponsePtrOutput) TokenRefreshExtensionHours() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TokenStoreResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TokenRefreshExtensionHours
	}).(pulumi.Float64PtrOutput)
}

// Traffic weight assigned to a revision
type TrafficWeight struct {
	// Associates a traffic label with a revision
	Label *string `pulumi:"label"`
	// Indicates that the traffic weight belongs to a latest stable revision
	LatestRevision *bool `pulumi:"latestRevision"`
	// Name of a revision
	RevisionName *string `pulumi:"revisionName"`
	// Traffic weight assigned to a revision
	Weight *int `pulumi:"weight"`
}

// Defaults sets the appropriate defaults for TrafficWeight
func (val *TrafficWeight) Defaults() *TrafficWeight {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LatestRevision == nil {
		latestRevision_ := false
		tmp.LatestRevision = &latestRevision_
	}
	return &tmp
}

// TrafficWeightInput is an input type that accepts TrafficWeightArgs and TrafficWeightOutput values.
// You can construct a concrete instance of `TrafficWeightInput` via:
//
//	TrafficWeightArgs{...}
type TrafficWeightInput interface {
	pulumi.Input

	ToTrafficWeightOutput() TrafficWeightOutput
	ToTrafficWeightOutputWithContext(context.Context) TrafficWeightOutput
}

// Traffic weight assigned to a revision
type TrafficWeightArgs struct {
	// Associates a traffic label with a revision
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Indicates that the traffic weight belongs to a latest stable revision
	LatestRevision pulumi.BoolPtrInput `pulumi:"latestRevision"`
	// Name of a revision
	RevisionName pulumi.StringPtrInput `pulumi:"revisionName"`
	// Traffic weight assigned to a revision
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

// Defaults sets the appropriate defaults for TrafficWeightArgs
func (val *TrafficWeightArgs) Defaults() *TrafficWeightArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LatestRevision == nil {
		tmp.LatestRevision = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TrafficWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficWeight)(nil)).Elem()
}

func (i TrafficWeightArgs) ToTrafficWeightOutput() TrafficWeightOutput {
	return i.ToTrafficWeightOutputWithContext(context.Background())
}

func (i TrafficWeightArgs) ToTrafficWeightOutputWithContext(ctx context.Context) TrafficWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficWeightOutput)
}

func (i TrafficWeightArgs) ToOutput(ctx context.Context) pulumix.Output[TrafficWeight] {
	return pulumix.Output[TrafficWeight]{
		OutputState: i.ToTrafficWeightOutputWithContext(ctx).OutputState,
	}
}

// TrafficWeightArrayInput is an input type that accepts TrafficWeightArray and TrafficWeightArrayOutput values.
// You can construct a concrete instance of `TrafficWeightArrayInput` via:
//
//	TrafficWeightArray{ TrafficWeightArgs{...} }
type TrafficWeightArrayInput interface {
	pulumi.Input

	ToTrafficWeightArrayOutput() TrafficWeightArrayOutput
	ToTrafficWeightArrayOutputWithContext(context.Context) TrafficWeightArrayOutput
}

type TrafficWeightArray []TrafficWeightInput

func (TrafficWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficWeight)(nil)).Elem()
}

func (i TrafficWeightArray) ToTrafficWeightArrayOutput() TrafficWeightArrayOutput {
	return i.ToTrafficWeightArrayOutputWithContext(context.Background())
}

func (i TrafficWeightArray) ToTrafficWeightArrayOutputWithContext(ctx context.Context) TrafficWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficWeightArrayOutput)
}

func (i TrafficWeightArray) ToOutput(ctx context.Context) pulumix.Output[[]TrafficWeight] {
	return pulumix.Output[[]TrafficWeight]{
		OutputState: i.ToTrafficWeightArrayOutputWithContext(ctx).OutputState,
	}
}

// Traffic weight assigned to a revision
type TrafficWeightOutput struct{ *pulumi.OutputState }

func (TrafficWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficWeight)(nil)).Elem()
}

func (o TrafficWeightOutput) ToTrafficWeightOutput() TrafficWeightOutput {
	return o
}

func (o TrafficWeightOutput) ToTrafficWeightOutputWithContext(ctx context.Context) TrafficWeightOutput {
	return o
}

func (o TrafficWeightOutput) ToOutput(ctx context.Context) pulumix.Output[TrafficWeight] {
	return pulumix.Output[TrafficWeight]{
		OutputState: o.OutputState,
	}
}

// Associates a traffic label with a revision
func (o TrafficWeightOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficWeight) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Indicates that the traffic weight belongs to a latest stable revision
func (o TrafficWeightOutput) LatestRevision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrafficWeight) *bool { return v.LatestRevision }).(pulumi.BoolPtrOutput)
}

// Name of a revision
func (o TrafficWeightOutput) RevisionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficWeight) *string { return v.RevisionName }).(pulumi.StringPtrOutput)
}

// Traffic weight assigned to a revision
func (o TrafficWeightOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrafficWeight) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TrafficWeightArrayOutput struct{ *pulumi.OutputState }

func (TrafficWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficWeight)(nil)).Elem()
}

func (o TrafficWeightArrayOutput) ToTrafficWeightArrayOutput() TrafficWeightArrayOutput {
	return o
}

func (o TrafficWeightArrayOutput) ToTrafficWeightArrayOutputWithContext(ctx context.Context) TrafficWeightArrayOutput {
	return o
}

func (o TrafficWeightArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TrafficWeight] {
	return pulumix.Output[[]TrafficWeight]{
		OutputState: o.OutputState,
	}
}

func (o TrafficWeightArrayOutput) Index(i pulumi.IntInput) TrafficWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficWeight {
		return vs[0].([]TrafficWeight)[vs[1].(int)]
	}).(TrafficWeightOutput)
}

// Traffic weight assigned to a revision
type TrafficWeightResponse struct {
	// Associates a traffic label with a revision
	Label *string `pulumi:"label"`
	// Indicates that the traffic weight belongs to a latest stable revision
	LatestRevision *bool `pulumi:"latestRevision"`
	// Name of a revision
	RevisionName *string `pulumi:"revisionName"`
	// Traffic weight assigned to a revision
	Weight *int `pulumi:"weight"`
}

// Defaults sets the appropriate defaults for TrafficWeightResponse
func (val *TrafficWeightResponse) Defaults() *TrafficWeightResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LatestRevision == nil {
		latestRevision_ := false
		tmp.LatestRevision = &latestRevision_
	}
	return &tmp
}

// Traffic weight assigned to a revision
type TrafficWeightResponseOutput struct{ *pulumi.OutputState }

func (TrafficWeightResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficWeightResponse)(nil)).Elem()
}

func (o TrafficWeightResponseOutput) ToTrafficWeightResponseOutput() TrafficWeightResponseOutput {
	return o
}

func (o TrafficWeightResponseOutput) ToTrafficWeightResponseOutputWithContext(ctx context.Context) TrafficWeightResponseOutput {
	return o
}

func (o TrafficWeightResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrafficWeightResponse] {
	return pulumix.Output[TrafficWeightResponse]{
		OutputState: o.OutputState,
	}
}

// Associates a traffic label with a revision
func (o TrafficWeightResponseOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficWeightResponse) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Indicates that the traffic weight belongs to a latest stable revision
func (o TrafficWeightResponseOutput) LatestRevision() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrafficWeightResponse) *bool { return v.LatestRevision }).(pulumi.BoolPtrOutput)
}

// Name of a revision
func (o TrafficWeightResponseOutput) RevisionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrafficWeightResponse) *string { return v.RevisionName }).(pulumi.StringPtrOutput)
}

// Traffic weight assigned to a revision
func (o TrafficWeightResponseOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrafficWeightResponse) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TrafficWeightResponseArrayOutput struct{ *pulumi.OutputState }

func (TrafficWeightResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrafficWeightResponse)(nil)).Elem()
}

func (o TrafficWeightResponseArrayOutput) ToTrafficWeightResponseArrayOutput() TrafficWeightResponseArrayOutput {
	return o
}

func (o TrafficWeightResponseArrayOutput) ToTrafficWeightResponseArrayOutputWithContext(ctx context.Context) TrafficWeightResponseArrayOutput {
	return o
}

func (o TrafficWeightResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TrafficWeightResponse] {
	return pulumix.Output[[]TrafficWeightResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrafficWeightResponseArrayOutput) Index(i pulumi.IntInput) TrafficWeightResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrafficWeightResponse {
		return vs[0].([]TrafficWeightResponse)[vs[1].(int)]
	}).(TrafficWeightResponseOutput)
}

// The configuration settings of the Twitter provider.
type Twitter struct {
	// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the app registration for the Twitter provider.
	Registration *TwitterRegistration `pulumi:"registration"`
}

// TwitterInput is an input type that accepts TwitterArgs and TwitterOutput values.
// You can construct a concrete instance of `TwitterInput` via:
//
//	TwitterArgs{...}
type TwitterInput interface {
	pulumi.Input

	ToTwitterOutput() TwitterOutput
	ToTwitterOutputWithContext(context.Context) TwitterOutput
}

// The configuration settings of the Twitter provider.
type TwitterArgs struct {
	// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The configuration settings of the app registration for the Twitter provider.
	Registration TwitterRegistrationPtrInput `pulumi:"registration"`
}

func (TwitterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Twitter)(nil)).Elem()
}

func (i TwitterArgs) ToTwitterOutput() TwitterOutput {
	return i.ToTwitterOutputWithContext(context.Background())
}

func (i TwitterArgs) ToTwitterOutputWithContext(ctx context.Context) TwitterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterOutput)
}

func (i TwitterArgs) ToOutput(ctx context.Context) pulumix.Output[Twitter] {
	return pulumix.Output[Twitter]{
		OutputState: i.ToTwitterOutputWithContext(ctx).OutputState,
	}
}

func (i TwitterArgs) ToTwitterPtrOutput() TwitterPtrOutput {
	return i.ToTwitterPtrOutputWithContext(context.Background())
}

func (i TwitterArgs) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterOutput).ToTwitterPtrOutputWithContext(ctx)
}

// TwitterPtrInput is an input type that accepts TwitterArgs, TwitterPtr and TwitterPtrOutput values.
// You can construct a concrete instance of `TwitterPtrInput` via:
//
//	        TwitterArgs{...}
//
//	or:
//
//	        nil
type TwitterPtrInput interface {
	pulumi.Input

	ToTwitterPtrOutput() TwitterPtrOutput
	ToTwitterPtrOutputWithContext(context.Context) TwitterPtrOutput
}

type twitterPtrType TwitterArgs

func TwitterPtr(v *TwitterArgs) TwitterPtrInput {
	return (*twitterPtrType)(v)
}

func (*twitterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Twitter)(nil)).Elem()
}

func (i *twitterPtrType) ToTwitterPtrOutput() TwitterPtrOutput {
	return i.ToTwitterPtrOutputWithContext(context.Background())
}

func (i *twitterPtrType) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterPtrOutput)
}

func (i *twitterPtrType) ToOutput(ctx context.Context) pulumix.Output[*Twitter] {
	return pulumix.Output[*Twitter]{
		OutputState: i.ToTwitterPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the Twitter provider.
type TwitterOutput struct{ *pulumi.OutputState }

func (TwitterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Twitter)(nil)).Elem()
}

func (o TwitterOutput) ToTwitterOutput() TwitterOutput {
	return o
}

func (o TwitterOutput) ToTwitterOutputWithContext(ctx context.Context) TwitterOutput {
	return o
}

func (o TwitterOutput) ToTwitterPtrOutput() TwitterPtrOutput {
	return o.ToTwitterPtrOutputWithContext(context.Background())
}

func (o TwitterOutput) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Twitter) *Twitter {
		return &v
	}).(TwitterPtrOutput)
}

func (o TwitterOutput) ToOutput(ctx context.Context) pulumix.Output[Twitter] {
	return pulumix.Output[Twitter]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Twitter) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterOutput) Registration() TwitterRegistrationPtrOutput {
	return o.ApplyT(func(v Twitter) *TwitterRegistration { return v.Registration }).(TwitterRegistrationPtrOutput)
}

type TwitterPtrOutput struct{ *pulumi.OutputState }

func (TwitterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Twitter)(nil)).Elem()
}

func (o TwitterPtrOutput) ToTwitterPtrOutput() TwitterPtrOutput {
	return o
}

func (o TwitterPtrOutput) ToTwitterPtrOutputWithContext(ctx context.Context) TwitterPtrOutput {
	return o
}

func (o TwitterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Twitter] {
	return pulumix.Output[*Twitter]{
		OutputState: o.OutputState,
	}
}

func (o TwitterPtrOutput) Elem() TwitterOutput {
	return o.ApplyT(func(v *Twitter) Twitter {
		if v != nil {
			return *v
		}
		var ret Twitter
		return ret
	}).(TwitterOutput)
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Twitter) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterPtrOutput) Registration() TwitterRegistrationPtrOutput {
	return o.ApplyT(func(v *Twitter) *TwitterRegistration {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(TwitterRegistrationPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistration struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// This setting is required for enabling Twitter Sign-In.
	// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
	ConsumerKey *string `pulumi:"consumerKey"`
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
	// application used for sign-in.
	ConsumerSecretSettingName *string `pulumi:"consumerSecretSettingName"`
}

// TwitterRegistrationInput is an input type that accepts TwitterRegistrationArgs and TwitterRegistrationOutput values.
// You can construct a concrete instance of `TwitterRegistrationInput` via:
//
//	TwitterRegistrationArgs{...}
type TwitterRegistrationInput interface {
	pulumi.Input

	ToTwitterRegistrationOutput() TwitterRegistrationOutput
	ToTwitterRegistrationOutputWithContext(context.Context) TwitterRegistrationOutput
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationArgs struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// This setting is required for enabling Twitter Sign-In.
	// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
	ConsumerKey pulumi.StringPtrInput `pulumi:"consumerKey"`
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
	// application used for sign-in.
	ConsumerSecretSettingName pulumi.StringPtrInput `pulumi:"consumerSecretSettingName"`
}

func (TwitterRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterRegistration)(nil)).Elem()
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationOutput() TwitterRegistrationOutput {
	return i.ToTwitterRegistrationOutputWithContext(context.Background())
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationOutputWithContext(ctx context.Context) TwitterRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterRegistrationOutput)
}

func (i TwitterRegistrationArgs) ToOutput(ctx context.Context) pulumix.Output[TwitterRegistration] {
	return pulumix.Output[TwitterRegistration]{
		OutputState: i.ToTwitterRegistrationOutputWithContext(ctx).OutputState,
	}
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return i.ToTwitterRegistrationPtrOutputWithContext(context.Background())
}

func (i TwitterRegistrationArgs) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterRegistrationOutput).ToTwitterRegistrationPtrOutputWithContext(ctx)
}

// TwitterRegistrationPtrInput is an input type that accepts TwitterRegistrationArgs, TwitterRegistrationPtr and TwitterRegistrationPtrOutput values.
// You can construct a concrete instance of `TwitterRegistrationPtrInput` via:
//
//	        TwitterRegistrationArgs{...}
//
//	or:
//
//	        nil
type TwitterRegistrationPtrInput interface {
	pulumi.Input

	ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput
	ToTwitterRegistrationPtrOutputWithContext(context.Context) TwitterRegistrationPtrOutput
}

type twitterRegistrationPtrType TwitterRegistrationArgs

func TwitterRegistrationPtr(v *TwitterRegistrationArgs) TwitterRegistrationPtrInput {
	return (*twitterRegistrationPtrType)(v)
}

func (*twitterRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterRegistration)(nil)).Elem()
}

func (i *twitterRegistrationPtrType) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return i.ToTwitterRegistrationPtrOutputWithContext(context.Background())
}

func (i *twitterRegistrationPtrType) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwitterRegistrationPtrOutput)
}

func (i *twitterRegistrationPtrType) ToOutput(ctx context.Context) pulumix.Output[*TwitterRegistration] {
	return pulumix.Output[*TwitterRegistration]{
		OutputState: i.ToTwitterRegistrationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterRegistration)(nil)).Elem()
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationOutput() TwitterRegistrationOutput {
	return o
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationOutputWithContext(ctx context.Context) TwitterRegistrationOutput {
	return o
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return o.ToTwitterRegistrationPtrOutputWithContext(context.Background())
}

func (o TwitterRegistrationOutput) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TwitterRegistration) *TwitterRegistration {
		return &v
	}).(TwitterRegistrationPtrOutput)
}

func (o TwitterRegistrationOutput) ToOutput(ctx context.Context) pulumix.Output[TwitterRegistration] {
	return pulumix.Output[TwitterRegistration]{
		OutputState: o.OutputState,
	}
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistration) *string { return v.ConsumerKey }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistration) *string { return v.ConsumerSecretSettingName }).(pulumi.StringPtrOutput)
}

type TwitterRegistrationPtrOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterRegistration)(nil)).Elem()
}

func (o TwitterRegistrationPtrOutput) ToTwitterRegistrationPtrOutput() TwitterRegistrationPtrOutput {
	return o
}

func (o TwitterRegistrationPtrOutput) ToTwitterRegistrationPtrOutputWithContext(ctx context.Context) TwitterRegistrationPtrOutput {
	return o
}

func (o TwitterRegistrationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TwitterRegistration] {
	return pulumix.Output[*TwitterRegistration]{
		OutputState: o.OutputState,
	}
}

func (o TwitterRegistrationPtrOutput) Elem() TwitterRegistrationOutput {
	return o.ApplyT(func(v *TwitterRegistration) TwitterRegistration {
		if v != nil {
			return *v
		}
		var ret TwitterRegistration
		return ret
	}).(TwitterRegistrationOutput)
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationPtrOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerKey
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationPtrOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistration) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationResponse struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
	// This setting is required for enabling Twitter Sign-In.
	// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
	ConsumerKey *string `pulumi:"consumerKey"`
	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
	// application used for sign-in.
	ConsumerSecretSettingName *string `pulumi:"consumerSecretSettingName"`
}

// The configuration settings of the app registration for the Twitter provider.
type TwitterRegistrationResponseOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterRegistrationResponse)(nil)).Elem()
}

func (o TwitterRegistrationResponseOutput) ToTwitterRegistrationResponseOutput() TwitterRegistrationResponseOutput {
	return o
}

func (o TwitterRegistrationResponseOutput) ToTwitterRegistrationResponseOutputWithContext(ctx context.Context) TwitterRegistrationResponseOutput {
	return o
}

func (o TwitterRegistrationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TwitterRegistrationResponse] {
	return pulumix.Output[TwitterRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationResponseOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistrationResponse) *string { return v.ConsumerKey }).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationResponseOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwitterRegistrationResponse) *string { return v.ConsumerSecretSettingName }).(pulumi.StringPtrOutput)
}

type TwitterRegistrationResponsePtrOutput struct{ *pulumi.OutputState }

func (TwitterRegistrationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterRegistrationResponse)(nil)).Elem()
}

func (o TwitterRegistrationResponsePtrOutput) ToTwitterRegistrationResponsePtrOutput() TwitterRegistrationResponsePtrOutput {
	return o
}

func (o TwitterRegistrationResponsePtrOutput) ToTwitterRegistrationResponsePtrOutputWithContext(ctx context.Context) TwitterRegistrationResponsePtrOutput {
	return o
}

func (o TwitterRegistrationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TwitterRegistrationResponse] {
	return pulumix.Output[*TwitterRegistrationResponse]{
		OutputState: o.OutputState,
	}
}

func (o TwitterRegistrationResponsePtrOutput) Elem() TwitterRegistrationResponseOutput {
	return o.ApplyT(func(v *TwitterRegistrationResponse) TwitterRegistrationResponse {
		if v != nil {
			return *v
		}
		var ret TwitterRegistrationResponse
		return ret
	}).(TwitterRegistrationResponseOutput)
}

// The OAuth 1.0a consumer key of the Twitter application used for sign-in.
// This setting is required for enabling Twitter Sign-In.
// Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
func (o TwitterRegistrationResponsePtrOutput) ConsumerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerKey
	}).(pulumi.StringPtrOutput)
}

// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
// application used for sign-in.
func (o TwitterRegistrationResponsePtrOutput) ConsumerSecretSettingName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TwitterRegistrationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerSecretSettingName
	}).(pulumi.StringPtrOutput)
}

// The configuration settings of the Twitter provider.
type TwitterResponse struct {
	// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
	Enabled *bool `pulumi:"enabled"`
	// The configuration settings of the app registration for the Twitter provider.
	Registration *TwitterRegistrationResponse `pulumi:"registration"`
}

// The configuration settings of the Twitter provider.
type TwitterResponseOutput struct{ *pulumi.OutputState }

func (TwitterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwitterResponse)(nil)).Elem()
}

func (o TwitterResponseOutput) ToTwitterResponseOutput() TwitterResponseOutput {
	return o
}

func (o TwitterResponseOutput) ToTwitterResponseOutputWithContext(ctx context.Context) TwitterResponseOutput {
	return o
}

func (o TwitterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TwitterResponse] {
	return pulumix.Output[TwitterResponse]{
		OutputState: o.OutputState,
	}
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TwitterResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterResponseOutput) Registration() TwitterRegistrationResponsePtrOutput {
	return o.ApplyT(func(v TwitterResponse) *TwitterRegistrationResponse { return v.Registration }).(TwitterRegistrationResponsePtrOutput)
}

type TwitterResponsePtrOutput struct{ *pulumi.OutputState }

func (TwitterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwitterResponse)(nil)).Elem()
}

func (o TwitterResponsePtrOutput) ToTwitterResponsePtrOutput() TwitterResponsePtrOutput {
	return o
}

func (o TwitterResponsePtrOutput) ToTwitterResponsePtrOutputWithContext(ctx context.Context) TwitterResponsePtrOutput {
	return o
}

func (o TwitterResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TwitterResponse] {
	return pulumix.Output[*TwitterResponse]{
		OutputState: o.OutputState,
	}
}

func (o TwitterResponsePtrOutput) Elem() TwitterResponseOutput {
	return o.ApplyT(func(v *TwitterResponse) TwitterResponse {
		if v != nil {
			return *v
		}
		var ret TwitterResponse
		return ret
	}).(TwitterResponseOutput)
}

// <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>.
func (o TwitterResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TwitterResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The configuration settings of the app registration for the Twitter provider.
func (o TwitterResponsePtrOutput) Registration() TwitterRegistrationResponsePtrOutput {
	return o.ApplyT(func(v *TwitterResponse) *TwitterRegistrationResponse {
		if v == nil {
			return nil
		}
		return v.Registration
	}).(TwitterRegistrationResponsePtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// Configuration properties for apps environment to join a Virtual Network
type VnetConfiguration struct {
	// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
	InfrastructureSubnetId *string `pulumi:"infrastructureSubnetId"`
	// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
	Internal *bool `pulumi:"internal"`
	// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
	PlatformReservedCidr *string `pulumi:"platformReservedCidr"`
	//  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
	PlatformReservedDnsIP *string `pulumi:"platformReservedDnsIP"`
}

// VnetConfigurationInput is an input type that accepts VnetConfigurationArgs and VnetConfigurationOutput values.
// You can construct a concrete instance of `VnetConfigurationInput` via:
//
//	VnetConfigurationArgs{...}
type VnetConfigurationInput interface {
	pulumi.Input

	ToVnetConfigurationOutput() VnetConfigurationOutput
	ToVnetConfigurationOutputWithContext(context.Context) VnetConfigurationOutput
}

// Configuration properties for apps environment to join a Virtual Network
type VnetConfigurationArgs struct {
	// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
	DockerBridgeCidr pulumi.StringPtrInput `pulumi:"dockerBridgeCidr"`
	// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
	InfrastructureSubnetId pulumi.StringPtrInput `pulumi:"infrastructureSubnetId"`
	// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
	Internal pulumi.BoolPtrInput `pulumi:"internal"`
	// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
	PlatformReservedCidr pulumi.StringPtrInput `pulumi:"platformReservedCidr"`
	//  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
	PlatformReservedDnsIP pulumi.StringPtrInput `pulumi:"platformReservedDnsIP"`
}

func (VnetConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VnetConfiguration)(nil)).Elem()
}

func (i VnetConfigurationArgs) ToVnetConfigurationOutput() VnetConfigurationOutput {
	return i.ToVnetConfigurationOutputWithContext(context.Background())
}

func (i VnetConfigurationArgs) ToVnetConfigurationOutputWithContext(ctx context.Context) VnetConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetConfigurationOutput)
}

func (i VnetConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[VnetConfiguration] {
	return pulumix.Output[VnetConfiguration]{
		OutputState: i.ToVnetConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i VnetConfigurationArgs) ToVnetConfigurationPtrOutput() VnetConfigurationPtrOutput {
	return i.ToVnetConfigurationPtrOutputWithContext(context.Background())
}

func (i VnetConfigurationArgs) ToVnetConfigurationPtrOutputWithContext(ctx context.Context) VnetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetConfigurationOutput).ToVnetConfigurationPtrOutputWithContext(ctx)
}

// VnetConfigurationPtrInput is an input type that accepts VnetConfigurationArgs, VnetConfigurationPtr and VnetConfigurationPtrOutput values.
// You can construct a concrete instance of `VnetConfigurationPtrInput` via:
//
//	        VnetConfigurationArgs{...}
//
//	or:
//
//	        nil
type VnetConfigurationPtrInput interface {
	pulumi.Input

	ToVnetConfigurationPtrOutput() VnetConfigurationPtrOutput
	ToVnetConfigurationPtrOutputWithContext(context.Context) VnetConfigurationPtrOutput
}

type vnetConfigurationPtrType VnetConfigurationArgs

func VnetConfigurationPtr(v *VnetConfigurationArgs) VnetConfigurationPtrInput {
	return (*vnetConfigurationPtrType)(v)
}

func (*vnetConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VnetConfiguration)(nil)).Elem()
}

func (i *vnetConfigurationPtrType) ToVnetConfigurationPtrOutput() VnetConfigurationPtrOutput {
	return i.ToVnetConfigurationPtrOutputWithContext(context.Background())
}

func (i *vnetConfigurationPtrType) ToVnetConfigurationPtrOutputWithContext(ctx context.Context) VnetConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VnetConfigurationPtrOutput)
}

func (i *vnetConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*VnetConfiguration] {
	return pulumix.Output[*VnetConfiguration]{
		OutputState: i.ToVnetConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration properties for apps environment to join a Virtual Network
type VnetConfigurationOutput struct{ *pulumi.OutputState }

func (VnetConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VnetConfiguration)(nil)).Elem()
}

func (o VnetConfigurationOutput) ToVnetConfigurationOutput() VnetConfigurationOutput {
	return o
}

func (o VnetConfigurationOutput) ToVnetConfigurationOutputWithContext(ctx context.Context) VnetConfigurationOutput {
	return o
}

func (o VnetConfigurationOutput) ToVnetConfigurationPtrOutput() VnetConfigurationPtrOutput {
	return o.ToVnetConfigurationPtrOutputWithContext(context.Background())
}

func (o VnetConfigurationOutput) ToVnetConfigurationPtrOutputWithContext(ctx context.Context) VnetConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VnetConfiguration) *VnetConfiguration {
		return &v
	}).(VnetConfigurationPtrOutput)
}

func (o VnetConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[VnetConfiguration] {
	return pulumix.Output[VnetConfiguration]{
		OutputState: o.OutputState,
	}
}

// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfiguration) *string { return v.DockerBridgeCidr }).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationOutput) InfrastructureSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfiguration) *string { return v.InfrastructureSubnetId }).(pulumi.StringPtrOutput)
}

// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
func (o VnetConfigurationOutput) Internal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnetConfiguration) *bool { return v.Internal }).(pulumi.BoolPtrOutput)
}

// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationOutput) PlatformReservedCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfiguration) *string { return v.PlatformReservedCidr }).(pulumi.StringPtrOutput)
}

// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
func (o VnetConfigurationOutput) PlatformReservedDnsIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfiguration) *string { return v.PlatformReservedDnsIP }).(pulumi.StringPtrOutput)
}

type VnetConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VnetConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VnetConfiguration)(nil)).Elem()
}

func (o VnetConfigurationPtrOutput) ToVnetConfigurationPtrOutput() VnetConfigurationPtrOutput {
	return o
}

func (o VnetConfigurationPtrOutput) ToVnetConfigurationPtrOutputWithContext(ctx context.Context) VnetConfigurationPtrOutput {
	return o
}

func (o VnetConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VnetConfiguration] {
	return pulumix.Output[*VnetConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o VnetConfigurationPtrOutput) Elem() VnetConfigurationOutput {
	return o.ApplyT(func(v *VnetConfiguration) VnetConfiguration {
		if v != nil {
			return *v
		}
		var ret VnetConfiguration
		return ret
	}).(VnetConfigurationOutput)
}

// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationPtrOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DockerBridgeCidr
	}).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationPtrOutput) InfrastructureSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InfrastructureSubnetId
	}).(pulumi.StringPtrOutput)
}

// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
func (o VnetConfigurationPtrOutput) Internal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VnetConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Internal
	}).(pulumi.BoolPtrOutput)
}

// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationPtrOutput) PlatformReservedCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PlatformReservedCidr
	}).(pulumi.StringPtrOutput)
}

// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
func (o VnetConfigurationPtrOutput) PlatformReservedDnsIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PlatformReservedDnsIP
	}).(pulumi.StringPtrOutput)
}

// Configuration properties for apps environment to join a Virtual Network
type VnetConfigurationResponse struct {
	// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
	InfrastructureSubnetId *string `pulumi:"infrastructureSubnetId"`
	// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
	Internal *bool `pulumi:"internal"`
	// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
	PlatformReservedCidr *string `pulumi:"platformReservedCidr"`
	//  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
	PlatformReservedDnsIP *string `pulumi:"platformReservedDnsIP"`
}

// Configuration properties for apps environment to join a Virtual Network
type VnetConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VnetConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VnetConfigurationResponse)(nil)).Elem()
}

func (o VnetConfigurationResponseOutput) ToVnetConfigurationResponseOutput() VnetConfigurationResponseOutput {
	return o
}

func (o VnetConfigurationResponseOutput) ToVnetConfigurationResponseOutputWithContext(ctx context.Context) VnetConfigurationResponseOutput {
	return o
}

func (o VnetConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VnetConfigurationResponse] {
	return pulumix.Output[VnetConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationResponseOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfigurationResponse) *string { return v.DockerBridgeCidr }).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationResponseOutput) InfrastructureSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfigurationResponse) *string { return v.InfrastructureSubnetId }).(pulumi.StringPtrOutput)
}

// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
func (o VnetConfigurationResponseOutput) Internal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VnetConfigurationResponse) *bool { return v.Internal }).(pulumi.BoolPtrOutput)
}

// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationResponseOutput) PlatformReservedCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfigurationResponse) *string { return v.PlatformReservedCidr }).(pulumi.StringPtrOutput)
}

// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
func (o VnetConfigurationResponseOutput) PlatformReservedDnsIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VnetConfigurationResponse) *string { return v.PlatformReservedDnsIP }).(pulumi.StringPtrOutput)
}

type VnetConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VnetConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VnetConfigurationResponse)(nil)).Elem()
}

func (o VnetConfigurationResponsePtrOutput) ToVnetConfigurationResponsePtrOutput() VnetConfigurationResponsePtrOutput {
	return o
}

func (o VnetConfigurationResponsePtrOutput) ToVnetConfigurationResponsePtrOutputWithContext(ctx context.Context) VnetConfigurationResponsePtrOutput {
	return o
}

func (o VnetConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*VnetConfigurationResponse] {
	return pulumix.Output[*VnetConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o VnetConfigurationResponsePtrOutput) Elem() VnetConfigurationResponseOutput {
	return o.ApplyT(func(v *VnetConfigurationResponse) VnetConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VnetConfigurationResponse
		return ret
	}).(VnetConfigurationResponseOutput)
}

// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationResponsePtrOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerBridgeCidr
	}).(pulumi.StringPtrOutput)
}

// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationResponsePtrOutput) InfrastructureSubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InfrastructureSubnetId
	}).(pulumi.StringPtrOutput)
}

// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property
func (o VnetConfigurationResponsePtrOutput) Internal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VnetConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Internal
	}).(pulumi.BoolPtrOutput)
}

// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
func (o VnetConfigurationResponsePtrOutput) PlatformReservedCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlatformReservedCidr
	}).(pulumi.StringPtrOutput)
}

// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
func (o VnetConfigurationResponsePtrOutput) PlatformReservedDnsIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VnetConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PlatformReservedDnsIP
	}).(pulumi.StringPtrOutput)
}

// Volume definitions for the Container App.
type Volume struct {
	// Mount options used while mounting the AzureFile. Must be a comma-separated string.
	MountOptions *string `pulumi:"mountOptions"`
	// Volume name.
	Name *string `pulumi:"name"`
	// List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume.
	Secrets []SecretVolumeItem `pulumi:"secrets"`
	// Name of storage resource. No need to provide for EmptyDir and Secret.
	StorageName *string `pulumi:"storageName"`
	// Storage type for the volume. If not provided, use EmptyDir.
	StorageType *string `pulumi:"storageType"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volume definitions for the Container App.
type VolumeArgs struct {
	// Mount options used while mounting the AzureFile. Must be a comma-separated string.
	MountOptions pulumi.StringPtrInput `pulumi:"mountOptions"`
	// Volume name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume.
	Secrets SecretVolumeItemArrayInput `pulumi:"secrets"`
	// Name of storage resource. No need to provide for EmptyDir and Secret.
	StorageName pulumi.StringPtrInput `pulumi:"storageName"`
	// Storage type for the volume. If not provided, use EmptyDir.
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

func (i VolumeArgs) ToOutput(ctx context.Context) pulumix.Output[Volume] {
	return pulumix.Output[Volume]{
		OutputState: i.ToVolumeOutputWithContext(ctx).OutputState,
	}
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

func (i VolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]Volume] {
	return pulumix.Output[[]Volume]{
		OutputState: i.ToVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

// Volume definitions for the Container App.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) ToOutput(ctx context.Context) pulumix.Output[Volume] {
	return pulumix.Output[Volume]{
		OutputState: o.OutputState,
	}
}

// Mount options used while mounting the AzureFile. Must be a comma-separated string.
func (o VolumeOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// Volume name.
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume.
func (o VolumeOutput) Secrets() SecretVolumeItemArrayOutput {
	return o.ApplyT(func(v Volume) []SecretVolumeItem { return v.Secrets }).(SecretVolumeItemArrayOutput)
}

// Name of storage resource. No need to provide for EmptyDir and Secret.
func (o VolumeOutput) StorageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.StorageName }).(pulumi.StringPtrOutput)
}

// Storage type for the volume. If not provided, use EmptyDir.
func (o VolumeOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Volume] {
	return pulumix.Output[[]Volume]{
		OutputState: o.OutputState,
	}
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// Volume mount for the Container App.
type VolumeMount struct {
	// Path within the container at which the volume should be mounted.Must not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// This must match the Name of a Volume.
	VolumeName *string `pulumi:"volumeName"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//	VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// Volume mount for the Container App.
type VolumeMountArgs struct {
	// Path within the container at which the volume should be mounted.Must not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// This must match the Name of a Volume.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

func (i VolumeMountArgs) ToOutput(ctx context.Context) pulumix.Output[VolumeMount] {
	return pulumix.Output[VolumeMount]{
		OutputState: i.ToVolumeMountOutputWithContext(ctx).OutputState,
	}
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//	VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

func (i VolumeMountArray) ToOutput(ctx context.Context) pulumix.Output[[]VolumeMount] {
	return pulumix.Output[[]VolumeMount]{
		OutputState: i.ToVolumeMountArrayOutputWithContext(ctx).OutputState,
	}
}

// Volume mount for the Container App.
type VolumeMountOutput struct{ *pulumi.OutputState }

func (VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (o VolumeMountOutput) ToVolumeMountOutput() VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeMount] {
	return pulumix.Output[VolumeMount]{
		OutputState: o.OutputState,
	}
}

// Path within the container at which the volume should be mounted.Must not contain ':'.
func (o VolumeMountOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o VolumeMountOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMount) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeMount] {
	return pulumix.Output[[]VolumeMount]{
		OutputState: o.OutputState,
	}
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}

// Volume mount for the Container App.
type VolumeMountResponse struct {
	// Path within the container at which the volume should be mounted.Must not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// This must match the Name of a Volume.
	VolumeName *string `pulumi:"volumeName"`
}

// Volume mount for the Container App.
type VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeMountResponse] {
	return pulumix.Output[VolumeMountResponse]{
		OutputState: o.OutputState,
	}
}

// Path within the container at which the volume should be mounted.Must not contain ':'.
func (o VolumeMountResponseOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountResponse) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
func (o VolumeMountResponseOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountResponse) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o VolumeMountResponseOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeMountResponse) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeMountResponse] {
	return pulumix.Output[[]VolumeMountResponse]{
		OutputState: o.OutputState,
	}
}

func (o VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountResponse {
		return vs[0].([]VolumeMountResponse)[vs[1].(int)]
	}).(VolumeMountResponseOutput)
}

// Volume definitions for the Container App.
type VolumeResponse struct {
	// Mount options used while mounting the AzureFile. Must be a comma-separated string.
	MountOptions *string `pulumi:"mountOptions"`
	// Volume name.
	Name *string `pulumi:"name"`
	// List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume.
	Secrets []SecretVolumeItemResponse `pulumi:"secrets"`
	// Name of storage resource. No need to provide for EmptyDir and Secret.
	StorageName *string `pulumi:"storageName"`
	// Storage type for the volume. If not provided, use EmptyDir.
	StorageType *string `pulumi:"storageType"`
}

// Volume definitions for the Container App.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeResponse] {
	return pulumix.Output[VolumeResponse]{
		OutputState: o.OutputState,
	}
}

// Mount options used while mounting the AzureFile. Must be a comma-separated string.
func (o VolumeResponseOutput) MountOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeResponse) *string { return v.MountOptions }).(pulumi.StringPtrOutput)
}

// Volume name.
func (o VolumeResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume.
func (o VolumeResponseOutput) Secrets() SecretVolumeItemResponseArrayOutput {
	return o.ApplyT(func(v VolumeResponse) []SecretVolumeItemResponse { return v.Secrets }).(SecretVolumeItemResponseArrayOutput)
}

// Name of storage resource. No need to provide for EmptyDir and Secret.
func (o VolumeResponseOutput) StorageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeResponse) *string { return v.StorageName }).(pulumi.StringPtrOutput)
}

// Storage type for the volume. If not provided, use EmptyDir.
func (o VolumeResponseOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeResponse) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeResponse] {
	return pulumix.Output[[]VolumeResponse]{
		OutputState: o.OutputState,
	}
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

// Workload profile to scope container app execution.
type WorkloadProfile struct {
	// The maximum capacity.
	MaximumCount *int `pulumi:"maximumCount"`
	// The minimum capacity.
	MinimumCount *int `pulumi:"minimumCount"`
	// Workload profile type for the workloads to run on.
	Name string `pulumi:"name"`
	// Workload profile type for the workloads to run on.
	WorkloadProfileType string `pulumi:"workloadProfileType"`
}

// WorkloadProfileInput is an input type that accepts WorkloadProfileArgs and WorkloadProfileOutput values.
// You can construct a concrete instance of `WorkloadProfileInput` via:
//
//	WorkloadProfileArgs{...}
type WorkloadProfileInput interface {
	pulumi.Input

	ToWorkloadProfileOutput() WorkloadProfileOutput
	ToWorkloadProfileOutputWithContext(context.Context) WorkloadProfileOutput
}

// Workload profile to scope container app execution.
type WorkloadProfileArgs struct {
	// The maximum capacity.
	MaximumCount pulumi.IntPtrInput `pulumi:"maximumCount"`
	// The minimum capacity.
	MinimumCount pulumi.IntPtrInput `pulumi:"minimumCount"`
	// Workload profile type for the workloads to run on.
	Name pulumi.StringInput `pulumi:"name"`
	// Workload profile type for the workloads to run on.
	WorkloadProfileType pulumi.StringInput `pulumi:"workloadProfileType"`
}

func (WorkloadProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadProfile)(nil)).Elem()
}

func (i WorkloadProfileArgs) ToWorkloadProfileOutput() WorkloadProfileOutput {
	return i.ToWorkloadProfileOutputWithContext(context.Background())
}

func (i WorkloadProfileArgs) ToWorkloadProfileOutputWithContext(ctx context.Context) WorkloadProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadProfileOutput)
}

func (i WorkloadProfileArgs) ToOutput(ctx context.Context) pulumix.Output[WorkloadProfile] {
	return pulumix.Output[WorkloadProfile]{
		OutputState: i.ToWorkloadProfileOutputWithContext(ctx).OutputState,
	}
}

// WorkloadProfileArrayInput is an input type that accepts WorkloadProfileArray and WorkloadProfileArrayOutput values.
// You can construct a concrete instance of `WorkloadProfileArrayInput` via:
//
//	WorkloadProfileArray{ WorkloadProfileArgs{...} }
type WorkloadProfileArrayInput interface {
	pulumi.Input

	ToWorkloadProfileArrayOutput() WorkloadProfileArrayOutput
	ToWorkloadProfileArrayOutputWithContext(context.Context) WorkloadProfileArrayOutput
}

type WorkloadProfileArray []WorkloadProfileInput

func (WorkloadProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkloadProfile)(nil)).Elem()
}

func (i WorkloadProfileArray) ToWorkloadProfileArrayOutput() WorkloadProfileArrayOutput {
	return i.ToWorkloadProfileArrayOutputWithContext(context.Background())
}

func (i WorkloadProfileArray) ToWorkloadProfileArrayOutputWithContext(ctx context.Context) WorkloadProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadProfileArrayOutput)
}

func (i WorkloadProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]WorkloadProfile] {
	return pulumix.Output[[]WorkloadProfile]{
		OutputState: i.ToWorkloadProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// Workload profile to scope container app execution.
type WorkloadProfileOutput struct{ *pulumi.OutputState }

func (WorkloadProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadProfile)(nil)).Elem()
}

func (o WorkloadProfileOutput) ToWorkloadProfileOutput() WorkloadProfileOutput {
	return o
}

func (o WorkloadProfileOutput) ToWorkloadProfileOutputWithContext(ctx context.Context) WorkloadProfileOutput {
	return o
}

func (o WorkloadProfileOutput) ToOutput(ctx context.Context) pulumix.Output[WorkloadProfile] {
	return pulumix.Output[WorkloadProfile]{
		OutputState: o.OutputState,
	}
}

// The maximum capacity.
func (o WorkloadProfileOutput) MaximumCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadProfile) *int { return v.MaximumCount }).(pulumi.IntPtrOutput)
}

// The minimum capacity.
func (o WorkloadProfileOutput) MinimumCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadProfile) *int { return v.MinimumCount }).(pulumi.IntPtrOutput)
}

// Workload profile type for the workloads to run on.
func (o WorkloadProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadProfile) string { return v.Name }).(pulumi.StringOutput)
}

// Workload profile type for the workloads to run on.
func (o WorkloadProfileOutput) WorkloadProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadProfile) string { return v.WorkloadProfileType }).(pulumi.StringOutput)
}

type WorkloadProfileArrayOutput struct{ *pulumi.OutputState }

func (WorkloadProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkloadProfile)(nil)).Elem()
}

func (o WorkloadProfileArrayOutput) ToWorkloadProfileArrayOutput() WorkloadProfileArrayOutput {
	return o
}

func (o WorkloadProfileArrayOutput) ToWorkloadProfileArrayOutputWithContext(ctx context.Context) WorkloadProfileArrayOutput {
	return o
}

func (o WorkloadProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WorkloadProfile] {
	return pulumix.Output[[]WorkloadProfile]{
		OutputState: o.OutputState,
	}
}

func (o WorkloadProfileArrayOutput) Index(i pulumi.IntInput) WorkloadProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkloadProfile {
		return vs[0].([]WorkloadProfile)[vs[1].(int)]
	}).(WorkloadProfileOutput)
}

// Workload profile to scope container app execution.
type WorkloadProfileResponse struct {
	// The maximum capacity.
	MaximumCount *int `pulumi:"maximumCount"`
	// The minimum capacity.
	MinimumCount *int `pulumi:"minimumCount"`
	// Workload profile type for the workloads to run on.
	Name string `pulumi:"name"`
	// Workload profile type for the workloads to run on.
	WorkloadProfileType string `pulumi:"workloadProfileType"`
}

// Workload profile to scope container app execution.
type WorkloadProfileResponseOutput struct{ *pulumi.OutputState }

func (WorkloadProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadProfileResponse)(nil)).Elem()
}

func (o WorkloadProfileResponseOutput) ToWorkloadProfileResponseOutput() WorkloadProfileResponseOutput {
	return o
}

func (o WorkloadProfileResponseOutput) ToWorkloadProfileResponseOutputWithContext(ctx context.Context) WorkloadProfileResponseOutput {
	return o
}

func (o WorkloadProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WorkloadProfileResponse] {
	return pulumix.Output[WorkloadProfileResponse]{
		OutputState: o.OutputState,
	}
}

// The maximum capacity.
func (o WorkloadProfileResponseOutput) MaximumCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadProfileResponse) *int { return v.MaximumCount }).(pulumi.IntPtrOutput)
}

// The minimum capacity.
func (o WorkloadProfileResponseOutput) MinimumCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadProfileResponse) *int { return v.MinimumCount }).(pulumi.IntPtrOutput)
}

// Workload profile type for the workloads to run on.
func (o WorkloadProfileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadProfileResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Workload profile type for the workloads to run on.
func (o WorkloadProfileResponseOutput) WorkloadProfileType() pulumi.StringOutput {
	return o.ApplyT(func(v WorkloadProfileResponse) string { return v.WorkloadProfileType }).(pulumi.StringOutput)
}

type WorkloadProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (WorkloadProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkloadProfileResponse)(nil)).Elem()
}

func (o WorkloadProfileResponseArrayOutput) ToWorkloadProfileResponseArrayOutput() WorkloadProfileResponseArrayOutput {
	return o
}

func (o WorkloadProfileResponseArrayOutput) ToWorkloadProfileResponseArrayOutputWithContext(ctx context.Context) WorkloadProfileResponseArrayOutput {
	return o
}

func (o WorkloadProfileResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WorkloadProfileResponse] {
	return pulumix.Output[[]WorkloadProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o WorkloadProfileResponseArrayOutput) Index(i pulumi.IntInput) WorkloadProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkloadProfileResponse {
		return vs[0].([]WorkloadProfileResponse)[vs[1].(int)]
	}).(WorkloadProfileResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AllowedAudiencesValidationOutput{})
	pulumi.RegisterOutputType(AllowedAudiencesValidationPtrOutput{})
	pulumi.RegisterOutputType(AllowedAudiencesValidationResponseOutput{})
	pulumi.RegisterOutputType(AllowedAudiencesValidationResponsePtrOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsPtrOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsResponseOutput{})
	pulumi.RegisterOutputType(AllowedPrincipalsResponsePtrOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AppLogsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AppRegistrationOutput{})
	pulumi.RegisterOutputType(AppRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AppRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AppRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AppleOutput{})
	pulumi.RegisterOutputType(ApplePtrOutput{})
	pulumi.RegisterOutputType(AppleRegistrationOutput{})
	pulumi.RegisterOutputType(AppleRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AppleRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AppleRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AppleResponseOutput{})
	pulumi.RegisterOutputType(AppleResponsePtrOutput{})
	pulumi.RegisterOutputType(AuthPlatformOutput{})
	pulumi.RegisterOutputType(AuthPlatformPtrOutput{})
	pulumi.RegisterOutputType(AuthPlatformResponseOutput{})
	pulumi.RegisterOutputType(AuthPlatformResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryLoginResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationPtrOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationResponseOutput{})
	pulumi.RegisterOutputType(AzureActiveDirectoryValidationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureCredentialsOutput{})
	pulumi.RegisterOutputType(AzureCredentialsPtrOutput{})
	pulumi.RegisterOutputType(AzureCredentialsResponseOutput{})
	pulumi.RegisterOutputType(AzureCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFilePropertiesOutput{})
	pulumi.RegisterOutputType(AzureFilePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AzureFilePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AzureFilePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsPtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationPtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationResponseOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsResponseOutput{})
	pulumi.RegisterOutputType(AzureStaticWebAppsResponsePtrOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStoreOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStorePtrOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStoreResponseOutput{})
	pulumi.RegisterOutputType(BlobStorageTokenStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificatePropertiesOutput{})
	pulumi.RegisterOutputType(CertificatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertificateResponsePropertiesOutput{})
	pulumi.RegisterOutputType(ClientRegistrationOutput{})
	pulumi.RegisterOutputType(ClientRegistrationPtrOutput{})
	pulumi.RegisterOutputType(ClientRegistrationResponseOutput{})
	pulumi.RegisterOutputType(ClientRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationOutput{})
	pulumi.RegisterOutputType(ConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectedEnvironmentStoragePropertiesOutput{})
	pulumi.RegisterOutputType(ConnectedEnvironmentStoragePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectedEnvironmentStorageResponsePropertiesOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeArrayOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeHttpGetOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeHttpHeadersOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseHttpGetOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseHttpGetPtrOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseHttpHeadersOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseTcpSocketOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeResponseTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(ContainerAppProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(ContainerAppSecretResponseOutput{})
	pulumi.RegisterOutputType(ContainerAppSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerResourcesOutput{})
	pulumi.RegisterOutputType(ContainerResourcesPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourcesResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourcesResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(CookieExpirationOutput{})
	pulumi.RegisterOutputType(CookieExpirationPtrOutput{})
	pulumi.RegisterOutputType(CookieExpirationResponseOutput{})
	pulumi.RegisterOutputType(CookieExpirationResponsePtrOutput{})
	pulumi.RegisterOutputType(CorsPolicyOutput{})
	pulumi.RegisterOutputType(CorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(CorsPolicyResponseOutput{})
	pulumi.RegisterOutputType(CorsPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomDomainOutput{})
	pulumi.RegisterOutputType(CustomDomainArrayOutput{})
	pulumi.RegisterOutputType(CustomDomainConfigurationOutput{})
	pulumi.RegisterOutputType(CustomDomainConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CustomDomainConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CustomDomainConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomDomainResponseOutput{})
	pulumi.RegisterOutputType(CustomDomainResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomHostnameAnalysisResultResponseCustomDomainVerificationFailureInfoOutput{})
	pulumi.RegisterOutputType(CustomHostnameAnalysisResultResponseDetailsOutput{})
	pulumi.RegisterOutputType(CustomHostnameAnalysisResultResponseDetailsArrayOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderMapOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderResponseOutput{})
	pulumi.RegisterOutputType(CustomOpenIdConnectProviderResponseMapOutput{})
	pulumi.RegisterOutputType(CustomScaleRuleOutput{})
	pulumi.RegisterOutputType(CustomScaleRulePtrOutput{})
	pulumi.RegisterOutputType(CustomScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(CustomScaleRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(DaprOutput{})
	pulumi.RegisterOutputType(DaprPtrOutput{})
	pulumi.RegisterOutputType(DaprConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DaprConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DaprMetadataOutput{})
	pulumi.RegisterOutputType(DaprMetadataArrayOutput{})
	pulumi.RegisterOutputType(DaprMetadataResponseOutput{})
	pulumi.RegisterOutputType(DaprMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(DaprResponseOutput{})
	pulumi.RegisterOutputType(DaprResponsePtrOutput{})
	pulumi.RegisterOutputType(DaprSecretResponseOutput{})
	pulumi.RegisterOutputType(DaprSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyPtrOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyResponseOutput{})
	pulumi.RegisterOutputType(DefaultAuthorizationPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsPtrOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsResponseOutput{})
	pulumi.RegisterOutputType(EncryptionSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVarOutput{})
	pulumi.RegisterOutputType(EnvironmentVarArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVarResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVarResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(FacebookOutput{})
	pulumi.RegisterOutputType(FacebookPtrOutput{})
	pulumi.RegisterOutputType(FacebookResponseOutput{})
	pulumi.RegisterOutputType(FacebookResponsePtrOutput{})
	pulumi.RegisterOutputType(ForwardProxyOutput{})
	pulumi.RegisterOutputType(ForwardProxyPtrOutput{})
	pulumi.RegisterOutputType(ForwardProxyResponseOutput{})
	pulumi.RegisterOutputType(ForwardProxyResponsePtrOutput{})
	pulumi.RegisterOutputType(GitHubOutput{})
	pulumi.RegisterOutputType(GitHubPtrOutput{})
	pulumi.RegisterOutputType(GitHubResponseOutput{})
	pulumi.RegisterOutputType(GitHubResponsePtrOutput{})
	pulumi.RegisterOutputType(GithubActionConfigurationOutput{})
	pulumi.RegisterOutputType(GithubActionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GithubActionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(GithubActionConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(GlobalValidationOutput{})
	pulumi.RegisterOutputType(GlobalValidationPtrOutput{})
	pulumi.RegisterOutputType(GlobalValidationResponseOutput{})
	pulumi.RegisterOutputType(GlobalValidationResponsePtrOutput{})
	pulumi.RegisterOutputType(GoogleOutput{})
	pulumi.RegisterOutputType(GooglePtrOutput{})
	pulumi.RegisterOutputType(GoogleResponseOutput{})
	pulumi.RegisterOutputType(GoogleResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpScaleRuleOutput{})
	pulumi.RegisterOutputType(HttpScaleRulePtrOutput{})
	pulumi.RegisterOutputType(HttpScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(HttpScaleRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsOutput{})
	pulumi.RegisterOutputType(HttpSettingsPtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsResponseOutput{})
	pulumi.RegisterOutputType(HttpSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesPtrOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesResponseOutput{})
	pulumi.RegisterOutputType(HttpSettingsRoutesResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityProvidersOutput{})
	pulumi.RegisterOutputType(IdentityProvidersPtrOutput{})
	pulumi.RegisterOutputType(IdentityProvidersResponseOutput{})
	pulumi.RegisterOutputType(IdentityProvidersResponsePtrOutput{})
	pulumi.RegisterOutputType(IngressOutput{})
	pulumi.RegisterOutputType(IngressPtrOutput{})
	pulumi.RegisterOutputType(IngressPortMappingOutput{})
	pulumi.RegisterOutputType(IngressPortMappingArrayOutput{})
	pulumi.RegisterOutputType(IngressPortMappingResponseOutput{})
	pulumi.RegisterOutputType(IngressPortMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(IngressResponseOutput{})
	pulumi.RegisterOutputType(IngressResponsePtrOutput{})
	pulumi.RegisterOutputType(IngressResponseStickySessionsOutput{})
	pulumi.RegisterOutputType(IngressResponseStickySessionsPtrOutput{})
	pulumi.RegisterOutputType(IngressStickySessionsOutput{})
	pulumi.RegisterOutputType(IngressStickySessionsPtrOutput{})
	pulumi.RegisterOutputType(InitContainerOutput{})
	pulumi.RegisterOutputType(InitContainerArrayOutput{})
	pulumi.RegisterOutputType(InitContainerResponseOutput{})
	pulumi.RegisterOutputType(InitContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(IpSecurityRestrictionRuleOutput{})
	pulumi.RegisterOutputType(IpSecurityRestrictionRuleArrayOutput{})
	pulumi.RegisterOutputType(IpSecurityRestrictionRuleResponseOutput{})
	pulumi.RegisterOutputType(IpSecurityRestrictionRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(JobConfigurationOutput{})
	pulumi.RegisterOutputType(JobConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationEventTriggerConfigOutput{})
	pulumi.RegisterOutputType(JobConfigurationEventTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationManualTriggerConfigOutput{})
	pulumi.RegisterOutputType(JobConfigurationManualTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseEventTriggerConfigOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseEventTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseManualTriggerConfigOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseManualTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseScheduleTriggerConfigOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseScheduleTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationScheduleTriggerConfigOutput{})
	pulumi.RegisterOutputType(JobConfigurationScheduleTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(JobScaleOutput{})
	pulumi.RegisterOutputType(JobScalePtrOutput{})
	pulumi.RegisterOutputType(JobScaleResponseOutput{})
	pulumi.RegisterOutputType(JobScaleResponsePtrOutput{})
	pulumi.RegisterOutputType(JobScaleRuleOutput{})
	pulumi.RegisterOutputType(JobScaleRuleArrayOutput{})
	pulumi.RegisterOutputType(JobScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(JobScaleRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(JobTemplateOutput{})
	pulumi.RegisterOutputType(JobTemplatePtrOutput{})
	pulumi.RegisterOutputType(JobTemplateResponseOutput{})
	pulumi.RegisterOutputType(JobTemplateResponsePtrOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksPtrOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksResponseOutput{})
	pulumi.RegisterOutputType(JwtClaimChecksResponsePtrOutput{})
	pulumi.RegisterOutputType(KedaConfigurationResponseOutput{})
	pulumi.RegisterOutputType(KedaConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginOutput{})
	pulumi.RegisterOutputType(LoginPtrOutput{})
	pulumi.RegisterOutputType(LoginResponseOutput{})
	pulumi.RegisterOutputType(LoginResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginRoutesOutput{})
	pulumi.RegisterOutputType(LoginRoutesPtrOutput{})
	pulumi.RegisterOutputType(LoginRoutesResponseOutput{})
	pulumi.RegisterOutputType(LoginRoutesResponsePtrOutput{})
	pulumi.RegisterOutputType(LoginScopesOutput{})
	pulumi.RegisterOutputType(LoginScopesPtrOutput{})
	pulumi.RegisterOutputType(LoginScopesResponseOutput{})
	pulumi.RegisterOutputType(LoginScopesResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedCertificatePropertiesOutput{})
	pulumi.RegisterOutputType(ManagedCertificatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagedCertificateResponsePropertiesOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentPeerAuthenticationOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentPeerAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentResponsePeerAuthenticationOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentResponsePeerAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentStoragePropertiesOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentStoragePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagedEnvironmentStorageResponsePropertiesOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MtlsOutput{})
	pulumi.RegisterOutputType(MtlsPtrOutput{})
	pulumi.RegisterOutputType(MtlsResponseOutput{})
	pulumi.RegisterOutputType(MtlsResponsePtrOutput{})
	pulumi.RegisterOutputType(NonceOutput{})
	pulumi.RegisterOutputType(NoncePtrOutput{})
	pulumi.RegisterOutputType(NonceResponseOutput{})
	pulumi.RegisterOutputType(NonceResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectClientCredentialResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectLoginResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationPtrOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationResponseOutput{})
	pulumi.RegisterOutputType(OpenIdConnectRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(QueueScaleRuleOutput{})
	pulumi.RegisterOutputType(QueueScaleRulePtrOutput{})
	pulumi.RegisterOutputType(QueueScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(QueueScaleRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryCredentialsOutput{})
	pulumi.RegisterOutputType(RegistryCredentialsArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(RegistryCredentialsResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryInfoOutput{})
	pulumi.RegisterOutputType(RegistryInfoPtrOutput{})
	pulumi.RegisterOutputType(RegistryInfoResponseOutput{})
	pulumi.RegisterOutputType(RegistryInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ScaleOutput{})
	pulumi.RegisterOutputType(ScalePtrOutput{})
	pulumi.RegisterOutputType(ScaleResponseOutput{})
	pulumi.RegisterOutputType(ScaleResponsePtrOutput{})
	pulumi.RegisterOutputType(ScaleRuleOutput{})
	pulumi.RegisterOutputType(ScaleRuleArrayOutput{})
	pulumi.RegisterOutputType(ScaleRuleAuthOutput{})
	pulumi.RegisterOutputType(ScaleRuleAuthArrayOutput{})
	pulumi.RegisterOutputType(ScaleRuleAuthResponseOutput{})
	pulumi.RegisterOutputType(ScaleRuleAuthResponseArrayOutput{})
	pulumi.RegisterOutputType(ScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(ScaleRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(SecretResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretVolumeItemOutput{})
	pulumi.RegisterOutputType(SecretVolumeItemArrayOutput{})
	pulumi.RegisterOutputType(SecretVolumeItemResponseOutput{})
	pulumi.RegisterOutputType(SecretVolumeItemResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServicePtrOutput{})
	pulumi.RegisterOutputType(ServiceBindOutput{})
	pulumi.RegisterOutputType(ServiceBindArrayOutput{})
	pulumi.RegisterOutputType(ServiceBindResponseOutput{})
	pulumi.RegisterOutputType(ServiceBindResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceResponseOutput{})
	pulumi.RegisterOutputType(ServiceResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TcpScaleRuleOutput{})
	pulumi.RegisterOutputType(TcpScaleRulePtrOutput{})
	pulumi.RegisterOutputType(TcpScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(TcpScaleRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(TemplateOutput{})
	pulumi.RegisterOutputType(TemplatePtrOutput{})
	pulumi.RegisterOutputType(TemplateResponseOutput{})
	pulumi.RegisterOutputType(TemplateResponsePtrOutput{})
	pulumi.RegisterOutputType(TokenStoreOutput{})
	pulumi.RegisterOutputType(TokenStorePtrOutput{})
	pulumi.RegisterOutputType(TokenStoreResponseOutput{})
	pulumi.RegisterOutputType(TokenStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(TrafficWeightOutput{})
	pulumi.RegisterOutputType(TrafficWeightArrayOutput{})
	pulumi.RegisterOutputType(TrafficWeightResponseOutput{})
	pulumi.RegisterOutputType(TrafficWeightResponseArrayOutput{})
	pulumi.RegisterOutputType(TwitterOutput{})
	pulumi.RegisterOutputType(TwitterPtrOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationPtrOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationResponseOutput{})
	pulumi.RegisterOutputType(TwitterRegistrationResponsePtrOutput{})
	pulumi.RegisterOutputType(TwitterResponseOutput{})
	pulumi.RegisterOutputType(TwitterResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(VnetConfigurationOutput{})
	pulumi.RegisterOutputType(VnetConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VnetConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VnetConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(WorkloadProfileOutput{})
	pulumi.RegisterOutputType(WorkloadProfileArrayOutput{})
	pulumi.RegisterOutputType(WorkloadProfileResponseOutput{})
	pulumi.RegisterOutputType(WorkloadProfileResponseArrayOutput{})
}
