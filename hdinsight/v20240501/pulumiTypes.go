// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Identity properties of the AKS cluster agentpool MSI
type AksClusterProfileResponseAksClusterAgentPoolIdentityProfile struct {
	// ClientId of the MSI.
	MsiClientId string `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId string `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId string `pulumi:"msiResourceId"`
}

// Identity properties of the AKS cluster agentpool MSI
type AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput struct{ *pulumi.OutputState }

func (AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksClusterProfileResponseAksClusterAgentPoolIdentityProfile)(nil)).Elem()
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput() AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput {
	return o
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutputWithContext(ctx context.Context) AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput {
	return o
}

// ClientId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) MsiClientId() pulumi.StringOutput {
	return o.ApplyT(func(v AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) string { return v.MsiClientId }).(pulumi.StringOutput)
}

// ObjectId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) MsiObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) string { return v.MsiObjectId }).(pulumi.StringOutput)
}

// ResourceId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) MsiResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) string { return v.MsiResourceId }).(pulumi.StringOutput)
}

type AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksClusterProfileResponseAksClusterAgentPoolIdentityProfile)(nil)).Elem()
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput() AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput {
	return o
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutputWithContext(ctx context.Context) AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput {
	return o
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) Elem() AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) AksClusterProfileResponseAksClusterAgentPoolIdentityProfile {
		if v != nil {
			return *v
		}
		var ret AksClusterProfileResponseAksClusterAgentPoolIdentityProfile
		return ret
	}).(AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput)
}

// ClientId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) MsiClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiClientId
	}).(pulumi.StringPtrOutput)
}

// ObjectId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) MsiObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiObjectId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfile struct {
	// AAD group Ids authorized for data plane access.
	GroupIds []string `pulumi:"groupIds"`
	// AAD user Ids authorized for data plane access.
	UserIds []string `pulumi:"userIds"`
}

// AuthorizationProfileInput is an input type that accepts AuthorizationProfileArgs and AuthorizationProfileOutput values.
// You can construct a concrete instance of `AuthorizationProfileInput` via:
//
//	AuthorizationProfileArgs{...}
type AuthorizationProfileInput interface {
	pulumi.Input

	ToAuthorizationProfileOutput() AuthorizationProfileOutput
	ToAuthorizationProfileOutputWithContext(context.Context) AuthorizationProfileOutput
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileArgs struct {
	// AAD group Ids authorized for data plane access.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// AAD user Ids authorized for data plane access.
	UserIds pulumi.StringArrayInput `pulumi:"userIds"`
}

func (AuthorizationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationProfile)(nil)).Elem()
}

func (i AuthorizationProfileArgs) ToAuthorizationProfileOutput() AuthorizationProfileOutput {
	return i.ToAuthorizationProfileOutputWithContext(context.Background())
}

func (i AuthorizationProfileArgs) ToAuthorizationProfileOutputWithContext(ctx context.Context) AuthorizationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationProfileOutput)
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileOutput struct{ *pulumi.OutputState }

func (AuthorizationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationProfile)(nil)).Elem()
}

func (o AuthorizationProfileOutput) ToAuthorizationProfileOutput() AuthorizationProfileOutput {
	return o
}

func (o AuthorizationProfileOutput) ToAuthorizationProfileOutputWithContext(ctx context.Context) AuthorizationProfileOutput {
	return o
}

// AAD group Ids authorized for data plane access.
func (o AuthorizationProfileOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfile) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// AAD user Ids authorized for data plane access.
func (o AuthorizationProfileOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfile) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileResponse struct {
	// AAD group Ids authorized for data plane access.
	GroupIds []string `pulumi:"groupIds"`
	// AAD user Ids authorized for data plane access.
	UserIds []string `pulumi:"userIds"`
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationProfileResponse)(nil)).Elem()
}

func (o AuthorizationProfileResponseOutput) ToAuthorizationProfileResponseOutput() AuthorizationProfileResponseOutput {
	return o
}

func (o AuthorizationProfileResponseOutput) ToAuthorizationProfileResponseOutputWithContext(ctx context.Context) AuthorizationProfileResponseOutput {
	return o
}

// AAD group Ids authorized for data plane access.
func (o AuthorizationProfileResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfileResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// AAD user Ids authorized for data plane access.
func (o AuthorizationProfileResponseOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfileResponse) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfile struct {
	// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
	AutoscaleType *string `pulumi:"autoscaleType"`
	// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
	Enabled bool `pulumi:"enabled"`
	// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
	GracefulDecommissionTimeout *int `pulumi:"gracefulDecommissionTimeout"`
	// Profiles of load based Autoscale.
	LoadBasedConfig *LoadBasedConfig `pulumi:"loadBasedConfig"`
	// Profiles of schedule based Autoscale.
	ScheduleBasedConfig *ScheduleBasedConfig `pulumi:"scheduleBasedConfig"`
}

// AutoscaleProfileInput is an input type that accepts AutoscaleProfileArgs and AutoscaleProfileOutput values.
// You can construct a concrete instance of `AutoscaleProfileInput` via:
//
//	AutoscaleProfileArgs{...}
type AutoscaleProfileInput interface {
	pulumi.Input

	ToAutoscaleProfileOutput() AutoscaleProfileOutput
	ToAutoscaleProfileOutputWithContext(context.Context) AutoscaleProfileOutput
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileArgs struct {
	// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
	AutoscaleType pulumi.StringPtrInput `pulumi:"autoscaleType"`
	// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
	GracefulDecommissionTimeout pulumi.IntPtrInput `pulumi:"gracefulDecommissionTimeout"`
	// Profiles of load based Autoscale.
	LoadBasedConfig LoadBasedConfigPtrInput `pulumi:"loadBasedConfig"`
	// Profiles of schedule based Autoscale.
	ScheduleBasedConfig ScheduleBasedConfigPtrInput `pulumi:"scheduleBasedConfig"`
}

func (AutoscaleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfile)(nil)).Elem()
}

func (i AutoscaleProfileArgs) ToAutoscaleProfileOutput() AutoscaleProfileOutput {
	return i.ToAutoscaleProfileOutputWithContext(context.Background())
}

func (i AutoscaleProfileArgs) ToAutoscaleProfileOutputWithContext(ctx context.Context) AutoscaleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfileOutput)
}

func (i AutoscaleProfileArgs) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return i.ToAutoscaleProfilePtrOutputWithContext(context.Background())
}

func (i AutoscaleProfileArgs) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfileOutput).ToAutoscaleProfilePtrOutputWithContext(ctx)
}

// AutoscaleProfilePtrInput is an input type that accepts AutoscaleProfileArgs, AutoscaleProfilePtr and AutoscaleProfilePtrOutput values.
// You can construct a concrete instance of `AutoscaleProfilePtrInput` via:
//
//	        AutoscaleProfileArgs{...}
//
//	or:
//
//	        nil
type AutoscaleProfilePtrInput interface {
	pulumi.Input

	ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput
	ToAutoscaleProfilePtrOutputWithContext(context.Context) AutoscaleProfilePtrOutput
}

type autoscaleProfilePtrType AutoscaleProfileArgs

func AutoscaleProfilePtr(v *AutoscaleProfileArgs) AutoscaleProfilePtrInput {
	return (*autoscaleProfilePtrType)(v)
}

func (*autoscaleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleProfile)(nil)).Elem()
}

func (i *autoscaleProfilePtrType) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return i.ToAutoscaleProfilePtrOutputWithContext(context.Background())
}

func (i *autoscaleProfilePtrType) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfilePtrOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfile)(nil)).Elem()
}

func (o AutoscaleProfileOutput) ToAutoscaleProfileOutput() AutoscaleProfileOutput {
	return o
}

func (o AutoscaleProfileOutput) ToAutoscaleProfileOutputWithContext(ctx context.Context) AutoscaleProfileOutput {
	return o
}

func (o AutoscaleProfileOutput) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return o.ToAutoscaleProfilePtrOutputWithContext(context.Background())
}

func (o AutoscaleProfileOutput) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleProfile) *AutoscaleProfile {
		return &v
	}).(AutoscaleProfilePtrOutput)
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfileOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *string { return v.AutoscaleType }).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutoscaleProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfileOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *int { return v.GracefulDecommissionTimeout }).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfileOutput) LoadBasedConfig() LoadBasedConfigPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *LoadBasedConfig { return v.LoadBasedConfig }).(LoadBasedConfigPtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfileOutput) ScheduleBasedConfig() ScheduleBasedConfigPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *ScheduleBasedConfig { return v.ScheduleBasedConfig }).(ScheduleBasedConfigPtrOutput)
}

type AutoscaleProfilePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleProfile)(nil)).Elem()
}

func (o AutoscaleProfilePtrOutput) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return o
}

func (o AutoscaleProfilePtrOutput) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return o
}

func (o AutoscaleProfilePtrOutput) Elem() AutoscaleProfileOutput {
	return o.ApplyT(func(v *AutoscaleProfile) AutoscaleProfile {
		if v != nil {
			return *v
		}
		var ret AutoscaleProfile
		return ret
	}).(AutoscaleProfileOutput)
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfilePtrOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *string {
		if v == nil {
			return nil
		}
		return v.AutoscaleType
	}).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfilePtrOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *int {
		if v == nil {
			return nil
		}
		return v.GracefulDecommissionTimeout
	}).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfilePtrOutput) LoadBasedConfig() LoadBasedConfigPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *LoadBasedConfig {
		if v == nil {
			return nil
		}
		return v.LoadBasedConfig
	}).(LoadBasedConfigPtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfilePtrOutput) ScheduleBasedConfig() ScheduleBasedConfigPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *ScheduleBasedConfig {
		if v == nil {
			return nil
		}
		return v.ScheduleBasedConfig
	}).(ScheduleBasedConfigPtrOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileResponse struct {
	// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
	AutoscaleType *string `pulumi:"autoscaleType"`
	// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
	Enabled bool `pulumi:"enabled"`
	// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
	GracefulDecommissionTimeout *int `pulumi:"gracefulDecommissionTimeout"`
	// Profiles of load based Autoscale.
	LoadBasedConfig *LoadBasedConfigResponse `pulumi:"loadBasedConfig"`
	// Profiles of schedule based Autoscale.
	ScheduleBasedConfig *ScheduleBasedConfigResponse `pulumi:"scheduleBasedConfig"`
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfileResponse)(nil)).Elem()
}

func (o AutoscaleProfileResponseOutput) ToAutoscaleProfileResponseOutput() AutoscaleProfileResponseOutput {
	return o
}

func (o AutoscaleProfileResponseOutput) ToAutoscaleProfileResponseOutputWithContext(ctx context.Context) AutoscaleProfileResponseOutput {
	return o
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfileResponseOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *string { return v.AutoscaleType }).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfileResponseOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *int { return v.GracefulDecommissionTimeout }).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfileResponseOutput) LoadBasedConfig() LoadBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *LoadBasedConfigResponse { return v.LoadBasedConfig }).(LoadBasedConfigResponsePtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfileResponseOutput) ScheduleBasedConfig() ScheduleBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *ScheduleBasedConfigResponse { return v.ScheduleBasedConfig }).(ScheduleBasedConfigResponsePtrOutput)
}

type AutoscaleProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleProfileResponse)(nil)).Elem()
}

func (o AutoscaleProfileResponsePtrOutput) ToAutoscaleProfileResponsePtrOutput() AutoscaleProfileResponsePtrOutput {
	return o
}

func (o AutoscaleProfileResponsePtrOutput) ToAutoscaleProfileResponsePtrOutputWithContext(ctx context.Context) AutoscaleProfileResponsePtrOutput {
	return o
}

func (o AutoscaleProfileResponsePtrOutput) Elem() AutoscaleProfileResponseOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) AutoscaleProfileResponse {
		if v != nil {
			return *v
		}
		var ret AutoscaleProfileResponse
		return ret
	}).(AutoscaleProfileResponseOutput)
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfileResponsePtrOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoscaleType
	}).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfileResponsePtrOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.GracefulDecommissionTimeout
	}).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfileResponsePtrOutput) LoadBasedConfig() LoadBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *LoadBasedConfigResponse {
		if v == nil {
			return nil
		}
		return v.LoadBasedConfig
	}).(LoadBasedConfigResponsePtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfileResponsePtrOutput) ScheduleBasedConfig() ScheduleBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *ScheduleBasedConfigResponse {
		if v == nil {
			return nil
		}
		return v.ScheduleBasedConfig
	}).(ScheduleBasedConfigResponsePtrOutput)
}

// Trino cluster catalog options.
type CatalogOptions struct {
	// hive catalog options.
	Hive []HiveCatalogOption `pulumi:"hive"`
}

// CatalogOptionsInput is an input type that accepts CatalogOptionsArgs and CatalogOptionsOutput values.
// You can construct a concrete instance of `CatalogOptionsInput` via:
//
//	CatalogOptionsArgs{...}
type CatalogOptionsInput interface {
	pulumi.Input

	ToCatalogOptionsOutput() CatalogOptionsOutput
	ToCatalogOptionsOutputWithContext(context.Context) CatalogOptionsOutput
}

// Trino cluster catalog options.
type CatalogOptionsArgs struct {
	// hive catalog options.
	Hive HiveCatalogOptionArrayInput `pulumi:"hive"`
}

func (CatalogOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogOptions)(nil)).Elem()
}

func (i CatalogOptionsArgs) ToCatalogOptionsOutput() CatalogOptionsOutput {
	return i.ToCatalogOptionsOutputWithContext(context.Background())
}

func (i CatalogOptionsArgs) ToCatalogOptionsOutputWithContext(ctx context.Context) CatalogOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOptionsOutput)
}

func (i CatalogOptionsArgs) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return i.ToCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i CatalogOptionsArgs) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOptionsOutput).ToCatalogOptionsPtrOutputWithContext(ctx)
}

// CatalogOptionsPtrInput is an input type that accepts CatalogOptionsArgs, CatalogOptionsPtr and CatalogOptionsPtrOutput values.
// You can construct a concrete instance of `CatalogOptionsPtrInput` via:
//
//	        CatalogOptionsArgs{...}
//
//	or:
//
//	        nil
type CatalogOptionsPtrInput interface {
	pulumi.Input

	ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput
	ToCatalogOptionsPtrOutputWithContext(context.Context) CatalogOptionsPtrOutput
}

type catalogOptionsPtrType CatalogOptionsArgs

func CatalogOptionsPtr(v *CatalogOptionsArgs) CatalogOptionsPtrInput {
	return (*catalogOptionsPtrType)(v)
}

func (*catalogOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogOptions)(nil)).Elem()
}

func (i *catalogOptionsPtrType) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return i.ToCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i *catalogOptionsPtrType) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOptionsPtrOutput)
}

// Trino cluster catalog options.
type CatalogOptionsOutput struct{ *pulumi.OutputState }

func (CatalogOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogOptions)(nil)).Elem()
}

func (o CatalogOptionsOutput) ToCatalogOptionsOutput() CatalogOptionsOutput {
	return o
}

func (o CatalogOptionsOutput) ToCatalogOptionsOutputWithContext(ctx context.Context) CatalogOptionsOutput {
	return o
}

func (o CatalogOptionsOutput) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return o.ToCatalogOptionsPtrOutputWithContext(context.Background())
}

func (o CatalogOptionsOutput) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogOptions) *CatalogOptions {
		return &v
	}).(CatalogOptionsPtrOutput)
}

// hive catalog options.
func (o CatalogOptionsOutput) Hive() HiveCatalogOptionArrayOutput {
	return o.ApplyT(func(v CatalogOptions) []HiveCatalogOption { return v.Hive }).(HiveCatalogOptionArrayOutput)
}

type CatalogOptionsPtrOutput struct{ *pulumi.OutputState }

func (CatalogOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogOptions)(nil)).Elem()
}

func (o CatalogOptionsPtrOutput) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return o
}

func (o CatalogOptionsPtrOutput) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return o
}

func (o CatalogOptionsPtrOutput) Elem() CatalogOptionsOutput {
	return o.ApplyT(func(v *CatalogOptions) CatalogOptions {
		if v != nil {
			return *v
		}
		var ret CatalogOptions
		return ret
	}).(CatalogOptionsOutput)
}

// hive catalog options.
func (o CatalogOptionsPtrOutput) Hive() HiveCatalogOptionArrayOutput {
	return o.ApplyT(func(v *CatalogOptions) []HiveCatalogOption {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(HiveCatalogOptionArrayOutput)
}

// Trino cluster catalog options.
type CatalogOptionsResponse struct {
	// hive catalog options.
	Hive []HiveCatalogOptionResponse `pulumi:"hive"`
}

// Trino cluster catalog options.
type CatalogOptionsResponseOutput struct{ *pulumi.OutputState }

func (CatalogOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogOptionsResponse)(nil)).Elem()
}

func (o CatalogOptionsResponseOutput) ToCatalogOptionsResponseOutput() CatalogOptionsResponseOutput {
	return o
}

func (o CatalogOptionsResponseOutput) ToCatalogOptionsResponseOutputWithContext(ctx context.Context) CatalogOptionsResponseOutput {
	return o
}

// hive catalog options.
func (o CatalogOptionsResponseOutput) Hive() HiveCatalogOptionResponseArrayOutput {
	return o.ApplyT(func(v CatalogOptionsResponse) []HiveCatalogOptionResponse { return v.Hive }).(HiveCatalogOptionResponseArrayOutput)
}

type CatalogOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (CatalogOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogOptionsResponse)(nil)).Elem()
}

func (o CatalogOptionsResponsePtrOutput) ToCatalogOptionsResponsePtrOutput() CatalogOptionsResponsePtrOutput {
	return o
}

func (o CatalogOptionsResponsePtrOutput) ToCatalogOptionsResponsePtrOutputWithContext(ctx context.Context) CatalogOptionsResponsePtrOutput {
	return o
}

func (o CatalogOptionsResponsePtrOutput) Elem() CatalogOptionsResponseOutput {
	return o.ApplyT(func(v *CatalogOptionsResponse) CatalogOptionsResponse {
		if v != nil {
			return *v
		}
		var ret CatalogOptionsResponse
		return ret
	}).(CatalogOptionsResponseOutput)
}

// hive catalog options.
func (o CatalogOptionsResponsePtrOutput) Hive() HiveCatalogOptionResponseArrayOutput {
	return o.ApplyT(func(v *CatalogOptionsResponse) []HiveCatalogOptionResponse {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(HiveCatalogOptionResponseArrayOutput)
}

// Cluster access profile.
type ClusterAccessProfile struct {
	// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
	EnableInternalIngress bool `pulumi:"enableInternalIngress"`
}

// ClusterAccessProfileInput is an input type that accepts ClusterAccessProfileArgs and ClusterAccessProfileOutput values.
// You can construct a concrete instance of `ClusterAccessProfileInput` via:
//
//	ClusterAccessProfileArgs{...}
type ClusterAccessProfileInput interface {
	pulumi.Input

	ToClusterAccessProfileOutput() ClusterAccessProfileOutput
	ToClusterAccessProfileOutputWithContext(context.Context) ClusterAccessProfileOutput
}

// Cluster access profile.
type ClusterAccessProfileArgs struct {
	// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
	EnableInternalIngress pulumi.BoolInput `pulumi:"enableInternalIngress"`
}

func (ClusterAccessProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessProfile)(nil)).Elem()
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfileOutput() ClusterAccessProfileOutput {
	return i.ToClusterAccessProfileOutputWithContext(context.Background())
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfileOutputWithContext(ctx context.Context) ClusterAccessProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessProfileOutput)
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return i.ToClusterAccessProfilePtrOutputWithContext(context.Background())
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessProfileOutput).ToClusterAccessProfilePtrOutputWithContext(ctx)
}

// ClusterAccessProfilePtrInput is an input type that accepts ClusterAccessProfileArgs, ClusterAccessProfilePtr and ClusterAccessProfilePtrOutput values.
// You can construct a concrete instance of `ClusterAccessProfilePtrInput` via:
//
//	        ClusterAccessProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterAccessProfilePtrInput interface {
	pulumi.Input

	ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput
	ToClusterAccessProfilePtrOutputWithContext(context.Context) ClusterAccessProfilePtrOutput
}

type clusterAccessProfilePtrType ClusterAccessProfileArgs

func ClusterAccessProfilePtr(v *ClusterAccessProfileArgs) ClusterAccessProfilePtrInput {
	return (*clusterAccessProfilePtrType)(v)
}

func (*clusterAccessProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessProfile)(nil)).Elem()
}

func (i *clusterAccessProfilePtrType) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return i.ToClusterAccessProfilePtrOutputWithContext(context.Background())
}

func (i *clusterAccessProfilePtrType) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessProfilePtrOutput)
}

// Cluster access profile.
type ClusterAccessProfileOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessProfile)(nil)).Elem()
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfileOutput() ClusterAccessProfileOutput {
	return o
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfileOutputWithContext(ctx context.Context) ClusterAccessProfileOutput {
	return o
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return o.ToClusterAccessProfilePtrOutputWithContext(context.Background())
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAccessProfile) *ClusterAccessProfile {
		return &v
	}).(ClusterAccessProfilePtrOutput)
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfileOutput) EnableInternalIngress() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterAccessProfile) bool { return v.EnableInternalIngress }).(pulumi.BoolOutput)
}

type ClusterAccessProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessProfile)(nil)).Elem()
}

func (o ClusterAccessProfilePtrOutput) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return o
}

func (o ClusterAccessProfilePtrOutput) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return o
}

func (o ClusterAccessProfilePtrOutput) Elem() ClusterAccessProfileOutput {
	return o.ApplyT(func(v *ClusterAccessProfile) ClusterAccessProfile {
		if v != nil {
			return *v
		}
		var ret ClusterAccessProfile
		return ret
	}).(ClusterAccessProfileOutput)
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfilePtrOutput) EnableInternalIngress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableInternalIngress
	}).(pulumi.BoolPtrOutput)
}

// Cluster access profile.
type ClusterAccessProfileResponse struct {
	// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
	EnableInternalIngress bool `pulumi:"enableInternalIngress"`
	// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
	PrivateLinkServiceId string `pulumi:"privateLinkServiceId"`
}

// Cluster access profile.
type ClusterAccessProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessProfileResponse)(nil)).Elem()
}

func (o ClusterAccessProfileResponseOutput) ToClusterAccessProfileResponseOutput() ClusterAccessProfileResponseOutput {
	return o
}

func (o ClusterAccessProfileResponseOutput) ToClusterAccessProfileResponseOutputWithContext(ctx context.Context) ClusterAccessProfileResponseOutput {
	return o
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfileResponseOutput) EnableInternalIngress() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterAccessProfileResponse) bool { return v.EnableInternalIngress }).(pulumi.BoolOutput)
}

// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
func (o ClusterAccessProfileResponseOutput) PrivateLinkServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAccessProfileResponse) string { return v.PrivateLinkServiceId }).(pulumi.StringOutput)
}

type ClusterAccessProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessProfileResponse)(nil)).Elem()
}

func (o ClusterAccessProfileResponsePtrOutput) ToClusterAccessProfileResponsePtrOutput() ClusterAccessProfileResponsePtrOutput {
	return o
}

func (o ClusterAccessProfileResponsePtrOutput) ToClusterAccessProfileResponsePtrOutputWithContext(ctx context.Context) ClusterAccessProfileResponsePtrOutput {
	return o
}

func (o ClusterAccessProfileResponsePtrOutput) Elem() ClusterAccessProfileResponseOutput {
	return o.ApplyT(func(v *ClusterAccessProfileResponse) ClusterAccessProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterAccessProfileResponse
		return ret
	}).(ClusterAccessProfileResponseOutput)
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfileResponsePtrOutput) EnableInternalIngress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableInternalIngress
	}).(pulumi.BoolPtrOutput)
}

// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
func (o ClusterAccessProfileResponsePtrOutput) PrivateLinkServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAccessProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateLinkServiceId
	}).(pulumi.StringPtrOutput)
}

// Cluster configuration files.
type ClusterConfigFile struct {
	// Free form content of the entire configuration file.
	Content *string `pulumi:"content"`
	// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
	Encoding *string `pulumi:"encoding"`
	// Configuration file name.
	FileName string `pulumi:"fileName"`
	// Path of the config file if content is specified.
	Path *string `pulumi:"path"`
	// List of key value pairs
	// where key represents a valid service configuration name and value represents the value of the config.
	Values map[string]string `pulumi:"values"`
}

// ClusterConfigFileInput is an input type that accepts ClusterConfigFileArgs and ClusterConfigFileOutput values.
// You can construct a concrete instance of `ClusterConfigFileInput` via:
//
//	ClusterConfigFileArgs{...}
type ClusterConfigFileInput interface {
	pulumi.Input

	ToClusterConfigFileOutput() ClusterConfigFileOutput
	ToClusterConfigFileOutputWithContext(context.Context) ClusterConfigFileOutput
}

// Cluster configuration files.
type ClusterConfigFileArgs struct {
	// Free form content of the entire configuration file.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Configuration file name.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// Path of the config file if content is specified.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// List of key value pairs
	// where key represents a valid service configuration name and value represents the value of the config.
	Values pulumi.StringMapInput `pulumi:"values"`
}

func (ClusterConfigFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigFile)(nil)).Elem()
}

func (i ClusterConfigFileArgs) ToClusterConfigFileOutput() ClusterConfigFileOutput {
	return i.ToClusterConfigFileOutputWithContext(context.Background())
}

func (i ClusterConfigFileArgs) ToClusterConfigFileOutputWithContext(ctx context.Context) ClusterConfigFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigFileOutput)
}

// ClusterConfigFileArrayInput is an input type that accepts ClusterConfigFileArray and ClusterConfigFileArrayOutput values.
// You can construct a concrete instance of `ClusterConfigFileArrayInput` via:
//
//	ClusterConfigFileArray{ ClusterConfigFileArgs{...} }
type ClusterConfigFileArrayInput interface {
	pulumi.Input

	ToClusterConfigFileArrayOutput() ClusterConfigFileArrayOutput
	ToClusterConfigFileArrayOutputWithContext(context.Context) ClusterConfigFileArrayOutput
}

type ClusterConfigFileArray []ClusterConfigFileInput

func (ClusterConfigFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterConfigFile)(nil)).Elem()
}

func (i ClusterConfigFileArray) ToClusterConfigFileArrayOutput() ClusterConfigFileArrayOutput {
	return i.ToClusterConfigFileArrayOutputWithContext(context.Background())
}

func (i ClusterConfigFileArray) ToClusterConfigFileArrayOutputWithContext(ctx context.Context) ClusterConfigFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigFileArrayOutput)
}

// Cluster configuration files.
type ClusterConfigFileOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigFile)(nil)).Elem()
}

func (o ClusterConfigFileOutput) ToClusterConfigFileOutput() ClusterConfigFileOutput {
	return o
}

func (o ClusterConfigFileOutput) ToClusterConfigFileOutputWithContext(ctx context.Context) ClusterConfigFileOutput {
	return o
}

// Free form content of the entire configuration file.
func (o ClusterConfigFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFile) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
func (o ClusterConfigFileOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFile) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Configuration file name.
func (o ClusterConfigFileOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConfigFile) string { return v.FileName }).(pulumi.StringOutput)
}

// Path of the config file if content is specified.
func (o ClusterConfigFileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// List of key value pairs
// where key represents a valid service configuration name and value represents the value of the config.
func (o ClusterConfigFileOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterConfigFile) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type ClusterConfigFileArrayOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterConfigFile)(nil)).Elem()
}

func (o ClusterConfigFileArrayOutput) ToClusterConfigFileArrayOutput() ClusterConfigFileArrayOutput {
	return o
}

func (o ClusterConfigFileArrayOutput) ToClusterConfigFileArrayOutputWithContext(ctx context.Context) ClusterConfigFileArrayOutput {
	return o
}

func (o ClusterConfigFileArrayOutput) Index(i pulumi.IntInput) ClusterConfigFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterConfigFile {
		return vs[0].([]ClusterConfigFile)[vs[1].(int)]
	}).(ClusterConfigFileOutput)
}

// Cluster configuration files.
type ClusterConfigFileResponse struct {
	// Free form content of the entire configuration file.
	Content *string `pulumi:"content"`
	// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
	Encoding *string `pulumi:"encoding"`
	// Configuration file name.
	FileName string `pulumi:"fileName"`
	// Path of the config file if content is specified.
	Path *string `pulumi:"path"`
	// List of key value pairs
	// where key represents a valid service configuration name and value represents the value of the config.
	Values map[string]string `pulumi:"values"`
}

// Cluster configuration files.
type ClusterConfigFileResponseOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigFileResponse)(nil)).Elem()
}

func (o ClusterConfigFileResponseOutput) ToClusterConfigFileResponseOutput() ClusterConfigFileResponseOutput {
	return o
}

func (o ClusterConfigFileResponseOutput) ToClusterConfigFileResponseOutputWithContext(ctx context.Context) ClusterConfigFileResponseOutput {
	return o
}

// Free form content of the entire configuration file.
func (o ClusterConfigFileResponseOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
func (o ClusterConfigFileResponseOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Configuration file name.
func (o ClusterConfigFileResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// Path of the config file if content is specified.
func (o ClusterConfigFileResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// List of key value pairs
// where key represents a valid service configuration name and value represents the value of the config.
func (o ClusterConfigFileResponseOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type ClusterConfigFileResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterConfigFileResponse)(nil)).Elem()
}

func (o ClusterConfigFileResponseArrayOutput) ToClusterConfigFileResponseArrayOutput() ClusterConfigFileResponseArrayOutput {
	return o
}

func (o ClusterConfigFileResponseArrayOutput) ToClusterConfigFileResponseArrayOutputWithContext(ctx context.Context) ClusterConfigFileResponseArrayOutput {
	return o
}

func (o ClusterConfigFileResponseArrayOutput) Index(i pulumi.IntInput) ClusterConfigFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterConfigFileResponse {
		return vs[0].([]ClusterConfigFileResponse)[vs[1].(int)]
	}).(ClusterConfigFileResponseOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogs struct {
	// True if stderror is enabled, otherwise false.
	StdErrorEnabled *bool `pulumi:"stdErrorEnabled"`
	// True if stdout is enabled, otherwise false.
	StdOutEnabled *bool `pulumi:"stdOutEnabled"`
}

// ClusterLogAnalyticsApplicationLogsInput is an input type that accepts ClusterLogAnalyticsApplicationLogsArgs and ClusterLogAnalyticsApplicationLogsOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsApplicationLogsInput` via:
//
//	ClusterLogAnalyticsApplicationLogsArgs{...}
type ClusterLogAnalyticsApplicationLogsInput interface {
	pulumi.Input

	ToClusterLogAnalyticsApplicationLogsOutput() ClusterLogAnalyticsApplicationLogsOutput
	ToClusterLogAnalyticsApplicationLogsOutputWithContext(context.Context) ClusterLogAnalyticsApplicationLogsOutput
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsArgs struct {
	// True if stderror is enabled, otherwise false.
	StdErrorEnabled pulumi.BoolPtrInput `pulumi:"stdErrorEnabled"`
	// True if stdout is enabled, otherwise false.
	StdOutEnabled pulumi.BoolPtrInput `pulumi:"stdOutEnabled"`
}

func (ClusterLogAnalyticsApplicationLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsOutput() ClusterLogAnalyticsApplicationLogsOutput {
	return i.ToClusterLogAnalyticsApplicationLogsOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsApplicationLogsOutput)
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return i.ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsApplicationLogsOutput).ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx)
}

// ClusterLogAnalyticsApplicationLogsPtrInput is an input type that accepts ClusterLogAnalyticsApplicationLogsArgs, ClusterLogAnalyticsApplicationLogsPtr and ClusterLogAnalyticsApplicationLogsPtrOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsApplicationLogsPtrInput` via:
//
//	        ClusterLogAnalyticsApplicationLogsArgs{...}
//
//	or:
//
//	        nil
type ClusterLogAnalyticsApplicationLogsPtrInput interface {
	pulumi.Input

	ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput
	ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput
}

type clusterLogAnalyticsApplicationLogsPtrType ClusterLogAnalyticsApplicationLogsArgs

func ClusterLogAnalyticsApplicationLogsPtr(v *ClusterLogAnalyticsApplicationLogsArgs) ClusterLogAnalyticsApplicationLogsPtrInput {
	return (*clusterLogAnalyticsApplicationLogsPtrType)(v)
}

func (*clusterLogAnalyticsApplicationLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (i *clusterLogAnalyticsApplicationLogsPtrType) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return i.ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Background())
}

func (i *clusterLogAnalyticsApplicationLogsPtrType) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsOutput() ClusterLogAnalyticsApplicationLogsOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Background())
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLogAnalyticsApplicationLogs) *ClusterLogAnalyticsApplicationLogs {
		return &v
	}).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogs) *bool { return v.StdErrorEnabled }).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogs) *bool { return v.StdOutEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsApplicationLogsPtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsPtrOutput) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsPtrOutput) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsPtrOutput) Elem() ClusterLogAnalyticsApplicationLogsOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogs) ClusterLogAnalyticsApplicationLogs {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsApplicationLogs
		return ret
	}).(ClusterLogAnalyticsApplicationLogsOutput)
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsPtrOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogs) *bool {
		if v == nil {
			return nil
		}
		return v.StdErrorEnabled
	}).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsPtrOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogs) *bool {
		if v == nil {
			return nil
		}
		return v.StdOutEnabled
	}).(pulumi.BoolPtrOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsResponse struct {
	// True if stderror is enabled, otherwise false.
	StdErrorEnabled *bool `pulumi:"stdErrorEnabled"`
	// True if stdout is enabled, otherwise false.
	StdOutEnabled *bool `pulumi:"stdOutEnabled"`
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsResponseOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsApplicationLogsResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsResponseOutput) ToClusterLogAnalyticsApplicationLogsResponseOutput() ClusterLogAnalyticsApplicationLogsResponseOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsResponseOutput) ToClusterLogAnalyticsApplicationLogsResponseOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsResponseOutput {
	return o
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponseOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogsResponse) *bool { return v.StdErrorEnabled }).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponseOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogsResponse) *bool { return v.StdOutEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsApplicationLogsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsApplicationLogsResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) ToClusterLogAnalyticsApplicationLogsResponsePtrOutput() ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) ToClusterLogAnalyticsApplicationLogsResponsePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) Elem() ClusterLogAnalyticsApplicationLogsResponseOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogsResponse) ClusterLogAnalyticsApplicationLogsResponse {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsApplicationLogsResponse
		return ret
	}).(ClusterLogAnalyticsApplicationLogsResponseOutput)
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StdErrorEnabled
	}).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StdOutEnabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfile struct {
	// Collection of logs to be enabled or disabled for log analytics.
	ApplicationLogs *ClusterLogAnalyticsApplicationLogs `pulumi:"applicationLogs"`
	// True if log analytics is enabled for the cluster, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// True if metrics are enabled, otherwise false.
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
}

// ClusterLogAnalyticsProfileInput is an input type that accepts ClusterLogAnalyticsProfileArgs and ClusterLogAnalyticsProfileOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsProfileInput` via:
//
//	ClusterLogAnalyticsProfileArgs{...}
type ClusterLogAnalyticsProfileInput interface {
	pulumi.Input

	ToClusterLogAnalyticsProfileOutput() ClusterLogAnalyticsProfileOutput
	ToClusterLogAnalyticsProfileOutputWithContext(context.Context) ClusterLogAnalyticsProfileOutput
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileArgs struct {
	// Collection of logs to be enabled or disabled for log analytics.
	ApplicationLogs ClusterLogAnalyticsApplicationLogsPtrInput `pulumi:"applicationLogs"`
	// True if log analytics is enabled for the cluster, otherwise false.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// True if metrics are enabled, otherwise false.
	MetricsEnabled pulumi.BoolPtrInput `pulumi:"metricsEnabled"`
}

func (ClusterLogAnalyticsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfileOutput() ClusterLogAnalyticsProfileOutput {
	return i.ToClusterLogAnalyticsProfileOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsProfileOutput)
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return i.ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsProfileOutput).ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx)
}

// ClusterLogAnalyticsProfilePtrInput is an input type that accepts ClusterLogAnalyticsProfileArgs, ClusterLogAnalyticsProfilePtr and ClusterLogAnalyticsProfilePtrOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsProfilePtrInput` via:
//
//	        ClusterLogAnalyticsProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterLogAnalyticsProfilePtrInput interface {
	pulumi.Input

	ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput
	ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Context) ClusterLogAnalyticsProfilePtrOutput
}

type clusterLogAnalyticsProfilePtrType ClusterLogAnalyticsProfileArgs

func ClusterLogAnalyticsProfilePtr(v *ClusterLogAnalyticsProfileArgs) ClusterLogAnalyticsProfilePtrInput {
	return (*clusterLogAnalyticsProfilePtrType)(v)
}

func (*clusterLogAnalyticsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (i *clusterLogAnalyticsProfilePtrType) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return i.ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i *clusterLogAnalyticsProfilePtrType) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsProfilePtrOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfileOutput() ClusterLogAnalyticsProfileOutput {
	return o
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileOutput {
	return o
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return o.ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLogAnalyticsProfile) *ClusterLogAnalyticsProfile {
		return &v
	}).(ClusterLogAnalyticsProfilePtrOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfileOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfile) *ClusterLogAnalyticsApplicationLogs { return v.ApplicationLogs }).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfileOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfile) *bool { return v.MetricsEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfilePtrOutput) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfilePtrOutput) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfilePtrOutput) Elem() ClusterLogAnalyticsProfileOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) ClusterLogAnalyticsProfile {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsProfile
		return ret
	}).(ClusterLogAnalyticsProfileOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfilePtrOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) *ClusterLogAnalyticsApplicationLogs {
		if v == nil {
			return nil
		}
		return v.ApplicationLogs
	}).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfilePtrOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return v.MetricsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileResponse struct {
	// Collection of logs to be enabled or disabled for log analytics.
	ApplicationLogs *ClusterLogAnalyticsApplicationLogsResponse `pulumi:"applicationLogs"`
	// True if log analytics is enabled for the cluster, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// True if metrics are enabled, otherwise false.
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsProfileResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfileResponseOutput) ToClusterLogAnalyticsProfileResponseOutput() ClusterLogAnalyticsProfileResponseOutput {
	return o
}

func (o ClusterLogAnalyticsProfileResponseOutput) ToClusterLogAnalyticsProfileResponseOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileResponseOutput {
	return o
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfileResponseOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfileResponse) *ClusterLogAnalyticsApplicationLogsResponse {
		return v.ApplicationLogs
	}).(ClusterLogAnalyticsApplicationLogsResponsePtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfileResponseOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfileResponse) *bool { return v.MetricsEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsProfileResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfileResponsePtrOutput) ToClusterLogAnalyticsProfileResponsePtrOutput() ClusterLogAnalyticsProfileResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfileResponsePtrOutput) ToClusterLogAnalyticsProfileResponsePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfileResponsePtrOutput) Elem() ClusterLogAnalyticsProfileResponseOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) ClusterLogAnalyticsProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsProfileResponse
		return ret
	}).(ClusterLogAnalyticsProfileResponseOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfileResponsePtrOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) *ClusterLogAnalyticsApplicationLogsResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationLogs
	}).(ClusterLogAnalyticsApplicationLogsResponsePtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfileResponsePtrOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MetricsEnabled
	}).(pulumi.BoolPtrOutput)
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesClusterPoolProfile struct {
	// Cluster pool version is a 2-part version.
	ClusterPoolVersion string `pulumi:"clusterPoolVersion"`
}

// ClusterPoolResourcePropertiesClusterPoolProfileInput is an input type that accepts ClusterPoolResourcePropertiesClusterPoolProfileArgs and ClusterPoolResourcePropertiesClusterPoolProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesClusterPoolProfileInput` via:
//
//	ClusterPoolResourcePropertiesClusterPoolProfileArgs{...}
type ClusterPoolResourcePropertiesClusterPoolProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesClusterPoolProfileOutput() ClusterPoolResourcePropertiesClusterPoolProfileOutput
	ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesClusterPoolProfileOutput
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesClusterPoolProfileArgs struct {
	// Cluster pool version is a 2-part version.
	ClusterPoolVersion pulumi.StringInput `pulumi:"clusterPoolVersion"`
}

func (ClusterPoolResourcePropertiesClusterPoolProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfileOutput() ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return i.ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesClusterPoolProfileOutput)
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesClusterPoolProfileOutput).ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx)
}

// ClusterPoolResourcePropertiesClusterPoolProfilePtrInput is an input type that accepts ClusterPoolResourcePropertiesClusterPoolProfileArgs, ClusterPoolResourcePropertiesClusterPoolProfilePtr and ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesClusterPoolProfilePtrInput` via:
//
//	        ClusterPoolResourcePropertiesClusterPoolProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolResourcePropertiesClusterPoolProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput
	ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput
}

type clusterPoolResourcePropertiesClusterPoolProfilePtrType ClusterPoolResourcePropertiesClusterPoolProfileArgs

func ClusterPoolResourcePropertiesClusterPoolProfilePtr(v *ClusterPoolResourcePropertiesClusterPoolProfileArgs) ClusterPoolResourcePropertiesClusterPoolProfilePtrInput {
	return (*clusterPoolResourcePropertiesClusterPoolProfilePtrType)(v)
}

func (*clusterPoolResourcePropertiesClusterPoolProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (i *clusterPoolResourcePropertiesClusterPoolProfilePtrType) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolResourcePropertiesClusterPoolProfilePtrType) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput)
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesClusterPoolProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesClusterPoolProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfileOutput() ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o.ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolResourcePropertiesClusterPoolProfile) *ClusterPoolResourcePropertiesClusterPoolProfile {
		return &v
	}).(ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput)
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ClusterPoolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesClusterPoolProfile) string { return v.ClusterPoolVersion }).(pulumi.StringOutput)
}

type ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) Elem() ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesClusterPoolProfile) ClusterPoolResourcePropertiesClusterPoolProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesClusterPoolProfile
		return ret
	}).(ClusterPoolResourcePropertiesClusterPoolProfileOutput)
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ClusterPoolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesClusterPoolProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterPoolVersion
	}).(pulumi.StringPtrOutput)
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesComputeProfile struct {
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// ClusterPoolResourcePropertiesComputeProfileInput is an input type that accepts ClusterPoolResourcePropertiesComputeProfileArgs and ClusterPoolResourcePropertiesComputeProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesComputeProfileInput` via:
//
//	ClusterPoolResourcePropertiesComputeProfileArgs{...}
type ClusterPoolResourcePropertiesComputeProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesComputeProfileOutput() ClusterPoolResourcePropertiesComputeProfileOutput
	ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesComputeProfileOutput
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesComputeProfileArgs struct {
	// The virtual machine SKU.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (ClusterPoolResourcePropertiesComputeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesComputeProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesComputeProfileArgs) ToClusterPoolResourcePropertiesComputeProfileOutput() ClusterPoolResourcePropertiesComputeProfileOutput {
	return i.ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesComputeProfileArgs) ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesComputeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesComputeProfileOutput)
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesComputeProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesComputeProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesComputeProfileOutput) ToClusterPoolResourcePropertiesComputeProfileOutput() ClusterPoolResourcePropertiesComputeProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesComputeProfileOutput) ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesComputeProfileOutput {
	return o
}

// The virtual machine SKU.
func (o ClusterPoolResourcePropertiesComputeProfileOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesComputeProfile) string { return v.VmSize }).(pulumi.StringOutput)
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesLogAnalyticsProfile struct {
	// True if log analytics is enabled for cluster pool, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// Log analytics workspace to associate with the OMS agent.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// ClusterPoolResourcePropertiesLogAnalyticsProfileInput is an input type that accepts ClusterPoolResourcePropertiesLogAnalyticsProfileArgs and ClusterPoolResourcePropertiesLogAnalyticsProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesLogAnalyticsProfileInput` via:
//
//	ClusterPoolResourcePropertiesLogAnalyticsProfileArgs{...}
type ClusterPoolResourcePropertiesLogAnalyticsProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput
	ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfileOutput
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesLogAnalyticsProfileArgs struct {
	// True if log analytics is enabled for cluster pool, otherwise false.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Log analytics workspace to associate with the OMS agent.
	WorkspaceId pulumi.StringPtrInput `pulumi:"workspaceId"`
}

func (ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return i.ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput)
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput).ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx)
}

// ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput is an input type that accepts ClusterPoolResourcePropertiesLogAnalyticsProfileArgs, ClusterPoolResourcePropertiesLogAnalyticsProfilePtr and ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput` via:
//
//	        ClusterPoolResourcePropertiesLogAnalyticsProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput
	ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput
}

type clusterPoolResourcePropertiesLogAnalyticsProfilePtrType ClusterPoolResourcePropertiesLogAnalyticsProfileArgs

func ClusterPoolResourcePropertiesLogAnalyticsProfilePtr(v *ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput {
	return (*clusterPoolResourcePropertiesLogAnalyticsProfilePtrType)(v)
}

func (*clusterPoolResourcePropertiesLogAnalyticsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (i *clusterPoolResourcePropertiesLogAnalyticsProfilePtrType) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolResourcePropertiesLogAnalyticsProfilePtrType) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput)
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesLogAnalyticsProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o.ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolResourcePropertiesLogAnalyticsProfile) *ClusterPoolResourcePropertiesLogAnalyticsProfile {
		return &v
	}).(ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput)
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesLogAnalyticsProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesLogAnalyticsProfile) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) Elem() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesLogAnalyticsProfile) ClusterPoolResourcePropertiesLogAnalyticsProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesLogAnalyticsProfile
		return ret
	}).(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput)
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesLogAnalyticsProfile) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesNetworkProfile struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
	ApiServerAuthorizedIpRanges []string `pulumi:"apiServerAuthorizedIpRanges"`
	// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
	EnablePrivateApiServer *bool `pulumi:"enablePrivateApiServer"`
	// This can only be set at cluster pool creation time and cannot be changed later.
	OutboundType *string `pulumi:"outboundType"`
	// Cluster pool subnet resource id.
	SubnetId string `pulumi:"subnetId"`
}

// Defaults sets the appropriate defaults for ClusterPoolResourcePropertiesNetworkProfile
func (val *ClusterPoolResourcePropertiesNetworkProfile) Defaults() *ClusterPoolResourcePropertiesNetworkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OutboundType == nil {
		outboundType_ := "loadBalancer"
		tmp.OutboundType = &outboundType_
	}
	return &tmp
}

// ClusterPoolResourcePropertiesNetworkProfileInput is an input type that accepts ClusterPoolResourcePropertiesNetworkProfileArgs and ClusterPoolResourcePropertiesNetworkProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesNetworkProfileInput` via:
//
//	ClusterPoolResourcePropertiesNetworkProfileArgs{...}
type ClusterPoolResourcePropertiesNetworkProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesNetworkProfileOutput() ClusterPoolResourcePropertiesNetworkProfileOutput
	ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesNetworkProfileOutput
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesNetworkProfileArgs struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
	ApiServerAuthorizedIpRanges pulumi.StringArrayInput `pulumi:"apiServerAuthorizedIpRanges"`
	// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
	EnablePrivateApiServer pulumi.BoolPtrInput `pulumi:"enablePrivateApiServer"`
	// This can only be set at cluster pool creation time and cannot be changed later.
	OutboundType pulumi.StringPtrInput `pulumi:"outboundType"`
	// Cluster pool subnet resource id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

// Defaults sets the appropriate defaults for ClusterPoolResourcePropertiesNetworkProfileArgs
func (val *ClusterPoolResourcePropertiesNetworkProfileArgs) Defaults() *ClusterPoolResourcePropertiesNetworkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OutboundType == nil {
		tmp.OutboundType = pulumi.StringPtr("loadBalancer")
	}
	return &tmp
}
func (ClusterPoolResourcePropertiesNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfileOutput() ClusterPoolResourcePropertiesNetworkProfileOutput {
	return i.ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesNetworkProfileOutput)
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesNetworkProfileOutput).ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx)
}

// ClusterPoolResourcePropertiesNetworkProfilePtrInput is an input type that accepts ClusterPoolResourcePropertiesNetworkProfileArgs, ClusterPoolResourcePropertiesNetworkProfilePtr and ClusterPoolResourcePropertiesNetworkProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesNetworkProfilePtrInput` via:
//
//	        ClusterPoolResourcePropertiesNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolResourcePropertiesNetworkProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput
	ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput
}

type clusterPoolResourcePropertiesNetworkProfilePtrType ClusterPoolResourcePropertiesNetworkProfileArgs

func ClusterPoolResourcePropertiesNetworkProfilePtr(v *ClusterPoolResourcePropertiesNetworkProfileArgs) ClusterPoolResourcePropertiesNetworkProfilePtrInput {
	return (*clusterPoolResourcePropertiesNetworkProfilePtrType)(v)
}

func (*clusterPoolResourcePropertiesNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (i *clusterPoolResourcePropertiesNetworkProfilePtrType) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolResourcePropertiesNetworkProfilePtrType) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesNetworkProfilePtrOutput)
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesNetworkProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfileOutput() ClusterPoolResourcePropertiesNetworkProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o.ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolResourcePropertiesNetworkProfile) *ClusterPoolResourcePropertiesNetworkProfile {
		return &v
	}).(ClusterPoolResourcePropertiesNetworkProfilePtrOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) []string { return v.ApiServerAuthorizedIpRanges }).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) *bool { return v.EnablePrivateApiServer }).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ClusterPoolResourcePropertiesNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) Elem() ClusterPoolResourcePropertiesNetworkProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) ClusterPoolResourcePropertiesNetworkProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesNetworkProfile
		return ret
	}).(ClusterPoolResourcePropertiesNetworkProfileOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ApiServerAuthorizedIpRanges
	}).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateApiServer
	}).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Properties of underlying AKS cluster.
type ClusterPoolResourcePropertiesResponseAksClusterProfile struct {
	// Identity properties of the AKS cluster agentpool MSI
	AksClusterAgentPoolIdentityProfile *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile `pulumi:"aksClusterAgentPoolIdentityProfile"`
	// ARM Resource ID of the AKS cluster
	AksClusterResourceId *string `pulumi:"aksClusterResourceId"`
	// AKS control plane and default node pool version of this ClusterPool
	AksVersion string `pulumi:"aksVersion"`
}

// Properties of underlying AKS cluster.
type ClusterPoolResourcePropertiesResponseAksClusterProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseAksClusterProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) ToClusterPoolResourcePropertiesResponseAksClusterProfileOutput() ClusterPoolResourcePropertiesResponseAksClusterProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) ToClusterPoolResourcePropertiesResponseAksClusterProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseAksClusterProfileOutput {
	return o
}

// Identity properties of the AKS cluster agentpool MSI
func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) AksClusterAgentPoolIdentityProfile() AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseAksClusterProfile) *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile {
		return v.AksClusterAgentPoolIdentityProfile
	}).(AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput)
}

// ARM Resource ID of the AKS cluster
func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) AksClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseAksClusterProfile) *string { return v.AksClusterResourceId }).(pulumi.StringPtrOutput)
}

// AKS control plane and default node pool version of this ClusterPool
func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) AksVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseAksClusterProfile) string { return v.AksVersion }).(pulumi.StringOutput)
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesResponseClusterPoolProfile struct {
	// Cluster pool version is a 2-part version.
	ClusterPoolVersion string `pulumi:"clusterPoolVersion"`
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfileOutput() ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput {
	return o
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ClusterPoolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseClusterPoolProfile) string { return v.ClusterPoolVersion }).(pulumi.StringOutput)
}

type ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesResponseClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) Elem() ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseClusterPoolProfile) ClusterPoolResourcePropertiesResponseClusterPoolProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesResponseClusterPoolProfile
		return ret
	}).(ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput)
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ClusterPoolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseClusterPoolProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterPoolVersion
	}).(pulumi.StringPtrOutput)
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesResponseComputeProfile struct {
	// The number of virtual machines.
	Count int `pulumi:"count"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesResponseComputeProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseComputeProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) ToClusterPoolResourcePropertiesResponseComputeProfileOutput() ClusterPoolResourcePropertiesResponseComputeProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) ToClusterPoolResourcePropertiesResponseComputeProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseComputeProfileOutput {
	return o
}

// The number of virtual machines.
func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseComputeProfile) int { return v.Count }).(pulumi.IntOutput)
}

// The virtual machine SKU.
func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseComputeProfile) string { return v.VmSize }).(pulumi.StringOutput)
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesResponseLogAnalyticsProfile struct {
	// True if log analytics is enabled for cluster pool, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// Log analytics workspace to associate with the OMS agent.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput {
	return o
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesResponseLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) Elem() ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) ClusterPoolResourcePropertiesResponseLogAnalyticsProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesResponseLogAnalyticsProfile
		return ret
	}).(ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput)
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesResponseNetworkProfile struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
	ApiServerAuthorizedIpRanges []string `pulumi:"apiServerAuthorizedIpRanges"`
	// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
	EnablePrivateApiServer *bool `pulumi:"enablePrivateApiServer"`
	// This can only be set at cluster pool creation time and cannot be changed later.
	OutboundType *string `pulumi:"outboundType"`
	// Cluster pool subnet resource id.
	SubnetId string `pulumi:"subnetId"`
}

// Defaults sets the appropriate defaults for ClusterPoolResourcePropertiesResponseNetworkProfile
func (val *ClusterPoolResourcePropertiesResponseNetworkProfile) Defaults() *ClusterPoolResourcePropertiesResponseNetworkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OutboundType == nil {
		outboundType_ := "loadBalancer"
		tmp.OutboundType = &outboundType_
	}
	return &tmp
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesResponseNetworkProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ToClusterPoolResourcePropertiesResponseNetworkProfileOutput() ClusterPoolResourcePropertiesResponseNetworkProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ToClusterPoolResourcePropertiesResponseNetworkProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseNetworkProfileOutput {
	return o
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) []string {
		return v.ApiServerAuthorizedIpRanges
	}).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) *bool { return v.EnablePrivateApiServer }).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesResponseNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput() ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesResponseNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) Elem() ClusterPoolResourcePropertiesResponseNetworkProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) ClusterPoolResourcePropertiesResponseNetworkProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesResponseNetworkProfile
		return ret
	}).(ClusterPoolResourcePropertiesResponseNetworkProfileOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ApiServerAuthorizedIpRanges
	}).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateApiServer
	}).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Cluster profile.
type ClusterProfile struct {
	// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
	AuthorizationProfile AuthorizationProfile `pulumi:"authorizationProfile"`
	// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
	AutoscaleProfile *AutoscaleProfile `pulumi:"autoscaleProfile"`
	// Cluster access profile.
	ClusterAccessProfile *ClusterAccessProfile `pulumi:"clusterAccessProfile"`
	// Version with 3/4 part.
	ClusterVersion string `pulumi:"clusterVersion"`
	// The Flink cluster profile.
	FlinkProfile *FlinkProfile `pulumi:"flinkProfile"`
	// This is deprecated. Please use managed identity profile instead.
	IdentityProfile *IdentityProfile `pulumi:"identityProfile"`
	// The Kafka cluster profile.
	KafkaProfile *KafkaProfile `pulumi:"kafkaProfile"`
	// LLAP cluster profile.
	LlapProfile interface{} `pulumi:"llapProfile"`
	// Cluster log analytics profile to enable or disable OMS agent for cluster.
	LogAnalyticsProfile *ClusterLogAnalyticsProfile `pulumi:"logAnalyticsProfile"`
	// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
	ManagedIdentityProfile *ManagedIdentityProfile `pulumi:"managedIdentityProfile"`
	// Version with three part.
	OssVersion string `pulumi:"ossVersion"`
	// Cluster Prometheus profile.
	PrometheusProfile *ClusterPrometheusProfile `pulumi:"prometheusProfile"`
	// Cluster Ranger plugin profile.
	RangerPluginProfile *ClusterRangerPluginProfile `pulumi:"rangerPluginProfile"`
	// The ranger cluster profile.
	RangerProfile *RangerProfile `pulumi:"rangerProfile"`
	// The script action profile list.
	ScriptActionProfiles []ScriptActionProfile `pulumi:"scriptActionProfiles"`
	// The cluster secret profile.
	SecretsProfile *SecretsProfile `pulumi:"secretsProfile"`
	// The service configs profiles.
	ServiceConfigsProfiles []ClusterServiceConfigsProfile `pulumi:"serviceConfigsProfiles"`
	// The spark cluster profile.
	SparkProfile *SparkProfile `pulumi:"sparkProfile"`
	// Ssh profile for the cluster.
	SshProfile *SshProfile `pulumi:"sshProfile"`
	// Stub cluster profile.
	StubProfile interface{} `pulumi:"stubProfile"`
	// Trino Cluster profile.
	TrinoProfile *TrinoProfile `pulumi:"trinoProfile"`
}

// Defaults sets the appropriate defaults for ClusterProfile
func (val *ClusterProfile) Defaults() *ClusterProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FlinkProfile = tmp.FlinkProfile.Defaults()

	tmp.KafkaProfile = tmp.KafkaProfile.Defaults()

	tmp.PrometheusProfile = tmp.PrometheusProfile.Defaults()

	tmp.RangerPluginProfile = tmp.RangerPluginProfile.Defaults()

	tmp.RangerProfile = tmp.RangerProfile.Defaults()

	tmp.SparkProfile = tmp.SparkProfile.Defaults()

	tmp.TrinoProfile = tmp.TrinoProfile.Defaults()

	return &tmp
}

// ClusterProfileInput is an input type that accepts ClusterProfileArgs and ClusterProfileOutput values.
// You can construct a concrete instance of `ClusterProfileInput` via:
//
//	ClusterProfileArgs{...}
type ClusterProfileInput interface {
	pulumi.Input

	ToClusterProfileOutput() ClusterProfileOutput
	ToClusterProfileOutputWithContext(context.Context) ClusterProfileOutput
}

// Cluster profile.
type ClusterProfileArgs struct {
	// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
	AuthorizationProfile AuthorizationProfileInput `pulumi:"authorizationProfile"`
	// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
	AutoscaleProfile AutoscaleProfilePtrInput `pulumi:"autoscaleProfile"`
	// Cluster access profile.
	ClusterAccessProfile ClusterAccessProfilePtrInput `pulumi:"clusterAccessProfile"`
	// Version with 3/4 part.
	ClusterVersion pulumi.StringInput `pulumi:"clusterVersion"`
	// The Flink cluster profile.
	FlinkProfile FlinkProfilePtrInput `pulumi:"flinkProfile"`
	// This is deprecated. Please use managed identity profile instead.
	IdentityProfile IdentityProfilePtrInput `pulumi:"identityProfile"`
	// The Kafka cluster profile.
	KafkaProfile KafkaProfilePtrInput `pulumi:"kafkaProfile"`
	// LLAP cluster profile.
	LlapProfile pulumi.Input `pulumi:"llapProfile"`
	// Cluster log analytics profile to enable or disable OMS agent for cluster.
	LogAnalyticsProfile ClusterLogAnalyticsProfilePtrInput `pulumi:"logAnalyticsProfile"`
	// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
	ManagedIdentityProfile ManagedIdentityProfilePtrInput `pulumi:"managedIdentityProfile"`
	// Version with three part.
	OssVersion pulumi.StringInput `pulumi:"ossVersion"`
	// Cluster Prometheus profile.
	PrometheusProfile ClusterPrometheusProfilePtrInput `pulumi:"prometheusProfile"`
	// Cluster Ranger plugin profile.
	RangerPluginProfile ClusterRangerPluginProfilePtrInput `pulumi:"rangerPluginProfile"`
	// The ranger cluster profile.
	RangerProfile RangerProfilePtrInput `pulumi:"rangerProfile"`
	// The script action profile list.
	ScriptActionProfiles ScriptActionProfileArrayInput `pulumi:"scriptActionProfiles"`
	// The cluster secret profile.
	SecretsProfile SecretsProfilePtrInput `pulumi:"secretsProfile"`
	// The service configs profiles.
	ServiceConfigsProfiles ClusterServiceConfigsProfileArrayInput `pulumi:"serviceConfigsProfiles"`
	// The spark cluster profile.
	SparkProfile SparkProfilePtrInput `pulumi:"sparkProfile"`
	// Ssh profile for the cluster.
	SshProfile SshProfilePtrInput `pulumi:"sshProfile"`
	// Stub cluster profile.
	StubProfile pulumi.Input `pulumi:"stubProfile"`
	// Trino Cluster profile.
	TrinoProfile TrinoProfilePtrInput `pulumi:"trinoProfile"`
}

// Defaults sets the appropriate defaults for ClusterProfileArgs
func (val *ClusterProfileArgs) Defaults() *ClusterProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ClusterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfile)(nil)).Elem()
}

func (i ClusterProfileArgs) ToClusterProfileOutput() ClusterProfileOutput {
	return i.ToClusterProfileOutputWithContext(context.Background())
}

func (i ClusterProfileArgs) ToClusterProfileOutputWithContext(ctx context.Context) ClusterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProfileOutput)
}

// Cluster profile.
type ClusterProfileOutput struct{ *pulumi.OutputState }

func (ClusterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfile)(nil)).Elem()
}

func (o ClusterProfileOutput) ToClusterProfileOutput() ClusterProfileOutput {
	return o
}

func (o ClusterProfileOutput) ToClusterProfileOutputWithContext(ctx context.Context) ClusterProfileOutput {
	return o
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
func (o ClusterProfileOutput) AuthorizationProfile() AuthorizationProfileOutput {
	return o.ApplyT(func(v ClusterProfile) AuthorizationProfile { return v.AuthorizationProfile }).(AuthorizationProfileOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
func (o ClusterProfileOutput) AutoscaleProfile() AutoscaleProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *AutoscaleProfile { return v.AutoscaleProfile }).(AutoscaleProfilePtrOutput)
}

// Cluster access profile.
func (o ClusterProfileOutput) ClusterAccessProfile() ClusterAccessProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterAccessProfile { return v.ClusterAccessProfile }).(ClusterAccessProfilePtrOutput)
}

// Version with 3/4 part.
func (o ClusterProfileOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfile) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

// The Flink cluster profile.
func (o ClusterProfileOutput) FlinkProfile() FlinkProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *FlinkProfile { return v.FlinkProfile }).(FlinkProfilePtrOutput)
}

// This is deprecated. Please use managed identity profile instead.
func (o ClusterProfileOutput) IdentityProfile() IdentityProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *IdentityProfile { return v.IdentityProfile }).(IdentityProfilePtrOutput)
}

// The Kafka cluster profile.
func (o ClusterProfileOutput) KafkaProfile() KafkaProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *KafkaProfile { return v.KafkaProfile }).(KafkaProfilePtrOutput)
}

// LLAP cluster profile.
func (o ClusterProfileOutput) LlapProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfile) interface{} { return v.LlapProfile }).(pulumi.AnyOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
func (o ClusterProfileOutput) LogAnalyticsProfile() ClusterLogAnalyticsProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterLogAnalyticsProfile { return v.LogAnalyticsProfile }).(ClusterLogAnalyticsProfilePtrOutput)
}

// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
func (o ClusterProfileOutput) ManagedIdentityProfile() ManagedIdentityProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ManagedIdentityProfile { return v.ManagedIdentityProfile }).(ManagedIdentityProfilePtrOutput)
}

// Version with three part.
func (o ClusterProfileOutput) OssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfile) string { return v.OssVersion }).(pulumi.StringOutput)
}

// Cluster Prometheus profile.
func (o ClusterProfileOutput) PrometheusProfile() ClusterPrometheusProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterPrometheusProfile { return v.PrometheusProfile }).(ClusterPrometheusProfilePtrOutput)
}

// Cluster Ranger plugin profile.
func (o ClusterProfileOutput) RangerPluginProfile() ClusterRangerPluginProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterRangerPluginProfile { return v.RangerPluginProfile }).(ClusterRangerPluginProfilePtrOutput)
}

// The ranger cluster profile.
func (o ClusterProfileOutput) RangerProfile() RangerProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *RangerProfile { return v.RangerProfile }).(RangerProfilePtrOutput)
}

// The script action profile list.
func (o ClusterProfileOutput) ScriptActionProfiles() ScriptActionProfileArrayOutput {
	return o.ApplyT(func(v ClusterProfile) []ScriptActionProfile { return v.ScriptActionProfiles }).(ScriptActionProfileArrayOutput)
}

// The cluster secret profile.
func (o ClusterProfileOutput) SecretsProfile() SecretsProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *SecretsProfile { return v.SecretsProfile }).(SecretsProfilePtrOutput)
}

// The service configs profiles.
func (o ClusterProfileOutput) ServiceConfigsProfiles() ClusterServiceConfigsProfileArrayOutput {
	return o.ApplyT(func(v ClusterProfile) []ClusterServiceConfigsProfile { return v.ServiceConfigsProfiles }).(ClusterServiceConfigsProfileArrayOutput)
}

// The spark cluster profile.
func (o ClusterProfileOutput) SparkProfile() SparkProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *SparkProfile { return v.SparkProfile }).(SparkProfilePtrOutput)
}

// Ssh profile for the cluster.
func (o ClusterProfileOutput) SshProfile() SshProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *SshProfile { return v.SshProfile }).(SshProfilePtrOutput)
}

// Stub cluster profile.
func (o ClusterProfileOutput) StubProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfile) interface{} { return v.StubProfile }).(pulumi.AnyOutput)
}

// Trino Cluster profile.
func (o ClusterProfileOutput) TrinoProfile() TrinoProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *TrinoProfile { return v.TrinoProfile }).(TrinoProfilePtrOutput)
}

// Cluster profile.
type ClusterProfileResponse struct {
	// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
	AuthorizationProfile AuthorizationProfileResponse `pulumi:"authorizationProfile"`
	// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
	AutoscaleProfile *AutoscaleProfileResponse `pulumi:"autoscaleProfile"`
	// Cluster access profile.
	ClusterAccessProfile *ClusterAccessProfileResponse `pulumi:"clusterAccessProfile"`
	// Version with 3/4 part.
	ClusterVersion string `pulumi:"clusterVersion"`
	// Component list of this cluster type and version.
	Components []ClusterProfileResponseComponents `pulumi:"components"`
	// Cluster connectivity profile.
	ConnectivityProfile ConnectivityProfileResponse `pulumi:"connectivityProfile"`
	// The Flink cluster profile.
	FlinkProfile *FlinkProfileResponse `pulumi:"flinkProfile"`
	// This is deprecated. Please use managed identity profile instead.
	IdentityProfile *IdentityProfileResponse `pulumi:"identityProfile"`
	// The Kafka cluster profile.
	KafkaProfile *KafkaProfileResponse `pulumi:"kafkaProfile"`
	// LLAP cluster profile.
	LlapProfile interface{} `pulumi:"llapProfile"`
	// Cluster log analytics profile to enable or disable OMS agent for cluster.
	LogAnalyticsProfile *ClusterLogAnalyticsProfileResponse `pulumi:"logAnalyticsProfile"`
	// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
	ManagedIdentityProfile *ManagedIdentityProfileResponse `pulumi:"managedIdentityProfile"`
	// Version with three part.
	OssVersion string `pulumi:"ossVersion"`
	// Cluster Prometheus profile.
	PrometheusProfile *ClusterPrometheusProfileResponse `pulumi:"prometheusProfile"`
	// Cluster Ranger plugin profile.
	RangerPluginProfile *ClusterRangerPluginProfileResponse `pulumi:"rangerPluginProfile"`
	// The ranger cluster profile.
	RangerProfile *RangerProfileResponse `pulumi:"rangerProfile"`
	// The script action profile list.
	ScriptActionProfiles []ScriptActionProfileResponse `pulumi:"scriptActionProfiles"`
	// The cluster secret profile.
	SecretsProfile *SecretsProfileResponse `pulumi:"secretsProfile"`
	// The service configs profiles.
	ServiceConfigsProfiles []ClusterServiceConfigsProfileResponse `pulumi:"serviceConfigsProfiles"`
	// The spark cluster profile.
	SparkProfile *SparkProfileResponse `pulumi:"sparkProfile"`
	// Ssh profile for the cluster.
	SshProfile *SshProfileResponse `pulumi:"sshProfile"`
	// Stub cluster profile.
	StubProfile interface{} `pulumi:"stubProfile"`
	// Trino Cluster profile.
	TrinoProfile *TrinoProfileResponse `pulumi:"trinoProfile"`
}

// Defaults sets the appropriate defaults for ClusterProfileResponse
func (val *ClusterProfileResponse) Defaults() *ClusterProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FlinkProfile = tmp.FlinkProfile.Defaults()

	tmp.KafkaProfile = tmp.KafkaProfile.Defaults()

	tmp.PrometheusProfile = tmp.PrometheusProfile.Defaults()

	tmp.RangerPluginProfile = tmp.RangerPluginProfile.Defaults()

	tmp.RangerProfile = tmp.RangerProfile.Defaults()

	tmp.SparkProfile = tmp.SparkProfile.Defaults()

	tmp.TrinoProfile = tmp.TrinoProfile.Defaults()

	return &tmp
}

// Cluster profile.
type ClusterProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfileResponse)(nil)).Elem()
}

func (o ClusterProfileResponseOutput) ToClusterProfileResponseOutput() ClusterProfileResponseOutput {
	return o
}

func (o ClusterProfileResponseOutput) ToClusterProfileResponseOutputWithContext(ctx context.Context) ClusterProfileResponseOutput {
	return o
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
func (o ClusterProfileResponseOutput) AuthorizationProfile() AuthorizationProfileResponseOutput {
	return o.ApplyT(func(v ClusterProfileResponse) AuthorizationProfileResponse { return v.AuthorizationProfile }).(AuthorizationProfileResponseOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
func (o ClusterProfileResponseOutput) AutoscaleProfile() AutoscaleProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *AutoscaleProfileResponse { return v.AutoscaleProfile }).(AutoscaleProfileResponsePtrOutput)
}

// Cluster access profile.
func (o ClusterProfileResponseOutput) ClusterAccessProfile() ClusterAccessProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterAccessProfileResponse { return v.ClusterAccessProfile }).(ClusterAccessProfileResponsePtrOutput)
}

// Version with 3/4 part.
func (o ClusterProfileResponseOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfileResponse) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

// Component list of this cluster type and version.
func (o ClusterProfileResponseOutput) Components() ClusterProfileResponseComponentsArrayOutput {
	return o.ApplyT(func(v ClusterProfileResponse) []ClusterProfileResponseComponents { return v.Components }).(ClusterProfileResponseComponentsArrayOutput)
}

// Cluster connectivity profile.
func (o ClusterProfileResponseOutput) ConnectivityProfile() ConnectivityProfileResponseOutput {
	return o.ApplyT(func(v ClusterProfileResponse) ConnectivityProfileResponse { return v.ConnectivityProfile }).(ConnectivityProfileResponseOutput)
}

// The Flink cluster profile.
func (o ClusterProfileResponseOutput) FlinkProfile() FlinkProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *FlinkProfileResponse { return v.FlinkProfile }).(FlinkProfileResponsePtrOutput)
}

// This is deprecated. Please use managed identity profile instead.
func (o ClusterProfileResponseOutput) IdentityProfile() IdentityProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *IdentityProfileResponse { return v.IdentityProfile }).(IdentityProfileResponsePtrOutput)
}

// The Kafka cluster profile.
func (o ClusterProfileResponseOutput) KafkaProfile() KafkaProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *KafkaProfileResponse { return v.KafkaProfile }).(KafkaProfileResponsePtrOutput)
}

// LLAP cluster profile.
func (o ClusterProfileResponseOutput) LlapProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfileResponse) interface{} { return v.LlapProfile }).(pulumi.AnyOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
func (o ClusterProfileResponseOutput) LogAnalyticsProfile() ClusterLogAnalyticsProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterLogAnalyticsProfileResponse { return v.LogAnalyticsProfile }).(ClusterLogAnalyticsProfileResponsePtrOutput)
}

// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
func (o ClusterProfileResponseOutput) ManagedIdentityProfile() ManagedIdentityProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ManagedIdentityProfileResponse { return v.ManagedIdentityProfile }).(ManagedIdentityProfileResponsePtrOutput)
}

// Version with three part.
func (o ClusterProfileResponseOutput) OssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfileResponse) string { return v.OssVersion }).(pulumi.StringOutput)
}

// Cluster Prometheus profile.
func (o ClusterProfileResponseOutput) PrometheusProfile() ClusterPrometheusProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterPrometheusProfileResponse { return v.PrometheusProfile }).(ClusterPrometheusProfileResponsePtrOutput)
}

// Cluster Ranger plugin profile.
func (o ClusterProfileResponseOutput) RangerPluginProfile() ClusterRangerPluginProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterRangerPluginProfileResponse { return v.RangerPluginProfile }).(ClusterRangerPluginProfileResponsePtrOutput)
}

// The ranger cluster profile.
func (o ClusterProfileResponseOutput) RangerProfile() RangerProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *RangerProfileResponse { return v.RangerProfile }).(RangerProfileResponsePtrOutput)
}

// The script action profile list.
func (o ClusterProfileResponseOutput) ScriptActionProfiles() ScriptActionProfileResponseArrayOutput {
	return o.ApplyT(func(v ClusterProfileResponse) []ScriptActionProfileResponse { return v.ScriptActionProfiles }).(ScriptActionProfileResponseArrayOutput)
}

// The cluster secret profile.
func (o ClusterProfileResponseOutput) SecretsProfile() SecretsProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *SecretsProfileResponse { return v.SecretsProfile }).(SecretsProfileResponsePtrOutput)
}

// The service configs profiles.
func (o ClusterProfileResponseOutput) ServiceConfigsProfiles() ClusterServiceConfigsProfileResponseArrayOutput {
	return o.ApplyT(func(v ClusterProfileResponse) []ClusterServiceConfigsProfileResponse { return v.ServiceConfigsProfiles }).(ClusterServiceConfigsProfileResponseArrayOutput)
}

// The spark cluster profile.
func (o ClusterProfileResponseOutput) SparkProfile() SparkProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *SparkProfileResponse { return v.SparkProfile }).(SparkProfileResponsePtrOutput)
}

// Ssh profile for the cluster.
func (o ClusterProfileResponseOutput) SshProfile() SshProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *SshProfileResponse { return v.SshProfile }).(SshProfileResponsePtrOutput)
}

// Stub cluster profile.
func (o ClusterProfileResponseOutput) StubProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfileResponse) interface{} { return v.StubProfile }).(pulumi.AnyOutput)
}

// Trino Cluster profile.
func (o ClusterProfileResponseOutput) TrinoProfile() TrinoProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *TrinoProfileResponse { return v.TrinoProfile }).(TrinoProfileResponsePtrOutput)
}

type ClusterProfileResponseComponents struct {
	Name    *string `pulumi:"name"`
	Version *string `pulumi:"version"`
}

type ClusterProfileResponseComponentsOutput struct{ *pulumi.OutputState }

func (ClusterProfileResponseComponentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfileResponseComponents)(nil)).Elem()
}

func (o ClusterProfileResponseComponentsOutput) ToClusterProfileResponseComponentsOutput() ClusterProfileResponseComponentsOutput {
	return o
}

func (o ClusterProfileResponseComponentsOutput) ToClusterProfileResponseComponentsOutputWithContext(ctx context.Context) ClusterProfileResponseComponentsOutput {
	return o
}

func (o ClusterProfileResponseComponentsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProfileResponseComponents) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClusterProfileResponseComponentsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProfileResponseComponents) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ClusterProfileResponseComponentsArrayOutput struct{ *pulumi.OutputState }

func (ClusterProfileResponseComponentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterProfileResponseComponents)(nil)).Elem()
}

func (o ClusterProfileResponseComponentsArrayOutput) ToClusterProfileResponseComponentsArrayOutput() ClusterProfileResponseComponentsArrayOutput {
	return o
}

func (o ClusterProfileResponseComponentsArrayOutput) ToClusterProfileResponseComponentsArrayOutputWithContext(ctx context.Context) ClusterProfileResponseComponentsArrayOutput {
	return o
}

func (o ClusterProfileResponseComponentsArrayOutput) Index(i pulumi.IntInput) ClusterProfileResponseComponentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterProfileResponseComponents {
		return vs[0].([]ClusterProfileResponseComponents)[vs[1].(int)]
	}).(ClusterProfileResponseComponentsOutput)
}

// Cluster Prometheus profile.
type ClusterPrometheusProfile struct {
	// Enable Prometheus for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterPrometheusProfile
func (val *ClusterPrometheusProfile) Defaults() *ClusterPrometheusProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// ClusterPrometheusProfileInput is an input type that accepts ClusterPrometheusProfileArgs and ClusterPrometheusProfileOutput values.
// You can construct a concrete instance of `ClusterPrometheusProfileInput` via:
//
//	ClusterPrometheusProfileArgs{...}
type ClusterPrometheusProfileInput interface {
	pulumi.Input

	ToClusterPrometheusProfileOutput() ClusterPrometheusProfileOutput
	ToClusterPrometheusProfileOutputWithContext(context.Context) ClusterPrometheusProfileOutput
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileArgs struct {
	// Enable Prometheus for cluster or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterPrometheusProfileArgs
func (val *ClusterPrometheusProfileArgs) Defaults() *ClusterPrometheusProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.Bool(false)
	}
	return &tmp
}
func (ClusterPrometheusProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheusProfile)(nil)).Elem()
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfileOutput() ClusterPrometheusProfileOutput {
	return i.ToClusterPrometheusProfileOutputWithContext(context.Background())
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfileOutputWithContext(ctx context.Context) ClusterPrometheusProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusProfileOutput)
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return i.ToClusterPrometheusProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusProfileOutput).ToClusterPrometheusProfilePtrOutputWithContext(ctx)
}

// ClusterPrometheusProfilePtrInput is an input type that accepts ClusterPrometheusProfileArgs, ClusterPrometheusProfilePtr and ClusterPrometheusProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPrometheusProfilePtrInput` via:
//
//	        ClusterPrometheusProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPrometheusProfilePtrInput interface {
	pulumi.Input

	ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput
	ToClusterPrometheusProfilePtrOutputWithContext(context.Context) ClusterPrometheusProfilePtrOutput
}

type clusterPrometheusProfilePtrType ClusterPrometheusProfileArgs

func ClusterPrometheusProfilePtr(v *ClusterPrometheusProfileArgs) ClusterPrometheusProfilePtrInput {
	return (*clusterPrometheusProfilePtrType)(v)
}

func (*clusterPrometheusProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheusProfile)(nil)).Elem()
}

func (i *clusterPrometheusProfilePtrType) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return i.ToClusterPrometheusProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPrometheusProfilePtrType) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusProfilePtrOutput)
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheusProfile)(nil)).Elem()
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfileOutput() ClusterPrometheusProfileOutput {
	return o
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfileOutputWithContext(ctx context.Context) ClusterPrometheusProfileOutput {
	return o
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return o.ToClusterPrometheusProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPrometheusProfile) *ClusterPrometheusProfile {
		return &v
	}).(ClusterPrometheusProfilePtrOutput)
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPrometheusProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterPrometheusProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheusProfile)(nil)).Elem()
}

func (o ClusterPrometheusProfilePtrOutput) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return o
}

func (o ClusterPrometheusProfilePtrOutput) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return o
}

func (o ClusterPrometheusProfilePtrOutput) Elem() ClusterPrometheusProfileOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfile) ClusterPrometheusProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPrometheusProfile
		return ret
	}).(ClusterPrometheusProfileOutput)
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileResponse struct {
	// Enable Prometheus for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterPrometheusProfileResponse
func (val *ClusterPrometheusProfileResponse) Defaults() *ClusterPrometheusProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheusProfileResponse)(nil)).Elem()
}

func (o ClusterPrometheusProfileResponseOutput) ToClusterPrometheusProfileResponseOutput() ClusterPrometheusProfileResponseOutput {
	return o
}

func (o ClusterPrometheusProfileResponseOutput) ToClusterPrometheusProfileResponseOutputWithContext(ctx context.Context) ClusterPrometheusProfileResponseOutput {
	return o
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPrometheusProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterPrometheusProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheusProfileResponse)(nil)).Elem()
}

func (o ClusterPrometheusProfileResponsePtrOutput) ToClusterPrometheusProfileResponsePtrOutput() ClusterPrometheusProfileResponsePtrOutput {
	return o
}

func (o ClusterPrometheusProfileResponsePtrOutput) ToClusterPrometheusProfileResponsePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfileResponsePtrOutput {
	return o
}

func (o ClusterPrometheusProfileResponsePtrOutput) Elem() ClusterPrometheusProfileResponseOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfileResponse) ClusterPrometheusProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterPrometheusProfileResponse
		return ret
	}).(ClusterPrometheusProfileResponseOutput)
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfile struct {
	// Enable Ranger for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterRangerPluginProfile
func (val *ClusterRangerPluginProfile) Defaults() *ClusterRangerPluginProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// ClusterRangerPluginProfileInput is an input type that accepts ClusterRangerPluginProfileArgs and ClusterRangerPluginProfileOutput values.
// You can construct a concrete instance of `ClusterRangerPluginProfileInput` via:
//
//	ClusterRangerPluginProfileArgs{...}
type ClusterRangerPluginProfileInput interface {
	pulumi.Input

	ToClusterRangerPluginProfileOutput() ClusterRangerPluginProfileOutput
	ToClusterRangerPluginProfileOutputWithContext(context.Context) ClusterRangerPluginProfileOutput
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileArgs struct {
	// Enable Ranger for cluster or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterRangerPluginProfileArgs
func (val *ClusterRangerPluginProfileArgs) Defaults() *ClusterRangerPluginProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.Bool(false)
	}
	return &tmp
}
func (ClusterRangerPluginProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRangerPluginProfile)(nil)).Elem()
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfileOutput() ClusterRangerPluginProfileOutput {
	return i.ToClusterRangerPluginProfileOutputWithContext(context.Background())
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfileOutputWithContext(ctx context.Context) ClusterRangerPluginProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRangerPluginProfileOutput)
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return i.ToClusterRangerPluginProfilePtrOutputWithContext(context.Background())
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRangerPluginProfileOutput).ToClusterRangerPluginProfilePtrOutputWithContext(ctx)
}

// ClusterRangerPluginProfilePtrInput is an input type that accepts ClusterRangerPluginProfileArgs, ClusterRangerPluginProfilePtr and ClusterRangerPluginProfilePtrOutput values.
// You can construct a concrete instance of `ClusterRangerPluginProfilePtrInput` via:
//
//	        ClusterRangerPluginProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterRangerPluginProfilePtrInput interface {
	pulumi.Input

	ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput
	ToClusterRangerPluginProfilePtrOutputWithContext(context.Context) ClusterRangerPluginProfilePtrOutput
}

type clusterRangerPluginProfilePtrType ClusterRangerPluginProfileArgs

func ClusterRangerPluginProfilePtr(v *ClusterRangerPluginProfileArgs) ClusterRangerPluginProfilePtrInput {
	return (*clusterRangerPluginProfilePtrType)(v)
}

func (*clusterRangerPluginProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRangerPluginProfile)(nil)).Elem()
}

func (i *clusterRangerPluginProfilePtrType) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return i.ToClusterRangerPluginProfilePtrOutputWithContext(context.Background())
}

func (i *clusterRangerPluginProfilePtrType) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRangerPluginProfilePtrOutput)
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRangerPluginProfile)(nil)).Elem()
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfileOutput() ClusterRangerPluginProfileOutput {
	return o
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfileOutputWithContext(ctx context.Context) ClusterRangerPluginProfileOutput {
	return o
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return o.ToClusterRangerPluginProfilePtrOutputWithContext(context.Background())
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterRangerPluginProfile) *ClusterRangerPluginProfile {
		return &v
	}).(ClusterRangerPluginProfilePtrOutput)
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterRangerPluginProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterRangerPluginProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRangerPluginProfile)(nil)).Elem()
}

func (o ClusterRangerPluginProfilePtrOutput) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return o
}

func (o ClusterRangerPluginProfilePtrOutput) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return o
}

func (o ClusterRangerPluginProfilePtrOutput) Elem() ClusterRangerPluginProfileOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfile) ClusterRangerPluginProfile {
		if v != nil {
			return *v
		}
		var ret ClusterRangerPluginProfile
		return ret
	}).(ClusterRangerPluginProfileOutput)
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileResponse struct {
	// Enable Ranger for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterRangerPluginProfileResponse
func (val *ClusterRangerPluginProfileResponse) Defaults() *ClusterRangerPluginProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRangerPluginProfileResponse)(nil)).Elem()
}

func (o ClusterRangerPluginProfileResponseOutput) ToClusterRangerPluginProfileResponseOutput() ClusterRangerPluginProfileResponseOutput {
	return o
}

func (o ClusterRangerPluginProfileResponseOutput) ToClusterRangerPluginProfileResponseOutputWithContext(ctx context.Context) ClusterRangerPluginProfileResponseOutput {
	return o
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterRangerPluginProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterRangerPluginProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRangerPluginProfileResponse)(nil)).Elem()
}

func (o ClusterRangerPluginProfileResponsePtrOutput) ToClusterRangerPluginProfileResponsePtrOutput() ClusterRangerPluginProfileResponsePtrOutput {
	return o
}

func (o ClusterRangerPluginProfileResponsePtrOutput) ToClusterRangerPluginProfileResponsePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfileResponsePtrOutput {
	return o
}

func (o ClusterRangerPluginProfileResponsePtrOutput) Elem() ClusterRangerPluginProfileResponseOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfileResponse) ClusterRangerPluginProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterRangerPluginProfileResponse
		return ret
	}).(ClusterRangerPluginProfileResponseOutput)
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster configs per component.
type ClusterServiceConfig struct {
	// Name of the component the config files should apply to.
	Component string `pulumi:"component"`
	// List of Config Files.
	Files []ClusterConfigFile `pulumi:"files"`
}

// ClusterServiceConfigInput is an input type that accepts ClusterServiceConfigArgs and ClusterServiceConfigOutput values.
// You can construct a concrete instance of `ClusterServiceConfigInput` via:
//
//	ClusterServiceConfigArgs{...}
type ClusterServiceConfigInput interface {
	pulumi.Input

	ToClusterServiceConfigOutput() ClusterServiceConfigOutput
	ToClusterServiceConfigOutputWithContext(context.Context) ClusterServiceConfigOutput
}

// Cluster configs per component.
type ClusterServiceConfigArgs struct {
	// Name of the component the config files should apply to.
	Component pulumi.StringInput `pulumi:"component"`
	// List of Config Files.
	Files ClusterConfigFileArrayInput `pulumi:"files"`
}

func (ClusterServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfig)(nil)).Elem()
}

func (i ClusterServiceConfigArgs) ToClusterServiceConfigOutput() ClusterServiceConfigOutput {
	return i.ToClusterServiceConfigOutputWithContext(context.Background())
}

func (i ClusterServiceConfigArgs) ToClusterServiceConfigOutputWithContext(ctx context.Context) ClusterServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigOutput)
}

// ClusterServiceConfigArrayInput is an input type that accepts ClusterServiceConfigArray and ClusterServiceConfigArrayOutput values.
// You can construct a concrete instance of `ClusterServiceConfigArrayInput` via:
//
//	ClusterServiceConfigArray{ ClusterServiceConfigArgs{...} }
type ClusterServiceConfigArrayInput interface {
	pulumi.Input

	ToClusterServiceConfigArrayOutput() ClusterServiceConfigArrayOutput
	ToClusterServiceConfigArrayOutputWithContext(context.Context) ClusterServiceConfigArrayOutput
}

type ClusterServiceConfigArray []ClusterServiceConfigInput

func (ClusterServiceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfig)(nil)).Elem()
}

func (i ClusterServiceConfigArray) ToClusterServiceConfigArrayOutput() ClusterServiceConfigArrayOutput {
	return i.ToClusterServiceConfigArrayOutputWithContext(context.Background())
}

func (i ClusterServiceConfigArray) ToClusterServiceConfigArrayOutputWithContext(ctx context.Context) ClusterServiceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigArrayOutput)
}

// Cluster configs per component.
type ClusterServiceConfigOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfig)(nil)).Elem()
}

func (o ClusterServiceConfigOutput) ToClusterServiceConfigOutput() ClusterServiceConfigOutput {
	return o
}

func (o ClusterServiceConfigOutput) ToClusterServiceConfigOutputWithContext(ctx context.Context) ClusterServiceConfigOutput {
	return o
}

// Name of the component the config files should apply to.
func (o ClusterServiceConfigOutput) Component() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfig) string { return v.Component }).(pulumi.StringOutput)
}

// List of Config Files.
func (o ClusterServiceConfigOutput) Files() ClusterConfigFileArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfig) []ClusterConfigFile { return v.Files }).(ClusterConfigFileArrayOutput)
}

type ClusterServiceConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfig)(nil)).Elem()
}

func (o ClusterServiceConfigArrayOutput) ToClusterServiceConfigArrayOutput() ClusterServiceConfigArrayOutput {
	return o
}

func (o ClusterServiceConfigArrayOutput) ToClusterServiceConfigArrayOutputWithContext(ctx context.Context) ClusterServiceConfigArrayOutput {
	return o
}

func (o ClusterServiceConfigArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfig {
		return vs[0].([]ClusterServiceConfig)[vs[1].(int)]
	}).(ClusterServiceConfigOutput)
}

// Cluster configs per component.
type ClusterServiceConfigResponse struct {
	// Name of the component the config files should apply to.
	Component string `pulumi:"component"`
	// List of Config Files.
	Files []ClusterConfigFileResponse `pulumi:"files"`
}

// Cluster configs per component.
type ClusterServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigResponse)(nil)).Elem()
}

func (o ClusterServiceConfigResponseOutput) ToClusterServiceConfigResponseOutput() ClusterServiceConfigResponseOutput {
	return o
}

func (o ClusterServiceConfigResponseOutput) ToClusterServiceConfigResponseOutputWithContext(ctx context.Context) ClusterServiceConfigResponseOutput {
	return o
}

// Name of the component the config files should apply to.
func (o ClusterServiceConfigResponseOutput) Component() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfigResponse) string { return v.Component }).(pulumi.StringOutput)
}

// List of Config Files.
func (o ClusterServiceConfigResponseOutput) Files() ClusterConfigFileResponseArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfigResponse) []ClusterConfigFileResponse { return v.Files }).(ClusterConfigFileResponseArrayOutput)
}

type ClusterServiceConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigResponse)(nil)).Elem()
}

func (o ClusterServiceConfigResponseArrayOutput) ToClusterServiceConfigResponseArrayOutput() ClusterServiceConfigResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigResponseArrayOutput) ToClusterServiceConfigResponseArrayOutputWithContext(ctx context.Context) ClusterServiceConfigResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigResponseArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfigResponse {
		return vs[0].([]ClusterServiceConfigResponse)[vs[1].(int)]
	}).(ClusterServiceConfigResponseOutput)
}

// Cluster service configs.
type ClusterServiceConfigsProfile struct {
	// List of service configs.
	Configs []ClusterServiceConfig `pulumi:"configs"`
	// Name of the service the configurations should apply to.
	ServiceName string `pulumi:"serviceName"`
}

// ClusterServiceConfigsProfileInput is an input type that accepts ClusterServiceConfigsProfileArgs and ClusterServiceConfigsProfileOutput values.
// You can construct a concrete instance of `ClusterServiceConfigsProfileInput` via:
//
//	ClusterServiceConfigsProfileArgs{...}
type ClusterServiceConfigsProfileInput interface {
	pulumi.Input

	ToClusterServiceConfigsProfileOutput() ClusterServiceConfigsProfileOutput
	ToClusterServiceConfigsProfileOutputWithContext(context.Context) ClusterServiceConfigsProfileOutput
}

// Cluster service configs.
type ClusterServiceConfigsProfileArgs struct {
	// List of service configs.
	Configs ClusterServiceConfigArrayInput `pulumi:"configs"`
	// Name of the service the configurations should apply to.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (ClusterServiceConfigsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigsProfile)(nil)).Elem()
}

func (i ClusterServiceConfigsProfileArgs) ToClusterServiceConfigsProfileOutput() ClusterServiceConfigsProfileOutput {
	return i.ToClusterServiceConfigsProfileOutputWithContext(context.Background())
}

func (i ClusterServiceConfigsProfileArgs) ToClusterServiceConfigsProfileOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigsProfileOutput)
}

// ClusterServiceConfigsProfileArrayInput is an input type that accepts ClusterServiceConfigsProfileArray and ClusterServiceConfigsProfileArrayOutput values.
// You can construct a concrete instance of `ClusterServiceConfigsProfileArrayInput` via:
//
//	ClusterServiceConfigsProfileArray{ ClusterServiceConfigsProfileArgs{...} }
type ClusterServiceConfigsProfileArrayInput interface {
	pulumi.Input

	ToClusterServiceConfigsProfileArrayOutput() ClusterServiceConfigsProfileArrayOutput
	ToClusterServiceConfigsProfileArrayOutputWithContext(context.Context) ClusterServiceConfigsProfileArrayOutput
}

type ClusterServiceConfigsProfileArray []ClusterServiceConfigsProfileInput

func (ClusterServiceConfigsProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigsProfile)(nil)).Elem()
}

func (i ClusterServiceConfigsProfileArray) ToClusterServiceConfigsProfileArrayOutput() ClusterServiceConfigsProfileArrayOutput {
	return i.ToClusterServiceConfigsProfileArrayOutputWithContext(context.Background())
}

func (i ClusterServiceConfigsProfileArray) ToClusterServiceConfigsProfileArrayOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigsProfileArrayOutput)
}

// Cluster service configs.
type ClusterServiceConfigsProfileOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigsProfile)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileOutput) ToClusterServiceConfigsProfileOutput() ClusterServiceConfigsProfileOutput {
	return o
}

func (o ClusterServiceConfigsProfileOutput) ToClusterServiceConfigsProfileOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileOutput {
	return o
}

// List of service configs.
func (o ClusterServiceConfigsProfileOutput) Configs() ClusterServiceConfigArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfile) []ClusterServiceConfig { return v.Configs }).(ClusterServiceConfigArrayOutput)
}

// Name of the service the configurations should apply to.
func (o ClusterServiceConfigsProfileOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfile) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ClusterServiceConfigsProfileArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigsProfile)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileArrayOutput) ToClusterServiceConfigsProfileArrayOutput() ClusterServiceConfigsProfileArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileArrayOutput) ToClusterServiceConfigsProfileArrayOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigsProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfigsProfile {
		return vs[0].([]ClusterServiceConfigsProfile)[vs[1].(int)]
	}).(ClusterServiceConfigsProfileOutput)
}

// Cluster service configs.
type ClusterServiceConfigsProfileResponse struct {
	// List of service configs.
	Configs []ClusterServiceConfigResponse `pulumi:"configs"`
	// Name of the service the configurations should apply to.
	ServiceName string `pulumi:"serviceName"`
}

// Cluster service configs.
type ClusterServiceConfigsProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigsProfileResponse)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileResponseOutput) ToClusterServiceConfigsProfileResponseOutput() ClusterServiceConfigsProfileResponseOutput {
	return o
}

func (o ClusterServiceConfigsProfileResponseOutput) ToClusterServiceConfigsProfileResponseOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileResponseOutput {
	return o
}

// List of service configs.
func (o ClusterServiceConfigsProfileResponseOutput) Configs() ClusterServiceConfigResponseArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfileResponse) []ClusterServiceConfigResponse { return v.Configs }).(ClusterServiceConfigResponseArrayOutput)
}

// Name of the service the configurations should apply to.
func (o ClusterServiceConfigsProfileResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfileResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ClusterServiceConfigsProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigsProfileResponse)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileResponseArrayOutput) ToClusterServiceConfigsProfileResponseArrayOutput() ClusterServiceConfigsProfileResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileResponseArrayOutput) ToClusterServiceConfigsProfileResponseArrayOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileResponseArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigsProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfigsProfileResponse {
		return vs[0].([]ClusterServiceConfigsProfileResponse)[vs[1].(int)]
	}).(ClusterServiceConfigsProfileResponseOutput)
}

// The comparison rule.
type ComparisonRule struct {
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold setting.
	Threshold float64 `pulumi:"threshold"`
}

// ComparisonRuleInput is an input type that accepts ComparisonRuleArgs and ComparisonRuleOutput values.
// You can construct a concrete instance of `ComparisonRuleInput` via:
//
//	ComparisonRuleArgs{...}
type ComparisonRuleInput interface {
	pulumi.Input

	ToComparisonRuleOutput() ComparisonRuleOutput
	ToComparisonRuleOutputWithContext(context.Context) ComparisonRuleOutput
}

// The comparison rule.
type ComparisonRuleArgs struct {
	// The comparison operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Threshold setting.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (ComparisonRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonRule)(nil)).Elem()
}

func (i ComparisonRuleArgs) ToComparisonRuleOutput() ComparisonRuleOutput {
	return i.ToComparisonRuleOutputWithContext(context.Background())
}

func (i ComparisonRuleArgs) ToComparisonRuleOutputWithContext(ctx context.Context) ComparisonRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComparisonRuleOutput)
}

// The comparison rule.
type ComparisonRuleOutput struct{ *pulumi.OutputState }

func (ComparisonRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonRule)(nil)).Elem()
}

func (o ComparisonRuleOutput) ToComparisonRuleOutput() ComparisonRuleOutput {
	return o
}

func (o ComparisonRuleOutput) ToComparisonRuleOutputWithContext(ctx context.Context) ComparisonRuleOutput {
	return o
}

// The comparison operator.
func (o ComparisonRuleOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ComparisonRule) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold setting.
func (o ComparisonRuleOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ComparisonRule) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The comparison rule.
type ComparisonRuleResponse struct {
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold setting.
	Threshold float64 `pulumi:"threshold"`
}

// The comparison rule.
type ComparisonRuleResponseOutput struct{ *pulumi.OutputState }

func (ComparisonRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonRuleResponse)(nil)).Elem()
}

func (o ComparisonRuleResponseOutput) ToComparisonRuleResponseOutput() ComparisonRuleResponseOutput {
	return o
}

func (o ComparisonRuleResponseOutput) ToComparisonRuleResponseOutputWithContext(ctx context.Context) ComparisonRuleResponseOutput {
	return o
}

// The comparison operator.
func (o ComparisonRuleResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ComparisonRuleResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold setting.
func (o ComparisonRuleResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ComparisonRuleResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The compute profile.
type ComputeProfile struct {
	// The nodes definitions.
	Nodes []NodeProfile `pulumi:"nodes"`
}

// ComputeProfileInput is an input type that accepts ComputeProfileArgs and ComputeProfileOutput values.
// You can construct a concrete instance of `ComputeProfileInput` via:
//
//	ComputeProfileArgs{...}
type ComputeProfileInput interface {
	pulumi.Input

	ToComputeProfileOutput() ComputeProfileOutput
	ToComputeProfileOutputWithContext(context.Context) ComputeProfileOutput
}

// The compute profile.
type ComputeProfileArgs struct {
	// The nodes definitions.
	Nodes NodeProfileArrayInput `pulumi:"nodes"`
}

func (ComputeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeProfile)(nil)).Elem()
}

func (i ComputeProfileArgs) ToComputeProfileOutput() ComputeProfileOutput {
	return i.ToComputeProfileOutputWithContext(context.Background())
}

func (i ComputeProfileArgs) ToComputeProfileOutputWithContext(ctx context.Context) ComputeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeProfileOutput)
}

// The compute profile.
type ComputeProfileOutput struct{ *pulumi.OutputState }

func (ComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeProfile)(nil)).Elem()
}

func (o ComputeProfileOutput) ToComputeProfileOutput() ComputeProfileOutput {
	return o
}

func (o ComputeProfileOutput) ToComputeProfileOutputWithContext(ctx context.Context) ComputeProfileOutput {
	return o
}

// The nodes definitions.
func (o ComputeProfileOutput) Nodes() NodeProfileArrayOutput {
	return o.ApplyT(func(v ComputeProfile) []NodeProfile { return v.Nodes }).(NodeProfileArrayOutput)
}

// The compute profile.
type ComputeProfileResponse struct {
	// The nodes definitions.
	Nodes []NodeProfileResponse `pulumi:"nodes"`
}

// The compute profile.
type ComputeProfileResponseOutput struct{ *pulumi.OutputState }

func (ComputeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeProfileResponse)(nil)).Elem()
}

func (o ComputeProfileResponseOutput) ToComputeProfileResponseOutput() ComputeProfileResponseOutput {
	return o
}

func (o ComputeProfileResponseOutput) ToComputeProfileResponseOutputWithContext(ctx context.Context) ComputeProfileResponseOutput {
	return o
}

// The nodes definitions.
func (o ComputeProfileResponseOutput) Nodes() NodeProfileResponseArrayOutput {
	return o.ApplyT(func(v ComputeProfileResponse) []NodeProfileResponse { return v.Nodes }).(NodeProfileResponseArrayOutput)
}

// The cpu and memory requirement definition.
type ComputeResourceDefinition struct {
	// The required CPU.
	Cpu float64 `pulumi:"cpu"`
	// The required memory in MB, Container memory will be 110 percentile
	Memory float64 `pulumi:"memory"`
}

// ComputeResourceDefinitionInput is an input type that accepts ComputeResourceDefinitionArgs and ComputeResourceDefinitionOutput values.
// You can construct a concrete instance of `ComputeResourceDefinitionInput` via:
//
//	ComputeResourceDefinitionArgs{...}
type ComputeResourceDefinitionInput interface {
	pulumi.Input

	ToComputeResourceDefinitionOutput() ComputeResourceDefinitionOutput
	ToComputeResourceDefinitionOutputWithContext(context.Context) ComputeResourceDefinitionOutput
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionArgs struct {
	// The required CPU.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The required memory in MB, Container memory will be 110 percentile
	Memory pulumi.Float64Input `pulumi:"memory"`
}

func (ComputeResourceDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeResourceDefinition)(nil)).Elem()
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionOutput() ComputeResourceDefinitionOutput {
	return i.ToComputeResourceDefinitionOutputWithContext(context.Background())
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionOutputWithContext(ctx context.Context) ComputeResourceDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeResourceDefinitionOutput)
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return i.ToComputeResourceDefinitionPtrOutputWithContext(context.Background())
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeResourceDefinitionOutput).ToComputeResourceDefinitionPtrOutputWithContext(ctx)
}

// ComputeResourceDefinitionPtrInput is an input type that accepts ComputeResourceDefinitionArgs, ComputeResourceDefinitionPtr and ComputeResourceDefinitionPtrOutput values.
// You can construct a concrete instance of `ComputeResourceDefinitionPtrInput` via:
//
//	        ComputeResourceDefinitionArgs{...}
//
//	or:
//
//	        nil
type ComputeResourceDefinitionPtrInput interface {
	pulumi.Input

	ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput
	ToComputeResourceDefinitionPtrOutputWithContext(context.Context) ComputeResourceDefinitionPtrOutput
}

type computeResourceDefinitionPtrType ComputeResourceDefinitionArgs

func ComputeResourceDefinitionPtr(v *ComputeResourceDefinitionArgs) ComputeResourceDefinitionPtrInput {
	return (*computeResourceDefinitionPtrType)(v)
}

func (*computeResourceDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeResourceDefinition)(nil)).Elem()
}

func (i *computeResourceDefinitionPtrType) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return i.ToComputeResourceDefinitionPtrOutputWithContext(context.Background())
}

func (i *computeResourceDefinitionPtrType) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeResourceDefinitionPtrOutput)
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeResourceDefinition)(nil)).Elem()
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionOutput() ComputeResourceDefinitionOutput {
	return o
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionOutputWithContext(ctx context.Context) ComputeResourceDefinitionOutput {
	return o
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return o.ToComputeResourceDefinitionPtrOutputWithContext(context.Background())
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeResourceDefinition) *ComputeResourceDefinition {
		return &v
	}).(ComputeResourceDefinitionPtrOutput)
}

// The required CPU.
func (o ComputeResourceDefinitionOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinition) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinition) float64 { return v.Memory }).(pulumi.Float64Output)
}

type ComputeResourceDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeResourceDefinition)(nil)).Elem()
}

func (o ComputeResourceDefinitionPtrOutput) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return o
}

func (o ComputeResourceDefinitionPtrOutput) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return o
}

func (o ComputeResourceDefinitionPtrOutput) Elem() ComputeResourceDefinitionOutput {
	return o.ApplyT(func(v *ComputeResourceDefinition) ComputeResourceDefinition {
		if v != nil {
			return *v
		}
		var ret ComputeResourceDefinition
		return ret
	}).(ComputeResourceDefinitionOutput)
}

// The required CPU.
func (o ComputeResourceDefinitionPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinition) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionPtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinition) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionResponse struct {
	// The required CPU.
	Cpu float64 `pulumi:"cpu"`
	// The required memory in MB, Container memory will be 110 percentile
	Memory float64 `pulumi:"memory"`
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeResourceDefinitionResponse)(nil)).Elem()
}

func (o ComputeResourceDefinitionResponseOutput) ToComputeResourceDefinitionResponseOutput() ComputeResourceDefinitionResponseOutput {
	return o
}

func (o ComputeResourceDefinitionResponseOutput) ToComputeResourceDefinitionResponseOutputWithContext(ctx context.Context) ComputeResourceDefinitionResponseOutput {
	return o
}

// The required CPU.
func (o ComputeResourceDefinitionResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinitionResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionResponseOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinitionResponse) float64 { return v.Memory }).(pulumi.Float64Output)
}

type ComputeResourceDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeResourceDefinitionResponse)(nil)).Elem()
}

func (o ComputeResourceDefinitionResponsePtrOutput) ToComputeResourceDefinitionResponsePtrOutput() ComputeResourceDefinitionResponsePtrOutput {
	return o
}

func (o ComputeResourceDefinitionResponsePtrOutput) ToComputeResourceDefinitionResponsePtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionResponsePtrOutput {
	return o
}

func (o ComputeResourceDefinitionResponsePtrOutput) Elem() ComputeResourceDefinitionResponseOutput {
	return o.ApplyT(func(v *ComputeResourceDefinitionResponse) ComputeResourceDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ComputeResourceDefinitionResponse
		return ret
	}).(ComputeResourceDefinitionResponseOutput)
}

// The required CPU.
func (o ComputeResourceDefinitionResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionResponsePtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

// Cluster connectivity profile.
type ConnectivityProfileResponse struct {
	// List of SSH connectivity endpoints.
	Ssh []SshConnectivityEndpointResponse `pulumi:"ssh"`
	// Web connectivity endpoint details.
	Web ConnectivityProfileResponseWeb `pulumi:"web"`
}

// Cluster connectivity profile.
type ConnectivityProfileResponseOutput struct{ *pulumi.OutputState }

func (ConnectivityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityProfileResponse)(nil)).Elem()
}

func (o ConnectivityProfileResponseOutput) ToConnectivityProfileResponseOutput() ConnectivityProfileResponseOutput {
	return o
}

func (o ConnectivityProfileResponseOutput) ToConnectivityProfileResponseOutputWithContext(ctx context.Context) ConnectivityProfileResponseOutput {
	return o
}

// List of SSH connectivity endpoints.
func (o ConnectivityProfileResponseOutput) Ssh() SshConnectivityEndpointResponseArrayOutput {
	return o.ApplyT(func(v ConnectivityProfileResponse) []SshConnectivityEndpointResponse { return v.Ssh }).(SshConnectivityEndpointResponseArrayOutput)
}

// Web connectivity endpoint details.
func (o ConnectivityProfileResponseOutput) Web() ConnectivityProfileResponseWebOutput {
	return o.ApplyT(func(v ConnectivityProfileResponse) ConnectivityProfileResponseWeb { return v.Web }).(ConnectivityProfileResponseWebOutput)
}

// Web connectivity endpoint details.
type ConnectivityProfileResponseWeb struct {
	// Web connectivity endpoint.
	Fqdn string `pulumi:"fqdn"`
	// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
	PrivateFqdn *string `pulumi:"privateFqdn"`
}

// Web connectivity endpoint details.
type ConnectivityProfileResponseWebOutput struct{ *pulumi.OutputState }

func (ConnectivityProfileResponseWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityProfileResponseWeb)(nil)).Elem()
}

func (o ConnectivityProfileResponseWebOutput) ToConnectivityProfileResponseWebOutput() ConnectivityProfileResponseWebOutput {
	return o
}

func (o ConnectivityProfileResponseWebOutput) ToConnectivityProfileResponseWebOutputWithContext(ctx context.Context) ConnectivityProfileResponseWebOutput {
	return o
}

// Web connectivity endpoint.
func (o ConnectivityProfileResponseWebOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectivityProfileResponseWeb) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
func (o ConnectivityProfileResponseWebOutput) PrivateFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectivityProfileResponseWeb) *string { return v.PrivateFqdn }).(pulumi.StringPtrOutput)
}

// Kafka disk storage profile.
type DiskStorageProfile struct {
	// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
	DataDiskSize int `pulumi:"dataDiskSize"`
	// Managed Disk Type.
	DataDiskType string `pulumi:"dataDiskType"`
}

// DiskStorageProfileInput is an input type that accepts DiskStorageProfileArgs and DiskStorageProfileOutput values.
// You can construct a concrete instance of `DiskStorageProfileInput` via:
//
//	DiskStorageProfileArgs{...}
type DiskStorageProfileInput interface {
	pulumi.Input

	ToDiskStorageProfileOutput() DiskStorageProfileOutput
	ToDiskStorageProfileOutputWithContext(context.Context) DiskStorageProfileOutput
}

// Kafka disk storage profile.
type DiskStorageProfileArgs struct {
	// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
	DataDiskSize pulumi.IntInput `pulumi:"dataDiskSize"`
	// Managed Disk Type.
	DataDiskType pulumi.StringInput `pulumi:"dataDiskType"`
}

func (DiskStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskStorageProfile)(nil)).Elem()
}

func (i DiskStorageProfileArgs) ToDiskStorageProfileOutput() DiskStorageProfileOutput {
	return i.ToDiskStorageProfileOutputWithContext(context.Background())
}

func (i DiskStorageProfileArgs) ToDiskStorageProfileOutputWithContext(ctx context.Context) DiskStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskStorageProfileOutput)
}

func (i DiskStorageProfileArgs) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return i.ToDiskStorageProfilePtrOutputWithContext(context.Background())
}

func (i DiskStorageProfileArgs) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskStorageProfileOutput).ToDiskStorageProfilePtrOutputWithContext(ctx)
}

// DiskStorageProfilePtrInput is an input type that accepts DiskStorageProfileArgs, DiskStorageProfilePtr and DiskStorageProfilePtrOutput values.
// You can construct a concrete instance of `DiskStorageProfilePtrInput` via:
//
//	        DiskStorageProfileArgs{...}
//
//	or:
//
//	        nil
type DiskStorageProfilePtrInput interface {
	pulumi.Input

	ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput
	ToDiskStorageProfilePtrOutputWithContext(context.Context) DiskStorageProfilePtrOutput
}

type diskStorageProfilePtrType DiskStorageProfileArgs

func DiskStorageProfilePtr(v *DiskStorageProfileArgs) DiskStorageProfilePtrInput {
	return (*diskStorageProfilePtrType)(v)
}

func (*diskStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskStorageProfile)(nil)).Elem()
}

func (i *diskStorageProfilePtrType) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return i.ToDiskStorageProfilePtrOutputWithContext(context.Background())
}

func (i *diskStorageProfilePtrType) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskStorageProfilePtrOutput)
}

// Kafka disk storage profile.
type DiskStorageProfileOutput struct{ *pulumi.OutputState }

func (DiskStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskStorageProfile)(nil)).Elem()
}

func (o DiskStorageProfileOutput) ToDiskStorageProfileOutput() DiskStorageProfileOutput {
	return o
}

func (o DiskStorageProfileOutput) ToDiskStorageProfileOutputWithContext(ctx context.Context) DiskStorageProfileOutput {
	return o
}

func (o DiskStorageProfileOutput) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return o.ToDiskStorageProfilePtrOutputWithContext(context.Background())
}

func (o DiskStorageProfileOutput) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskStorageProfile) *DiskStorageProfile {
		return &v
	}).(DiskStorageProfilePtrOutput)
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfileOutput) DataDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v DiskStorageProfile) int { return v.DataDiskSize }).(pulumi.IntOutput)
}

// Managed Disk Type.
func (o DiskStorageProfileOutput) DataDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskStorageProfile) string { return v.DataDiskType }).(pulumi.StringOutput)
}

type DiskStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (DiskStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskStorageProfile)(nil)).Elem()
}

func (o DiskStorageProfilePtrOutput) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return o
}

func (o DiskStorageProfilePtrOutput) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return o
}

func (o DiskStorageProfilePtrOutput) Elem() DiskStorageProfileOutput {
	return o.ApplyT(func(v *DiskStorageProfile) DiskStorageProfile {
		if v != nil {
			return *v
		}
		var ret DiskStorageProfile
		return ret
	}).(DiskStorageProfileOutput)
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfilePtrOutput) DataDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfile) *int {
		if v == nil {
			return nil
		}
		return &v.DataDiskSize
	}).(pulumi.IntPtrOutput)
}

// Managed Disk Type.
func (o DiskStorageProfilePtrOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DataDiskType
	}).(pulumi.StringPtrOutput)
}

// Kafka disk storage profile.
type DiskStorageProfileResponse struct {
	// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
	DataDiskSize int `pulumi:"dataDiskSize"`
	// Managed Disk Type.
	DataDiskType string `pulumi:"dataDiskType"`
}

// Kafka disk storage profile.
type DiskStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (DiskStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskStorageProfileResponse)(nil)).Elem()
}

func (o DiskStorageProfileResponseOutput) ToDiskStorageProfileResponseOutput() DiskStorageProfileResponseOutput {
	return o
}

func (o DiskStorageProfileResponseOutput) ToDiskStorageProfileResponseOutputWithContext(ctx context.Context) DiskStorageProfileResponseOutput {
	return o
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfileResponseOutput) DataDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v DiskStorageProfileResponse) int { return v.DataDiskSize }).(pulumi.IntOutput)
}

// Managed Disk Type.
func (o DiskStorageProfileResponseOutput) DataDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskStorageProfileResponse) string { return v.DataDiskType }).(pulumi.StringOutput)
}

type DiskStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskStorageProfileResponse)(nil)).Elem()
}

func (o DiskStorageProfileResponsePtrOutput) ToDiskStorageProfileResponsePtrOutput() DiskStorageProfileResponsePtrOutput {
	return o
}

func (o DiskStorageProfileResponsePtrOutput) ToDiskStorageProfileResponsePtrOutputWithContext(ctx context.Context) DiskStorageProfileResponsePtrOutput {
	return o
}

func (o DiskStorageProfileResponsePtrOutput) Elem() DiskStorageProfileResponseOutput {
	return o.ApplyT(func(v *DiskStorageProfileResponse) DiskStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret DiskStorageProfileResponse
		return ret
	}).(DiskStorageProfileResponseOutput)
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfileResponsePtrOutput) DataDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DataDiskSize
	}).(pulumi.IntPtrOutput)
}

// Managed Disk Type.
func (o DiskStorageProfileResponsePtrOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataDiskType
	}).(pulumi.StringPtrOutput)
}

// Flink cluster catalog options.
type FlinkCatalogOptions struct {
	// Hive Catalog Option for Flink cluster.
	Hive *FlinkHiveCatalogOption `pulumi:"hive"`
}

// Defaults sets the appropriate defaults for FlinkCatalogOptions
func (val *FlinkCatalogOptions) Defaults() *FlinkCatalogOptions {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Hive = tmp.Hive.Defaults()

	return &tmp
}

// FlinkCatalogOptionsInput is an input type that accepts FlinkCatalogOptionsArgs and FlinkCatalogOptionsOutput values.
// You can construct a concrete instance of `FlinkCatalogOptionsInput` via:
//
//	FlinkCatalogOptionsArgs{...}
type FlinkCatalogOptionsInput interface {
	pulumi.Input

	ToFlinkCatalogOptionsOutput() FlinkCatalogOptionsOutput
	ToFlinkCatalogOptionsOutputWithContext(context.Context) FlinkCatalogOptionsOutput
}

// Flink cluster catalog options.
type FlinkCatalogOptionsArgs struct {
	// Hive Catalog Option for Flink cluster.
	Hive FlinkHiveCatalogOptionPtrInput `pulumi:"hive"`
}

// Defaults sets the appropriate defaults for FlinkCatalogOptionsArgs
func (val *FlinkCatalogOptionsArgs) Defaults() *FlinkCatalogOptionsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (FlinkCatalogOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkCatalogOptions)(nil)).Elem()
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsOutput() FlinkCatalogOptionsOutput {
	return i.ToFlinkCatalogOptionsOutputWithContext(context.Background())
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsOutputWithContext(ctx context.Context) FlinkCatalogOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkCatalogOptionsOutput)
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return i.ToFlinkCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkCatalogOptionsOutput).ToFlinkCatalogOptionsPtrOutputWithContext(ctx)
}

// FlinkCatalogOptionsPtrInput is an input type that accepts FlinkCatalogOptionsArgs, FlinkCatalogOptionsPtr and FlinkCatalogOptionsPtrOutput values.
// You can construct a concrete instance of `FlinkCatalogOptionsPtrInput` via:
//
//	        FlinkCatalogOptionsArgs{...}
//
//	or:
//
//	        nil
type FlinkCatalogOptionsPtrInput interface {
	pulumi.Input

	ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput
	ToFlinkCatalogOptionsPtrOutputWithContext(context.Context) FlinkCatalogOptionsPtrOutput
}

type flinkCatalogOptionsPtrType FlinkCatalogOptionsArgs

func FlinkCatalogOptionsPtr(v *FlinkCatalogOptionsArgs) FlinkCatalogOptionsPtrInput {
	return (*flinkCatalogOptionsPtrType)(v)
}

func (*flinkCatalogOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkCatalogOptions)(nil)).Elem()
}

func (i *flinkCatalogOptionsPtrType) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return i.ToFlinkCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i *flinkCatalogOptionsPtrType) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkCatalogOptionsPtrOutput)
}

// Flink cluster catalog options.
type FlinkCatalogOptionsOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkCatalogOptions)(nil)).Elem()
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsOutput() FlinkCatalogOptionsOutput {
	return o
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsOutputWithContext(ctx context.Context) FlinkCatalogOptionsOutput {
	return o
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return o.ToFlinkCatalogOptionsPtrOutputWithContext(context.Background())
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkCatalogOptions) *FlinkCatalogOptions {
		return &v
	}).(FlinkCatalogOptionsPtrOutput)
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsOutput) Hive() FlinkHiveCatalogOptionPtrOutput {
	return o.ApplyT(func(v FlinkCatalogOptions) *FlinkHiveCatalogOption { return v.Hive }).(FlinkHiveCatalogOptionPtrOutput)
}

type FlinkCatalogOptionsPtrOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkCatalogOptions)(nil)).Elem()
}

func (o FlinkCatalogOptionsPtrOutput) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return o
}

func (o FlinkCatalogOptionsPtrOutput) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return o
}

func (o FlinkCatalogOptionsPtrOutput) Elem() FlinkCatalogOptionsOutput {
	return o.ApplyT(func(v *FlinkCatalogOptions) FlinkCatalogOptions {
		if v != nil {
			return *v
		}
		var ret FlinkCatalogOptions
		return ret
	}).(FlinkCatalogOptionsOutput)
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsPtrOutput) Hive() FlinkHiveCatalogOptionPtrOutput {
	return o.ApplyT(func(v *FlinkCatalogOptions) *FlinkHiveCatalogOption {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(FlinkHiveCatalogOptionPtrOutput)
}

// Flink cluster catalog options.
type FlinkCatalogOptionsResponse struct {
	// Hive Catalog Option for Flink cluster.
	Hive *FlinkHiveCatalogOptionResponse `pulumi:"hive"`
}

// Defaults sets the appropriate defaults for FlinkCatalogOptionsResponse
func (val *FlinkCatalogOptionsResponse) Defaults() *FlinkCatalogOptionsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Hive = tmp.Hive.Defaults()

	return &tmp
}

// Flink cluster catalog options.
type FlinkCatalogOptionsResponseOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkCatalogOptionsResponse)(nil)).Elem()
}

func (o FlinkCatalogOptionsResponseOutput) ToFlinkCatalogOptionsResponseOutput() FlinkCatalogOptionsResponseOutput {
	return o
}

func (o FlinkCatalogOptionsResponseOutput) ToFlinkCatalogOptionsResponseOutputWithContext(ctx context.Context) FlinkCatalogOptionsResponseOutput {
	return o
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsResponseOutput) Hive() FlinkHiveCatalogOptionResponsePtrOutput {
	return o.ApplyT(func(v FlinkCatalogOptionsResponse) *FlinkHiveCatalogOptionResponse { return v.Hive }).(FlinkHiveCatalogOptionResponsePtrOutput)
}

type FlinkCatalogOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkCatalogOptionsResponse)(nil)).Elem()
}

func (o FlinkCatalogOptionsResponsePtrOutput) ToFlinkCatalogOptionsResponsePtrOutput() FlinkCatalogOptionsResponsePtrOutput {
	return o
}

func (o FlinkCatalogOptionsResponsePtrOutput) ToFlinkCatalogOptionsResponsePtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsResponsePtrOutput {
	return o
}

func (o FlinkCatalogOptionsResponsePtrOutput) Elem() FlinkCatalogOptionsResponseOutput {
	return o.ApplyT(func(v *FlinkCatalogOptionsResponse) FlinkCatalogOptionsResponse {
		if v != nil {
			return *v
		}
		var ret FlinkCatalogOptionsResponse
		return ret
	}).(FlinkCatalogOptionsResponseOutput)
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsResponsePtrOutput) Hive() FlinkHiveCatalogOptionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkCatalogOptionsResponse) *FlinkHiveCatalogOptionResponse {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(FlinkHiveCatalogOptionResponsePtrOutput)
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOption struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
}

// Defaults sets the appropriate defaults for FlinkHiveCatalogOption
func (val *FlinkHiveCatalogOption) Defaults() *FlinkHiveCatalogOption {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// FlinkHiveCatalogOptionInput is an input type that accepts FlinkHiveCatalogOptionArgs and FlinkHiveCatalogOptionOutput values.
// You can construct a concrete instance of `FlinkHiveCatalogOptionInput` via:
//
//	FlinkHiveCatalogOptionArgs{...}
type FlinkHiveCatalogOptionInput interface {
	pulumi.Input

	ToFlinkHiveCatalogOptionOutput() FlinkHiveCatalogOptionOutput
	ToFlinkHiveCatalogOptionOutputWithContext(context.Context) FlinkHiveCatalogOptionOutput
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionArgs struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode pulumi.StringPtrInput `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret pulumi.StringPtrInput `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL pulumi.StringInput `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName pulumi.StringPtrInput `pulumi:"metastoreDbConnectionUserName"`
}

// Defaults sets the appropriate defaults for FlinkHiveCatalogOptionArgs
func (val *FlinkHiveCatalogOptionArgs) Defaults() *FlinkHiveCatalogOptionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		tmp.MetastoreDbConnectionAuthenticationMode = pulumi.StringPtr("IdentityAuth")
	}
	return &tmp
}
func (FlinkHiveCatalogOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkHiveCatalogOption)(nil)).Elem()
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionOutput() FlinkHiveCatalogOptionOutput {
	return i.ToFlinkHiveCatalogOptionOutputWithContext(context.Background())
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkHiveCatalogOptionOutput)
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return i.ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Background())
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkHiveCatalogOptionOutput).ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx)
}

// FlinkHiveCatalogOptionPtrInput is an input type that accepts FlinkHiveCatalogOptionArgs, FlinkHiveCatalogOptionPtr and FlinkHiveCatalogOptionPtrOutput values.
// You can construct a concrete instance of `FlinkHiveCatalogOptionPtrInput` via:
//
//	        FlinkHiveCatalogOptionArgs{...}
//
//	or:
//
//	        nil
type FlinkHiveCatalogOptionPtrInput interface {
	pulumi.Input

	ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput
	ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Context) FlinkHiveCatalogOptionPtrOutput
}

type flinkHiveCatalogOptionPtrType FlinkHiveCatalogOptionArgs

func FlinkHiveCatalogOptionPtr(v *FlinkHiveCatalogOptionArgs) FlinkHiveCatalogOptionPtrInput {
	return (*flinkHiveCatalogOptionPtrType)(v)
}

func (*flinkHiveCatalogOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkHiveCatalogOption)(nil)).Elem()
}

func (i *flinkHiveCatalogOptionPtrType) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return i.ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Background())
}

func (i *flinkHiveCatalogOptionPtrType) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkHiveCatalogOptionPtrOutput)
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkHiveCatalogOption)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionOutput() FlinkHiveCatalogOptionOutput {
	return o
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionOutput {
	return o
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return o.ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Background())
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkHiveCatalogOption) *FlinkHiveCatalogOption {
		return &v
	}).(FlinkHiveCatalogOptionPtrOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

type FlinkHiveCatalogOptionPtrOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkHiveCatalogOption)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionPtrOutput) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionPtrOutput) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionPtrOutput) Elem() FlinkHiveCatalogOptionOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) FlinkHiveCatalogOption {
		if v != nil {
			return *v
		}
		var ret FlinkHiveCatalogOption
		return ret
	}).(FlinkHiveCatalogOptionOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionPasswordSecret
	}).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return &v.MetastoreDbConnectionURL
	}).(pulumi.StringPtrOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionUserName
	}).(pulumi.StringPtrOutput)
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionResponse struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
}

// Defaults sets the appropriate defaults for FlinkHiveCatalogOptionResponse
func (val *FlinkHiveCatalogOptionResponse) Defaults() *FlinkHiveCatalogOptionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionResponseOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkHiveCatalogOptionResponse)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionResponseOutput) ToFlinkHiveCatalogOptionResponseOutput() FlinkHiveCatalogOptionResponseOutput {
	return o
}

func (o FlinkHiveCatalogOptionResponseOutput) ToFlinkHiveCatalogOptionResponseOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionResponseOutput {
	return o
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

type FlinkHiveCatalogOptionResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkHiveCatalogOptionResponse)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionResponsePtrOutput) ToFlinkHiveCatalogOptionResponsePtrOutput() FlinkHiveCatalogOptionResponsePtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionResponsePtrOutput) ToFlinkHiveCatalogOptionResponsePtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionResponsePtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionResponsePtrOutput) Elem() FlinkHiveCatalogOptionResponseOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) FlinkHiveCatalogOptionResponse {
		if v != nil {
			return *v
		}
		var ret FlinkHiveCatalogOptionResponse
		return ret
	}).(FlinkHiveCatalogOptionResponseOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionPasswordSecret
	}).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetastoreDbConnectionURL
	}).(pulumi.StringPtrOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionUserName
	}).(pulumi.StringPtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfile struct {
	// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
	Args *string `pulumi:"args"`
	// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
	EntryClass *string `pulumi:"entryClass"`
	// A string property that represents the name of the job JAR.
	JarName string `pulumi:"jarName"`
	// A string property that specifies the directory where the job JAR is located.
	JobJarDirectory string `pulumi:"jobJarDirectory"`
	// A string property that represents the name of the savepoint for the Flink job
	SavePointName *string `pulumi:"savePointName"`
	// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
	UpgradeMode string `pulumi:"upgradeMode"`
}

// FlinkJobProfileInput is an input type that accepts FlinkJobProfileArgs and FlinkJobProfileOutput values.
// You can construct a concrete instance of `FlinkJobProfileInput` via:
//
//	FlinkJobProfileArgs{...}
type FlinkJobProfileInput interface {
	pulumi.Input

	ToFlinkJobProfileOutput() FlinkJobProfileOutput
	ToFlinkJobProfileOutputWithContext(context.Context) FlinkJobProfileOutput
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileArgs struct {
	// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
	Args pulumi.StringPtrInput `pulumi:"args"`
	// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
	EntryClass pulumi.StringPtrInput `pulumi:"entryClass"`
	// A string property that represents the name of the job JAR.
	JarName pulumi.StringInput `pulumi:"jarName"`
	// A string property that specifies the directory where the job JAR is located.
	JobJarDirectory pulumi.StringInput `pulumi:"jobJarDirectory"`
	// A string property that represents the name of the savepoint for the Flink job
	SavePointName pulumi.StringPtrInput `pulumi:"savePointName"`
	// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
	UpgradeMode pulumi.StringInput `pulumi:"upgradeMode"`
}

func (FlinkJobProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkJobProfile)(nil)).Elem()
}

func (i FlinkJobProfileArgs) ToFlinkJobProfileOutput() FlinkJobProfileOutput {
	return i.ToFlinkJobProfileOutputWithContext(context.Background())
}

func (i FlinkJobProfileArgs) ToFlinkJobProfileOutputWithContext(ctx context.Context) FlinkJobProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkJobProfileOutput)
}

func (i FlinkJobProfileArgs) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return i.ToFlinkJobProfilePtrOutputWithContext(context.Background())
}

func (i FlinkJobProfileArgs) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkJobProfileOutput).ToFlinkJobProfilePtrOutputWithContext(ctx)
}

// FlinkJobProfilePtrInput is an input type that accepts FlinkJobProfileArgs, FlinkJobProfilePtr and FlinkJobProfilePtrOutput values.
// You can construct a concrete instance of `FlinkJobProfilePtrInput` via:
//
//	        FlinkJobProfileArgs{...}
//
//	or:
//
//	        nil
type FlinkJobProfilePtrInput interface {
	pulumi.Input

	ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput
	ToFlinkJobProfilePtrOutputWithContext(context.Context) FlinkJobProfilePtrOutput
}

type flinkJobProfilePtrType FlinkJobProfileArgs

func FlinkJobProfilePtr(v *FlinkJobProfileArgs) FlinkJobProfilePtrInput {
	return (*flinkJobProfilePtrType)(v)
}

func (*flinkJobProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkJobProfile)(nil)).Elem()
}

func (i *flinkJobProfilePtrType) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return i.ToFlinkJobProfilePtrOutputWithContext(context.Background())
}

func (i *flinkJobProfilePtrType) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkJobProfilePtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileOutput struct{ *pulumi.OutputState }

func (FlinkJobProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkJobProfile)(nil)).Elem()
}

func (o FlinkJobProfileOutput) ToFlinkJobProfileOutput() FlinkJobProfileOutput {
	return o
}

func (o FlinkJobProfileOutput) ToFlinkJobProfileOutputWithContext(ctx context.Context) FlinkJobProfileOutput {
	return o
}

func (o FlinkJobProfileOutput) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return o.ToFlinkJobProfilePtrOutputWithContext(context.Background())
}

func (o FlinkJobProfileOutput) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkJobProfile) *FlinkJobProfile {
		return &v
	}).(FlinkJobProfilePtrOutput)
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfileOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfile) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfileOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfile) *string { return v.EntryClass }).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfileOutput) JarName() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfile) string { return v.JarName }).(pulumi.StringOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfileOutput) JobJarDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfile) string { return v.JobJarDirectory }).(pulumi.StringOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfileOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfile) *string { return v.SavePointName }).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfileOutput) UpgradeMode() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfile) string { return v.UpgradeMode }).(pulumi.StringOutput)
}

type FlinkJobProfilePtrOutput struct{ *pulumi.OutputState }

func (FlinkJobProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkJobProfile)(nil)).Elem()
}

func (o FlinkJobProfilePtrOutput) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return o
}

func (o FlinkJobProfilePtrOutput) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return o
}

func (o FlinkJobProfilePtrOutput) Elem() FlinkJobProfileOutput {
	return o.ApplyT(func(v *FlinkJobProfile) FlinkJobProfile {
		if v != nil {
			return *v
		}
		var ret FlinkJobProfile
		return ret
	}).(FlinkJobProfileOutput)
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfilePtrOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfilePtrOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return v.EntryClass
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfilePtrOutput) JarName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return &v.JarName
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfilePtrOutput) JobJarDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return &v.JobJarDirectory
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfilePtrOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return v.SavePointName
	}).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfilePtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileResponse struct {
	// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
	Args *string `pulumi:"args"`
	// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
	EntryClass *string `pulumi:"entryClass"`
	// A string property that represents the name of the job JAR.
	JarName string `pulumi:"jarName"`
	// A string property that specifies the directory where the job JAR is located.
	JobJarDirectory string `pulumi:"jobJarDirectory"`
	// A string property that represents the name of the savepoint for the Flink job
	SavePointName *string `pulumi:"savePointName"`
	// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
	UpgradeMode string `pulumi:"upgradeMode"`
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileResponseOutput struct{ *pulumi.OutputState }

func (FlinkJobProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkJobProfileResponse)(nil)).Elem()
}

func (o FlinkJobProfileResponseOutput) ToFlinkJobProfileResponseOutput() FlinkJobProfileResponseOutput {
	return o
}

func (o FlinkJobProfileResponseOutput) ToFlinkJobProfileResponseOutputWithContext(ctx context.Context) FlinkJobProfileResponseOutput {
	return o
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfileResponseOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfileResponseOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) *string { return v.EntryClass }).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfileResponseOutput) JarName() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) string { return v.JarName }).(pulumi.StringOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfileResponseOutput) JobJarDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) string { return v.JobJarDirectory }).(pulumi.StringOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfileResponseOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) *string { return v.SavePointName }).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfileResponseOutput) UpgradeMode() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) string { return v.UpgradeMode }).(pulumi.StringOutput)
}

type FlinkJobProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkJobProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkJobProfileResponse)(nil)).Elem()
}

func (o FlinkJobProfileResponsePtrOutput) ToFlinkJobProfileResponsePtrOutput() FlinkJobProfileResponsePtrOutput {
	return o
}

func (o FlinkJobProfileResponsePtrOutput) ToFlinkJobProfileResponsePtrOutputWithContext(ctx context.Context) FlinkJobProfileResponsePtrOutput {
	return o
}

func (o FlinkJobProfileResponsePtrOutput) Elem() FlinkJobProfileResponseOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) FlinkJobProfileResponse {
		if v != nil {
			return *v
		}
		var ret FlinkJobProfileResponse
		return ret
	}).(FlinkJobProfileResponseOutput)
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfileResponsePtrOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfileResponsePtrOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EntryClass
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfileResponsePtrOutput) JarName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JarName
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfileResponsePtrOutput) JobJarDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobJarDirectory
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfileResponsePtrOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SavePointName
	}).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfileResponsePtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// The Flink cluster profile.
type FlinkProfile struct {
	// Flink cluster catalog options.
	CatalogOptions *FlinkCatalogOptions `pulumi:"catalogOptions"`
	// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
	DeploymentMode *string `pulumi:"deploymentMode"`
	// History Server container/ process CPU and memory requirements
	HistoryServer *ComputeResourceDefinition `pulumi:"historyServer"`
	// Job Manager container/ process CPU and memory requirements
	JobManager ComputeResourceDefinition `pulumi:"jobManager"`
	// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
	JobSpec *FlinkJobProfile `pulumi:"jobSpec"`
	// The number of task managers.
	NumReplicas *int `pulumi:"numReplicas"`
	// The storage profile
	Storage FlinkStorageProfile `pulumi:"storage"`
	// Task Manager container/ process CPU and memory requirements
	TaskManager ComputeResourceDefinition `pulumi:"taskManager"`
}

// Defaults sets the appropriate defaults for FlinkProfile
func (val *FlinkProfile) Defaults() *FlinkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CatalogOptions = tmp.CatalogOptions.Defaults()

	return &tmp
}

// FlinkProfileInput is an input type that accepts FlinkProfileArgs and FlinkProfileOutput values.
// You can construct a concrete instance of `FlinkProfileInput` via:
//
//	FlinkProfileArgs{...}
type FlinkProfileInput interface {
	pulumi.Input

	ToFlinkProfileOutput() FlinkProfileOutput
	ToFlinkProfileOutputWithContext(context.Context) FlinkProfileOutput
}

// The Flink cluster profile.
type FlinkProfileArgs struct {
	// Flink cluster catalog options.
	CatalogOptions FlinkCatalogOptionsPtrInput `pulumi:"catalogOptions"`
	// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
	DeploymentMode pulumi.StringPtrInput `pulumi:"deploymentMode"`
	// History Server container/ process CPU and memory requirements
	HistoryServer ComputeResourceDefinitionPtrInput `pulumi:"historyServer"`
	// Job Manager container/ process CPU and memory requirements
	JobManager ComputeResourceDefinitionInput `pulumi:"jobManager"`
	// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
	JobSpec FlinkJobProfilePtrInput `pulumi:"jobSpec"`
	// The number of task managers.
	NumReplicas pulumi.IntPtrInput `pulumi:"numReplicas"`
	// The storage profile
	Storage FlinkStorageProfileInput `pulumi:"storage"`
	// Task Manager container/ process CPU and memory requirements
	TaskManager ComputeResourceDefinitionInput `pulumi:"taskManager"`
}

// Defaults sets the appropriate defaults for FlinkProfileArgs
func (val *FlinkProfileArgs) Defaults() *FlinkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (FlinkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkProfile)(nil)).Elem()
}

func (i FlinkProfileArgs) ToFlinkProfileOutput() FlinkProfileOutput {
	return i.ToFlinkProfileOutputWithContext(context.Background())
}

func (i FlinkProfileArgs) ToFlinkProfileOutputWithContext(ctx context.Context) FlinkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkProfileOutput)
}

func (i FlinkProfileArgs) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return i.ToFlinkProfilePtrOutputWithContext(context.Background())
}

func (i FlinkProfileArgs) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkProfileOutput).ToFlinkProfilePtrOutputWithContext(ctx)
}

// FlinkProfilePtrInput is an input type that accepts FlinkProfileArgs, FlinkProfilePtr and FlinkProfilePtrOutput values.
// You can construct a concrete instance of `FlinkProfilePtrInput` via:
//
//	        FlinkProfileArgs{...}
//
//	or:
//
//	        nil
type FlinkProfilePtrInput interface {
	pulumi.Input

	ToFlinkProfilePtrOutput() FlinkProfilePtrOutput
	ToFlinkProfilePtrOutputWithContext(context.Context) FlinkProfilePtrOutput
}

type flinkProfilePtrType FlinkProfileArgs

func FlinkProfilePtr(v *FlinkProfileArgs) FlinkProfilePtrInput {
	return (*flinkProfilePtrType)(v)
}

func (*flinkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkProfile)(nil)).Elem()
}

func (i *flinkProfilePtrType) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return i.ToFlinkProfilePtrOutputWithContext(context.Background())
}

func (i *flinkProfilePtrType) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkProfilePtrOutput)
}

// The Flink cluster profile.
type FlinkProfileOutput struct{ *pulumi.OutputState }

func (FlinkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkProfile)(nil)).Elem()
}

func (o FlinkProfileOutput) ToFlinkProfileOutput() FlinkProfileOutput {
	return o
}

func (o FlinkProfileOutput) ToFlinkProfileOutputWithContext(ctx context.Context) FlinkProfileOutput {
	return o
}

func (o FlinkProfileOutput) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return o.ToFlinkProfilePtrOutputWithContext(context.Background())
}

func (o FlinkProfileOutput) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkProfile) *FlinkProfile {
		return &v
	}).(FlinkProfilePtrOutput)
}

// Flink cluster catalog options.
func (o FlinkProfileOutput) CatalogOptions() FlinkCatalogOptionsPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *FlinkCatalogOptions { return v.CatalogOptions }).(FlinkCatalogOptionsPtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfileOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *string { return v.DeploymentMode }).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfileOutput) HistoryServer() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *ComputeResourceDefinition { return v.HistoryServer }).(ComputeResourceDefinitionPtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfileOutput) JobManager() ComputeResourceDefinitionOutput {
	return o.ApplyT(func(v FlinkProfile) ComputeResourceDefinition { return v.JobManager }).(ComputeResourceDefinitionOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfileOutput) JobSpec() FlinkJobProfilePtrOutput {
	return o.ApplyT(func(v FlinkProfile) *FlinkJobProfile { return v.JobSpec }).(FlinkJobProfilePtrOutput)
}

// The number of task managers.
func (o FlinkProfileOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *int { return v.NumReplicas }).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfileOutput) Storage() FlinkStorageProfileOutput {
	return o.ApplyT(func(v FlinkProfile) FlinkStorageProfile { return v.Storage }).(FlinkStorageProfileOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfileOutput) TaskManager() ComputeResourceDefinitionOutput {
	return o.ApplyT(func(v FlinkProfile) ComputeResourceDefinition { return v.TaskManager }).(ComputeResourceDefinitionOutput)
}

type FlinkProfilePtrOutput struct{ *pulumi.OutputState }

func (FlinkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkProfile)(nil)).Elem()
}

func (o FlinkProfilePtrOutput) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return o
}

func (o FlinkProfilePtrOutput) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return o
}

func (o FlinkProfilePtrOutput) Elem() FlinkProfileOutput {
	return o.ApplyT(func(v *FlinkProfile) FlinkProfile {
		if v != nil {
			return *v
		}
		var ret FlinkProfile
		return ret
	}).(FlinkProfileOutput)
}

// Flink cluster catalog options.
func (o FlinkProfilePtrOutput) CatalogOptions() FlinkCatalogOptionsPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *FlinkCatalogOptions {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(FlinkCatalogOptionsPtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfilePtrOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentMode
	}).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfilePtrOutput) HistoryServer() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *ComputeResourceDefinition {
		if v == nil {
			return nil
		}
		return v.HistoryServer
	}).(ComputeResourceDefinitionPtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfilePtrOutput) JobManager() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *ComputeResourceDefinition {
		if v == nil {
			return nil
		}
		return &v.JobManager
	}).(ComputeResourceDefinitionPtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfilePtrOutput) JobSpec() FlinkJobProfilePtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *FlinkJobProfile {
		if v == nil {
			return nil
		}
		return v.JobSpec
	}).(FlinkJobProfilePtrOutput)
}

// The number of task managers.
func (o FlinkProfilePtrOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *int {
		if v == nil {
			return nil
		}
		return v.NumReplicas
	}).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfilePtrOutput) Storage() FlinkStorageProfilePtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *FlinkStorageProfile {
		if v == nil {
			return nil
		}
		return &v.Storage
	}).(FlinkStorageProfilePtrOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfilePtrOutput) TaskManager() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *ComputeResourceDefinition {
		if v == nil {
			return nil
		}
		return &v.TaskManager
	}).(ComputeResourceDefinitionPtrOutput)
}

// The Flink cluster profile.
type FlinkProfileResponse struct {
	// Flink cluster catalog options.
	CatalogOptions *FlinkCatalogOptionsResponse `pulumi:"catalogOptions"`
	// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
	DeploymentMode *string `pulumi:"deploymentMode"`
	// History Server container/ process CPU and memory requirements
	HistoryServer *ComputeResourceDefinitionResponse `pulumi:"historyServer"`
	// Job Manager container/ process CPU and memory requirements
	JobManager ComputeResourceDefinitionResponse `pulumi:"jobManager"`
	// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
	JobSpec *FlinkJobProfileResponse `pulumi:"jobSpec"`
	// The number of task managers.
	NumReplicas *int `pulumi:"numReplicas"`
	// The storage profile
	Storage FlinkStorageProfileResponse `pulumi:"storage"`
	// Task Manager container/ process CPU and memory requirements
	TaskManager ComputeResourceDefinitionResponse `pulumi:"taskManager"`
}

// Defaults sets the appropriate defaults for FlinkProfileResponse
func (val *FlinkProfileResponse) Defaults() *FlinkProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CatalogOptions = tmp.CatalogOptions.Defaults()

	return &tmp
}

// The Flink cluster profile.
type FlinkProfileResponseOutput struct{ *pulumi.OutputState }

func (FlinkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkProfileResponse)(nil)).Elem()
}

func (o FlinkProfileResponseOutput) ToFlinkProfileResponseOutput() FlinkProfileResponseOutput {
	return o
}

func (o FlinkProfileResponseOutput) ToFlinkProfileResponseOutputWithContext(ctx context.Context) FlinkProfileResponseOutput {
	return o
}

// Flink cluster catalog options.
func (o FlinkProfileResponseOutput) CatalogOptions() FlinkCatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *FlinkCatalogOptionsResponse { return v.CatalogOptions }).(FlinkCatalogOptionsResponsePtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfileResponseOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *string { return v.DeploymentMode }).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfileResponseOutput) HistoryServer() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *ComputeResourceDefinitionResponse { return v.HistoryServer }).(ComputeResourceDefinitionResponsePtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfileResponseOutput) JobManager() ComputeResourceDefinitionResponseOutput {
	return o.ApplyT(func(v FlinkProfileResponse) ComputeResourceDefinitionResponse { return v.JobManager }).(ComputeResourceDefinitionResponseOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfileResponseOutput) JobSpec() FlinkJobProfileResponsePtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *FlinkJobProfileResponse { return v.JobSpec }).(FlinkJobProfileResponsePtrOutput)
}

// The number of task managers.
func (o FlinkProfileResponseOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *int { return v.NumReplicas }).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfileResponseOutput) Storage() FlinkStorageProfileResponseOutput {
	return o.ApplyT(func(v FlinkProfileResponse) FlinkStorageProfileResponse { return v.Storage }).(FlinkStorageProfileResponseOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfileResponseOutput) TaskManager() ComputeResourceDefinitionResponseOutput {
	return o.ApplyT(func(v FlinkProfileResponse) ComputeResourceDefinitionResponse { return v.TaskManager }).(ComputeResourceDefinitionResponseOutput)
}

type FlinkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkProfileResponse)(nil)).Elem()
}

func (o FlinkProfileResponsePtrOutput) ToFlinkProfileResponsePtrOutput() FlinkProfileResponsePtrOutput {
	return o
}

func (o FlinkProfileResponsePtrOutput) ToFlinkProfileResponsePtrOutputWithContext(ctx context.Context) FlinkProfileResponsePtrOutput {
	return o
}

func (o FlinkProfileResponsePtrOutput) Elem() FlinkProfileResponseOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) FlinkProfileResponse {
		if v != nil {
			return *v
		}
		var ret FlinkProfileResponse
		return ret
	}).(FlinkProfileResponseOutput)
}

// Flink cluster catalog options.
func (o FlinkProfileResponsePtrOutput) CatalogOptions() FlinkCatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *FlinkCatalogOptionsResponse {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(FlinkCatalogOptionsResponsePtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfileResponsePtrOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentMode
	}).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfileResponsePtrOutput) HistoryServer() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *ComputeResourceDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.HistoryServer
	}).(ComputeResourceDefinitionResponsePtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfileResponsePtrOutput) JobManager() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *ComputeResourceDefinitionResponse {
		if v == nil {
			return nil
		}
		return &v.JobManager
	}).(ComputeResourceDefinitionResponsePtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfileResponsePtrOutput) JobSpec() FlinkJobProfileResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *FlinkJobProfileResponse {
		if v == nil {
			return nil
		}
		return v.JobSpec
	}).(FlinkJobProfileResponsePtrOutput)
}

// The number of task managers.
func (o FlinkProfileResponsePtrOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumReplicas
	}).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfileResponsePtrOutput) Storage() FlinkStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *FlinkStorageProfileResponse {
		if v == nil {
			return nil
		}
		return &v.Storage
	}).(FlinkStorageProfileResponsePtrOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfileResponsePtrOutput) TaskManager() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *ComputeResourceDefinitionResponse {
		if v == nil {
			return nil
		}
		return &v.TaskManager
	}).(ComputeResourceDefinitionResponsePtrOutput)
}

// The storage profile
type FlinkStorageProfile struct {
	// Storage account uri which is used for savepoint and checkpoint state.
	StorageUri string `pulumi:"storageUri"`
	// Storage key is only required for wasb(s) storage.
	Storagekey *string `pulumi:"storagekey"`
}

// FlinkStorageProfileInput is an input type that accepts FlinkStorageProfileArgs and FlinkStorageProfileOutput values.
// You can construct a concrete instance of `FlinkStorageProfileInput` via:
//
//	FlinkStorageProfileArgs{...}
type FlinkStorageProfileInput interface {
	pulumi.Input

	ToFlinkStorageProfileOutput() FlinkStorageProfileOutput
	ToFlinkStorageProfileOutputWithContext(context.Context) FlinkStorageProfileOutput
}

// The storage profile
type FlinkStorageProfileArgs struct {
	// Storage account uri which is used for savepoint and checkpoint state.
	StorageUri pulumi.StringInput `pulumi:"storageUri"`
	// Storage key is only required for wasb(s) storage.
	Storagekey pulumi.StringPtrInput `pulumi:"storagekey"`
}

func (FlinkStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkStorageProfile)(nil)).Elem()
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfileOutput() FlinkStorageProfileOutput {
	return i.ToFlinkStorageProfileOutputWithContext(context.Background())
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfileOutputWithContext(ctx context.Context) FlinkStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkStorageProfileOutput)
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return i.ToFlinkStorageProfilePtrOutputWithContext(context.Background())
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkStorageProfileOutput).ToFlinkStorageProfilePtrOutputWithContext(ctx)
}

// FlinkStorageProfilePtrInput is an input type that accepts FlinkStorageProfileArgs, FlinkStorageProfilePtr and FlinkStorageProfilePtrOutput values.
// You can construct a concrete instance of `FlinkStorageProfilePtrInput` via:
//
//	        FlinkStorageProfileArgs{...}
//
//	or:
//
//	        nil
type FlinkStorageProfilePtrInput interface {
	pulumi.Input

	ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput
	ToFlinkStorageProfilePtrOutputWithContext(context.Context) FlinkStorageProfilePtrOutput
}

type flinkStorageProfilePtrType FlinkStorageProfileArgs

func FlinkStorageProfilePtr(v *FlinkStorageProfileArgs) FlinkStorageProfilePtrInput {
	return (*flinkStorageProfilePtrType)(v)
}

func (*flinkStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkStorageProfile)(nil)).Elem()
}

func (i *flinkStorageProfilePtrType) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return i.ToFlinkStorageProfilePtrOutputWithContext(context.Background())
}

func (i *flinkStorageProfilePtrType) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkStorageProfilePtrOutput)
}

// The storage profile
type FlinkStorageProfileOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkStorageProfile)(nil)).Elem()
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfileOutput() FlinkStorageProfileOutput {
	return o
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfileOutputWithContext(ctx context.Context) FlinkStorageProfileOutput {
	return o
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return o.ToFlinkStorageProfilePtrOutputWithContext(context.Background())
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkStorageProfile) *FlinkStorageProfile {
		return &v
	}).(FlinkStorageProfilePtrOutput)
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfileOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkStorageProfile) string { return v.StorageUri }).(pulumi.StringOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfileOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkStorageProfile) *string { return v.Storagekey }).(pulumi.StringPtrOutput)
}

type FlinkStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkStorageProfile)(nil)).Elem()
}

func (o FlinkStorageProfilePtrOutput) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return o
}

func (o FlinkStorageProfilePtrOutput) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return o
}

func (o FlinkStorageProfilePtrOutput) Elem() FlinkStorageProfileOutput {
	return o.ApplyT(func(v *FlinkStorageProfile) FlinkStorageProfile {
		if v != nil {
			return *v
		}
		var ret FlinkStorageProfile
		return ret
	}).(FlinkStorageProfileOutput)
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfilePtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfile) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfilePtrOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfile) *string {
		if v == nil {
			return nil
		}
		return v.Storagekey
	}).(pulumi.StringPtrOutput)
}

// The storage profile
type FlinkStorageProfileResponse struct {
	// Storage account uri which is used for savepoint and checkpoint state.
	StorageUri string `pulumi:"storageUri"`
	// Storage key is only required for wasb(s) storage.
	Storagekey *string `pulumi:"storagekey"`
}

// The storage profile
type FlinkStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkStorageProfileResponse)(nil)).Elem()
}

func (o FlinkStorageProfileResponseOutput) ToFlinkStorageProfileResponseOutput() FlinkStorageProfileResponseOutput {
	return o
}

func (o FlinkStorageProfileResponseOutput) ToFlinkStorageProfileResponseOutputWithContext(ctx context.Context) FlinkStorageProfileResponseOutput {
	return o
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfileResponseOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkStorageProfileResponse) string { return v.StorageUri }).(pulumi.StringOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfileResponseOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkStorageProfileResponse) *string { return v.Storagekey }).(pulumi.StringPtrOutput)
}

type FlinkStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkStorageProfileResponse)(nil)).Elem()
}

func (o FlinkStorageProfileResponsePtrOutput) ToFlinkStorageProfileResponsePtrOutput() FlinkStorageProfileResponsePtrOutput {
	return o
}

func (o FlinkStorageProfileResponsePtrOutput) ToFlinkStorageProfileResponsePtrOutputWithContext(ctx context.Context) FlinkStorageProfileResponsePtrOutput {
	return o
}

func (o FlinkStorageProfileResponsePtrOutput) Elem() FlinkStorageProfileResponseOutput {
	return o.ApplyT(func(v *FlinkStorageProfileResponse) FlinkStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret FlinkStorageProfileResponse
		return ret
	}).(FlinkStorageProfileResponseOutput)
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfileResponsePtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfileResponsePtrOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Storagekey
	}).(pulumi.StringPtrOutput)
}

// Hive Catalog Option
type HiveCatalogOption struct {
	// Name of trino catalog which should use specified hive metastore.
	CatalogName string `pulumi:"catalogName"`
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
	// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
	MetastoreWarehouseDir string `pulumi:"metastoreWarehouseDir"`
}

// Defaults sets the appropriate defaults for HiveCatalogOption
func (val *HiveCatalogOption) Defaults() *HiveCatalogOption {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// HiveCatalogOptionInput is an input type that accepts HiveCatalogOptionArgs and HiveCatalogOptionOutput values.
// You can construct a concrete instance of `HiveCatalogOptionInput` via:
//
//	HiveCatalogOptionArgs{...}
type HiveCatalogOptionInput interface {
	pulumi.Input

	ToHiveCatalogOptionOutput() HiveCatalogOptionOutput
	ToHiveCatalogOptionOutputWithContext(context.Context) HiveCatalogOptionOutput
}

// Hive Catalog Option
type HiveCatalogOptionArgs struct {
	// Name of trino catalog which should use specified hive metastore.
	CatalogName pulumi.StringInput `pulumi:"catalogName"`
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode pulumi.StringPtrInput `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret pulumi.StringPtrInput `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL pulumi.StringInput `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName pulumi.StringPtrInput `pulumi:"metastoreDbConnectionUserName"`
	// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
	MetastoreWarehouseDir pulumi.StringInput `pulumi:"metastoreWarehouseDir"`
}

// Defaults sets the appropriate defaults for HiveCatalogOptionArgs
func (val *HiveCatalogOptionArgs) Defaults() *HiveCatalogOptionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		tmp.MetastoreDbConnectionAuthenticationMode = pulumi.StringPtr("IdentityAuth")
	}
	return &tmp
}
func (HiveCatalogOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveCatalogOption)(nil)).Elem()
}

func (i HiveCatalogOptionArgs) ToHiveCatalogOptionOutput() HiveCatalogOptionOutput {
	return i.ToHiveCatalogOptionOutputWithContext(context.Background())
}

func (i HiveCatalogOptionArgs) ToHiveCatalogOptionOutputWithContext(ctx context.Context) HiveCatalogOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveCatalogOptionOutput)
}

// HiveCatalogOptionArrayInput is an input type that accepts HiveCatalogOptionArray and HiveCatalogOptionArrayOutput values.
// You can construct a concrete instance of `HiveCatalogOptionArrayInput` via:
//
//	HiveCatalogOptionArray{ HiveCatalogOptionArgs{...} }
type HiveCatalogOptionArrayInput interface {
	pulumi.Input

	ToHiveCatalogOptionArrayOutput() HiveCatalogOptionArrayOutput
	ToHiveCatalogOptionArrayOutputWithContext(context.Context) HiveCatalogOptionArrayOutput
}

type HiveCatalogOptionArray []HiveCatalogOptionInput

func (HiveCatalogOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HiveCatalogOption)(nil)).Elem()
}

func (i HiveCatalogOptionArray) ToHiveCatalogOptionArrayOutput() HiveCatalogOptionArrayOutput {
	return i.ToHiveCatalogOptionArrayOutputWithContext(context.Background())
}

func (i HiveCatalogOptionArray) ToHiveCatalogOptionArrayOutputWithContext(ctx context.Context) HiveCatalogOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveCatalogOptionArrayOutput)
}

// Hive Catalog Option
type HiveCatalogOptionOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveCatalogOption)(nil)).Elem()
}

func (o HiveCatalogOptionOutput) ToHiveCatalogOptionOutput() HiveCatalogOptionOutput {
	return o
}

func (o HiveCatalogOptionOutput) ToHiveCatalogOptionOutputWithContext(ctx context.Context) HiveCatalogOptionOutput {
	return o
}

// Name of trino catalog which should use specified hive metastore.
func (o HiveCatalogOptionOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOption) string { return v.CatalogName }).(pulumi.StringOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o HiveCatalogOptionOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOption) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o HiveCatalogOptionOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOption) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o HiveCatalogOptionOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOption) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o HiveCatalogOptionOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOption) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
func (o HiveCatalogOptionOutput) MetastoreWarehouseDir() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOption) string { return v.MetastoreWarehouseDir }).(pulumi.StringOutput)
}

type HiveCatalogOptionArrayOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HiveCatalogOption)(nil)).Elem()
}

func (o HiveCatalogOptionArrayOutput) ToHiveCatalogOptionArrayOutput() HiveCatalogOptionArrayOutput {
	return o
}

func (o HiveCatalogOptionArrayOutput) ToHiveCatalogOptionArrayOutputWithContext(ctx context.Context) HiveCatalogOptionArrayOutput {
	return o
}

func (o HiveCatalogOptionArrayOutput) Index(i pulumi.IntInput) HiveCatalogOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HiveCatalogOption {
		return vs[0].([]HiveCatalogOption)[vs[1].(int)]
	}).(HiveCatalogOptionOutput)
}

// Hive Catalog Option
type HiveCatalogOptionResponse struct {
	// Name of trino catalog which should use specified hive metastore.
	CatalogName string `pulumi:"catalogName"`
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
	// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
	MetastoreWarehouseDir string `pulumi:"metastoreWarehouseDir"`
}

// Defaults sets the appropriate defaults for HiveCatalogOptionResponse
func (val *HiveCatalogOptionResponse) Defaults() *HiveCatalogOptionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// Hive Catalog Option
type HiveCatalogOptionResponseOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveCatalogOptionResponse)(nil)).Elem()
}

func (o HiveCatalogOptionResponseOutput) ToHiveCatalogOptionResponseOutput() HiveCatalogOptionResponseOutput {
	return o
}

func (o HiveCatalogOptionResponseOutput) ToHiveCatalogOptionResponseOutputWithContext(ctx context.Context) HiveCatalogOptionResponseOutput {
	return o
}

// Name of trino catalog which should use specified hive metastore.
func (o HiveCatalogOptionResponseOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) string { return v.CatalogName }).(pulumi.StringOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
func (o HiveCatalogOptionResponseOutput) MetastoreWarehouseDir() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) string { return v.MetastoreWarehouseDir }).(pulumi.StringOutput)
}

type HiveCatalogOptionResponseArrayOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HiveCatalogOptionResponse)(nil)).Elem()
}

func (o HiveCatalogOptionResponseArrayOutput) ToHiveCatalogOptionResponseArrayOutput() HiveCatalogOptionResponseArrayOutput {
	return o
}

func (o HiveCatalogOptionResponseArrayOutput) ToHiveCatalogOptionResponseArrayOutputWithContext(ctx context.Context) HiveCatalogOptionResponseArrayOutput {
	return o
}

func (o HiveCatalogOptionResponseArrayOutput) Index(i pulumi.IntInput) HiveCatalogOptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HiveCatalogOptionResponse {
		return vs[0].([]HiveCatalogOptionResponse)[vs[1].(int)]
	}).(HiveCatalogOptionResponseOutput)
}

// Identity Profile with details of an MSI.
type IdentityProfile struct {
	// ClientId of the MSI.
	MsiClientId string `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId string `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId string `pulumi:"msiResourceId"`
}

// IdentityProfileInput is an input type that accepts IdentityProfileArgs and IdentityProfileOutput values.
// You can construct a concrete instance of `IdentityProfileInput` via:
//
//	IdentityProfileArgs{...}
type IdentityProfileInput interface {
	pulumi.Input

	ToIdentityProfileOutput() IdentityProfileOutput
	ToIdentityProfileOutputWithContext(context.Context) IdentityProfileOutput
}

// Identity Profile with details of an MSI.
type IdentityProfileArgs struct {
	// ClientId of the MSI.
	MsiClientId pulumi.StringInput `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId pulumi.StringInput `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId pulumi.StringInput `pulumi:"msiResourceId"`
}

func (IdentityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProfile)(nil)).Elem()
}

func (i IdentityProfileArgs) ToIdentityProfileOutput() IdentityProfileOutput {
	return i.ToIdentityProfileOutputWithContext(context.Background())
}

func (i IdentityProfileArgs) ToIdentityProfileOutputWithContext(ctx context.Context) IdentityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProfileOutput)
}

func (i IdentityProfileArgs) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return i.ToIdentityProfilePtrOutputWithContext(context.Background())
}

func (i IdentityProfileArgs) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProfileOutput).ToIdentityProfilePtrOutputWithContext(ctx)
}

// IdentityProfilePtrInput is an input type that accepts IdentityProfileArgs, IdentityProfilePtr and IdentityProfilePtrOutput values.
// You can construct a concrete instance of `IdentityProfilePtrInput` via:
//
//	        IdentityProfileArgs{...}
//
//	or:
//
//	        nil
type IdentityProfilePtrInput interface {
	pulumi.Input

	ToIdentityProfilePtrOutput() IdentityProfilePtrOutput
	ToIdentityProfilePtrOutputWithContext(context.Context) IdentityProfilePtrOutput
}

type identityProfilePtrType IdentityProfileArgs

func IdentityProfilePtr(v *IdentityProfileArgs) IdentityProfilePtrInput {
	return (*identityProfilePtrType)(v)
}

func (*identityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProfile)(nil)).Elem()
}

func (i *identityProfilePtrType) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return i.ToIdentityProfilePtrOutputWithContext(context.Background())
}

func (i *identityProfilePtrType) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProfilePtrOutput)
}

// Identity Profile with details of an MSI.
type IdentityProfileOutput struct{ *pulumi.OutputState }

func (IdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProfile)(nil)).Elem()
}

func (o IdentityProfileOutput) ToIdentityProfileOutput() IdentityProfileOutput {
	return o
}

func (o IdentityProfileOutput) ToIdentityProfileOutputWithContext(ctx context.Context) IdentityProfileOutput {
	return o
}

func (o IdentityProfileOutput) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return o.ToIdentityProfilePtrOutputWithContext(context.Background())
}

func (o IdentityProfileOutput) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProfile) *IdentityProfile {
		return &v
	}).(IdentityProfilePtrOutput)
}

// ClientId of the MSI.
func (o IdentityProfileOutput) MsiClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfile) string { return v.MsiClientId }).(pulumi.StringOutput)
}

// ObjectId of the MSI.
func (o IdentityProfileOutput) MsiObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfile) string { return v.MsiObjectId }).(pulumi.StringOutput)
}

// ResourceId of the MSI.
func (o IdentityProfileOutput) MsiResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfile) string { return v.MsiResourceId }).(pulumi.StringOutput)
}

type IdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (IdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProfile)(nil)).Elem()
}

func (o IdentityProfilePtrOutput) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return o
}

func (o IdentityProfilePtrOutput) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return o
}

func (o IdentityProfilePtrOutput) Elem() IdentityProfileOutput {
	return o.ApplyT(func(v *IdentityProfile) IdentityProfile {
		if v != nil {
			return *v
		}
		var ret IdentityProfile
		return ret
	}).(IdentityProfileOutput)
}

// ClientId of the MSI.
func (o IdentityProfilePtrOutput) MsiClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiClientId
	}).(pulumi.StringPtrOutput)
}

// ObjectId of the MSI.
func (o IdentityProfilePtrOutput) MsiObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiObjectId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the MSI.
func (o IdentityProfilePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Identity Profile with details of an MSI.
type IdentityProfileResponse struct {
	// ClientId of the MSI.
	MsiClientId string `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId string `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId string `pulumi:"msiResourceId"`
}

// Identity Profile with details of an MSI.
type IdentityProfileResponseOutput struct{ *pulumi.OutputState }

func (IdentityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProfileResponse)(nil)).Elem()
}

func (o IdentityProfileResponseOutput) ToIdentityProfileResponseOutput() IdentityProfileResponseOutput {
	return o
}

func (o IdentityProfileResponseOutput) ToIdentityProfileResponseOutputWithContext(ctx context.Context) IdentityProfileResponseOutput {
	return o
}

// ClientId of the MSI.
func (o IdentityProfileResponseOutput) MsiClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfileResponse) string { return v.MsiClientId }).(pulumi.StringOutput)
}

// ObjectId of the MSI.
func (o IdentityProfileResponseOutput) MsiObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfileResponse) string { return v.MsiObjectId }).(pulumi.StringOutput)
}

// ResourceId of the MSI.
func (o IdentityProfileResponseOutput) MsiResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfileResponse) string { return v.MsiResourceId }).(pulumi.StringOutput)
}

type IdentityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProfileResponse)(nil)).Elem()
}

func (o IdentityProfileResponsePtrOutput) ToIdentityProfileResponsePtrOutput() IdentityProfileResponsePtrOutput {
	return o
}

func (o IdentityProfileResponsePtrOutput) ToIdentityProfileResponsePtrOutputWithContext(ctx context.Context) IdentityProfileResponsePtrOutput {
	return o
}

func (o IdentityProfileResponsePtrOutput) Elem() IdentityProfileResponseOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) IdentityProfileResponse {
		if v != nil {
			return *v
		}
		var ret IdentityProfileResponse
		return ret
	}).(IdentityProfileResponseOutput)
}

// ClientId of the MSI.
func (o IdentityProfileResponsePtrOutput) MsiClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MsiClientId
	}).(pulumi.StringPtrOutput)
}

// ObjectId of the MSI.
func (o IdentityProfileResponsePtrOutput) MsiObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MsiObjectId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the MSI.
func (o IdentityProfileResponsePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Kafka bootstrap server and broker related connectivity endpoints.
type KafkaConnectivityEndpointsResponse struct {
	// bootstrap server connectivity endpoint.
	BootstrapServerEndpoint *string `pulumi:"bootstrapServerEndpoint"`
	// Kafka broker endpoint list.
	BrokerEndpoints []string `pulumi:"brokerEndpoints"`
}

// Kafka bootstrap server and broker related connectivity endpoints.
type KafkaConnectivityEndpointsResponseOutput struct{ *pulumi.OutputState }

func (KafkaConnectivityEndpointsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaConnectivityEndpointsResponse)(nil)).Elem()
}

func (o KafkaConnectivityEndpointsResponseOutput) ToKafkaConnectivityEndpointsResponseOutput() KafkaConnectivityEndpointsResponseOutput {
	return o
}

func (o KafkaConnectivityEndpointsResponseOutput) ToKafkaConnectivityEndpointsResponseOutputWithContext(ctx context.Context) KafkaConnectivityEndpointsResponseOutput {
	return o
}

// bootstrap server connectivity endpoint.
func (o KafkaConnectivityEndpointsResponseOutput) BootstrapServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaConnectivityEndpointsResponse) *string { return v.BootstrapServerEndpoint }).(pulumi.StringPtrOutput)
}

// Kafka broker endpoint list.
func (o KafkaConnectivityEndpointsResponseOutput) BrokerEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaConnectivityEndpointsResponse) []string { return v.BrokerEndpoints }).(pulumi.StringArrayOutput)
}

type KafkaConnectivityEndpointsResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaConnectivityEndpointsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectivityEndpointsResponse)(nil)).Elem()
}

func (o KafkaConnectivityEndpointsResponsePtrOutput) ToKafkaConnectivityEndpointsResponsePtrOutput() KafkaConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o KafkaConnectivityEndpointsResponsePtrOutput) ToKafkaConnectivityEndpointsResponsePtrOutputWithContext(ctx context.Context) KafkaConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o KafkaConnectivityEndpointsResponsePtrOutput) Elem() KafkaConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v *KafkaConnectivityEndpointsResponse) KafkaConnectivityEndpointsResponse {
		if v != nil {
			return *v
		}
		var ret KafkaConnectivityEndpointsResponse
		return ret
	}).(KafkaConnectivityEndpointsResponseOutput)
}

// bootstrap server connectivity endpoint.
func (o KafkaConnectivityEndpointsResponsePtrOutput) BootstrapServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectivityEndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Kafka broker endpoint list.
func (o KafkaConnectivityEndpointsResponsePtrOutput) BrokerEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KafkaConnectivityEndpointsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BrokerEndpoints
	}).(pulumi.StringArrayOutput)
}

// The Kafka cluster profile.
type KafkaProfile struct {
	// Kafka disk storage profile.
	DiskStorage DiskStorageProfile `pulumi:"diskStorage"`
	// Expose Kafka cluster in KRaft mode.
	EnableKRaft *bool `pulumi:"enableKRaft"`
	// Expose worker nodes as public endpoints.
	EnablePublicEndpoints *bool `pulumi:"enablePublicEndpoints"`
	// Fully qualified path of Azure Storage container used for Tiered Storage.
	RemoteStorageUri *string `pulumi:"remoteStorageUri"`
}

// Defaults sets the appropriate defaults for KafkaProfile
func (val *KafkaProfile) Defaults() *KafkaProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableKRaft == nil {
		enableKRaft_ := true
		tmp.EnableKRaft = &enableKRaft_
	}
	if tmp.EnablePublicEndpoints == nil {
		enablePublicEndpoints_ := false
		tmp.EnablePublicEndpoints = &enablePublicEndpoints_
	}
	return &tmp
}

// KafkaProfileInput is an input type that accepts KafkaProfileArgs and KafkaProfileOutput values.
// You can construct a concrete instance of `KafkaProfileInput` via:
//
//	KafkaProfileArgs{...}
type KafkaProfileInput interface {
	pulumi.Input

	ToKafkaProfileOutput() KafkaProfileOutput
	ToKafkaProfileOutputWithContext(context.Context) KafkaProfileOutput
}

// The Kafka cluster profile.
type KafkaProfileArgs struct {
	// Kafka disk storage profile.
	DiskStorage DiskStorageProfileInput `pulumi:"diskStorage"`
	// Expose Kafka cluster in KRaft mode.
	EnableKRaft pulumi.BoolPtrInput `pulumi:"enableKRaft"`
	// Expose worker nodes as public endpoints.
	EnablePublicEndpoints pulumi.BoolPtrInput `pulumi:"enablePublicEndpoints"`
	// Fully qualified path of Azure Storage container used for Tiered Storage.
	RemoteStorageUri pulumi.StringPtrInput `pulumi:"remoteStorageUri"`
}

// Defaults sets the appropriate defaults for KafkaProfileArgs
func (val *KafkaProfileArgs) Defaults() *KafkaProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableKRaft == nil {
		tmp.EnableKRaft = pulumi.BoolPtr(true)
	}
	if tmp.EnablePublicEndpoints == nil {
		tmp.EnablePublicEndpoints = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (KafkaProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaProfile)(nil)).Elem()
}

func (i KafkaProfileArgs) ToKafkaProfileOutput() KafkaProfileOutput {
	return i.ToKafkaProfileOutputWithContext(context.Background())
}

func (i KafkaProfileArgs) ToKafkaProfileOutputWithContext(ctx context.Context) KafkaProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaProfileOutput)
}

func (i KafkaProfileArgs) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return i.ToKafkaProfilePtrOutputWithContext(context.Background())
}

func (i KafkaProfileArgs) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaProfileOutput).ToKafkaProfilePtrOutputWithContext(ctx)
}

// KafkaProfilePtrInput is an input type that accepts KafkaProfileArgs, KafkaProfilePtr and KafkaProfilePtrOutput values.
// You can construct a concrete instance of `KafkaProfilePtrInput` via:
//
//	        KafkaProfileArgs{...}
//
//	or:
//
//	        nil
type KafkaProfilePtrInput interface {
	pulumi.Input

	ToKafkaProfilePtrOutput() KafkaProfilePtrOutput
	ToKafkaProfilePtrOutputWithContext(context.Context) KafkaProfilePtrOutput
}

type kafkaProfilePtrType KafkaProfileArgs

func KafkaProfilePtr(v *KafkaProfileArgs) KafkaProfilePtrInput {
	return (*kafkaProfilePtrType)(v)
}

func (*kafkaProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaProfile)(nil)).Elem()
}

func (i *kafkaProfilePtrType) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return i.ToKafkaProfilePtrOutputWithContext(context.Background())
}

func (i *kafkaProfilePtrType) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaProfilePtrOutput)
}

// The Kafka cluster profile.
type KafkaProfileOutput struct{ *pulumi.OutputState }

func (KafkaProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaProfile)(nil)).Elem()
}

func (o KafkaProfileOutput) ToKafkaProfileOutput() KafkaProfileOutput {
	return o
}

func (o KafkaProfileOutput) ToKafkaProfileOutputWithContext(ctx context.Context) KafkaProfileOutput {
	return o
}

func (o KafkaProfileOutput) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return o.ToKafkaProfilePtrOutputWithContext(context.Background())
}

func (o KafkaProfileOutput) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaProfile) *KafkaProfile {
		return &v
	}).(KafkaProfilePtrOutput)
}

// Kafka disk storage profile.
func (o KafkaProfileOutput) DiskStorage() DiskStorageProfileOutput {
	return o.ApplyT(func(v KafkaProfile) DiskStorageProfile { return v.DiskStorage }).(DiskStorageProfileOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfileOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfile) *bool { return v.EnableKRaft }).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfileOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfile) *bool { return v.EnablePublicEndpoints }).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfileOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaProfile) *string { return v.RemoteStorageUri }).(pulumi.StringPtrOutput)
}

type KafkaProfilePtrOutput struct{ *pulumi.OutputState }

func (KafkaProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaProfile)(nil)).Elem()
}

func (o KafkaProfilePtrOutput) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return o
}

func (o KafkaProfilePtrOutput) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return o
}

func (o KafkaProfilePtrOutput) Elem() KafkaProfileOutput {
	return o.ApplyT(func(v *KafkaProfile) KafkaProfile {
		if v != nil {
			return *v
		}
		var ret KafkaProfile
		return ret
	}).(KafkaProfileOutput)
}

// Kafka disk storage profile.
func (o KafkaProfilePtrOutput) DiskStorage() DiskStorageProfilePtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *DiskStorageProfile {
		if v == nil {
			return nil
		}
		return &v.DiskStorage
	}).(DiskStorageProfilePtrOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfilePtrOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKRaft
	}).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfilePtrOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePublicEndpoints
	}).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfilePtrOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *string {
		if v == nil {
			return nil
		}
		return v.RemoteStorageUri
	}).(pulumi.StringPtrOutput)
}

// The Kafka cluster profile.
type KafkaProfileResponse struct {
	// Kafka bootstrap server and brokers related connectivity endpoints.
	ConnectivityEndpoints KafkaConnectivityEndpointsResponse `pulumi:"connectivityEndpoints"`
	// Kafka disk storage profile.
	DiskStorage DiskStorageProfileResponse `pulumi:"diskStorage"`
	// Expose Kafka cluster in KRaft mode.
	EnableKRaft *bool `pulumi:"enableKRaft"`
	// Expose worker nodes as public endpoints.
	EnablePublicEndpoints *bool `pulumi:"enablePublicEndpoints"`
	// Fully qualified path of Azure Storage container used for Tiered Storage.
	RemoteStorageUri *string `pulumi:"remoteStorageUri"`
}

// Defaults sets the appropriate defaults for KafkaProfileResponse
func (val *KafkaProfileResponse) Defaults() *KafkaProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableKRaft == nil {
		enableKRaft_ := true
		tmp.EnableKRaft = &enableKRaft_
	}
	if tmp.EnablePublicEndpoints == nil {
		enablePublicEndpoints_ := false
		tmp.EnablePublicEndpoints = &enablePublicEndpoints_
	}
	return &tmp
}

// The Kafka cluster profile.
type KafkaProfileResponseOutput struct{ *pulumi.OutputState }

func (KafkaProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaProfileResponse)(nil)).Elem()
}

func (o KafkaProfileResponseOutput) ToKafkaProfileResponseOutput() KafkaProfileResponseOutput {
	return o
}

func (o KafkaProfileResponseOutput) ToKafkaProfileResponseOutputWithContext(ctx context.Context) KafkaProfileResponseOutput {
	return o
}

// Kafka bootstrap server and brokers related connectivity endpoints.
func (o KafkaProfileResponseOutput) ConnectivityEndpoints() KafkaConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v KafkaProfileResponse) KafkaConnectivityEndpointsResponse { return v.ConnectivityEndpoints }).(KafkaConnectivityEndpointsResponseOutput)
}

// Kafka disk storage profile.
func (o KafkaProfileResponseOutput) DiskStorage() DiskStorageProfileResponseOutput {
	return o.ApplyT(func(v KafkaProfileResponse) DiskStorageProfileResponse { return v.DiskStorage }).(DiskStorageProfileResponseOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfileResponseOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfileResponse) *bool { return v.EnableKRaft }).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfileResponseOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfileResponse) *bool { return v.EnablePublicEndpoints }).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfileResponseOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaProfileResponse) *string { return v.RemoteStorageUri }).(pulumi.StringPtrOutput)
}

type KafkaProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaProfileResponse)(nil)).Elem()
}

func (o KafkaProfileResponsePtrOutput) ToKafkaProfileResponsePtrOutput() KafkaProfileResponsePtrOutput {
	return o
}

func (o KafkaProfileResponsePtrOutput) ToKafkaProfileResponsePtrOutputWithContext(ctx context.Context) KafkaProfileResponsePtrOutput {
	return o
}

func (o KafkaProfileResponsePtrOutput) Elem() KafkaProfileResponseOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) KafkaProfileResponse {
		if v != nil {
			return *v
		}
		var ret KafkaProfileResponse
		return ret
	}).(KafkaProfileResponseOutput)
}

// Kafka bootstrap server and brokers related connectivity endpoints.
func (o KafkaProfileResponsePtrOutput) ConnectivityEndpoints() KafkaConnectivityEndpointsResponsePtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *KafkaConnectivityEndpointsResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectivityEndpoints
	}).(KafkaConnectivityEndpointsResponsePtrOutput)
}

// Kafka disk storage profile.
func (o KafkaProfileResponsePtrOutput) DiskStorage() DiskStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *DiskStorageProfileResponse {
		if v == nil {
			return nil
		}
		return &v.DiskStorage
	}).(DiskStorageProfileResponsePtrOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfileResponsePtrOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKRaft
	}).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfileResponsePtrOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePublicEndpoints
	}).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfileResponsePtrOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteStorageUri
	}).(pulumi.StringPtrOutput)
}

// Profile of load based Autoscale.
type LoadBasedConfig struct {
	// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MaxNodes int `pulumi:"maxNodes"`
	// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MinNodes int `pulumi:"minNodes"`
	// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
	PollInterval *int `pulumi:"pollInterval"`
	// The scaling rules.
	ScalingRules []ScalingRule `pulumi:"scalingRules"`
}

// LoadBasedConfigInput is an input type that accepts LoadBasedConfigArgs and LoadBasedConfigOutput values.
// You can construct a concrete instance of `LoadBasedConfigInput` via:
//
//	LoadBasedConfigArgs{...}
type LoadBasedConfigInput interface {
	pulumi.Input

	ToLoadBasedConfigOutput() LoadBasedConfigOutput
	ToLoadBasedConfigOutputWithContext(context.Context) LoadBasedConfigOutput
}

// Profile of load based Autoscale.
type LoadBasedConfigArgs struct {
	// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
	CooldownPeriod pulumi.IntPtrInput `pulumi:"cooldownPeriod"`
	// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MaxNodes pulumi.IntInput `pulumi:"maxNodes"`
	// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MinNodes pulumi.IntInput `pulumi:"minNodes"`
	// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
	PollInterval pulumi.IntPtrInput `pulumi:"pollInterval"`
	// The scaling rules.
	ScalingRules ScalingRuleArrayInput `pulumi:"scalingRules"`
}

func (LoadBasedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBasedConfig)(nil)).Elem()
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigOutput() LoadBasedConfigOutput {
	return i.ToLoadBasedConfigOutputWithContext(context.Background())
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigOutputWithContext(ctx context.Context) LoadBasedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBasedConfigOutput)
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return i.ToLoadBasedConfigPtrOutputWithContext(context.Background())
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBasedConfigOutput).ToLoadBasedConfigPtrOutputWithContext(ctx)
}

// LoadBasedConfigPtrInput is an input type that accepts LoadBasedConfigArgs, LoadBasedConfigPtr and LoadBasedConfigPtrOutput values.
// You can construct a concrete instance of `LoadBasedConfigPtrInput` via:
//
//	        LoadBasedConfigArgs{...}
//
//	or:
//
//	        nil
type LoadBasedConfigPtrInput interface {
	pulumi.Input

	ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput
	ToLoadBasedConfigPtrOutputWithContext(context.Context) LoadBasedConfigPtrOutput
}

type loadBasedConfigPtrType LoadBasedConfigArgs

func LoadBasedConfigPtr(v *LoadBasedConfigArgs) LoadBasedConfigPtrInput {
	return (*loadBasedConfigPtrType)(v)
}

func (*loadBasedConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBasedConfig)(nil)).Elem()
}

func (i *loadBasedConfigPtrType) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return i.ToLoadBasedConfigPtrOutputWithContext(context.Background())
}

func (i *loadBasedConfigPtrType) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBasedConfigPtrOutput)
}

// Profile of load based Autoscale.
type LoadBasedConfigOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBasedConfig)(nil)).Elem()
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigOutput() LoadBasedConfigOutput {
	return o
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigOutputWithContext(ctx context.Context) LoadBasedConfigOutput {
	return o
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return o.ToLoadBasedConfigPtrOutputWithContext(context.Background())
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBasedConfig) *LoadBasedConfig {
		return &v
	}).(LoadBasedConfigPtrOutput)
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfig) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfig) int { return v.MaxNodes }).(pulumi.IntOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfig) int { return v.MinNodes }).(pulumi.IntOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfig) *int { return v.PollInterval }).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigOutput) ScalingRules() ScalingRuleArrayOutput {
	return o.ApplyT(func(v LoadBasedConfig) []ScalingRule { return v.ScalingRules }).(ScalingRuleArrayOutput)
}

type LoadBasedConfigPtrOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBasedConfig)(nil)).Elem()
}

func (o LoadBasedConfigPtrOutput) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return o
}

func (o LoadBasedConfigPtrOutput) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return o
}

func (o LoadBasedConfigPtrOutput) Elem() LoadBasedConfigOutput {
	return o.ApplyT(func(v *LoadBasedConfig) LoadBasedConfig {
		if v != nil {
			return *v
		}
		var ret LoadBasedConfig
		return ret
	}).(LoadBasedConfigOutput)
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigPtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigPtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigPtrOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return v.PollInterval
	}).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigPtrOutput) ScalingRules() ScalingRuleArrayOutput {
	return o.ApplyT(func(v *LoadBasedConfig) []ScalingRule {
		if v == nil {
			return nil
		}
		return v.ScalingRules
	}).(ScalingRuleArrayOutput)
}

// Profile of load based Autoscale.
type LoadBasedConfigResponse struct {
	// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MaxNodes int `pulumi:"maxNodes"`
	// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MinNodes int `pulumi:"minNodes"`
	// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
	PollInterval *int `pulumi:"pollInterval"`
	// The scaling rules.
	ScalingRules []ScalingRuleResponse `pulumi:"scalingRules"`
}

// Profile of load based Autoscale.
type LoadBasedConfigResponseOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBasedConfigResponse)(nil)).Elem()
}

func (o LoadBasedConfigResponseOutput) ToLoadBasedConfigResponseOutput() LoadBasedConfigResponseOutput {
	return o
}

func (o LoadBasedConfigResponseOutput) ToLoadBasedConfigResponseOutputWithContext(ctx context.Context) LoadBasedConfigResponseOutput {
	return o
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigResponseOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponseOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) int { return v.MaxNodes }).(pulumi.IntOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponseOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) int { return v.MinNodes }).(pulumi.IntOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigResponseOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) *int { return v.PollInterval }).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigResponseOutput) ScalingRules() ScalingRuleResponseArrayOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) []ScalingRuleResponse { return v.ScalingRules }).(ScalingRuleResponseArrayOutput)
}

type LoadBasedConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBasedConfigResponse)(nil)).Elem()
}

func (o LoadBasedConfigResponsePtrOutput) ToLoadBasedConfigResponsePtrOutput() LoadBasedConfigResponsePtrOutput {
	return o
}

func (o LoadBasedConfigResponsePtrOutput) ToLoadBasedConfigResponsePtrOutputWithContext(ctx context.Context) LoadBasedConfigResponsePtrOutput {
	return o
}

func (o LoadBasedConfigResponsePtrOutput) Elem() LoadBasedConfigResponseOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) LoadBasedConfigResponse {
		if v != nil {
			return *v
		}
		var ret LoadBasedConfigResponse
		return ret
	}).(LoadBasedConfigResponseOutput)
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigResponsePtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponsePtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponsePtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigResponsePtrOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.PollInterval
	}).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigResponsePtrOutput) ScalingRules() ScalingRuleResponseArrayOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) []ScalingRuleResponse {
		if v == nil {
			return nil
		}
		return v.ScalingRules
	}).(ScalingRuleResponseArrayOutput)
}

// The details of managed identity.
type ManagedIdentityProfile struct {
	// The list of managed identity.
	IdentityList []ManagedIdentitySpec `pulumi:"identityList"`
}

// ManagedIdentityProfileInput is an input type that accepts ManagedIdentityProfileArgs and ManagedIdentityProfileOutput values.
// You can construct a concrete instance of `ManagedIdentityProfileInput` via:
//
//	ManagedIdentityProfileArgs{...}
type ManagedIdentityProfileInput interface {
	pulumi.Input

	ToManagedIdentityProfileOutput() ManagedIdentityProfileOutput
	ToManagedIdentityProfileOutputWithContext(context.Context) ManagedIdentityProfileOutput
}

// The details of managed identity.
type ManagedIdentityProfileArgs struct {
	// The list of managed identity.
	IdentityList ManagedIdentitySpecArrayInput `pulumi:"identityList"`
}

func (ManagedIdentityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityProfile)(nil)).Elem()
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfileOutput() ManagedIdentityProfileOutput {
	return i.ToManagedIdentityProfileOutputWithContext(context.Background())
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfileOutputWithContext(ctx context.Context) ManagedIdentityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityProfileOutput)
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return i.ToManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityProfileOutput).ToManagedIdentityProfilePtrOutputWithContext(ctx)
}

// ManagedIdentityProfilePtrInput is an input type that accepts ManagedIdentityProfileArgs, ManagedIdentityProfilePtr and ManagedIdentityProfilePtrOutput values.
// You can construct a concrete instance of `ManagedIdentityProfilePtrInput` via:
//
//	        ManagedIdentityProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityProfilePtrInput interface {
	pulumi.Input

	ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput
	ToManagedIdentityProfilePtrOutputWithContext(context.Context) ManagedIdentityProfilePtrOutput
}

type managedIdentityProfilePtrType ManagedIdentityProfileArgs

func ManagedIdentityProfilePtr(v *ManagedIdentityProfileArgs) ManagedIdentityProfilePtrInput {
	return (*managedIdentityProfilePtrType)(v)
}

func (*managedIdentityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityProfile)(nil)).Elem()
}

func (i *managedIdentityProfilePtrType) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return i.ToManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (i *managedIdentityProfilePtrType) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityProfilePtrOutput)
}

// The details of managed identity.
type ManagedIdentityProfileOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityProfile)(nil)).Elem()
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfileOutput() ManagedIdentityProfileOutput {
	return o
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfileOutputWithContext(ctx context.Context) ManagedIdentityProfileOutput {
	return o
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return o.ToManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityProfile) *ManagedIdentityProfile {
		return &v
	}).(ManagedIdentityProfilePtrOutput)
}

// The list of managed identity.
func (o ManagedIdentityProfileOutput) IdentityList() ManagedIdentitySpecArrayOutput {
	return o.ApplyT(func(v ManagedIdentityProfile) []ManagedIdentitySpec { return v.IdentityList }).(ManagedIdentitySpecArrayOutput)
}

type ManagedIdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityProfile)(nil)).Elem()
}

func (o ManagedIdentityProfilePtrOutput) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return o
}

func (o ManagedIdentityProfilePtrOutput) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return o
}

func (o ManagedIdentityProfilePtrOutput) Elem() ManagedIdentityProfileOutput {
	return o.ApplyT(func(v *ManagedIdentityProfile) ManagedIdentityProfile {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityProfile
		return ret
	}).(ManagedIdentityProfileOutput)
}

// The list of managed identity.
func (o ManagedIdentityProfilePtrOutput) IdentityList() ManagedIdentitySpecArrayOutput {
	return o.ApplyT(func(v *ManagedIdentityProfile) []ManagedIdentitySpec {
		if v == nil {
			return nil
		}
		return v.IdentityList
	}).(ManagedIdentitySpecArrayOutput)
}

// The details of managed identity.
type ManagedIdentityProfileResponse struct {
	// The list of managed identity.
	IdentityList []ManagedIdentitySpecResponse `pulumi:"identityList"`
}

// The details of managed identity.
type ManagedIdentityProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityProfileResponse)(nil)).Elem()
}

func (o ManagedIdentityProfileResponseOutput) ToManagedIdentityProfileResponseOutput() ManagedIdentityProfileResponseOutput {
	return o
}

func (o ManagedIdentityProfileResponseOutput) ToManagedIdentityProfileResponseOutputWithContext(ctx context.Context) ManagedIdentityProfileResponseOutput {
	return o
}

// The list of managed identity.
func (o ManagedIdentityProfileResponseOutput) IdentityList() ManagedIdentitySpecResponseArrayOutput {
	return o.ApplyT(func(v ManagedIdentityProfileResponse) []ManagedIdentitySpecResponse { return v.IdentityList }).(ManagedIdentitySpecResponseArrayOutput)
}

type ManagedIdentityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityProfileResponse)(nil)).Elem()
}

func (o ManagedIdentityProfileResponsePtrOutput) ToManagedIdentityProfileResponsePtrOutput() ManagedIdentityProfileResponsePtrOutput {
	return o
}

func (o ManagedIdentityProfileResponsePtrOutput) ToManagedIdentityProfileResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityProfileResponsePtrOutput {
	return o
}

func (o ManagedIdentityProfileResponsePtrOutput) Elem() ManagedIdentityProfileResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityProfileResponse) ManagedIdentityProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityProfileResponse
		return ret
	}).(ManagedIdentityProfileResponseOutput)
}

// The list of managed identity.
func (o ManagedIdentityProfileResponsePtrOutput) IdentityList() ManagedIdentitySpecResponseArrayOutput {
	return o.ApplyT(func(v *ManagedIdentityProfileResponse) []ManagedIdentitySpecResponse {
		if v == nil {
			return nil
		}
		return v.IdentityList
	}).(ManagedIdentitySpecResponseArrayOutput)
}

// The details of a managed identity.
type ManagedIdentitySpec struct {
	// ClientId of the managed identity.
	ClientId string `pulumi:"clientId"`
	// ObjectId of the managed identity.
	ObjectId string `pulumi:"objectId"`
	// ResourceId of the managed identity.
	ResourceId string `pulumi:"resourceId"`
	// The type of managed identity.
	Type string `pulumi:"type"`
}

// ManagedIdentitySpecInput is an input type that accepts ManagedIdentitySpecArgs and ManagedIdentitySpecOutput values.
// You can construct a concrete instance of `ManagedIdentitySpecInput` via:
//
//	ManagedIdentitySpecArgs{...}
type ManagedIdentitySpecInput interface {
	pulumi.Input

	ToManagedIdentitySpecOutput() ManagedIdentitySpecOutput
	ToManagedIdentitySpecOutputWithContext(context.Context) ManagedIdentitySpecOutput
}

// The details of a managed identity.
type ManagedIdentitySpecArgs struct {
	// ClientId of the managed identity.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// ObjectId of the managed identity.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// ResourceId of the managed identity.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The type of managed identity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIdentitySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySpec)(nil)).Elem()
}

func (i ManagedIdentitySpecArgs) ToManagedIdentitySpecOutput() ManagedIdentitySpecOutput {
	return i.ToManagedIdentitySpecOutputWithContext(context.Background())
}

func (i ManagedIdentitySpecArgs) ToManagedIdentitySpecOutputWithContext(ctx context.Context) ManagedIdentitySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySpecOutput)
}

// ManagedIdentitySpecArrayInput is an input type that accepts ManagedIdentitySpecArray and ManagedIdentitySpecArrayOutput values.
// You can construct a concrete instance of `ManagedIdentitySpecArrayInput` via:
//
//	ManagedIdentitySpecArray{ ManagedIdentitySpecArgs{...} }
type ManagedIdentitySpecArrayInput interface {
	pulumi.Input

	ToManagedIdentitySpecArrayOutput() ManagedIdentitySpecArrayOutput
	ToManagedIdentitySpecArrayOutputWithContext(context.Context) ManagedIdentitySpecArrayOutput
}

type ManagedIdentitySpecArray []ManagedIdentitySpecInput

func (ManagedIdentitySpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIdentitySpec)(nil)).Elem()
}

func (i ManagedIdentitySpecArray) ToManagedIdentitySpecArrayOutput() ManagedIdentitySpecArrayOutput {
	return i.ToManagedIdentitySpecArrayOutputWithContext(context.Background())
}

func (i ManagedIdentitySpecArray) ToManagedIdentitySpecArrayOutputWithContext(ctx context.Context) ManagedIdentitySpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySpecArrayOutput)
}

// The details of a managed identity.
type ManagedIdentitySpecOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySpec)(nil)).Elem()
}

func (o ManagedIdentitySpecOutput) ToManagedIdentitySpecOutput() ManagedIdentitySpecOutput {
	return o
}

func (o ManagedIdentitySpecOutput) ToManagedIdentitySpecOutputWithContext(ctx context.Context) ManagedIdentitySpecOutput {
	return o
}

// ClientId of the managed identity.
func (o ManagedIdentitySpecOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.ClientId }).(pulumi.StringOutput)
}

// ObjectId of the managed identity.
func (o ManagedIdentitySpecOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.ObjectId }).(pulumi.StringOutput)
}

// ResourceId of the managed identity.
func (o ManagedIdentitySpecOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of managed identity.
func (o ManagedIdentitySpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedIdentitySpecArrayOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIdentitySpec)(nil)).Elem()
}

func (o ManagedIdentitySpecArrayOutput) ToManagedIdentitySpecArrayOutput() ManagedIdentitySpecArrayOutput {
	return o
}

func (o ManagedIdentitySpecArrayOutput) ToManagedIdentitySpecArrayOutputWithContext(ctx context.Context) ManagedIdentitySpecArrayOutput {
	return o
}

func (o ManagedIdentitySpecArrayOutput) Index(i pulumi.IntInput) ManagedIdentitySpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIdentitySpec {
		return vs[0].([]ManagedIdentitySpec)[vs[1].(int)]
	}).(ManagedIdentitySpecOutput)
}

// The details of a managed identity.
type ManagedIdentitySpecResponse struct {
	// ClientId of the managed identity.
	ClientId string `pulumi:"clientId"`
	// ObjectId of the managed identity.
	ObjectId string `pulumi:"objectId"`
	// ResourceId of the managed identity.
	ResourceId string `pulumi:"resourceId"`
	// The type of managed identity.
	Type string `pulumi:"type"`
}

// The details of a managed identity.
type ManagedIdentitySpecResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySpecResponse)(nil)).Elem()
}

func (o ManagedIdentitySpecResponseOutput) ToManagedIdentitySpecResponseOutput() ManagedIdentitySpecResponseOutput {
	return o
}

func (o ManagedIdentitySpecResponseOutput) ToManagedIdentitySpecResponseOutputWithContext(ctx context.Context) ManagedIdentitySpecResponseOutput {
	return o
}

// ClientId of the managed identity.
func (o ManagedIdentitySpecResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// ObjectId of the managed identity.
func (o ManagedIdentitySpecResponseOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.ObjectId }).(pulumi.StringOutput)
}

// ResourceId of the managed identity.
func (o ManagedIdentitySpecResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of managed identity.
func (o ManagedIdentitySpecResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedIdentitySpecResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIdentitySpecResponse)(nil)).Elem()
}

func (o ManagedIdentitySpecResponseArrayOutput) ToManagedIdentitySpecResponseArrayOutput() ManagedIdentitySpecResponseArrayOutput {
	return o
}

func (o ManagedIdentitySpecResponseArrayOutput) ToManagedIdentitySpecResponseArrayOutputWithContext(ctx context.Context) ManagedIdentitySpecResponseArrayOutput {
	return o
}

func (o ManagedIdentitySpecResponseArrayOutput) Index(i pulumi.IntInput) ManagedIdentitySpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIdentitySpecResponse {
		return vs[0].([]ManagedIdentitySpecResponse)[vs[1].(int)]
	}).(ManagedIdentitySpecResponseOutput)
}

// The node profile.
type NodeProfile struct {
	// The number of virtual machines.
	Count int `pulumi:"count"`
	// The node type.
	Type string `pulumi:"type"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// NodeProfileInput is an input type that accepts NodeProfileArgs and NodeProfileOutput values.
// You can construct a concrete instance of `NodeProfileInput` via:
//
//	NodeProfileArgs{...}
type NodeProfileInput interface {
	pulumi.Input

	ToNodeProfileOutput() NodeProfileOutput
	ToNodeProfileOutputWithContext(context.Context) NodeProfileOutput
}

// The node profile.
type NodeProfileArgs struct {
	// The number of virtual machines.
	Count pulumi.IntInput `pulumi:"count"`
	// The node type.
	Type pulumi.StringInput `pulumi:"type"`
	// The virtual machine SKU.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (NodeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfile)(nil)).Elem()
}

func (i NodeProfileArgs) ToNodeProfileOutput() NodeProfileOutput {
	return i.ToNodeProfileOutputWithContext(context.Background())
}

func (i NodeProfileArgs) ToNodeProfileOutputWithContext(ctx context.Context) NodeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProfileOutput)
}

// NodeProfileArrayInput is an input type that accepts NodeProfileArray and NodeProfileArrayOutput values.
// You can construct a concrete instance of `NodeProfileArrayInput` via:
//
//	NodeProfileArray{ NodeProfileArgs{...} }
type NodeProfileArrayInput interface {
	pulumi.Input

	ToNodeProfileArrayOutput() NodeProfileArrayOutput
	ToNodeProfileArrayOutputWithContext(context.Context) NodeProfileArrayOutput
}

type NodeProfileArray []NodeProfileInput

func (NodeProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProfile)(nil)).Elem()
}

func (i NodeProfileArray) ToNodeProfileArrayOutput() NodeProfileArrayOutput {
	return i.ToNodeProfileArrayOutputWithContext(context.Background())
}

func (i NodeProfileArray) ToNodeProfileArrayOutputWithContext(ctx context.Context) NodeProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProfileArrayOutput)
}

// The node profile.
type NodeProfileOutput struct{ *pulumi.OutputState }

func (NodeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfile)(nil)).Elem()
}

func (o NodeProfileOutput) ToNodeProfileOutput() NodeProfileOutput {
	return o
}

func (o NodeProfileOutput) ToNodeProfileOutputWithContext(ctx context.Context) NodeProfileOutput {
	return o
}

// The number of virtual machines.
func (o NodeProfileOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v NodeProfile) int { return v.Count }).(pulumi.IntOutput)
}

// The node type.
func (o NodeProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfile) string { return v.Type }).(pulumi.StringOutput)
}

// The virtual machine SKU.
func (o NodeProfileOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfile) string { return v.VmSize }).(pulumi.StringOutput)
}

type NodeProfileArrayOutput struct{ *pulumi.OutputState }

func (NodeProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProfile)(nil)).Elem()
}

func (o NodeProfileArrayOutput) ToNodeProfileArrayOutput() NodeProfileArrayOutput {
	return o
}

func (o NodeProfileArrayOutput) ToNodeProfileArrayOutputWithContext(ctx context.Context) NodeProfileArrayOutput {
	return o
}

func (o NodeProfileArrayOutput) Index(i pulumi.IntInput) NodeProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeProfile {
		return vs[0].([]NodeProfile)[vs[1].(int)]
	}).(NodeProfileOutput)
}

// The node profile.
type NodeProfileResponse struct {
	// The number of virtual machines.
	Count int `pulumi:"count"`
	// The node type.
	Type string `pulumi:"type"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// The node profile.
type NodeProfileResponseOutput struct{ *pulumi.OutputState }

func (NodeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfileResponse)(nil)).Elem()
}

func (o NodeProfileResponseOutput) ToNodeProfileResponseOutput() NodeProfileResponseOutput {
	return o
}

func (o NodeProfileResponseOutput) ToNodeProfileResponseOutputWithContext(ctx context.Context) NodeProfileResponseOutput {
	return o
}

// The number of virtual machines.
func (o NodeProfileResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v NodeProfileResponse) int { return v.Count }).(pulumi.IntOutput)
}

// The node type.
func (o NodeProfileResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfileResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The virtual machine SKU.
func (o NodeProfileResponseOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfileResponse) string { return v.VmSize }).(pulumi.StringOutput)
}

type NodeProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProfileResponse)(nil)).Elem()
}

func (o NodeProfileResponseArrayOutput) ToNodeProfileResponseArrayOutput() NodeProfileResponseArrayOutput {
	return o
}

func (o NodeProfileResponseArrayOutput) ToNodeProfileResponseArrayOutputWithContext(ctx context.Context) NodeProfileResponseArrayOutput {
	return o
}

func (o NodeProfileResponseArrayOutput) Index(i pulumi.IntInput) NodeProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeProfileResponse {
		return vs[0].([]NodeProfileResponse)[vs[1].(int)]
	}).(NodeProfileResponseOutput)
}

// Specification for the Ranger Admin service.
type RangerAdminSpec struct {
	// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
	Admins   []string                `pulumi:"admins"`
	Database RangerAdminSpecDatabase `pulumi:"database"`
}

// RangerAdminSpecInput is an input type that accepts RangerAdminSpecArgs and RangerAdminSpecOutput values.
// You can construct a concrete instance of `RangerAdminSpecInput` via:
//
//	RangerAdminSpecArgs{...}
type RangerAdminSpecInput interface {
	pulumi.Input

	ToRangerAdminSpecOutput() RangerAdminSpecOutput
	ToRangerAdminSpecOutputWithContext(context.Context) RangerAdminSpecOutput
}

// Specification for the Ranger Admin service.
type RangerAdminSpecArgs struct {
	// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
	Admins   pulumi.StringArrayInput      `pulumi:"admins"`
	Database RangerAdminSpecDatabaseInput `pulumi:"database"`
}

func (RangerAdminSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpec)(nil)).Elem()
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecOutput() RangerAdminSpecOutput {
	return i.ToRangerAdminSpecOutputWithContext(context.Background())
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecOutputWithContext(ctx context.Context) RangerAdminSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecOutput)
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return i.ToRangerAdminSpecPtrOutputWithContext(context.Background())
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecOutput).ToRangerAdminSpecPtrOutputWithContext(ctx)
}

// RangerAdminSpecPtrInput is an input type that accepts RangerAdminSpecArgs, RangerAdminSpecPtr and RangerAdminSpecPtrOutput values.
// You can construct a concrete instance of `RangerAdminSpecPtrInput` via:
//
//	        RangerAdminSpecArgs{...}
//
//	or:
//
//	        nil
type RangerAdminSpecPtrInput interface {
	pulumi.Input

	ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput
	ToRangerAdminSpecPtrOutputWithContext(context.Context) RangerAdminSpecPtrOutput
}

type rangerAdminSpecPtrType RangerAdminSpecArgs

func RangerAdminSpecPtr(v *RangerAdminSpecArgs) RangerAdminSpecPtrInput {
	return (*rangerAdminSpecPtrType)(v)
}

func (*rangerAdminSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpec)(nil)).Elem()
}

func (i *rangerAdminSpecPtrType) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return i.ToRangerAdminSpecPtrOutputWithContext(context.Background())
}

func (i *rangerAdminSpecPtrType) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecPtrOutput)
}

// Specification for the Ranger Admin service.
type RangerAdminSpecOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpec)(nil)).Elem()
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecOutput() RangerAdminSpecOutput {
	return o
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecOutputWithContext(ctx context.Context) RangerAdminSpecOutput {
	return o
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return o.ToRangerAdminSpecPtrOutputWithContext(context.Background())
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerAdminSpec) *RangerAdminSpec {
		return &v
	}).(RangerAdminSpecPtrOutput)
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerAdminSpec) []string { return v.Admins }).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecOutput) Database() RangerAdminSpecDatabaseOutput {
	return o.ApplyT(func(v RangerAdminSpec) RangerAdminSpecDatabase { return v.Database }).(RangerAdminSpecDatabaseOutput)
}

type RangerAdminSpecPtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpec)(nil)).Elem()
}

func (o RangerAdminSpecPtrOutput) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return o
}

func (o RangerAdminSpecPtrOutput) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return o
}

func (o RangerAdminSpecPtrOutput) Elem() RangerAdminSpecOutput {
	return o.ApplyT(func(v *RangerAdminSpec) RangerAdminSpec {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpec
		return ret
	}).(RangerAdminSpecOutput)
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecPtrOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerAdminSpec) []string {
		if v == nil {
			return nil
		}
		return v.Admins
	}).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecPtrOutput) Database() RangerAdminSpecDatabasePtrOutput {
	return o.ApplyT(func(v *RangerAdminSpec) *RangerAdminSpecDatabase {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(RangerAdminSpecDatabasePtrOutput)
}

type RangerAdminSpecDatabase struct {
	// The database URL
	Host string `pulumi:"host"`
	// The database name
	Name string `pulumi:"name"`
	// Reference for the database password
	PasswordSecretRef *string `pulumi:"passwordSecretRef"`
	// The name of the database user
	Username *string `pulumi:"username"`
}

// RangerAdminSpecDatabaseInput is an input type that accepts RangerAdminSpecDatabaseArgs and RangerAdminSpecDatabaseOutput values.
// You can construct a concrete instance of `RangerAdminSpecDatabaseInput` via:
//
//	RangerAdminSpecDatabaseArgs{...}
type RangerAdminSpecDatabaseInput interface {
	pulumi.Input

	ToRangerAdminSpecDatabaseOutput() RangerAdminSpecDatabaseOutput
	ToRangerAdminSpecDatabaseOutputWithContext(context.Context) RangerAdminSpecDatabaseOutput
}

type RangerAdminSpecDatabaseArgs struct {
	// The database URL
	Host pulumi.StringInput `pulumi:"host"`
	// The database name
	Name pulumi.StringInput `pulumi:"name"`
	// Reference for the database password
	PasswordSecretRef pulumi.StringPtrInput `pulumi:"passwordSecretRef"`
	// The name of the database user
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RangerAdminSpecDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecDatabase)(nil)).Elem()
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabaseOutput() RangerAdminSpecDatabaseOutput {
	return i.ToRangerAdminSpecDatabaseOutputWithContext(context.Background())
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabaseOutputWithContext(ctx context.Context) RangerAdminSpecDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecDatabaseOutput)
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return i.ToRangerAdminSpecDatabasePtrOutputWithContext(context.Background())
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecDatabaseOutput).ToRangerAdminSpecDatabasePtrOutputWithContext(ctx)
}

// RangerAdminSpecDatabasePtrInput is an input type that accepts RangerAdminSpecDatabaseArgs, RangerAdminSpecDatabasePtr and RangerAdminSpecDatabasePtrOutput values.
// You can construct a concrete instance of `RangerAdminSpecDatabasePtrInput` via:
//
//	        RangerAdminSpecDatabaseArgs{...}
//
//	or:
//
//	        nil
type RangerAdminSpecDatabasePtrInput interface {
	pulumi.Input

	ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput
	ToRangerAdminSpecDatabasePtrOutputWithContext(context.Context) RangerAdminSpecDatabasePtrOutput
}

type rangerAdminSpecDatabasePtrType RangerAdminSpecDatabaseArgs

func RangerAdminSpecDatabasePtr(v *RangerAdminSpecDatabaseArgs) RangerAdminSpecDatabasePtrInput {
	return (*rangerAdminSpecDatabasePtrType)(v)
}

func (*rangerAdminSpecDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecDatabase)(nil)).Elem()
}

func (i *rangerAdminSpecDatabasePtrType) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return i.ToRangerAdminSpecDatabasePtrOutputWithContext(context.Background())
}

func (i *rangerAdminSpecDatabasePtrType) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecDatabasePtrOutput)
}

type RangerAdminSpecDatabaseOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecDatabase)(nil)).Elem()
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabaseOutput() RangerAdminSpecDatabaseOutput {
	return o
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabaseOutputWithContext(ctx context.Context) RangerAdminSpecDatabaseOutput {
	return o
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return o.ToRangerAdminSpecDatabasePtrOutputWithContext(context.Background())
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerAdminSpecDatabase) *RangerAdminSpecDatabase {
		return &v
	}).(RangerAdminSpecDatabasePtrOutput)
}

// The database URL
func (o RangerAdminSpecDatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) string { return v.Host }).(pulumi.StringOutput)
}

// The database name
func (o RangerAdminSpecDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// Reference for the database password
func (o RangerAdminSpecDatabaseOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) *string { return v.PasswordSecretRef }).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RangerAdminSpecDatabasePtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecDatabase)(nil)).Elem()
}

func (o RangerAdminSpecDatabasePtrOutput) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecDatabasePtrOutput) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecDatabasePtrOutput) Elem() RangerAdminSpecDatabaseOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) RangerAdminSpecDatabase {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpecDatabase
		return ret
	}).(RangerAdminSpecDatabaseOutput)
}

// The database URL
func (o RangerAdminSpecDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The database name
func (o RangerAdminSpecDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference for the database password
func (o RangerAdminSpecDatabasePtrOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecretRef
	}).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Specification for the Ranger Admin service.
type RangerAdminSpecResponse struct {
	// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
	Admins   []string                        `pulumi:"admins"`
	Database RangerAdminSpecResponseDatabase `pulumi:"database"`
}

// Specification for the Ranger Admin service.
type RangerAdminSpecResponseOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecResponse)(nil)).Elem()
}

func (o RangerAdminSpecResponseOutput) ToRangerAdminSpecResponseOutput() RangerAdminSpecResponseOutput {
	return o
}

func (o RangerAdminSpecResponseOutput) ToRangerAdminSpecResponseOutputWithContext(ctx context.Context) RangerAdminSpecResponseOutput {
	return o
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecResponseOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerAdminSpecResponse) []string { return v.Admins }).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecResponseOutput) Database() RangerAdminSpecResponseDatabaseOutput {
	return o.ApplyT(func(v RangerAdminSpecResponse) RangerAdminSpecResponseDatabase { return v.Database }).(RangerAdminSpecResponseDatabaseOutput)
}

type RangerAdminSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecResponse)(nil)).Elem()
}

func (o RangerAdminSpecResponsePtrOutput) ToRangerAdminSpecResponsePtrOutput() RangerAdminSpecResponsePtrOutput {
	return o
}

func (o RangerAdminSpecResponsePtrOutput) ToRangerAdminSpecResponsePtrOutputWithContext(ctx context.Context) RangerAdminSpecResponsePtrOutput {
	return o
}

func (o RangerAdminSpecResponsePtrOutput) Elem() RangerAdminSpecResponseOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponse) RangerAdminSpecResponse {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpecResponse
		return ret
	}).(RangerAdminSpecResponseOutput)
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecResponsePtrOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Admins
	}).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecResponsePtrOutput) Database() RangerAdminSpecResponseDatabasePtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponse) *RangerAdminSpecResponseDatabase {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(RangerAdminSpecResponseDatabasePtrOutput)
}

type RangerAdminSpecResponseDatabase struct {
	// The database URL
	Host string `pulumi:"host"`
	// The database name
	Name string `pulumi:"name"`
	// Reference for the database password
	PasswordSecretRef *string `pulumi:"passwordSecretRef"`
	// The name of the database user
	Username *string `pulumi:"username"`
}

type RangerAdminSpecResponseDatabaseOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponseDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecResponseDatabase)(nil)).Elem()
}

func (o RangerAdminSpecResponseDatabaseOutput) ToRangerAdminSpecResponseDatabaseOutput() RangerAdminSpecResponseDatabaseOutput {
	return o
}

func (o RangerAdminSpecResponseDatabaseOutput) ToRangerAdminSpecResponseDatabaseOutputWithContext(ctx context.Context) RangerAdminSpecResponseDatabaseOutput {
	return o
}

// The database URL
func (o RangerAdminSpecResponseDatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) string { return v.Host }).(pulumi.StringOutput)
}

// The database name
func (o RangerAdminSpecResponseDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// Reference for the database password
func (o RangerAdminSpecResponseDatabaseOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) *string { return v.PasswordSecretRef }).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecResponseDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RangerAdminSpecResponseDatabasePtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponseDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecResponseDatabase)(nil)).Elem()
}

func (o RangerAdminSpecResponseDatabasePtrOutput) ToRangerAdminSpecResponseDatabasePtrOutput() RangerAdminSpecResponseDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecResponseDatabasePtrOutput) ToRangerAdminSpecResponseDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecResponseDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecResponseDatabasePtrOutput) Elem() RangerAdminSpecResponseDatabaseOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) RangerAdminSpecResponseDatabase {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpecResponseDatabase
		return ret
	}).(RangerAdminSpecResponseDatabaseOutput)
}

// The database URL
func (o RangerAdminSpecResponseDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The database name
func (o RangerAdminSpecResponseDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference for the database password
func (o RangerAdminSpecResponseDatabasePtrOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecretRef
	}).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecResponseDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Properties required to describe audit log storage.
type RangerAuditSpec struct {
	// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
	StorageAccount *string `pulumi:"storageAccount"`
}

// RangerAuditSpecInput is an input type that accepts RangerAuditSpecArgs and RangerAuditSpecOutput values.
// You can construct a concrete instance of `RangerAuditSpecInput` via:
//
//	RangerAuditSpecArgs{...}
type RangerAuditSpecInput interface {
	pulumi.Input

	ToRangerAuditSpecOutput() RangerAuditSpecOutput
	ToRangerAuditSpecOutputWithContext(context.Context) RangerAuditSpecOutput
}

// Properties required to describe audit log storage.
type RangerAuditSpecArgs struct {
	// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
	StorageAccount pulumi.StringPtrInput `pulumi:"storageAccount"`
}

func (RangerAuditSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAuditSpec)(nil)).Elem()
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecOutput() RangerAuditSpecOutput {
	return i.ToRangerAuditSpecOutputWithContext(context.Background())
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecOutputWithContext(ctx context.Context) RangerAuditSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAuditSpecOutput)
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return i.ToRangerAuditSpecPtrOutputWithContext(context.Background())
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAuditSpecOutput).ToRangerAuditSpecPtrOutputWithContext(ctx)
}

// RangerAuditSpecPtrInput is an input type that accepts RangerAuditSpecArgs, RangerAuditSpecPtr and RangerAuditSpecPtrOutput values.
// You can construct a concrete instance of `RangerAuditSpecPtrInput` via:
//
//	        RangerAuditSpecArgs{...}
//
//	or:
//
//	        nil
type RangerAuditSpecPtrInput interface {
	pulumi.Input

	ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput
	ToRangerAuditSpecPtrOutputWithContext(context.Context) RangerAuditSpecPtrOutput
}

type rangerAuditSpecPtrType RangerAuditSpecArgs

func RangerAuditSpecPtr(v *RangerAuditSpecArgs) RangerAuditSpecPtrInput {
	return (*rangerAuditSpecPtrType)(v)
}

func (*rangerAuditSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAuditSpec)(nil)).Elem()
}

func (i *rangerAuditSpecPtrType) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return i.ToRangerAuditSpecPtrOutputWithContext(context.Background())
}

func (i *rangerAuditSpecPtrType) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAuditSpecPtrOutput)
}

// Properties required to describe audit log storage.
type RangerAuditSpecOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAuditSpec)(nil)).Elem()
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecOutput() RangerAuditSpecOutput {
	return o
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecOutputWithContext(ctx context.Context) RangerAuditSpecOutput {
	return o
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return o.ToRangerAuditSpecPtrOutputWithContext(context.Background())
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerAuditSpec) *RangerAuditSpec {
		return &v
	}).(RangerAuditSpecPtrOutput)
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAuditSpec) *string { return v.StorageAccount }).(pulumi.StringPtrOutput)
}

type RangerAuditSpecPtrOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAuditSpec)(nil)).Elem()
}

func (o RangerAuditSpecPtrOutput) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return o
}

func (o RangerAuditSpecPtrOutput) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return o
}

func (o RangerAuditSpecPtrOutput) Elem() RangerAuditSpecOutput {
	return o.ApplyT(func(v *RangerAuditSpec) RangerAuditSpec {
		if v != nil {
			return *v
		}
		var ret RangerAuditSpec
		return ret
	}).(RangerAuditSpecOutput)
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecPtrOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAuditSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccount
	}).(pulumi.StringPtrOutput)
}

// Properties required to describe audit log storage.
type RangerAuditSpecResponse struct {
	// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
	StorageAccount *string `pulumi:"storageAccount"`
}

// Properties required to describe audit log storage.
type RangerAuditSpecResponseOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAuditSpecResponse)(nil)).Elem()
}

func (o RangerAuditSpecResponseOutput) ToRangerAuditSpecResponseOutput() RangerAuditSpecResponseOutput {
	return o
}

func (o RangerAuditSpecResponseOutput) ToRangerAuditSpecResponseOutputWithContext(ctx context.Context) RangerAuditSpecResponseOutput {
	return o
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecResponseOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAuditSpecResponse) *string { return v.StorageAccount }).(pulumi.StringPtrOutput)
}

type RangerAuditSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAuditSpecResponse)(nil)).Elem()
}

func (o RangerAuditSpecResponsePtrOutput) ToRangerAuditSpecResponsePtrOutput() RangerAuditSpecResponsePtrOutput {
	return o
}

func (o RangerAuditSpecResponsePtrOutput) ToRangerAuditSpecResponsePtrOutputWithContext(ctx context.Context) RangerAuditSpecResponsePtrOutput {
	return o
}

func (o RangerAuditSpecResponsePtrOutput) Elem() RangerAuditSpecResponseOutput {
	return o.ApplyT(func(v *RangerAuditSpecResponse) RangerAuditSpecResponse {
		if v != nil {
			return *v
		}
		var ret RangerAuditSpecResponse
		return ret
	}).(RangerAuditSpecResponseOutput)
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecResponsePtrOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAuditSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccount
	}).(pulumi.StringPtrOutput)
}

// The ranger cluster profile.
type RangerProfile struct {
	// Specification for the Ranger Admin service.
	RangerAdmin RangerAdminSpec `pulumi:"rangerAdmin"`
	// Properties required to describe audit log storage.
	RangerAudit *RangerAuditSpec `pulumi:"rangerAudit"`
	// Specification for the Ranger Usersync service
	RangerUsersync RangerUsersyncSpec `pulumi:"rangerUsersync"`
}

// Defaults sets the appropriate defaults for RangerProfile
func (val *RangerProfile) Defaults() *RangerProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RangerUsersync = *tmp.RangerUsersync.Defaults()

	return &tmp
}

// RangerProfileInput is an input type that accepts RangerProfileArgs and RangerProfileOutput values.
// You can construct a concrete instance of `RangerProfileInput` via:
//
//	RangerProfileArgs{...}
type RangerProfileInput interface {
	pulumi.Input

	ToRangerProfileOutput() RangerProfileOutput
	ToRangerProfileOutputWithContext(context.Context) RangerProfileOutput
}

// The ranger cluster profile.
type RangerProfileArgs struct {
	// Specification for the Ranger Admin service.
	RangerAdmin RangerAdminSpecInput `pulumi:"rangerAdmin"`
	// Properties required to describe audit log storage.
	RangerAudit RangerAuditSpecPtrInput `pulumi:"rangerAudit"`
	// Specification for the Ranger Usersync service
	RangerUsersync RangerUsersyncSpecInput `pulumi:"rangerUsersync"`
}

// Defaults sets the appropriate defaults for RangerProfileArgs
func (val *RangerProfileArgs) Defaults() *RangerProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (RangerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerProfile)(nil)).Elem()
}

func (i RangerProfileArgs) ToRangerProfileOutput() RangerProfileOutput {
	return i.ToRangerProfileOutputWithContext(context.Background())
}

func (i RangerProfileArgs) ToRangerProfileOutputWithContext(ctx context.Context) RangerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerProfileOutput)
}

func (i RangerProfileArgs) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return i.ToRangerProfilePtrOutputWithContext(context.Background())
}

func (i RangerProfileArgs) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerProfileOutput).ToRangerProfilePtrOutputWithContext(ctx)
}

// RangerProfilePtrInput is an input type that accepts RangerProfileArgs, RangerProfilePtr and RangerProfilePtrOutput values.
// You can construct a concrete instance of `RangerProfilePtrInput` via:
//
//	        RangerProfileArgs{...}
//
//	or:
//
//	        nil
type RangerProfilePtrInput interface {
	pulumi.Input

	ToRangerProfilePtrOutput() RangerProfilePtrOutput
	ToRangerProfilePtrOutputWithContext(context.Context) RangerProfilePtrOutput
}

type rangerProfilePtrType RangerProfileArgs

func RangerProfilePtr(v *RangerProfileArgs) RangerProfilePtrInput {
	return (*rangerProfilePtrType)(v)
}

func (*rangerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerProfile)(nil)).Elem()
}

func (i *rangerProfilePtrType) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return i.ToRangerProfilePtrOutputWithContext(context.Background())
}

func (i *rangerProfilePtrType) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerProfilePtrOutput)
}

// The ranger cluster profile.
type RangerProfileOutput struct{ *pulumi.OutputState }

func (RangerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerProfile)(nil)).Elem()
}

func (o RangerProfileOutput) ToRangerProfileOutput() RangerProfileOutput {
	return o
}

func (o RangerProfileOutput) ToRangerProfileOutputWithContext(ctx context.Context) RangerProfileOutput {
	return o
}

func (o RangerProfileOutput) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return o.ToRangerProfilePtrOutputWithContext(context.Background())
}

func (o RangerProfileOutput) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerProfile) *RangerProfile {
		return &v
	}).(RangerProfilePtrOutput)
}

// Specification for the Ranger Admin service.
func (o RangerProfileOutput) RangerAdmin() RangerAdminSpecOutput {
	return o.ApplyT(func(v RangerProfile) RangerAdminSpec { return v.RangerAdmin }).(RangerAdminSpecOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfileOutput) RangerAudit() RangerAuditSpecPtrOutput {
	return o.ApplyT(func(v RangerProfile) *RangerAuditSpec { return v.RangerAudit }).(RangerAuditSpecPtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfileOutput) RangerUsersync() RangerUsersyncSpecOutput {
	return o.ApplyT(func(v RangerProfile) RangerUsersyncSpec { return v.RangerUsersync }).(RangerUsersyncSpecOutput)
}

type RangerProfilePtrOutput struct{ *pulumi.OutputState }

func (RangerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerProfile)(nil)).Elem()
}

func (o RangerProfilePtrOutput) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return o
}

func (o RangerProfilePtrOutput) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return o
}

func (o RangerProfilePtrOutput) Elem() RangerProfileOutput {
	return o.ApplyT(func(v *RangerProfile) RangerProfile {
		if v != nil {
			return *v
		}
		var ret RangerProfile
		return ret
	}).(RangerProfileOutput)
}

// Specification for the Ranger Admin service.
func (o RangerProfilePtrOutput) RangerAdmin() RangerAdminSpecPtrOutput {
	return o.ApplyT(func(v *RangerProfile) *RangerAdminSpec {
		if v == nil {
			return nil
		}
		return &v.RangerAdmin
	}).(RangerAdminSpecPtrOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfilePtrOutput) RangerAudit() RangerAuditSpecPtrOutput {
	return o.ApplyT(func(v *RangerProfile) *RangerAuditSpec {
		if v == nil {
			return nil
		}
		return v.RangerAudit
	}).(RangerAuditSpecPtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfilePtrOutput) RangerUsersync() RangerUsersyncSpecPtrOutput {
	return o.ApplyT(func(v *RangerProfile) *RangerUsersyncSpec {
		if v == nil {
			return nil
		}
		return &v.RangerUsersync
	}).(RangerUsersyncSpecPtrOutput)
}

// The ranger cluster profile.
type RangerProfileResponse struct {
	// Specification for the Ranger Admin service.
	RangerAdmin RangerAdminSpecResponse `pulumi:"rangerAdmin"`
	// Properties required to describe audit log storage.
	RangerAudit *RangerAuditSpecResponse `pulumi:"rangerAudit"`
	// Specification for the Ranger Usersync service
	RangerUsersync RangerUsersyncSpecResponse `pulumi:"rangerUsersync"`
}

// Defaults sets the appropriate defaults for RangerProfileResponse
func (val *RangerProfileResponse) Defaults() *RangerProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RangerUsersync = *tmp.RangerUsersync.Defaults()

	return &tmp
}

// The ranger cluster profile.
type RangerProfileResponseOutput struct{ *pulumi.OutputState }

func (RangerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerProfileResponse)(nil)).Elem()
}

func (o RangerProfileResponseOutput) ToRangerProfileResponseOutput() RangerProfileResponseOutput {
	return o
}

func (o RangerProfileResponseOutput) ToRangerProfileResponseOutputWithContext(ctx context.Context) RangerProfileResponseOutput {
	return o
}

// Specification for the Ranger Admin service.
func (o RangerProfileResponseOutput) RangerAdmin() RangerAdminSpecResponseOutput {
	return o.ApplyT(func(v RangerProfileResponse) RangerAdminSpecResponse { return v.RangerAdmin }).(RangerAdminSpecResponseOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfileResponseOutput) RangerAudit() RangerAuditSpecResponsePtrOutput {
	return o.ApplyT(func(v RangerProfileResponse) *RangerAuditSpecResponse { return v.RangerAudit }).(RangerAuditSpecResponsePtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfileResponseOutput) RangerUsersync() RangerUsersyncSpecResponseOutput {
	return o.ApplyT(func(v RangerProfileResponse) RangerUsersyncSpecResponse { return v.RangerUsersync }).(RangerUsersyncSpecResponseOutput)
}

type RangerProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerProfileResponse)(nil)).Elem()
}

func (o RangerProfileResponsePtrOutput) ToRangerProfileResponsePtrOutput() RangerProfileResponsePtrOutput {
	return o
}

func (o RangerProfileResponsePtrOutput) ToRangerProfileResponsePtrOutputWithContext(ctx context.Context) RangerProfileResponsePtrOutput {
	return o
}

func (o RangerProfileResponsePtrOutput) Elem() RangerProfileResponseOutput {
	return o.ApplyT(func(v *RangerProfileResponse) RangerProfileResponse {
		if v != nil {
			return *v
		}
		var ret RangerProfileResponse
		return ret
	}).(RangerProfileResponseOutput)
}

// Specification for the Ranger Admin service.
func (o RangerProfileResponsePtrOutput) RangerAdmin() RangerAdminSpecResponsePtrOutput {
	return o.ApplyT(func(v *RangerProfileResponse) *RangerAdminSpecResponse {
		if v == nil {
			return nil
		}
		return &v.RangerAdmin
	}).(RangerAdminSpecResponsePtrOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfileResponsePtrOutput) RangerAudit() RangerAuditSpecResponsePtrOutput {
	return o.ApplyT(func(v *RangerProfileResponse) *RangerAuditSpecResponse {
		if v == nil {
			return nil
		}
		return v.RangerAudit
	}).(RangerAuditSpecResponsePtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfileResponsePtrOutput) RangerUsersync() RangerUsersyncSpecResponsePtrOutput {
	return o.ApplyT(func(v *RangerProfileResponse) *RangerUsersyncSpecResponse {
		if v == nil {
			return nil
		}
		return &v.RangerUsersync
	}).(RangerUsersyncSpecResponsePtrOutput)
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpec struct {
	// Denotes whether usersync service should be enabled
	Enabled *bool `pulumi:"enabled"`
	// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
	Groups []string `pulumi:"groups"`
	// User & groups can be synced automatically or via a static list that's refreshed.
	Mode *string `pulumi:"mode"`
	// Azure storage location of a mapping file that lists user & group associations.
	UserMappingLocation *string `pulumi:"userMappingLocation"`
	// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
	Users []string `pulumi:"users"`
}

// Defaults sets the appropriate defaults for RangerUsersyncSpec
func (val *RangerUsersyncSpec) Defaults() *RangerUsersyncSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := true
		tmp.Enabled = &enabled_
	}
	if tmp.Mode == nil {
		mode_ := "automatic"
		tmp.Mode = &mode_
	}
	return &tmp
}

// RangerUsersyncSpecInput is an input type that accepts RangerUsersyncSpecArgs and RangerUsersyncSpecOutput values.
// You can construct a concrete instance of `RangerUsersyncSpecInput` via:
//
//	RangerUsersyncSpecArgs{...}
type RangerUsersyncSpecInput interface {
	pulumi.Input

	ToRangerUsersyncSpecOutput() RangerUsersyncSpecOutput
	ToRangerUsersyncSpecOutputWithContext(context.Context) RangerUsersyncSpecOutput
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecArgs struct {
	// Denotes whether usersync service should be enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// User & groups can be synced automatically or via a static list that's refreshed.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Azure storage location of a mapping file that lists user & group associations.
	UserMappingLocation pulumi.StringPtrInput `pulumi:"userMappingLocation"`
	// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

// Defaults sets the appropriate defaults for RangerUsersyncSpecArgs
func (val *RangerUsersyncSpecArgs) Defaults() *RangerUsersyncSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.BoolPtr(true)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("automatic")
	}
	return &tmp
}
func (RangerUsersyncSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerUsersyncSpec)(nil)).Elem()
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecOutput() RangerUsersyncSpecOutput {
	return i.ToRangerUsersyncSpecOutputWithContext(context.Background())
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecOutputWithContext(ctx context.Context) RangerUsersyncSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerUsersyncSpecOutput)
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return i.ToRangerUsersyncSpecPtrOutputWithContext(context.Background())
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerUsersyncSpecOutput).ToRangerUsersyncSpecPtrOutputWithContext(ctx)
}

// RangerUsersyncSpecPtrInput is an input type that accepts RangerUsersyncSpecArgs, RangerUsersyncSpecPtr and RangerUsersyncSpecPtrOutput values.
// You can construct a concrete instance of `RangerUsersyncSpecPtrInput` via:
//
//	        RangerUsersyncSpecArgs{...}
//
//	or:
//
//	        nil
type RangerUsersyncSpecPtrInput interface {
	pulumi.Input

	ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput
	ToRangerUsersyncSpecPtrOutputWithContext(context.Context) RangerUsersyncSpecPtrOutput
}

type rangerUsersyncSpecPtrType RangerUsersyncSpecArgs

func RangerUsersyncSpecPtr(v *RangerUsersyncSpecArgs) RangerUsersyncSpecPtrInput {
	return (*rangerUsersyncSpecPtrType)(v)
}

func (*rangerUsersyncSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerUsersyncSpec)(nil)).Elem()
}

func (i *rangerUsersyncSpecPtrType) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return i.ToRangerUsersyncSpecPtrOutputWithContext(context.Background())
}

func (i *rangerUsersyncSpecPtrType) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerUsersyncSpecPtrOutput)
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerUsersyncSpec)(nil)).Elem()
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecOutput() RangerUsersyncSpecOutput {
	return o
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecOutputWithContext(ctx context.Context) RangerUsersyncSpecOutput {
	return o
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return o.ToRangerUsersyncSpecPtrOutputWithContext(context.Background())
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerUsersyncSpec) *RangerUsersyncSpec {
		return &v
	}).(RangerUsersyncSpecPtrOutput)
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) *string { return v.UserMappingLocation }).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type RangerUsersyncSpecPtrOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerUsersyncSpec)(nil)).Elem()
}

func (o RangerUsersyncSpecPtrOutput) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return o
}

func (o RangerUsersyncSpecPtrOutput) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return o
}

func (o RangerUsersyncSpecPtrOutput) Elem() RangerUsersyncSpecOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) RangerUsersyncSpec {
		if v != nil {
			return *v
		}
		var ret RangerUsersyncSpec
		return ret
	}).(RangerUsersyncSpecOutput)
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecPtrOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) *string {
		if v == nil {
			return nil
		}
		return v.UserMappingLocation
	}).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecResponse struct {
	// Denotes whether usersync service should be enabled
	Enabled *bool `pulumi:"enabled"`
	// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
	Groups []string `pulumi:"groups"`
	// User & groups can be synced automatically or via a static list that's refreshed.
	Mode *string `pulumi:"mode"`
	// Azure storage location of a mapping file that lists user & group associations.
	UserMappingLocation *string `pulumi:"userMappingLocation"`
	// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
	Users []string `pulumi:"users"`
}

// Defaults sets the appropriate defaults for RangerUsersyncSpecResponse
func (val *RangerUsersyncSpecResponse) Defaults() *RangerUsersyncSpecResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := true
		tmp.Enabled = &enabled_
	}
	if tmp.Mode == nil {
		mode_ := "automatic"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecResponseOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerUsersyncSpecResponse)(nil)).Elem()
}

func (o RangerUsersyncSpecResponseOutput) ToRangerUsersyncSpecResponseOutput() RangerUsersyncSpecResponseOutput {
	return o
}

func (o RangerUsersyncSpecResponseOutput) ToRangerUsersyncSpecResponseOutputWithContext(ctx context.Context) RangerUsersyncSpecResponseOutput {
	return o
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecResponseOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecResponseOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) *string { return v.UserMappingLocation }).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecResponseOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type RangerUsersyncSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerUsersyncSpecResponse)(nil)).Elem()
}

func (o RangerUsersyncSpecResponsePtrOutput) ToRangerUsersyncSpecResponsePtrOutput() RangerUsersyncSpecResponsePtrOutput {
	return o
}

func (o RangerUsersyncSpecResponsePtrOutput) ToRangerUsersyncSpecResponsePtrOutputWithContext(ctx context.Context) RangerUsersyncSpecResponsePtrOutput {
	return o
}

func (o RangerUsersyncSpecResponsePtrOutput) Elem() RangerUsersyncSpecResponseOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) RangerUsersyncSpecResponse {
		if v != nil {
			return *v
		}
		var ret RangerUsersyncSpecResponse
		return ret
	}).(RangerUsersyncSpecResponseOutput)
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecResponsePtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecResponsePtrOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserMappingLocation
	}).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecResponsePtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

// The scaling rule.
type ScalingRule struct {
	// The action type.
	ActionType string `pulumi:"actionType"`
	// The comparison rule.
	ComparisonRule ComparisonRule `pulumi:"comparisonRule"`
	// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
	EvaluationCount int `pulumi:"evaluationCount"`
	// Metrics name for individual workloads. For example: cpu
	ScalingMetric string `pulumi:"scalingMetric"`
}

// ScalingRuleInput is an input type that accepts ScalingRuleArgs and ScalingRuleOutput values.
// You can construct a concrete instance of `ScalingRuleInput` via:
//
//	ScalingRuleArgs{...}
type ScalingRuleInput interface {
	pulumi.Input

	ToScalingRuleOutput() ScalingRuleOutput
	ToScalingRuleOutputWithContext(context.Context) ScalingRuleOutput
}

// The scaling rule.
type ScalingRuleArgs struct {
	// The action type.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// The comparison rule.
	ComparisonRule ComparisonRuleInput `pulumi:"comparisonRule"`
	// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
	EvaluationCount pulumi.IntInput `pulumi:"evaluationCount"`
	// Metrics name for individual workloads. For example: cpu
	ScalingMetric pulumi.StringInput `pulumi:"scalingMetric"`
}

func (ScalingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingRule)(nil)).Elem()
}

func (i ScalingRuleArgs) ToScalingRuleOutput() ScalingRuleOutput {
	return i.ToScalingRuleOutputWithContext(context.Background())
}

func (i ScalingRuleArgs) ToScalingRuleOutputWithContext(ctx context.Context) ScalingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingRuleOutput)
}

// ScalingRuleArrayInput is an input type that accepts ScalingRuleArray and ScalingRuleArrayOutput values.
// You can construct a concrete instance of `ScalingRuleArrayInput` via:
//
//	ScalingRuleArray{ ScalingRuleArgs{...} }
type ScalingRuleArrayInput interface {
	pulumi.Input

	ToScalingRuleArrayOutput() ScalingRuleArrayOutput
	ToScalingRuleArrayOutputWithContext(context.Context) ScalingRuleArrayOutput
}

type ScalingRuleArray []ScalingRuleInput

func (ScalingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingRule)(nil)).Elem()
}

func (i ScalingRuleArray) ToScalingRuleArrayOutput() ScalingRuleArrayOutput {
	return i.ToScalingRuleArrayOutputWithContext(context.Background())
}

func (i ScalingRuleArray) ToScalingRuleArrayOutputWithContext(ctx context.Context) ScalingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingRuleArrayOutput)
}

// The scaling rule.
type ScalingRuleOutput struct{ *pulumi.OutputState }

func (ScalingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingRule)(nil)).Elem()
}

func (o ScalingRuleOutput) ToScalingRuleOutput() ScalingRuleOutput {
	return o
}

func (o ScalingRuleOutput) ToScalingRuleOutputWithContext(ctx context.Context) ScalingRuleOutput {
	return o
}

// The action type.
func (o ScalingRuleOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRule) string { return v.ActionType }).(pulumi.StringOutput)
}

// The comparison rule.
func (o ScalingRuleOutput) ComparisonRule() ComparisonRuleOutput {
	return o.ApplyT(func(v ScalingRule) ComparisonRule { return v.ComparisonRule }).(ComparisonRuleOutput)
}

// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
func (o ScalingRuleOutput) EvaluationCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingRule) int { return v.EvaluationCount }).(pulumi.IntOutput)
}

// Metrics name for individual workloads. For example: cpu
func (o ScalingRuleOutput) ScalingMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRule) string { return v.ScalingMetric }).(pulumi.StringOutput)
}

type ScalingRuleArrayOutput struct{ *pulumi.OutputState }

func (ScalingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingRule)(nil)).Elem()
}

func (o ScalingRuleArrayOutput) ToScalingRuleArrayOutput() ScalingRuleArrayOutput {
	return o
}

func (o ScalingRuleArrayOutput) ToScalingRuleArrayOutputWithContext(ctx context.Context) ScalingRuleArrayOutput {
	return o
}

func (o ScalingRuleArrayOutput) Index(i pulumi.IntInput) ScalingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingRule {
		return vs[0].([]ScalingRule)[vs[1].(int)]
	}).(ScalingRuleOutput)
}

// The scaling rule.
type ScalingRuleResponse struct {
	// The action type.
	ActionType string `pulumi:"actionType"`
	// The comparison rule.
	ComparisonRule ComparisonRuleResponse `pulumi:"comparisonRule"`
	// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
	EvaluationCount int `pulumi:"evaluationCount"`
	// Metrics name for individual workloads. For example: cpu
	ScalingMetric string `pulumi:"scalingMetric"`
}

// The scaling rule.
type ScalingRuleResponseOutput struct{ *pulumi.OutputState }

func (ScalingRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingRuleResponse)(nil)).Elem()
}

func (o ScalingRuleResponseOutput) ToScalingRuleResponseOutput() ScalingRuleResponseOutput {
	return o
}

func (o ScalingRuleResponseOutput) ToScalingRuleResponseOutputWithContext(ctx context.Context) ScalingRuleResponseOutput {
	return o
}

// The action type.
func (o ScalingRuleResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRuleResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// The comparison rule.
func (o ScalingRuleResponseOutput) ComparisonRule() ComparisonRuleResponseOutput {
	return o.ApplyT(func(v ScalingRuleResponse) ComparisonRuleResponse { return v.ComparisonRule }).(ComparisonRuleResponseOutput)
}

// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
func (o ScalingRuleResponseOutput) EvaluationCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingRuleResponse) int { return v.EvaluationCount }).(pulumi.IntOutput)
}

// Metrics name for individual workloads. For example: cpu
func (o ScalingRuleResponseOutput) ScalingMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRuleResponse) string { return v.ScalingMetric }).(pulumi.StringOutput)
}

type ScalingRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingRuleResponse)(nil)).Elem()
}

func (o ScalingRuleResponseArrayOutput) ToScalingRuleResponseArrayOutput() ScalingRuleResponseArrayOutput {
	return o
}

func (o ScalingRuleResponseArrayOutput) ToScalingRuleResponseArrayOutputWithContext(ctx context.Context) ScalingRuleResponseArrayOutput {
	return o
}

func (o ScalingRuleResponseArrayOutput) Index(i pulumi.IntInput) ScalingRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingRuleResponse {
		return vs[0].([]ScalingRuleResponse)[vs[1].(int)]
	}).(ScalingRuleResponseOutput)
}

// Schedule definition.
type Schedule struct {
	// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
	Count int `pulumi:"count"`
	// User has to set the days where schedule has to be set for autoscale operation.
	Days []string `pulumi:"days"`
	// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
	EndTime string `pulumi:"endTime"`
	// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
	StartTime string `pulumi:"startTime"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//	ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Schedule definition.
type ScheduleArgs struct {
	// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
	Count pulumi.IntInput `pulumi:"count"`
	// User has to set the days where schedule has to be set for autoscale operation.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//	ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

// Schedule definition.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
func (o ScheduleOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v Schedule) int { return v.Count }).(pulumi.IntOutput)
}

// User has to set the days where schedule has to be set for autoscale operation.
func (o ScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Schedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v Schedule) string { return v.EndTime }).(pulumi.StringOutput)
}

// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v Schedule) string { return v.StartTime }).(pulumi.StringOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Schedule {
		return vs[0].([]Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfig struct {
	// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
	DefaultCount int `pulumi:"defaultCount"`
	// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
	Schedules []Schedule `pulumi:"schedules"`
	// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
	TimeZone string `pulumi:"timeZone"`
}

// ScheduleBasedConfigInput is an input type that accepts ScheduleBasedConfigArgs and ScheduleBasedConfigOutput values.
// You can construct a concrete instance of `ScheduleBasedConfigInput` via:
//
//	ScheduleBasedConfigArgs{...}
type ScheduleBasedConfigInput interface {
	pulumi.Input

	ToScheduleBasedConfigOutput() ScheduleBasedConfigOutput
	ToScheduleBasedConfigOutputWithContext(context.Context) ScheduleBasedConfigOutput
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigArgs struct {
	// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
	DefaultCount pulumi.IntInput `pulumi:"defaultCount"`
	// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
	Schedules ScheduleArrayInput `pulumi:"schedules"`
	// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (ScheduleBasedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBasedConfig)(nil)).Elem()
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigOutput() ScheduleBasedConfigOutput {
	return i.ToScheduleBasedConfigOutputWithContext(context.Background())
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigOutputWithContext(ctx context.Context) ScheduleBasedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasedConfigOutput)
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return i.ToScheduleBasedConfigPtrOutputWithContext(context.Background())
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasedConfigOutput).ToScheduleBasedConfigPtrOutputWithContext(ctx)
}

// ScheduleBasedConfigPtrInput is an input type that accepts ScheduleBasedConfigArgs, ScheduleBasedConfigPtr and ScheduleBasedConfigPtrOutput values.
// You can construct a concrete instance of `ScheduleBasedConfigPtrInput` via:
//
//	        ScheduleBasedConfigArgs{...}
//
//	or:
//
//	        nil
type ScheduleBasedConfigPtrInput interface {
	pulumi.Input

	ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput
	ToScheduleBasedConfigPtrOutputWithContext(context.Context) ScheduleBasedConfigPtrOutput
}

type scheduleBasedConfigPtrType ScheduleBasedConfigArgs

func ScheduleBasedConfigPtr(v *ScheduleBasedConfigArgs) ScheduleBasedConfigPtrInput {
	return (*scheduleBasedConfigPtrType)(v)
}

func (*scheduleBasedConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBasedConfig)(nil)).Elem()
}

func (i *scheduleBasedConfigPtrType) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return i.ToScheduleBasedConfigPtrOutputWithContext(context.Background())
}

func (i *scheduleBasedConfigPtrType) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasedConfigPtrOutput)
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBasedConfig)(nil)).Elem()
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigOutput() ScheduleBasedConfigOutput {
	return o
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigOutputWithContext(ctx context.Context) ScheduleBasedConfigOutput {
	return o
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return o.ToScheduleBasedConfigPtrOutputWithContext(context.Background())
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleBasedConfig) *ScheduleBasedConfig {
		return &v
	}).(ScheduleBasedConfigPtrOutput)
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigOutput) DefaultCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleBasedConfig) int { return v.DefaultCount }).(pulumi.IntOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigOutput) Schedules() ScheduleArrayOutput {
	return o.ApplyT(func(v ScheduleBasedConfig) []Schedule { return v.Schedules }).(ScheduleArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleBasedConfig) string { return v.TimeZone }).(pulumi.StringOutput)
}

type ScheduleBasedConfigPtrOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBasedConfig)(nil)).Elem()
}

func (o ScheduleBasedConfigPtrOutput) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return o
}

func (o ScheduleBasedConfigPtrOutput) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return o
}

func (o ScheduleBasedConfigPtrOutput) Elem() ScheduleBasedConfigOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) ScheduleBasedConfig {
		if v != nil {
			return *v
		}
		var ret ScheduleBasedConfig
		return ret
	}).(ScheduleBasedConfigOutput)
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigPtrOutput) DefaultCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.DefaultCount
	}).(pulumi.IntPtrOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigPtrOutput) Schedules() ScheduleArrayOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) []Schedule {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ScheduleArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigResponse struct {
	// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
	DefaultCount int `pulumi:"defaultCount"`
	// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
	Schedules []ScheduleResponse `pulumi:"schedules"`
	// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
	TimeZone string `pulumi:"timeZone"`
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigResponseOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBasedConfigResponse)(nil)).Elem()
}

func (o ScheduleBasedConfigResponseOutput) ToScheduleBasedConfigResponseOutput() ScheduleBasedConfigResponseOutput {
	return o
}

func (o ScheduleBasedConfigResponseOutput) ToScheduleBasedConfigResponseOutputWithContext(ctx context.Context) ScheduleBasedConfigResponseOutput {
	return o
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigResponseOutput) DefaultCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleBasedConfigResponse) int { return v.DefaultCount }).(pulumi.IntOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigResponseOutput) Schedules() ScheduleResponseArrayOutput {
	return o.ApplyT(func(v ScheduleBasedConfigResponse) []ScheduleResponse { return v.Schedules }).(ScheduleResponseArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigResponseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleBasedConfigResponse) string { return v.TimeZone }).(pulumi.StringOutput)
}

type ScheduleBasedConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBasedConfigResponse)(nil)).Elem()
}

func (o ScheduleBasedConfigResponsePtrOutput) ToScheduleBasedConfigResponsePtrOutput() ScheduleBasedConfigResponsePtrOutput {
	return o
}

func (o ScheduleBasedConfigResponsePtrOutput) ToScheduleBasedConfigResponsePtrOutputWithContext(ctx context.Context) ScheduleBasedConfigResponsePtrOutput {
	return o
}

func (o ScheduleBasedConfigResponsePtrOutput) Elem() ScheduleBasedConfigResponseOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) ScheduleBasedConfigResponse {
		if v != nil {
			return *v
		}
		var ret ScheduleBasedConfigResponse
		return ret
	}).(ScheduleBasedConfigResponseOutput)
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigResponsePtrOutput) DefaultCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DefaultCount
	}).(pulumi.IntPtrOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigResponsePtrOutput) Schedules() ScheduleResponseArrayOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) []ScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ScheduleResponseArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Schedule definition.
type ScheduleResponse struct {
	// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
	Count int `pulumi:"count"`
	// User has to set the days where schedule has to be set for autoscale operation.
	Days []string `pulumi:"days"`
	// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
	EndTime string `pulumi:"endTime"`
	// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
	StartTime string `pulumi:"startTime"`
}

// Schedule definition.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
func (o ScheduleResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.Count }).(pulumi.IntOutput)
}

// User has to set the days where schedule has to be set for autoscale operation.
func (o ScheduleResponseOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleResponse) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type ScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseArrayOutput) ToScheduleResponseArrayOutput() ScheduleResponseArrayOutput {
	return o
}

func (o ScheduleResponseArrayOutput) ToScheduleResponseArrayOutputWithContext(ctx context.Context) ScheduleResponseArrayOutput {
	return o
}

func (o ScheduleResponseArrayOutput) Index(i pulumi.IntInput) ScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleResponse {
		return vs[0].([]ScheduleResponse)[vs[1].(int)]
	}).(ScheduleResponseOutput)
}

// The script action profile.
type ScriptActionProfile struct {
	// Script name.
	Name string `pulumi:"name"`
	// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
	Parameters *string `pulumi:"parameters"`
	// List of services to apply the script action.
	Services []string `pulumi:"services"`
	// Specify if the script should persist on the cluster.
	ShouldPersist *bool `pulumi:"shouldPersist"`
	// Timeout duration for the script action in minutes.
	TimeoutInMinutes *int `pulumi:"timeoutInMinutes"`
	// Type of the script action. Supported type is bash scripts.
	Type string `pulumi:"type"`
	// Url of the script file.
	Url string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for ScriptActionProfile
func (val *ScriptActionProfile) Defaults() *ScriptActionProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShouldPersist == nil {
		shouldPersist_ := true
		tmp.ShouldPersist = &shouldPersist_
	}
	return &tmp
}

// ScriptActionProfileInput is an input type that accepts ScriptActionProfileArgs and ScriptActionProfileOutput values.
// You can construct a concrete instance of `ScriptActionProfileInput` via:
//
//	ScriptActionProfileArgs{...}
type ScriptActionProfileInput interface {
	pulumi.Input

	ToScriptActionProfileOutput() ScriptActionProfileOutput
	ToScriptActionProfileOutputWithContext(context.Context) ScriptActionProfileOutput
}

// The script action profile.
type ScriptActionProfileArgs struct {
	// Script name.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// List of services to apply the script action.
	Services pulumi.StringArrayInput `pulumi:"services"`
	// Specify if the script should persist on the cluster.
	ShouldPersist pulumi.BoolPtrInput `pulumi:"shouldPersist"`
	// Timeout duration for the script action in minutes.
	TimeoutInMinutes pulumi.IntPtrInput `pulumi:"timeoutInMinutes"`
	// Type of the script action. Supported type is bash scripts.
	Type pulumi.StringInput `pulumi:"type"`
	// Url of the script file.
	Url pulumi.StringInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for ScriptActionProfileArgs
func (val *ScriptActionProfileArgs) Defaults() *ScriptActionProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShouldPersist == nil {
		tmp.ShouldPersist = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (ScriptActionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionProfile)(nil)).Elem()
}

func (i ScriptActionProfileArgs) ToScriptActionProfileOutput() ScriptActionProfileOutput {
	return i.ToScriptActionProfileOutputWithContext(context.Background())
}

func (i ScriptActionProfileArgs) ToScriptActionProfileOutputWithContext(ctx context.Context) ScriptActionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionProfileOutput)
}

// ScriptActionProfileArrayInput is an input type that accepts ScriptActionProfileArray and ScriptActionProfileArrayOutput values.
// You can construct a concrete instance of `ScriptActionProfileArrayInput` via:
//
//	ScriptActionProfileArray{ ScriptActionProfileArgs{...} }
type ScriptActionProfileArrayInput interface {
	pulumi.Input

	ToScriptActionProfileArrayOutput() ScriptActionProfileArrayOutput
	ToScriptActionProfileArrayOutputWithContext(context.Context) ScriptActionProfileArrayOutput
}

type ScriptActionProfileArray []ScriptActionProfileInput

func (ScriptActionProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionProfile)(nil)).Elem()
}

func (i ScriptActionProfileArray) ToScriptActionProfileArrayOutput() ScriptActionProfileArrayOutput {
	return i.ToScriptActionProfileArrayOutputWithContext(context.Background())
}

func (i ScriptActionProfileArray) ToScriptActionProfileArrayOutputWithContext(ctx context.Context) ScriptActionProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionProfileArrayOutput)
}

// The script action profile.
type ScriptActionProfileOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionProfile)(nil)).Elem()
}

func (o ScriptActionProfileOutput) ToScriptActionProfileOutput() ScriptActionProfileOutput {
	return o
}

func (o ScriptActionProfileOutput) ToScriptActionProfileOutputWithContext(ctx context.Context) ScriptActionProfileOutput {
	return o
}

// Script name.
func (o ScriptActionProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfile) string { return v.Name }).(pulumi.StringOutput)
}

// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
func (o ScriptActionProfileOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionProfile) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// List of services to apply the script action.
func (o ScriptActionProfileOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScriptActionProfile) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// Specify if the script should persist on the cluster.
func (o ScriptActionProfileOutput) ShouldPersist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScriptActionProfile) *bool { return v.ShouldPersist }).(pulumi.BoolPtrOutput)
}

// Timeout duration for the script action in minutes.
func (o ScriptActionProfileOutput) TimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptActionProfile) *int { return v.TimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Type of the script action. Supported type is bash scripts.
func (o ScriptActionProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfile) string { return v.Type }).(pulumi.StringOutput)
}

// Url of the script file.
func (o ScriptActionProfileOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfile) string { return v.Url }).(pulumi.StringOutput)
}

type ScriptActionProfileArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionProfile)(nil)).Elem()
}

func (o ScriptActionProfileArrayOutput) ToScriptActionProfileArrayOutput() ScriptActionProfileArrayOutput {
	return o
}

func (o ScriptActionProfileArrayOutput) ToScriptActionProfileArrayOutputWithContext(ctx context.Context) ScriptActionProfileArrayOutput {
	return o
}

func (o ScriptActionProfileArrayOutput) Index(i pulumi.IntInput) ScriptActionProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionProfile {
		return vs[0].([]ScriptActionProfile)[vs[1].(int)]
	}).(ScriptActionProfileOutput)
}

// The script action profile.
type ScriptActionProfileResponse struct {
	// Script name.
	Name string `pulumi:"name"`
	// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
	Parameters *string `pulumi:"parameters"`
	// List of services to apply the script action.
	Services []string `pulumi:"services"`
	// Specify if the script should persist on the cluster.
	ShouldPersist *bool `pulumi:"shouldPersist"`
	// Timeout duration for the script action in minutes.
	TimeoutInMinutes *int `pulumi:"timeoutInMinutes"`
	// Type of the script action. Supported type is bash scripts.
	Type string `pulumi:"type"`
	// Url of the script file.
	Url string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for ScriptActionProfileResponse
func (val *ScriptActionProfileResponse) Defaults() *ScriptActionProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShouldPersist == nil {
		shouldPersist_ := true
		tmp.ShouldPersist = &shouldPersist_
	}
	return &tmp
}

// The script action profile.
type ScriptActionProfileResponseOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionProfileResponse)(nil)).Elem()
}

func (o ScriptActionProfileResponseOutput) ToScriptActionProfileResponseOutput() ScriptActionProfileResponseOutput {
	return o
}

func (o ScriptActionProfileResponseOutput) ToScriptActionProfileResponseOutputWithContext(ctx context.Context) ScriptActionProfileResponseOutput {
	return o
}

// Script name.
func (o ScriptActionProfileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
func (o ScriptActionProfileResponseOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// List of services to apply the script action.
func (o ScriptActionProfileResponseOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// Specify if the script should persist on the cluster.
func (o ScriptActionProfileResponseOutput) ShouldPersist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) *bool { return v.ShouldPersist }).(pulumi.BoolPtrOutput)
}

// Timeout duration for the script action in minutes.
func (o ScriptActionProfileResponseOutput) TimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) *int { return v.TimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Type of the script action. Supported type is bash scripts.
func (o ScriptActionProfileResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Url of the script file.
func (o ScriptActionProfileResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) string { return v.Url }).(pulumi.StringOutput)
}

type ScriptActionProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionProfileResponse)(nil)).Elem()
}

func (o ScriptActionProfileResponseArrayOutput) ToScriptActionProfileResponseArrayOutput() ScriptActionProfileResponseArrayOutput {
	return o
}

func (o ScriptActionProfileResponseArrayOutput) ToScriptActionProfileResponseArrayOutputWithContext(ctx context.Context) ScriptActionProfileResponseArrayOutput {
	return o
}

func (o ScriptActionProfileResponseArrayOutput) Index(i pulumi.IntInput) ScriptActionProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionProfileResponse {
		return vs[0].([]ScriptActionProfileResponse)[vs[1].(int)]
	}).(ScriptActionProfileResponseOutput)
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReference struct {
	// Object identifier name of the secret in key vault.
	KeyVaultObjectName string `pulumi:"keyVaultObjectName"`
	// Reference name of the secret to be used in service configs.
	ReferenceName string `pulumi:"referenceName"`
	// Type of key vault object: secret, key or certificate.
	Type string `pulumi:"type"`
	// Version of the secret in key vault.
	Version *string `pulumi:"version"`
}

// SecretReferenceInput is an input type that accepts SecretReferenceArgs and SecretReferenceOutput values.
// You can construct a concrete instance of `SecretReferenceInput` via:
//
//	SecretReferenceArgs{...}
type SecretReferenceInput interface {
	pulumi.Input

	ToSecretReferenceOutput() SecretReferenceOutput
	ToSecretReferenceOutputWithContext(context.Context) SecretReferenceOutput
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceArgs struct {
	// Object identifier name of the secret in key vault.
	KeyVaultObjectName pulumi.StringInput `pulumi:"keyVaultObjectName"`
	// Reference name of the secret to be used in service configs.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of key vault object: secret, key or certificate.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the secret in key vault.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReference)(nil)).Elem()
}

func (i SecretReferenceArgs) ToSecretReferenceOutput() SecretReferenceOutput {
	return i.ToSecretReferenceOutputWithContext(context.Background())
}

func (i SecretReferenceArgs) ToSecretReferenceOutputWithContext(ctx context.Context) SecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferenceOutput)
}

// SecretReferenceArrayInput is an input type that accepts SecretReferenceArray and SecretReferenceArrayOutput values.
// You can construct a concrete instance of `SecretReferenceArrayInput` via:
//
//	SecretReferenceArray{ SecretReferenceArgs{...} }
type SecretReferenceArrayInput interface {
	pulumi.Input

	ToSecretReferenceArrayOutput() SecretReferenceArrayOutput
	ToSecretReferenceArrayOutputWithContext(context.Context) SecretReferenceArrayOutput
}

type SecretReferenceArray []SecretReferenceInput

func (SecretReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReference)(nil)).Elem()
}

func (i SecretReferenceArray) ToSecretReferenceArrayOutput() SecretReferenceArrayOutput {
	return i.ToSecretReferenceArrayOutputWithContext(context.Background())
}

func (i SecretReferenceArray) ToSecretReferenceArrayOutputWithContext(ctx context.Context) SecretReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferenceArrayOutput)
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceOutput struct{ *pulumi.OutputState }

func (SecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReference)(nil)).Elem()
}

func (o SecretReferenceOutput) ToSecretReferenceOutput() SecretReferenceOutput {
	return o
}

func (o SecretReferenceOutput) ToSecretReferenceOutputWithContext(ctx context.Context) SecretReferenceOutput {
	return o
}

// Object identifier name of the secret in key vault.
func (o SecretReferenceOutput) KeyVaultObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReference) string { return v.KeyVaultObjectName }).(pulumi.StringOutput)
}

// Reference name of the secret to be used in service configs.
func (o SecretReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of key vault object: secret, key or certificate.
func (o SecretReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReference) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the secret in key vault.
func (o SecretReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SecretReferenceArrayOutput struct{ *pulumi.OutputState }

func (SecretReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReference)(nil)).Elem()
}

func (o SecretReferenceArrayOutput) ToSecretReferenceArrayOutput() SecretReferenceArrayOutput {
	return o
}

func (o SecretReferenceArrayOutput) ToSecretReferenceArrayOutputWithContext(ctx context.Context) SecretReferenceArrayOutput {
	return o
}

func (o SecretReferenceArrayOutput) Index(i pulumi.IntInput) SecretReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretReference {
		return vs[0].([]SecretReference)[vs[1].(int)]
	}).(SecretReferenceOutput)
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceResponse struct {
	// Object identifier name of the secret in key vault.
	KeyVaultObjectName string `pulumi:"keyVaultObjectName"`
	// Reference name of the secret to be used in service configs.
	ReferenceName string `pulumi:"referenceName"`
	// Type of key vault object: secret, key or certificate.
	Type string `pulumi:"type"`
	// Version of the secret in key vault.
	Version *string `pulumi:"version"`
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (SecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReferenceResponse)(nil)).Elem()
}

func (o SecretReferenceResponseOutput) ToSecretReferenceResponseOutput() SecretReferenceResponseOutput {
	return o
}

func (o SecretReferenceResponseOutput) ToSecretReferenceResponseOutputWithContext(ctx context.Context) SecretReferenceResponseOutput {
	return o
}

// Object identifier name of the secret in key vault.
func (o SecretReferenceResponseOutput) KeyVaultObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReferenceResponse) string { return v.KeyVaultObjectName }).(pulumi.StringOutput)
}

// Reference name of the secret to be used in service configs.
func (o SecretReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of key vault object: secret, key or certificate.
func (o SecretReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the secret in key vault.
func (o SecretReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SecretReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReferenceResponse)(nil)).Elem()
}

func (o SecretReferenceResponseArrayOutput) ToSecretReferenceResponseArrayOutput() SecretReferenceResponseArrayOutput {
	return o
}

func (o SecretReferenceResponseArrayOutput) ToSecretReferenceResponseArrayOutputWithContext(ctx context.Context) SecretReferenceResponseArrayOutput {
	return o
}

func (o SecretReferenceResponseArrayOutput) Index(i pulumi.IntInput) SecretReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretReferenceResponse {
		return vs[0].([]SecretReferenceResponse)[vs[1].(int)]
	}).(SecretReferenceResponseOutput)
}

// The cluster secret profile.
type SecretsProfile struct {
	// Name of the user Key Vault where all the cluster specific user secrets are stored.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// Properties of Key Vault secret.
	Secrets []SecretReference `pulumi:"secrets"`
}

// SecretsProfileInput is an input type that accepts SecretsProfileArgs and SecretsProfileOutput values.
// You can construct a concrete instance of `SecretsProfileInput` via:
//
//	SecretsProfileArgs{...}
type SecretsProfileInput interface {
	pulumi.Input

	ToSecretsProfileOutput() SecretsProfileOutput
	ToSecretsProfileOutputWithContext(context.Context) SecretsProfileOutput
}

// The cluster secret profile.
type SecretsProfileArgs struct {
	// Name of the user Key Vault where all the cluster specific user secrets are stored.
	KeyVaultResourceId pulumi.StringInput `pulumi:"keyVaultResourceId"`
	// Properties of Key Vault secret.
	Secrets SecretReferenceArrayInput `pulumi:"secrets"`
}

func (SecretsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsProfile)(nil)).Elem()
}

func (i SecretsProfileArgs) ToSecretsProfileOutput() SecretsProfileOutput {
	return i.ToSecretsProfileOutputWithContext(context.Background())
}

func (i SecretsProfileArgs) ToSecretsProfileOutputWithContext(ctx context.Context) SecretsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsProfileOutput)
}

func (i SecretsProfileArgs) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return i.ToSecretsProfilePtrOutputWithContext(context.Background())
}

func (i SecretsProfileArgs) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsProfileOutput).ToSecretsProfilePtrOutputWithContext(ctx)
}

// SecretsProfilePtrInput is an input type that accepts SecretsProfileArgs, SecretsProfilePtr and SecretsProfilePtrOutput values.
// You can construct a concrete instance of `SecretsProfilePtrInput` via:
//
//	        SecretsProfileArgs{...}
//
//	or:
//
//	        nil
type SecretsProfilePtrInput interface {
	pulumi.Input

	ToSecretsProfilePtrOutput() SecretsProfilePtrOutput
	ToSecretsProfilePtrOutputWithContext(context.Context) SecretsProfilePtrOutput
}

type secretsProfilePtrType SecretsProfileArgs

func SecretsProfilePtr(v *SecretsProfileArgs) SecretsProfilePtrInput {
	return (*secretsProfilePtrType)(v)
}

func (*secretsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsProfile)(nil)).Elem()
}

func (i *secretsProfilePtrType) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return i.ToSecretsProfilePtrOutputWithContext(context.Background())
}

func (i *secretsProfilePtrType) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsProfilePtrOutput)
}

// The cluster secret profile.
type SecretsProfileOutput struct{ *pulumi.OutputState }

func (SecretsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsProfile)(nil)).Elem()
}

func (o SecretsProfileOutput) ToSecretsProfileOutput() SecretsProfileOutput {
	return o
}

func (o SecretsProfileOutput) ToSecretsProfileOutputWithContext(ctx context.Context) SecretsProfileOutput {
	return o
}

func (o SecretsProfileOutput) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return o.ToSecretsProfilePtrOutputWithContext(context.Background())
}

func (o SecretsProfileOutput) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretsProfile) *SecretsProfile {
		return &v
	}).(SecretsProfilePtrOutput)
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfileOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsProfile) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfileOutput) Secrets() SecretReferenceArrayOutput {
	return o.ApplyT(func(v SecretsProfile) []SecretReference { return v.Secrets }).(SecretReferenceArrayOutput)
}

type SecretsProfilePtrOutput struct{ *pulumi.OutputState }

func (SecretsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsProfile)(nil)).Elem()
}

func (o SecretsProfilePtrOutput) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return o
}

func (o SecretsProfilePtrOutput) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return o
}

func (o SecretsProfilePtrOutput) Elem() SecretsProfileOutput {
	return o.ApplyT(func(v *SecretsProfile) SecretsProfile {
		if v != nil {
			return *v
		}
		var ret SecretsProfile
		return ret
	}).(SecretsProfileOutput)
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfilePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfilePtrOutput) Secrets() SecretReferenceArrayOutput {
	return o.ApplyT(func(v *SecretsProfile) []SecretReference {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretReferenceArrayOutput)
}

// The cluster secret profile.
type SecretsProfileResponse struct {
	// Name of the user Key Vault where all the cluster specific user secrets are stored.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// Properties of Key Vault secret.
	Secrets []SecretReferenceResponse `pulumi:"secrets"`
}

// The cluster secret profile.
type SecretsProfileResponseOutput struct{ *pulumi.OutputState }

func (SecretsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsProfileResponse)(nil)).Elem()
}

func (o SecretsProfileResponseOutput) ToSecretsProfileResponseOutput() SecretsProfileResponseOutput {
	return o
}

func (o SecretsProfileResponseOutput) ToSecretsProfileResponseOutputWithContext(ctx context.Context) SecretsProfileResponseOutput {
	return o
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfileResponseOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsProfileResponse) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfileResponseOutput) Secrets() SecretReferenceResponseArrayOutput {
	return o.ApplyT(func(v SecretsProfileResponse) []SecretReferenceResponse { return v.Secrets }).(SecretReferenceResponseArrayOutput)
}

type SecretsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsProfileResponse)(nil)).Elem()
}

func (o SecretsProfileResponsePtrOutput) ToSecretsProfileResponsePtrOutput() SecretsProfileResponsePtrOutput {
	return o
}

func (o SecretsProfileResponsePtrOutput) ToSecretsProfileResponsePtrOutputWithContext(ctx context.Context) SecretsProfileResponsePtrOutput {
	return o
}

func (o SecretsProfileResponsePtrOutput) Elem() SecretsProfileResponseOutput {
	return o.ApplyT(func(v *SecretsProfileResponse) SecretsProfileResponse {
		if v != nil {
			return *v
		}
		var ret SecretsProfileResponse
		return ret
	}).(SecretsProfileResponseOutput)
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfileResponsePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfileResponsePtrOutput) Secrets() SecretReferenceResponseArrayOutput {
	return o.ApplyT(func(v *SecretsProfileResponse) []SecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretReferenceResponseArrayOutput)
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpec struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	DbConnectionAuthenticationMode *string `pulumi:"dbConnectionAuthenticationMode"`
	// The database name.
	DbName string `pulumi:"dbName"`
	// The secret name which contains the database user password.
	DbPasswordSecretName *string `pulumi:"dbPasswordSecretName"`
	// The database server host.
	DbServerHost string `pulumi:"dbServerHost"`
	// The database user name.
	DbUserName *string `pulumi:"dbUserName"`
	// The key vault resource id.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The thrift url.
	ThriftUrl *string `pulumi:"thriftUrl"`
}

// Defaults sets the appropriate defaults for SparkMetastoreSpec
func (val *SparkMetastoreSpec) Defaults() *SparkMetastoreSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DbConnectionAuthenticationMode == nil {
		dbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.DbConnectionAuthenticationMode = &dbConnectionAuthenticationMode_
	}
	return &tmp
}

// SparkMetastoreSpecInput is an input type that accepts SparkMetastoreSpecArgs and SparkMetastoreSpecOutput values.
// You can construct a concrete instance of `SparkMetastoreSpecInput` via:
//
//	SparkMetastoreSpecArgs{...}
type SparkMetastoreSpecInput interface {
	pulumi.Input

	ToSparkMetastoreSpecOutput() SparkMetastoreSpecOutput
	ToSparkMetastoreSpecOutputWithContext(context.Context) SparkMetastoreSpecOutput
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecArgs struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	DbConnectionAuthenticationMode pulumi.StringPtrInput `pulumi:"dbConnectionAuthenticationMode"`
	// The database name.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// The secret name which contains the database user password.
	DbPasswordSecretName pulumi.StringPtrInput `pulumi:"dbPasswordSecretName"`
	// The database server host.
	DbServerHost pulumi.StringInput `pulumi:"dbServerHost"`
	// The database user name.
	DbUserName pulumi.StringPtrInput `pulumi:"dbUserName"`
	// The key vault resource id.
	KeyVaultId pulumi.StringPtrInput `pulumi:"keyVaultId"`
	// The thrift url.
	ThriftUrl pulumi.StringPtrInput `pulumi:"thriftUrl"`
}

// Defaults sets the appropriate defaults for SparkMetastoreSpecArgs
func (val *SparkMetastoreSpecArgs) Defaults() *SparkMetastoreSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DbConnectionAuthenticationMode == nil {
		tmp.DbConnectionAuthenticationMode = pulumi.StringPtr("IdentityAuth")
	}
	return &tmp
}
func (SparkMetastoreSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkMetastoreSpec)(nil)).Elem()
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecOutput() SparkMetastoreSpecOutput {
	return i.ToSparkMetastoreSpecOutputWithContext(context.Background())
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecOutputWithContext(ctx context.Context) SparkMetastoreSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkMetastoreSpecOutput)
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return i.ToSparkMetastoreSpecPtrOutputWithContext(context.Background())
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkMetastoreSpecOutput).ToSparkMetastoreSpecPtrOutputWithContext(ctx)
}

// SparkMetastoreSpecPtrInput is an input type that accepts SparkMetastoreSpecArgs, SparkMetastoreSpecPtr and SparkMetastoreSpecPtrOutput values.
// You can construct a concrete instance of `SparkMetastoreSpecPtrInput` via:
//
//	        SparkMetastoreSpecArgs{...}
//
//	or:
//
//	        nil
type SparkMetastoreSpecPtrInput interface {
	pulumi.Input

	ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput
	ToSparkMetastoreSpecPtrOutputWithContext(context.Context) SparkMetastoreSpecPtrOutput
}

type sparkMetastoreSpecPtrType SparkMetastoreSpecArgs

func SparkMetastoreSpecPtr(v *SparkMetastoreSpecArgs) SparkMetastoreSpecPtrInput {
	return (*sparkMetastoreSpecPtrType)(v)
}

func (*sparkMetastoreSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkMetastoreSpec)(nil)).Elem()
}

func (i *sparkMetastoreSpecPtrType) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return i.ToSparkMetastoreSpecPtrOutputWithContext(context.Background())
}

func (i *sparkMetastoreSpecPtrType) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkMetastoreSpecPtrOutput)
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkMetastoreSpec)(nil)).Elem()
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecOutput() SparkMetastoreSpecOutput {
	return o
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecOutputWithContext(ctx context.Context) SparkMetastoreSpecOutput {
	return o
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return o.ToSparkMetastoreSpecPtrOutputWithContext(context.Background())
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkMetastoreSpec) *SparkMetastoreSpec {
		return &v
	}).(SparkMetastoreSpecPtrOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.DbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) string { return v.DbName }).(pulumi.StringOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.DbPasswordSecretName }).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecOutput) DbServerHost() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) string { return v.DbServerHost }).(pulumi.StringOutput)
}

// The database user name.
func (o SparkMetastoreSpecOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.DbUserName }).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.ThriftUrl }).(pulumi.StringPtrOutput)
}

type SparkMetastoreSpecPtrOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkMetastoreSpec)(nil)).Elem()
}

func (o SparkMetastoreSpecPtrOutput) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return o
}

func (o SparkMetastoreSpecPtrOutput) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return o
}

func (o SparkMetastoreSpecPtrOutput) Elem() SparkMetastoreSpecOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) SparkMetastoreSpec {
		if v != nil {
			return *v
		}
		var ret SparkMetastoreSpec
		return ret
	}).(SparkMetastoreSpecOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecPtrOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.DbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecPtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.DbName
	}).(pulumi.StringPtrOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecPtrOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecPtrOutput) DbServerHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.DbServerHost
	}).(pulumi.StringPtrOutput)
}

// The database user name.
func (o SparkMetastoreSpecPtrOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.DbUserName
	}).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecPtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecPtrOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.ThriftUrl
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecResponse struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	DbConnectionAuthenticationMode *string `pulumi:"dbConnectionAuthenticationMode"`
	// The database name.
	DbName string `pulumi:"dbName"`
	// The secret name which contains the database user password.
	DbPasswordSecretName *string `pulumi:"dbPasswordSecretName"`
	// The database server host.
	DbServerHost string `pulumi:"dbServerHost"`
	// The database user name.
	DbUserName *string `pulumi:"dbUserName"`
	// The key vault resource id.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The thrift url.
	ThriftUrl *string `pulumi:"thriftUrl"`
}

// Defaults sets the appropriate defaults for SparkMetastoreSpecResponse
func (val *SparkMetastoreSpecResponse) Defaults() *SparkMetastoreSpecResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DbConnectionAuthenticationMode == nil {
		dbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.DbConnectionAuthenticationMode = &dbConnectionAuthenticationMode_
	}
	return &tmp
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecResponseOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkMetastoreSpecResponse)(nil)).Elem()
}

func (o SparkMetastoreSpecResponseOutput) ToSparkMetastoreSpecResponseOutput() SparkMetastoreSpecResponseOutput {
	return o
}

func (o SparkMetastoreSpecResponseOutput) ToSparkMetastoreSpecResponseOutputWithContext(ctx context.Context) SparkMetastoreSpecResponseOutput {
	return o
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecResponseOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.DbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecResponseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) string { return v.DbName }).(pulumi.StringOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecResponseOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.DbPasswordSecretName }).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecResponseOutput) DbServerHost() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) string { return v.DbServerHost }).(pulumi.StringOutput)
}

// The database user name.
func (o SparkMetastoreSpecResponseOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.DbUserName }).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecResponseOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecResponseOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.ThriftUrl }).(pulumi.StringPtrOutput)
}

type SparkMetastoreSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkMetastoreSpecResponse)(nil)).Elem()
}

func (o SparkMetastoreSpecResponsePtrOutput) ToSparkMetastoreSpecResponsePtrOutput() SparkMetastoreSpecResponsePtrOutput {
	return o
}

func (o SparkMetastoreSpecResponsePtrOutput) ToSparkMetastoreSpecResponsePtrOutputWithContext(ctx context.Context) SparkMetastoreSpecResponsePtrOutput {
	return o
}

func (o SparkMetastoreSpecResponsePtrOutput) Elem() SparkMetastoreSpecResponseOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) SparkMetastoreSpecResponse {
		if v != nil {
			return *v
		}
		var ret SparkMetastoreSpecResponse
		return ret
	}).(SparkMetastoreSpecResponseOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecResponsePtrOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecResponsePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DbName
	}).(pulumi.StringPtrOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecResponsePtrOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecResponsePtrOutput) DbServerHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DbServerHost
	}).(pulumi.StringPtrOutput)
}

// The database user name.
func (o SparkMetastoreSpecResponsePtrOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUserName
	}).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecResponsePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecResponsePtrOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThriftUrl
	}).(pulumi.StringPtrOutput)
}

// The spark cluster profile.
type SparkProfile struct {
	// The default storage URL.
	DefaultStorageUrl *string `pulumi:"defaultStorageUrl"`
	// The metastore specification for Spark cluster.
	MetastoreSpec *SparkMetastoreSpec `pulumi:"metastoreSpec"`
	// Spark user plugins spec
	UserPluginsSpec *SparkUserPlugins `pulumi:"userPluginsSpec"`
}

// Defaults sets the appropriate defaults for SparkProfile
func (val *SparkProfile) Defaults() *SparkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.MetastoreSpec = tmp.MetastoreSpec.Defaults()

	return &tmp
}

// SparkProfileInput is an input type that accepts SparkProfileArgs and SparkProfileOutput values.
// You can construct a concrete instance of `SparkProfileInput` via:
//
//	SparkProfileArgs{...}
type SparkProfileInput interface {
	pulumi.Input

	ToSparkProfileOutput() SparkProfileOutput
	ToSparkProfileOutputWithContext(context.Context) SparkProfileOutput
}

// The spark cluster profile.
type SparkProfileArgs struct {
	// The default storage URL.
	DefaultStorageUrl pulumi.StringPtrInput `pulumi:"defaultStorageUrl"`
	// The metastore specification for Spark cluster.
	MetastoreSpec SparkMetastoreSpecPtrInput `pulumi:"metastoreSpec"`
	// Spark user plugins spec
	UserPluginsSpec SparkUserPluginsPtrInput `pulumi:"userPluginsSpec"`
}

// Defaults sets the appropriate defaults for SparkProfileArgs
func (val *SparkProfileArgs) Defaults() *SparkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (SparkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProfile)(nil)).Elem()
}

func (i SparkProfileArgs) ToSparkProfileOutput() SparkProfileOutput {
	return i.ToSparkProfileOutputWithContext(context.Background())
}

func (i SparkProfileArgs) ToSparkProfileOutputWithContext(ctx context.Context) SparkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkProfileOutput)
}

func (i SparkProfileArgs) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return i.ToSparkProfilePtrOutputWithContext(context.Background())
}

func (i SparkProfileArgs) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkProfileOutput).ToSparkProfilePtrOutputWithContext(ctx)
}

// SparkProfilePtrInput is an input type that accepts SparkProfileArgs, SparkProfilePtr and SparkProfilePtrOutput values.
// You can construct a concrete instance of `SparkProfilePtrInput` via:
//
//	        SparkProfileArgs{...}
//
//	or:
//
//	        nil
type SparkProfilePtrInput interface {
	pulumi.Input

	ToSparkProfilePtrOutput() SparkProfilePtrOutput
	ToSparkProfilePtrOutputWithContext(context.Context) SparkProfilePtrOutput
}

type sparkProfilePtrType SparkProfileArgs

func SparkProfilePtr(v *SparkProfileArgs) SparkProfilePtrInput {
	return (*sparkProfilePtrType)(v)
}

func (*sparkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProfile)(nil)).Elem()
}

func (i *sparkProfilePtrType) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return i.ToSparkProfilePtrOutputWithContext(context.Background())
}

func (i *sparkProfilePtrType) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkProfilePtrOutput)
}

// The spark cluster profile.
type SparkProfileOutput struct{ *pulumi.OutputState }

func (SparkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProfile)(nil)).Elem()
}

func (o SparkProfileOutput) ToSparkProfileOutput() SparkProfileOutput {
	return o
}

func (o SparkProfileOutput) ToSparkProfileOutputWithContext(ctx context.Context) SparkProfileOutput {
	return o
}

func (o SparkProfileOutput) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return o.ToSparkProfilePtrOutputWithContext(context.Background())
}

func (o SparkProfileOutput) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkProfile) *SparkProfile {
		return &v
	}).(SparkProfilePtrOutput)
}

// The default storage URL.
func (o SparkProfileOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkProfile) *string { return v.DefaultStorageUrl }).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfileOutput) MetastoreSpec() SparkMetastoreSpecPtrOutput {
	return o.ApplyT(func(v SparkProfile) *SparkMetastoreSpec { return v.MetastoreSpec }).(SparkMetastoreSpecPtrOutput)
}

// Spark user plugins spec
func (o SparkProfileOutput) UserPluginsSpec() SparkUserPluginsPtrOutput {
	return o.ApplyT(func(v SparkProfile) *SparkUserPlugins { return v.UserPluginsSpec }).(SparkUserPluginsPtrOutput)
}

type SparkProfilePtrOutput struct{ *pulumi.OutputState }

func (SparkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProfile)(nil)).Elem()
}

func (o SparkProfilePtrOutput) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return o
}

func (o SparkProfilePtrOutput) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return o
}

func (o SparkProfilePtrOutput) Elem() SparkProfileOutput {
	return o.ApplyT(func(v *SparkProfile) SparkProfile {
		if v != nil {
			return *v
		}
		var ret SparkProfile
		return ret
	}).(SparkProfileOutput)
}

// The default storage URL.
func (o SparkProfilePtrOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkProfile) *string {
		if v == nil {
			return nil
		}
		return v.DefaultStorageUrl
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfilePtrOutput) MetastoreSpec() SparkMetastoreSpecPtrOutput {
	return o.ApplyT(func(v *SparkProfile) *SparkMetastoreSpec {
		if v == nil {
			return nil
		}
		return v.MetastoreSpec
	}).(SparkMetastoreSpecPtrOutput)
}

// Spark user plugins spec
func (o SparkProfilePtrOutput) UserPluginsSpec() SparkUserPluginsPtrOutput {
	return o.ApplyT(func(v *SparkProfile) *SparkUserPlugins {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(SparkUserPluginsPtrOutput)
}

// The spark cluster profile.
type SparkProfileResponse struct {
	// The default storage URL.
	DefaultStorageUrl *string `pulumi:"defaultStorageUrl"`
	// The metastore specification for Spark cluster.
	MetastoreSpec *SparkMetastoreSpecResponse `pulumi:"metastoreSpec"`
	// Spark user plugins spec
	UserPluginsSpec *SparkUserPluginsResponse `pulumi:"userPluginsSpec"`
}

// Defaults sets the appropriate defaults for SparkProfileResponse
func (val *SparkProfileResponse) Defaults() *SparkProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.MetastoreSpec = tmp.MetastoreSpec.Defaults()

	return &tmp
}

// The spark cluster profile.
type SparkProfileResponseOutput struct{ *pulumi.OutputState }

func (SparkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProfileResponse)(nil)).Elem()
}

func (o SparkProfileResponseOutput) ToSparkProfileResponseOutput() SparkProfileResponseOutput {
	return o
}

func (o SparkProfileResponseOutput) ToSparkProfileResponseOutputWithContext(ctx context.Context) SparkProfileResponseOutput {
	return o
}

// The default storage URL.
func (o SparkProfileResponseOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkProfileResponse) *string { return v.DefaultStorageUrl }).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfileResponseOutput) MetastoreSpec() SparkMetastoreSpecResponsePtrOutput {
	return o.ApplyT(func(v SparkProfileResponse) *SparkMetastoreSpecResponse { return v.MetastoreSpec }).(SparkMetastoreSpecResponsePtrOutput)
}

// Spark user plugins spec
func (o SparkProfileResponseOutput) UserPluginsSpec() SparkUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v SparkProfileResponse) *SparkUserPluginsResponse { return v.UserPluginsSpec }).(SparkUserPluginsResponsePtrOutput)
}

type SparkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProfileResponse)(nil)).Elem()
}

func (o SparkProfileResponsePtrOutput) ToSparkProfileResponsePtrOutput() SparkProfileResponsePtrOutput {
	return o
}

func (o SparkProfileResponsePtrOutput) ToSparkProfileResponsePtrOutputWithContext(ctx context.Context) SparkProfileResponsePtrOutput {
	return o
}

func (o SparkProfileResponsePtrOutput) Elem() SparkProfileResponseOutput {
	return o.ApplyT(func(v *SparkProfileResponse) SparkProfileResponse {
		if v != nil {
			return *v
		}
		var ret SparkProfileResponse
		return ret
	}).(SparkProfileResponseOutput)
}

// The default storage URL.
func (o SparkProfileResponsePtrOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultStorageUrl
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfileResponsePtrOutput) MetastoreSpec() SparkMetastoreSpecResponsePtrOutput {
	return o.ApplyT(func(v *SparkProfileResponse) *SparkMetastoreSpecResponse {
		if v == nil {
			return nil
		}
		return v.MetastoreSpec
	}).(SparkMetastoreSpecResponsePtrOutput)
}

// Spark user plugins spec
func (o SparkProfileResponsePtrOutput) UserPluginsSpec() SparkUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v *SparkProfileResponse) *SparkUserPluginsResponse {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(SparkUserPluginsResponsePtrOutput)
}

// Spark user plugin.
type SparkUserPlugin struct {
	// Fully qualified path to the folder containing the plugins.
	Path string `pulumi:"path"`
}

// SparkUserPluginInput is an input type that accepts SparkUserPluginArgs and SparkUserPluginOutput values.
// You can construct a concrete instance of `SparkUserPluginInput` via:
//
//	SparkUserPluginArgs{...}
type SparkUserPluginInput interface {
	pulumi.Input

	ToSparkUserPluginOutput() SparkUserPluginOutput
	ToSparkUserPluginOutputWithContext(context.Context) SparkUserPluginOutput
}

// Spark user plugin.
type SparkUserPluginArgs struct {
	// Fully qualified path to the folder containing the plugins.
	Path pulumi.StringInput `pulumi:"path"`
}

func (SparkUserPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugin)(nil)).Elem()
}

func (i SparkUserPluginArgs) ToSparkUserPluginOutput() SparkUserPluginOutput {
	return i.ToSparkUserPluginOutputWithContext(context.Background())
}

func (i SparkUserPluginArgs) ToSparkUserPluginOutputWithContext(ctx context.Context) SparkUserPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginOutput)
}

// SparkUserPluginArrayInput is an input type that accepts SparkUserPluginArray and SparkUserPluginArrayOutput values.
// You can construct a concrete instance of `SparkUserPluginArrayInput` via:
//
//	SparkUserPluginArray{ SparkUserPluginArgs{...} }
type SparkUserPluginArrayInput interface {
	pulumi.Input

	ToSparkUserPluginArrayOutput() SparkUserPluginArrayOutput
	ToSparkUserPluginArrayOutputWithContext(context.Context) SparkUserPluginArrayOutput
}

type SparkUserPluginArray []SparkUserPluginInput

func (SparkUserPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkUserPlugin)(nil)).Elem()
}

func (i SparkUserPluginArray) ToSparkUserPluginArrayOutput() SparkUserPluginArrayOutput {
	return i.ToSparkUserPluginArrayOutputWithContext(context.Background())
}

func (i SparkUserPluginArray) ToSparkUserPluginArrayOutputWithContext(ctx context.Context) SparkUserPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginArrayOutput)
}

// Spark user plugin.
type SparkUserPluginOutput struct{ *pulumi.OutputState }

func (SparkUserPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugin)(nil)).Elem()
}

func (o SparkUserPluginOutput) ToSparkUserPluginOutput() SparkUserPluginOutput {
	return o
}

func (o SparkUserPluginOutput) ToSparkUserPluginOutputWithContext(ctx context.Context) SparkUserPluginOutput {
	return o
}

// Fully qualified path to the folder containing the plugins.
func (o SparkUserPluginOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v SparkUserPlugin) string { return v.Path }).(pulumi.StringOutput)
}

type SparkUserPluginArrayOutput struct{ *pulumi.OutputState }

func (SparkUserPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkUserPlugin)(nil)).Elem()
}

func (o SparkUserPluginArrayOutput) ToSparkUserPluginArrayOutput() SparkUserPluginArrayOutput {
	return o
}

func (o SparkUserPluginArrayOutput) ToSparkUserPluginArrayOutputWithContext(ctx context.Context) SparkUserPluginArrayOutput {
	return o
}

func (o SparkUserPluginArrayOutput) Index(i pulumi.IntInput) SparkUserPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkUserPlugin {
		return vs[0].([]SparkUserPlugin)[vs[1].(int)]
	}).(SparkUserPluginOutput)
}

// Spark user plugin.
type SparkUserPluginResponse struct {
	// Fully qualified path to the folder containing the plugins.
	Path string `pulumi:"path"`
}

// Spark user plugin.
type SparkUserPluginResponseOutput struct{ *pulumi.OutputState }

func (SparkUserPluginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPluginResponse)(nil)).Elem()
}

func (o SparkUserPluginResponseOutput) ToSparkUserPluginResponseOutput() SparkUserPluginResponseOutput {
	return o
}

func (o SparkUserPluginResponseOutput) ToSparkUserPluginResponseOutputWithContext(ctx context.Context) SparkUserPluginResponseOutput {
	return o
}

// Fully qualified path to the folder containing the plugins.
func (o SparkUserPluginResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v SparkUserPluginResponse) string { return v.Path }).(pulumi.StringOutput)
}

type SparkUserPluginResponseArrayOutput struct{ *pulumi.OutputState }

func (SparkUserPluginResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkUserPluginResponse)(nil)).Elem()
}

func (o SparkUserPluginResponseArrayOutput) ToSparkUserPluginResponseArrayOutput() SparkUserPluginResponseArrayOutput {
	return o
}

func (o SparkUserPluginResponseArrayOutput) ToSparkUserPluginResponseArrayOutputWithContext(ctx context.Context) SparkUserPluginResponseArrayOutput {
	return o
}

func (o SparkUserPluginResponseArrayOutput) Index(i pulumi.IntInput) SparkUserPluginResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkUserPluginResponse {
		return vs[0].([]SparkUserPluginResponse)[vs[1].(int)]
	}).(SparkUserPluginResponseOutput)
}

// Spark user plugins spec
type SparkUserPlugins struct {
	// Spark user plugins.
	Plugins []SparkUserPlugin `pulumi:"plugins"`
}

// SparkUserPluginsInput is an input type that accepts SparkUserPluginsArgs and SparkUserPluginsOutput values.
// You can construct a concrete instance of `SparkUserPluginsInput` via:
//
//	SparkUserPluginsArgs{...}
type SparkUserPluginsInput interface {
	pulumi.Input

	ToSparkUserPluginsOutput() SparkUserPluginsOutput
	ToSparkUserPluginsOutputWithContext(context.Context) SparkUserPluginsOutput
}

// Spark user plugins spec
type SparkUserPluginsArgs struct {
	// Spark user plugins.
	Plugins SparkUserPluginArrayInput `pulumi:"plugins"`
}

func (SparkUserPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugins)(nil)).Elem()
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsOutput() SparkUserPluginsOutput {
	return i.ToSparkUserPluginsOutputWithContext(context.Background())
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsOutputWithContext(ctx context.Context) SparkUserPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginsOutput)
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return i.ToSparkUserPluginsPtrOutputWithContext(context.Background())
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginsOutput).ToSparkUserPluginsPtrOutputWithContext(ctx)
}

// SparkUserPluginsPtrInput is an input type that accepts SparkUserPluginsArgs, SparkUserPluginsPtr and SparkUserPluginsPtrOutput values.
// You can construct a concrete instance of `SparkUserPluginsPtrInput` via:
//
//	        SparkUserPluginsArgs{...}
//
//	or:
//
//	        nil
type SparkUserPluginsPtrInput interface {
	pulumi.Input

	ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput
	ToSparkUserPluginsPtrOutputWithContext(context.Context) SparkUserPluginsPtrOutput
}

type sparkUserPluginsPtrType SparkUserPluginsArgs

func SparkUserPluginsPtr(v *SparkUserPluginsArgs) SparkUserPluginsPtrInput {
	return (*sparkUserPluginsPtrType)(v)
}

func (*sparkUserPluginsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkUserPlugins)(nil)).Elem()
}

func (i *sparkUserPluginsPtrType) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return i.ToSparkUserPluginsPtrOutputWithContext(context.Background())
}

func (i *sparkUserPluginsPtrType) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginsPtrOutput)
}

// Spark user plugins spec
type SparkUserPluginsOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugins)(nil)).Elem()
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsOutput() SparkUserPluginsOutput {
	return o
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsOutputWithContext(ctx context.Context) SparkUserPluginsOutput {
	return o
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return o.ToSparkUserPluginsPtrOutputWithContext(context.Background())
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkUserPlugins) *SparkUserPlugins {
		return &v
	}).(SparkUserPluginsPtrOutput)
}

// Spark user plugins.
func (o SparkUserPluginsOutput) Plugins() SparkUserPluginArrayOutput {
	return o.ApplyT(func(v SparkUserPlugins) []SparkUserPlugin { return v.Plugins }).(SparkUserPluginArrayOutput)
}

type SparkUserPluginsPtrOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkUserPlugins)(nil)).Elem()
}

func (o SparkUserPluginsPtrOutput) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return o
}

func (o SparkUserPluginsPtrOutput) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return o
}

func (o SparkUserPluginsPtrOutput) Elem() SparkUserPluginsOutput {
	return o.ApplyT(func(v *SparkUserPlugins) SparkUserPlugins {
		if v != nil {
			return *v
		}
		var ret SparkUserPlugins
		return ret
	}).(SparkUserPluginsOutput)
}

// Spark user plugins.
func (o SparkUserPluginsPtrOutput) Plugins() SparkUserPluginArrayOutput {
	return o.ApplyT(func(v *SparkUserPlugins) []SparkUserPlugin {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(SparkUserPluginArrayOutput)
}

// Spark user plugins spec
type SparkUserPluginsResponse struct {
	// Spark user plugins.
	Plugins []SparkUserPluginResponse `pulumi:"plugins"`
}

// Spark user plugins spec
type SparkUserPluginsResponseOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPluginsResponse)(nil)).Elem()
}

func (o SparkUserPluginsResponseOutput) ToSparkUserPluginsResponseOutput() SparkUserPluginsResponseOutput {
	return o
}

func (o SparkUserPluginsResponseOutput) ToSparkUserPluginsResponseOutputWithContext(ctx context.Context) SparkUserPluginsResponseOutput {
	return o
}

// Spark user plugins.
func (o SparkUserPluginsResponseOutput) Plugins() SparkUserPluginResponseArrayOutput {
	return o.ApplyT(func(v SparkUserPluginsResponse) []SparkUserPluginResponse { return v.Plugins }).(SparkUserPluginResponseArrayOutput)
}

type SparkUserPluginsResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkUserPluginsResponse)(nil)).Elem()
}

func (o SparkUserPluginsResponsePtrOutput) ToSparkUserPluginsResponsePtrOutput() SparkUserPluginsResponsePtrOutput {
	return o
}

func (o SparkUserPluginsResponsePtrOutput) ToSparkUserPluginsResponsePtrOutputWithContext(ctx context.Context) SparkUserPluginsResponsePtrOutput {
	return o
}

func (o SparkUserPluginsResponsePtrOutput) Elem() SparkUserPluginsResponseOutput {
	return o.ApplyT(func(v *SparkUserPluginsResponse) SparkUserPluginsResponse {
		if v != nil {
			return *v
		}
		var ret SparkUserPluginsResponse
		return ret
	}).(SparkUserPluginsResponseOutput)
}

// Spark user plugins.
func (o SparkUserPluginsResponsePtrOutput) Plugins() SparkUserPluginResponseArrayOutput {
	return o.ApplyT(func(v *SparkUserPluginsResponse) []SparkUserPluginResponse {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(SparkUserPluginResponseArrayOutput)
}

// SSH connectivity endpoint details.
type SshConnectivityEndpointResponse struct {
	// SSH connectivity endpoint.
	Endpoint string `pulumi:"endpoint"`
	// Private SSH connectivity endpoint. This property will only be returned when enableInternalIngress is true.
	PrivateSshEndpoint *string `pulumi:"privateSshEndpoint"`
}

// SSH connectivity endpoint details.
type SshConnectivityEndpointResponseOutput struct{ *pulumi.OutputState }

func (SshConnectivityEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConnectivityEndpointResponse)(nil)).Elem()
}

func (o SshConnectivityEndpointResponseOutput) ToSshConnectivityEndpointResponseOutput() SshConnectivityEndpointResponseOutput {
	return o
}

func (o SshConnectivityEndpointResponseOutput) ToSshConnectivityEndpointResponseOutputWithContext(ctx context.Context) SshConnectivityEndpointResponseOutput {
	return o
}

// SSH connectivity endpoint.
func (o SshConnectivityEndpointResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SshConnectivityEndpointResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Private SSH connectivity endpoint. This property will only be returned when enableInternalIngress is true.
func (o SshConnectivityEndpointResponseOutput) PrivateSshEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshConnectivityEndpointResponse) *string { return v.PrivateSshEndpoint }).(pulumi.StringPtrOutput)
}

type SshConnectivityEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (SshConnectivityEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshConnectivityEndpointResponse)(nil)).Elem()
}

func (o SshConnectivityEndpointResponseArrayOutput) ToSshConnectivityEndpointResponseArrayOutput() SshConnectivityEndpointResponseArrayOutput {
	return o
}

func (o SshConnectivityEndpointResponseArrayOutput) ToSshConnectivityEndpointResponseArrayOutputWithContext(ctx context.Context) SshConnectivityEndpointResponseArrayOutput {
	return o
}

func (o SshConnectivityEndpointResponseArrayOutput) Index(i pulumi.IntInput) SshConnectivityEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshConnectivityEndpointResponse {
		return vs[0].([]SshConnectivityEndpointResponse)[vs[1].(int)]
	}).(SshConnectivityEndpointResponseOutput)
}

// Ssh profile for the cluster.
type SshProfile struct {
	// Number of ssh pods per cluster.
	Count int `pulumi:"count"`
	// The virtual machine SKU.
	VmSize *string `pulumi:"vmSize"`
}

// SshProfileInput is an input type that accepts SshProfileArgs and SshProfileOutput values.
// You can construct a concrete instance of `SshProfileInput` via:
//
//	SshProfileArgs{...}
type SshProfileInput interface {
	pulumi.Input

	ToSshProfileOutput() SshProfileOutput
	ToSshProfileOutputWithContext(context.Context) SshProfileOutput
}

// Ssh profile for the cluster.
type SshProfileArgs struct {
	// Number of ssh pods per cluster.
	Count pulumi.IntInput `pulumi:"count"`
	// The virtual machine SKU.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

func (SshProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshProfile)(nil)).Elem()
}

func (i SshProfileArgs) ToSshProfileOutput() SshProfileOutput {
	return i.ToSshProfileOutputWithContext(context.Background())
}

func (i SshProfileArgs) ToSshProfileOutputWithContext(ctx context.Context) SshProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshProfileOutput)
}

func (i SshProfileArgs) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return i.ToSshProfilePtrOutputWithContext(context.Background())
}

func (i SshProfileArgs) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshProfileOutput).ToSshProfilePtrOutputWithContext(ctx)
}

// SshProfilePtrInput is an input type that accepts SshProfileArgs, SshProfilePtr and SshProfilePtrOutput values.
// You can construct a concrete instance of `SshProfilePtrInput` via:
//
//	        SshProfileArgs{...}
//
//	or:
//
//	        nil
type SshProfilePtrInput interface {
	pulumi.Input

	ToSshProfilePtrOutput() SshProfilePtrOutput
	ToSshProfilePtrOutputWithContext(context.Context) SshProfilePtrOutput
}

type sshProfilePtrType SshProfileArgs

func SshProfilePtr(v *SshProfileArgs) SshProfilePtrInput {
	return (*sshProfilePtrType)(v)
}

func (*sshProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshProfile)(nil)).Elem()
}

func (i *sshProfilePtrType) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return i.ToSshProfilePtrOutputWithContext(context.Background())
}

func (i *sshProfilePtrType) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshProfilePtrOutput)
}

// Ssh profile for the cluster.
type SshProfileOutput struct{ *pulumi.OutputState }

func (SshProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshProfile)(nil)).Elem()
}

func (o SshProfileOutput) ToSshProfileOutput() SshProfileOutput {
	return o
}

func (o SshProfileOutput) ToSshProfileOutputWithContext(ctx context.Context) SshProfileOutput {
	return o
}

func (o SshProfileOutput) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return o.ToSshProfilePtrOutputWithContext(context.Background())
}

func (o SshProfileOutput) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshProfile) *SshProfile {
		return &v
	}).(SshProfilePtrOutput)
}

// Number of ssh pods per cluster.
func (o SshProfileOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v SshProfile) int { return v.Count }).(pulumi.IntOutput)
}

// The virtual machine SKU.
func (o SshProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type SshProfilePtrOutput struct{ *pulumi.OutputState }

func (SshProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshProfile)(nil)).Elem()
}

func (o SshProfilePtrOutput) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return o
}

func (o SshProfilePtrOutput) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return o
}

func (o SshProfilePtrOutput) Elem() SshProfileOutput {
	return o.ApplyT(func(v *SshProfile) SshProfile {
		if v != nil {
			return *v
		}
		var ret SshProfile
		return ret
	}).(SshProfileOutput)
}

// Number of ssh pods per cluster.
func (o SshProfilePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SshProfile) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The virtual machine SKU.
func (o SshProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Ssh profile for the cluster.
type SshProfileResponse struct {
	// Number of ssh pods per cluster.
	Count int `pulumi:"count"`
	// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
	PodPrefix string `pulumi:"podPrefix"`
	// The virtual machine SKU.
	VmSize *string `pulumi:"vmSize"`
}

// Ssh profile for the cluster.
type SshProfileResponseOutput struct{ *pulumi.OutputState }

func (SshProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshProfileResponse)(nil)).Elem()
}

func (o SshProfileResponseOutput) ToSshProfileResponseOutput() SshProfileResponseOutput {
	return o
}

func (o SshProfileResponseOutput) ToSshProfileResponseOutputWithContext(ctx context.Context) SshProfileResponseOutput {
	return o
}

// Number of ssh pods per cluster.
func (o SshProfileResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v SshProfileResponse) int { return v.Count }).(pulumi.IntOutput)
}

// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
func (o SshProfileResponseOutput) PodPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SshProfileResponse) string { return v.PodPrefix }).(pulumi.StringOutput)
}

// The virtual machine SKU.
func (o SshProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type SshProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SshProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshProfileResponse)(nil)).Elem()
}

func (o SshProfileResponsePtrOutput) ToSshProfileResponsePtrOutput() SshProfileResponsePtrOutput {
	return o
}

func (o SshProfileResponsePtrOutput) ToSshProfileResponsePtrOutputWithContext(ctx context.Context) SshProfileResponsePtrOutput {
	return o
}

func (o SshProfileResponsePtrOutput) Elem() SshProfileResponseOutput {
	return o.ApplyT(func(v *SshProfileResponse) SshProfileResponse {
		if v != nil {
			return *v
		}
		var ret SshProfileResponse
		return ret
	}).(SshProfileResponseOutput)
}

// Number of ssh pods per cluster.
func (o SshProfileResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SshProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
func (o SshProfileResponsePtrOutput) PodPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PodPrefix
	}).(pulumi.StringPtrOutput)
}

// The virtual machine SKU.
func (o SshProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Trino Coordinator.
type TrinoCoordinator struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
	HighAvailabilityEnabled *bool `pulumi:"highAvailabilityEnabled"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoCoordinator
func (val *TrinoCoordinator) Defaults() *TrinoCoordinator {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.HighAvailabilityEnabled == nil {
		highAvailabilityEnabled_ := true
		tmp.HighAvailabilityEnabled = &highAvailabilityEnabled_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// TrinoCoordinatorInput is an input type that accepts TrinoCoordinatorArgs and TrinoCoordinatorOutput values.
// You can construct a concrete instance of `TrinoCoordinatorInput` via:
//
//	TrinoCoordinatorArgs{...}
type TrinoCoordinatorInput interface {
	pulumi.Input

	ToTrinoCoordinatorOutput() TrinoCoordinatorOutput
	ToTrinoCoordinatorOutputWithContext(context.Context) TrinoCoordinatorOutput
}

// Trino Coordinator.
type TrinoCoordinatorArgs struct {
	// The flag that if enable debug or not.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
	HighAvailabilityEnabled pulumi.BoolPtrInput `pulumi:"highAvailabilityEnabled"`
	// The debug port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoCoordinatorArgs
func (val *TrinoCoordinatorArgs) Defaults() *TrinoCoordinatorArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		tmp.Enable = pulumi.BoolPtr(false)
	}
	if tmp.HighAvailabilityEnabled == nil {
		tmp.HighAvailabilityEnabled = pulumi.BoolPtr(true)
	}
	if tmp.Port == nil {
		tmp.Port = pulumi.IntPtr(8008)
	}
	if tmp.Suspend == nil {
		tmp.Suspend = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TrinoCoordinatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoCoordinator)(nil)).Elem()
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorOutput() TrinoCoordinatorOutput {
	return i.ToTrinoCoordinatorOutputWithContext(context.Background())
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorOutputWithContext(ctx context.Context) TrinoCoordinatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoCoordinatorOutput)
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return i.ToTrinoCoordinatorPtrOutputWithContext(context.Background())
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoCoordinatorOutput).ToTrinoCoordinatorPtrOutputWithContext(ctx)
}

// TrinoCoordinatorPtrInput is an input type that accepts TrinoCoordinatorArgs, TrinoCoordinatorPtr and TrinoCoordinatorPtrOutput values.
// You can construct a concrete instance of `TrinoCoordinatorPtrInput` via:
//
//	        TrinoCoordinatorArgs{...}
//
//	or:
//
//	        nil
type TrinoCoordinatorPtrInput interface {
	pulumi.Input

	ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput
	ToTrinoCoordinatorPtrOutputWithContext(context.Context) TrinoCoordinatorPtrOutput
}

type trinoCoordinatorPtrType TrinoCoordinatorArgs

func TrinoCoordinatorPtr(v *TrinoCoordinatorArgs) TrinoCoordinatorPtrInput {
	return (*trinoCoordinatorPtrType)(v)
}

func (*trinoCoordinatorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoCoordinator)(nil)).Elem()
}

func (i *trinoCoordinatorPtrType) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return i.ToTrinoCoordinatorPtrOutputWithContext(context.Background())
}

func (i *trinoCoordinatorPtrType) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoCoordinatorPtrOutput)
}

// Trino Coordinator.
type TrinoCoordinatorOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoCoordinator)(nil)).Elem()
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorOutput() TrinoCoordinatorOutput {
	return o
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorOutputWithContext(ctx context.Context) TrinoCoordinatorOutput {
	return o
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return o.ToTrinoCoordinatorPtrOutputWithContext(context.Background())
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoCoordinator) *TrinoCoordinator {
		return &v
	}).(TrinoCoordinatorPtrOutput)
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *bool { return v.HighAvailabilityEnabled }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoCoordinatorPtrOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoCoordinator)(nil)).Elem()
}

func (o TrinoCoordinatorPtrOutput) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return o
}

func (o TrinoCoordinatorPtrOutput) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return o
}

func (o TrinoCoordinatorPtrOutput) Elem() TrinoCoordinatorOutput {
	return o.ApplyT(func(v *TrinoCoordinator) TrinoCoordinator {
		if v != nil {
			return *v
		}
		var ret TrinoCoordinator
		return ret
	}).(TrinoCoordinatorOutput)
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorPtrOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *bool {
		if v == nil {
			return nil
		}
		return v.HighAvailabilityEnabled
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Trino Coordinator.
type TrinoCoordinatorResponse struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
	HighAvailabilityEnabled *bool `pulumi:"highAvailabilityEnabled"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoCoordinatorResponse
func (val *TrinoCoordinatorResponse) Defaults() *TrinoCoordinatorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.HighAvailabilityEnabled == nil {
		highAvailabilityEnabled_ := true
		tmp.HighAvailabilityEnabled = &highAvailabilityEnabled_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// Trino Coordinator.
type TrinoCoordinatorResponseOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoCoordinatorResponse)(nil)).Elem()
}

func (o TrinoCoordinatorResponseOutput) ToTrinoCoordinatorResponseOutput() TrinoCoordinatorResponseOutput {
	return o
}

func (o TrinoCoordinatorResponseOutput) ToTrinoCoordinatorResponseOutputWithContext(ctx context.Context) TrinoCoordinatorResponseOutput {
	return o
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorResponseOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *bool { return v.HighAvailabilityEnabled }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorResponseOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoCoordinatorResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoCoordinatorResponse)(nil)).Elem()
}

func (o TrinoCoordinatorResponsePtrOutput) ToTrinoCoordinatorResponsePtrOutput() TrinoCoordinatorResponsePtrOutput {
	return o
}

func (o TrinoCoordinatorResponsePtrOutput) ToTrinoCoordinatorResponsePtrOutputWithContext(ctx context.Context) TrinoCoordinatorResponsePtrOutput {
	return o
}

func (o TrinoCoordinatorResponsePtrOutput) Elem() TrinoCoordinatorResponseOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) TrinoCoordinatorResponse {
		if v != nil {
			return *v
		}
		var ret TrinoCoordinatorResponse
		return ret
	}).(TrinoCoordinatorResponseOutput)
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorResponsePtrOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.HighAvailabilityEnabled
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorResponsePtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Trino Cluster profile.
type TrinoProfile struct {
	// Trino cluster catalog options.
	CatalogOptions *CatalogOptions `pulumi:"catalogOptions"`
	// Trino Coordinator.
	Coordinator *TrinoCoordinator `pulumi:"coordinator"`
	// Trino user plugins spec
	UserPluginsSpec *TrinoUserPlugins `pulumi:"userPluginsSpec"`
	// User telemetry
	UserTelemetrySpec *TrinoUserTelemetry `pulumi:"userTelemetrySpec"`
	// Trino worker.
	Worker *TrinoWorker `pulumi:"worker"`
}

// Defaults sets the appropriate defaults for TrinoProfile
func (val *TrinoProfile) Defaults() *TrinoProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Coordinator = tmp.Coordinator.Defaults()

	tmp.UserTelemetrySpec = tmp.UserTelemetrySpec.Defaults()

	tmp.Worker = tmp.Worker.Defaults()

	return &tmp
}

// TrinoProfileInput is an input type that accepts TrinoProfileArgs and TrinoProfileOutput values.
// You can construct a concrete instance of `TrinoProfileInput` via:
//
//	TrinoProfileArgs{...}
type TrinoProfileInput interface {
	pulumi.Input

	ToTrinoProfileOutput() TrinoProfileOutput
	ToTrinoProfileOutputWithContext(context.Context) TrinoProfileOutput
}

// Trino Cluster profile.
type TrinoProfileArgs struct {
	// Trino cluster catalog options.
	CatalogOptions CatalogOptionsPtrInput `pulumi:"catalogOptions"`
	// Trino Coordinator.
	Coordinator TrinoCoordinatorPtrInput `pulumi:"coordinator"`
	// Trino user plugins spec
	UserPluginsSpec TrinoUserPluginsPtrInput `pulumi:"userPluginsSpec"`
	// User telemetry
	UserTelemetrySpec TrinoUserTelemetryPtrInput `pulumi:"userTelemetrySpec"`
	// Trino worker.
	Worker TrinoWorkerPtrInput `pulumi:"worker"`
}

// Defaults sets the appropriate defaults for TrinoProfileArgs
func (val *TrinoProfileArgs) Defaults() *TrinoProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrinoProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoProfile)(nil)).Elem()
}

func (i TrinoProfileArgs) ToTrinoProfileOutput() TrinoProfileOutput {
	return i.ToTrinoProfileOutputWithContext(context.Background())
}

func (i TrinoProfileArgs) ToTrinoProfileOutputWithContext(ctx context.Context) TrinoProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoProfileOutput)
}

func (i TrinoProfileArgs) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return i.ToTrinoProfilePtrOutputWithContext(context.Background())
}

func (i TrinoProfileArgs) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoProfileOutput).ToTrinoProfilePtrOutputWithContext(ctx)
}

// TrinoProfilePtrInput is an input type that accepts TrinoProfileArgs, TrinoProfilePtr and TrinoProfilePtrOutput values.
// You can construct a concrete instance of `TrinoProfilePtrInput` via:
//
//	        TrinoProfileArgs{...}
//
//	or:
//
//	        nil
type TrinoProfilePtrInput interface {
	pulumi.Input

	ToTrinoProfilePtrOutput() TrinoProfilePtrOutput
	ToTrinoProfilePtrOutputWithContext(context.Context) TrinoProfilePtrOutput
}

type trinoProfilePtrType TrinoProfileArgs

func TrinoProfilePtr(v *TrinoProfileArgs) TrinoProfilePtrInput {
	return (*trinoProfilePtrType)(v)
}

func (*trinoProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoProfile)(nil)).Elem()
}

func (i *trinoProfilePtrType) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return i.ToTrinoProfilePtrOutputWithContext(context.Background())
}

func (i *trinoProfilePtrType) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoProfilePtrOutput)
}

// Trino Cluster profile.
type TrinoProfileOutput struct{ *pulumi.OutputState }

func (TrinoProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoProfile)(nil)).Elem()
}

func (o TrinoProfileOutput) ToTrinoProfileOutput() TrinoProfileOutput {
	return o
}

func (o TrinoProfileOutput) ToTrinoProfileOutputWithContext(ctx context.Context) TrinoProfileOutput {
	return o
}

func (o TrinoProfileOutput) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return o.ToTrinoProfilePtrOutputWithContext(context.Background())
}

func (o TrinoProfileOutput) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoProfile) *TrinoProfile {
		return &v
	}).(TrinoProfilePtrOutput)
}

// Trino cluster catalog options.
func (o TrinoProfileOutput) CatalogOptions() CatalogOptionsPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *CatalogOptions { return v.CatalogOptions }).(CatalogOptionsPtrOutput)
}

// Trino Coordinator.
func (o TrinoProfileOutput) Coordinator() TrinoCoordinatorPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoCoordinator { return v.Coordinator }).(TrinoCoordinatorPtrOutput)
}

// Trino user plugins spec
func (o TrinoProfileOutput) UserPluginsSpec() TrinoUserPluginsPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoUserPlugins { return v.UserPluginsSpec }).(TrinoUserPluginsPtrOutput)
}

// User telemetry
func (o TrinoProfileOutput) UserTelemetrySpec() TrinoUserTelemetryPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoUserTelemetry { return v.UserTelemetrySpec }).(TrinoUserTelemetryPtrOutput)
}

// Trino worker.
func (o TrinoProfileOutput) Worker() TrinoWorkerPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoWorker { return v.Worker }).(TrinoWorkerPtrOutput)
}

type TrinoProfilePtrOutput struct{ *pulumi.OutputState }

func (TrinoProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoProfile)(nil)).Elem()
}

func (o TrinoProfilePtrOutput) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return o
}

func (o TrinoProfilePtrOutput) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return o
}

func (o TrinoProfilePtrOutput) Elem() TrinoProfileOutput {
	return o.ApplyT(func(v *TrinoProfile) TrinoProfile {
		if v != nil {
			return *v
		}
		var ret TrinoProfile
		return ret
	}).(TrinoProfileOutput)
}

// Trino cluster catalog options.
func (o TrinoProfilePtrOutput) CatalogOptions() CatalogOptionsPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *CatalogOptions {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(CatalogOptionsPtrOutput)
}

// Trino Coordinator.
func (o TrinoProfilePtrOutput) Coordinator() TrinoCoordinatorPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoCoordinator {
		if v == nil {
			return nil
		}
		return v.Coordinator
	}).(TrinoCoordinatorPtrOutput)
}

// Trino user plugins spec
func (o TrinoProfilePtrOutput) UserPluginsSpec() TrinoUserPluginsPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoUserPlugins {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(TrinoUserPluginsPtrOutput)
}

// User telemetry
func (o TrinoProfilePtrOutput) UserTelemetrySpec() TrinoUserTelemetryPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoUserTelemetry {
		if v == nil {
			return nil
		}
		return v.UserTelemetrySpec
	}).(TrinoUserTelemetryPtrOutput)
}

// Trino worker.
func (o TrinoProfilePtrOutput) Worker() TrinoWorkerPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoWorker {
		if v == nil {
			return nil
		}
		return v.Worker
	}).(TrinoWorkerPtrOutput)
}

// Trino Cluster profile.
type TrinoProfileResponse struct {
	// Trino cluster catalog options.
	CatalogOptions *CatalogOptionsResponse `pulumi:"catalogOptions"`
	// Trino Coordinator.
	Coordinator *TrinoCoordinatorResponse `pulumi:"coordinator"`
	// Trino user plugins spec
	UserPluginsSpec *TrinoUserPluginsResponse `pulumi:"userPluginsSpec"`
	// User telemetry
	UserTelemetrySpec *TrinoUserTelemetryResponse `pulumi:"userTelemetrySpec"`
	// Trino worker.
	Worker *TrinoWorkerResponse `pulumi:"worker"`
}

// Defaults sets the appropriate defaults for TrinoProfileResponse
func (val *TrinoProfileResponse) Defaults() *TrinoProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Coordinator = tmp.Coordinator.Defaults()

	tmp.UserTelemetrySpec = tmp.UserTelemetrySpec.Defaults()

	tmp.Worker = tmp.Worker.Defaults()

	return &tmp
}

// Trino Cluster profile.
type TrinoProfileResponseOutput struct{ *pulumi.OutputState }

func (TrinoProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoProfileResponse)(nil)).Elem()
}

func (o TrinoProfileResponseOutput) ToTrinoProfileResponseOutput() TrinoProfileResponseOutput {
	return o
}

func (o TrinoProfileResponseOutput) ToTrinoProfileResponseOutputWithContext(ctx context.Context) TrinoProfileResponseOutput {
	return o
}

// Trino cluster catalog options.
func (o TrinoProfileResponseOutput) CatalogOptions() CatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *CatalogOptionsResponse { return v.CatalogOptions }).(CatalogOptionsResponsePtrOutput)
}

// Trino Coordinator.
func (o TrinoProfileResponseOutput) Coordinator() TrinoCoordinatorResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoCoordinatorResponse { return v.Coordinator }).(TrinoCoordinatorResponsePtrOutput)
}

// Trino user plugins spec
func (o TrinoProfileResponseOutput) UserPluginsSpec() TrinoUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoUserPluginsResponse { return v.UserPluginsSpec }).(TrinoUserPluginsResponsePtrOutput)
}

// User telemetry
func (o TrinoProfileResponseOutput) UserTelemetrySpec() TrinoUserTelemetryResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoUserTelemetryResponse { return v.UserTelemetrySpec }).(TrinoUserTelemetryResponsePtrOutput)
}

// Trino worker.
func (o TrinoProfileResponseOutput) Worker() TrinoWorkerResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoWorkerResponse { return v.Worker }).(TrinoWorkerResponsePtrOutput)
}

type TrinoProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoProfileResponse)(nil)).Elem()
}

func (o TrinoProfileResponsePtrOutput) ToTrinoProfileResponsePtrOutput() TrinoProfileResponsePtrOutput {
	return o
}

func (o TrinoProfileResponsePtrOutput) ToTrinoProfileResponsePtrOutputWithContext(ctx context.Context) TrinoProfileResponsePtrOutput {
	return o
}

func (o TrinoProfileResponsePtrOutput) Elem() TrinoProfileResponseOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) TrinoProfileResponse {
		if v != nil {
			return *v
		}
		var ret TrinoProfileResponse
		return ret
	}).(TrinoProfileResponseOutput)
}

// Trino cluster catalog options.
func (o TrinoProfileResponsePtrOutput) CatalogOptions() CatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *CatalogOptionsResponse {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(CatalogOptionsResponsePtrOutput)
}

// Trino Coordinator.
func (o TrinoProfileResponsePtrOutput) Coordinator() TrinoCoordinatorResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoCoordinatorResponse {
		if v == nil {
			return nil
		}
		return v.Coordinator
	}).(TrinoCoordinatorResponsePtrOutput)
}

// Trino user plugins spec
func (o TrinoProfileResponsePtrOutput) UserPluginsSpec() TrinoUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoUserPluginsResponse {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(TrinoUserPluginsResponsePtrOutput)
}

// User telemetry
func (o TrinoProfileResponsePtrOutput) UserTelemetrySpec() TrinoUserTelemetryResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoUserTelemetryResponse {
		if v == nil {
			return nil
		}
		return v.UserTelemetrySpec
	}).(TrinoUserTelemetryResponsePtrOutput)
}

// Trino worker.
func (o TrinoProfileResponsePtrOutput) Worker() TrinoWorkerResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoWorkerResponse {
		if v == nil {
			return nil
		}
		return v.Worker
	}).(TrinoWorkerResponsePtrOutput)
}

// Trino user telemetry definition.
type TrinoTelemetryConfig struct {
	// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
	HivecatalogName *string `pulumi:"hivecatalogName"`
	// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
	HivecatalogSchema *string `pulumi:"hivecatalogSchema"`
	// Retention period for query log table partitions, this doesn't have any affect on actual data.
	PartitionRetentionInDays *int `pulumi:"partitionRetentionInDays"`
	// Azure storage location of the blobs.
	Path *string `pulumi:"path"`
}

// Defaults sets the appropriate defaults for TrinoTelemetryConfig
func (val *TrinoTelemetryConfig) Defaults() *TrinoTelemetryConfig {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HivecatalogSchema == nil {
		hivecatalogSchema_ := "trinologs"
		tmp.HivecatalogSchema = &hivecatalogSchema_
	}
	if tmp.PartitionRetentionInDays == nil {
		partitionRetentionInDays_ := 365
		tmp.PartitionRetentionInDays = &partitionRetentionInDays_
	}
	return &tmp
}

// TrinoTelemetryConfigInput is an input type that accepts TrinoTelemetryConfigArgs and TrinoTelemetryConfigOutput values.
// You can construct a concrete instance of `TrinoTelemetryConfigInput` via:
//
//	TrinoTelemetryConfigArgs{...}
type TrinoTelemetryConfigInput interface {
	pulumi.Input

	ToTrinoTelemetryConfigOutput() TrinoTelemetryConfigOutput
	ToTrinoTelemetryConfigOutputWithContext(context.Context) TrinoTelemetryConfigOutput
}

// Trino user telemetry definition.
type TrinoTelemetryConfigArgs struct {
	// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
	HivecatalogName pulumi.StringPtrInput `pulumi:"hivecatalogName"`
	// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
	HivecatalogSchema pulumi.StringPtrInput `pulumi:"hivecatalogSchema"`
	// Retention period for query log table partitions, this doesn't have any affect on actual data.
	PartitionRetentionInDays pulumi.IntPtrInput `pulumi:"partitionRetentionInDays"`
	// Azure storage location of the blobs.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

// Defaults sets the appropriate defaults for TrinoTelemetryConfigArgs
func (val *TrinoTelemetryConfigArgs) Defaults() *TrinoTelemetryConfigArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HivecatalogSchema == nil {
		tmp.HivecatalogSchema = pulumi.StringPtr("trinologs")
	}
	if tmp.PartitionRetentionInDays == nil {
		tmp.PartitionRetentionInDays = pulumi.IntPtr(365)
	}
	return &tmp
}
func (TrinoTelemetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoTelemetryConfig)(nil)).Elem()
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigOutput() TrinoTelemetryConfigOutput {
	return i.ToTrinoTelemetryConfigOutputWithContext(context.Background())
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigOutputWithContext(ctx context.Context) TrinoTelemetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoTelemetryConfigOutput)
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return i.ToTrinoTelemetryConfigPtrOutputWithContext(context.Background())
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoTelemetryConfigOutput).ToTrinoTelemetryConfigPtrOutputWithContext(ctx)
}

// TrinoTelemetryConfigPtrInput is an input type that accepts TrinoTelemetryConfigArgs, TrinoTelemetryConfigPtr and TrinoTelemetryConfigPtrOutput values.
// You can construct a concrete instance of `TrinoTelemetryConfigPtrInput` via:
//
//	        TrinoTelemetryConfigArgs{...}
//
//	or:
//
//	        nil
type TrinoTelemetryConfigPtrInput interface {
	pulumi.Input

	ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput
	ToTrinoTelemetryConfigPtrOutputWithContext(context.Context) TrinoTelemetryConfigPtrOutput
}

type trinoTelemetryConfigPtrType TrinoTelemetryConfigArgs

func TrinoTelemetryConfigPtr(v *TrinoTelemetryConfigArgs) TrinoTelemetryConfigPtrInput {
	return (*trinoTelemetryConfigPtrType)(v)
}

func (*trinoTelemetryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoTelemetryConfig)(nil)).Elem()
}

func (i *trinoTelemetryConfigPtrType) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return i.ToTrinoTelemetryConfigPtrOutputWithContext(context.Background())
}

func (i *trinoTelemetryConfigPtrType) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoTelemetryConfigPtrOutput)
}

// Trino user telemetry definition.
type TrinoTelemetryConfigOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoTelemetryConfig)(nil)).Elem()
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigOutput() TrinoTelemetryConfigOutput {
	return o
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigOutputWithContext(ctx context.Context) TrinoTelemetryConfigOutput {
	return o
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return o.ToTrinoTelemetryConfigPtrOutputWithContext(context.Background())
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoTelemetryConfig) *TrinoTelemetryConfig {
		return &v
	}).(TrinoTelemetryConfigPtrOutput)
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *string { return v.HivecatalogName }).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *string { return v.HivecatalogSchema }).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *int { return v.PartitionRetentionInDays }).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoTelemetryConfigPtrOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoTelemetryConfig)(nil)).Elem()
}

func (o TrinoTelemetryConfigPtrOutput) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return o
}

func (o TrinoTelemetryConfigPtrOutput) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return o
}

func (o TrinoTelemetryConfigPtrOutput) Elem() TrinoTelemetryConfigOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) TrinoTelemetryConfig {
		if v != nil {
			return *v
		}
		var ret TrinoTelemetryConfig
		return ret
	}).(TrinoTelemetryConfigOutput)
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigPtrOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogName
	}).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigPtrOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogSchema
	}).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigPtrOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.PartitionRetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Trino user telemetry definition.
type TrinoTelemetryConfigResponse struct {
	// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
	HivecatalogName *string `pulumi:"hivecatalogName"`
	// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
	HivecatalogSchema *string `pulumi:"hivecatalogSchema"`
	// Retention period for query log table partitions, this doesn't have any affect on actual data.
	PartitionRetentionInDays *int `pulumi:"partitionRetentionInDays"`
	// Azure storage location of the blobs.
	Path *string `pulumi:"path"`
}

// Defaults sets the appropriate defaults for TrinoTelemetryConfigResponse
func (val *TrinoTelemetryConfigResponse) Defaults() *TrinoTelemetryConfigResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HivecatalogSchema == nil {
		hivecatalogSchema_ := "trinologs"
		tmp.HivecatalogSchema = &hivecatalogSchema_
	}
	if tmp.PartitionRetentionInDays == nil {
		partitionRetentionInDays_ := 365
		tmp.PartitionRetentionInDays = &partitionRetentionInDays_
	}
	return &tmp
}

// Trino user telemetry definition.
type TrinoTelemetryConfigResponseOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoTelemetryConfigResponse)(nil)).Elem()
}

func (o TrinoTelemetryConfigResponseOutput) ToTrinoTelemetryConfigResponseOutput() TrinoTelemetryConfigResponseOutput {
	return o
}

func (o TrinoTelemetryConfigResponseOutput) ToTrinoTelemetryConfigResponseOutputWithContext(ctx context.Context) TrinoTelemetryConfigResponseOutput {
	return o
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigResponseOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *string { return v.HivecatalogName }).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigResponseOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *string { return v.HivecatalogSchema }).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigResponseOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *int { return v.PartitionRetentionInDays }).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoTelemetryConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoTelemetryConfigResponse)(nil)).Elem()
}

func (o TrinoTelemetryConfigResponsePtrOutput) ToTrinoTelemetryConfigResponsePtrOutput() TrinoTelemetryConfigResponsePtrOutput {
	return o
}

func (o TrinoTelemetryConfigResponsePtrOutput) ToTrinoTelemetryConfigResponsePtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigResponsePtrOutput {
	return o
}

func (o TrinoTelemetryConfigResponsePtrOutput) Elem() TrinoTelemetryConfigResponseOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) TrinoTelemetryConfigResponse {
		if v != nil {
			return *v
		}
		var ret TrinoTelemetryConfigResponse
		return ret
	}).(TrinoTelemetryConfigResponseOutput)
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigResponsePtrOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogName
	}).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigResponsePtrOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogSchema
	}).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigResponsePtrOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.PartitionRetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Trino user plugin.
type TrinoUserPlugin struct {
	// Denotes whether the plugin is active or not.
	Enabled *bool `pulumi:"enabled"`
	// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
	Name *string `pulumi:"name"`
	// Fully qualified path to the folder containing the plugins.
	Path *string `pulumi:"path"`
}

// TrinoUserPluginInput is an input type that accepts TrinoUserPluginArgs and TrinoUserPluginOutput values.
// You can construct a concrete instance of `TrinoUserPluginInput` via:
//
//	TrinoUserPluginArgs{...}
type TrinoUserPluginInput interface {
	pulumi.Input

	ToTrinoUserPluginOutput() TrinoUserPluginOutput
	ToTrinoUserPluginOutputWithContext(context.Context) TrinoUserPluginOutput
}

// Trino user plugin.
type TrinoUserPluginArgs struct {
	// Denotes whether the plugin is active or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Fully qualified path to the folder containing the plugins.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (TrinoUserPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugin)(nil)).Elem()
}

func (i TrinoUserPluginArgs) ToTrinoUserPluginOutput() TrinoUserPluginOutput {
	return i.ToTrinoUserPluginOutputWithContext(context.Background())
}

func (i TrinoUserPluginArgs) ToTrinoUserPluginOutputWithContext(ctx context.Context) TrinoUserPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginOutput)
}

// TrinoUserPluginArrayInput is an input type that accepts TrinoUserPluginArray and TrinoUserPluginArrayOutput values.
// You can construct a concrete instance of `TrinoUserPluginArrayInput` via:
//
//	TrinoUserPluginArray{ TrinoUserPluginArgs{...} }
type TrinoUserPluginArrayInput interface {
	pulumi.Input

	ToTrinoUserPluginArrayOutput() TrinoUserPluginArrayOutput
	ToTrinoUserPluginArrayOutputWithContext(context.Context) TrinoUserPluginArrayOutput
}

type TrinoUserPluginArray []TrinoUserPluginInput

func (TrinoUserPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrinoUserPlugin)(nil)).Elem()
}

func (i TrinoUserPluginArray) ToTrinoUserPluginArrayOutput() TrinoUserPluginArrayOutput {
	return i.ToTrinoUserPluginArrayOutputWithContext(context.Background())
}

func (i TrinoUserPluginArray) ToTrinoUserPluginArrayOutputWithContext(ctx context.Context) TrinoUserPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginArrayOutput)
}

// Trino user plugin.
type TrinoUserPluginOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugin)(nil)).Elem()
}

func (o TrinoUserPluginOutput) ToTrinoUserPluginOutput() TrinoUserPluginOutput {
	return o
}

func (o TrinoUserPluginOutput) ToTrinoUserPluginOutputWithContext(ctx context.Context) TrinoUserPluginOutput {
	return o
}

// Denotes whether the plugin is active or not.
func (o TrinoUserPluginOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoUserPlugin) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
func (o TrinoUserPluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Fully qualified path to the folder containing the plugins.
func (o TrinoUserPluginOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPlugin) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoUserPluginArrayOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrinoUserPlugin)(nil)).Elem()
}

func (o TrinoUserPluginArrayOutput) ToTrinoUserPluginArrayOutput() TrinoUserPluginArrayOutput {
	return o
}

func (o TrinoUserPluginArrayOutput) ToTrinoUserPluginArrayOutputWithContext(ctx context.Context) TrinoUserPluginArrayOutput {
	return o
}

func (o TrinoUserPluginArrayOutput) Index(i pulumi.IntInput) TrinoUserPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrinoUserPlugin {
		return vs[0].([]TrinoUserPlugin)[vs[1].(int)]
	}).(TrinoUserPluginOutput)
}

// Trino user plugin.
type TrinoUserPluginResponse struct {
	// Denotes whether the plugin is active or not.
	Enabled *bool `pulumi:"enabled"`
	// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
	Name *string `pulumi:"name"`
	// Fully qualified path to the folder containing the plugins.
	Path *string `pulumi:"path"`
}

// Trino user plugin.
type TrinoUserPluginResponseOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPluginResponse)(nil)).Elem()
}

func (o TrinoUserPluginResponseOutput) ToTrinoUserPluginResponseOutput() TrinoUserPluginResponseOutput {
	return o
}

func (o TrinoUserPluginResponseOutput) ToTrinoUserPluginResponseOutputWithContext(ctx context.Context) TrinoUserPluginResponseOutput {
	return o
}

// Denotes whether the plugin is active or not.
func (o TrinoUserPluginResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoUserPluginResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
func (o TrinoUserPluginResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPluginResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Fully qualified path to the folder containing the plugins.
func (o TrinoUserPluginResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPluginResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoUserPluginResponseArrayOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrinoUserPluginResponse)(nil)).Elem()
}

func (o TrinoUserPluginResponseArrayOutput) ToTrinoUserPluginResponseArrayOutput() TrinoUserPluginResponseArrayOutput {
	return o
}

func (o TrinoUserPluginResponseArrayOutput) ToTrinoUserPluginResponseArrayOutputWithContext(ctx context.Context) TrinoUserPluginResponseArrayOutput {
	return o
}

func (o TrinoUserPluginResponseArrayOutput) Index(i pulumi.IntInput) TrinoUserPluginResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrinoUserPluginResponse {
		return vs[0].([]TrinoUserPluginResponse)[vs[1].(int)]
	}).(TrinoUserPluginResponseOutput)
}

// Trino user plugins spec
type TrinoUserPlugins struct {
	// Trino user plugins.
	Plugins []TrinoUserPlugin `pulumi:"plugins"`
}

// TrinoUserPluginsInput is an input type that accepts TrinoUserPluginsArgs and TrinoUserPluginsOutput values.
// You can construct a concrete instance of `TrinoUserPluginsInput` via:
//
//	TrinoUserPluginsArgs{...}
type TrinoUserPluginsInput interface {
	pulumi.Input

	ToTrinoUserPluginsOutput() TrinoUserPluginsOutput
	ToTrinoUserPluginsOutputWithContext(context.Context) TrinoUserPluginsOutput
}

// Trino user plugins spec
type TrinoUserPluginsArgs struct {
	// Trino user plugins.
	Plugins TrinoUserPluginArrayInput `pulumi:"plugins"`
}

func (TrinoUserPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugins)(nil)).Elem()
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsOutput() TrinoUserPluginsOutput {
	return i.ToTrinoUserPluginsOutputWithContext(context.Background())
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsOutputWithContext(ctx context.Context) TrinoUserPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginsOutput)
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return i.ToTrinoUserPluginsPtrOutputWithContext(context.Background())
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginsOutput).ToTrinoUserPluginsPtrOutputWithContext(ctx)
}

// TrinoUserPluginsPtrInput is an input type that accepts TrinoUserPluginsArgs, TrinoUserPluginsPtr and TrinoUserPluginsPtrOutput values.
// You can construct a concrete instance of `TrinoUserPluginsPtrInput` via:
//
//	        TrinoUserPluginsArgs{...}
//
//	or:
//
//	        nil
type TrinoUserPluginsPtrInput interface {
	pulumi.Input

	ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput
	ToTrinoUserPluginsPtrOutputWithContext(context.Context) TrinoUserPluginsPtrOutput
}

type trinoUserPluginsPtrType TrinoUserPluginsArgs

func TrinoUserPluginsPtr(v *TrinoUserPluginsArgs) TrinoUserPluginsPtrInput {
	return (*trinoUserPluginsPtrType)(v)
}

func (*trinoUserPluginsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserPlugins)(nil)).Elem()
}

func (i *trinoUserPluginsPtrType) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return i.ToTrinoUserPluginsPtrOutputWithContext(context.Background())
}

func (i *trinoUserPluginsPtrType) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginsPtrOutput)
}

// Trino user plugins spec
type TrinoUserPluginsOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugins)(nil)).Elem()
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsOutput() TrinoUserPluginsOutput {
	return o
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsOutputWithContext(ctx context.Context) TrinoUserPluginsOutput {
	return o
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return o.ToTrinoUserPluginsPtrOutputWithContext(context.Background())
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoUserPlugins) *TrinoUserPlugins {
		return &v
	}).(TrinoUserPluginsPtrOutput)
}

// Trino user plugins.
func (o TrinoUserPluginsOutput) Plugins() TrinoUserPluginArrayOutput {
	return o.ApplyT(func(v TrinoUserPlugins) []TrinoUserPlugin { return v.Plugins }).(TrinoUserPluginArrayOutput)
}

type TrinoUserPluginsPtrOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserPlugins)(nil)).Elem()
}

func (o TrinoUserPluginsPtrOutput) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return o
}

func (o TrinoUserPluginsPtrOutput) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return o
}

func (o TrinoUserPluginsPtrOutput) Elem() TrinoUserPluginsOutput {
	return o.ApplyT(func(v *TrinoUserPlugins) TrinoUserPlugins {
		if v != nil {
			return *v
		}
		var ret TrinoUserPlugins
		return ret
	}).(TrinoUserPluginsOutput)
}

// Trino user plugins.
func (o TrinoUserPluginsPtrOutput) Plugins() TrinoUserPluginArrayOutput {
	return o.ApplyT(func(v *TrinoUserPlugins) []TrinoUserPlugin {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(TrinoUserPluginArrayOutput)
}

// Trino user plugins spec
type TrinoUserPluginsResponse struct {
	// Trino user plugins.
	Plugins []TrinoUserPluginResponse `pulumi:"plugins"`
}

// Trino user plugins spec
type TrinoUserPluginsResponseOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPluginsResponse)(nil)).Elem()
}

func (o TrinoUserPluginsResponseOutput) ToTrinoUserPluginsResponseOutput() TrinoUserPluginsResponseOutput {
	return o
}

func (o TrinoUserPluginsResponseOutput) ToTrinoUserPluginsResponseOutputWithContext(ctx context.Context) TrinoUserPluginsResponseOutput {
	return o
}

// Trino user plugins.
func (o TrinoUserPluginsResponseOutput) Plugins() TrinoUserPluginResponseArrayOutput {
	return o.ApplyT(func(v TrinoUserPluginsResponse) []TrinoUserPluginResponse { return v.Plugins }).(TrinoUserPluginResponseArrayOutput)
}

type TrinoUserPluginsResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserPluginsResponse)(nil)).Elem()
}

func (o TrinoUserPluginsResponsePtrOutput) ToTrinoUserPluginsResponsePtrOutput() TrinoUserPluginsResponsePtrOutput {
	return o
}

func (o TrinoUserPluginsResponsePtrOutput) ToTrinoUserPluginsResponsePtrOutputWithContext(ctx context.Context) TrinoUserPluginsResponsePtrOutput {
	return o
}

func (o TrinoUserPluginsResponsePtrOutput) Elem() TrinoUserPluginsResponseOutput {
	return o.ApplyT(func(v *TrinoUserPluginsResponse) TrinoUserPluginsResponse {
		if v != nil {
			return *v
		}
		var ret TrinoUserPluginsResponse
		return ret
	}).(TrinoUserPluginsResponseOutput)
}

// Trino user plugins.
func (o TrinoUserPluginsResponsePtrOutput) Plugins() TrinoUserPluginResponseArrayOutput {
	return o.ApplyT(func(v *TrinoUserPluginsResponse) []TrinoUserPluginResponse {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(TrinoUserPluginResponseArrayOutput)
}

// User telemetry
type TrinoUserTelemetry struct {
	// Trino user telemetry definition.
	Storage *TrinoTelemetryConfig `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for TrinoUserTelemetry
func (val *TrinoUserTelemetry) Defaults() *TrinoUserTelemetry {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Storage = tmp.Storage.Defaults()

	return &tmp
}

// TrinoUserTelemetryInput is an input type that accepts TrinoUserTelemetryArgs and TrinoUserTelemetryOutput values.
// You can construct a concrete instance of `TrinoUserTelemetryInput` via:
//
//	TrinoUserTelemetryArgs{...}
type TrinoUserTelemetryInput interface {
	pulumi.Input

	ToTrinoUserTelemetryOutput() TrinoUserTelemetryOutput
	ToTrinoUserTelemetryOutputWithContext(context.Context) TrinoUserTelemetryOutput
}

// User telemetry
type TrinoUserTelemetryArgs struct {
	// Trino user telemetry definition.
	Storage TrinoTelemetryConfigPtrInput `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for TrinoUserTelemetryArgs
func (val *TrinoUserTelemetryArgs) Defaults() *TrinoUserTelemetryArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrinoUserTelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserTelemetry)(nil)).Elem()
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryOutput() TrinoUserTelemetryOutput {
	return i.ToTrinoUserTelemetryOutputWithContext(context.Background())
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryOutputWithContext(ctx context.Context) TrinoUserTelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserTelemetryOutput)
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return i.ToTrinoUserTelemetryPtrOutputWithContext(context.Background())
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserTelemetryOutput).ToTrinoUserTelemetryPtrOutputWithContext(ctx)
}

// TrinoUserTelemetryPtrInput is an input type that accepts TrinoUserTelemetryArgs, TrinoUserTelemetryPtr and TrinoUserTelemetryPtrOutput values.
// You can construct a concrete instance of `TrinoUserTelemetryPtrInput` via:
//
//	        TrinoUserTelemetryArgs{...}
//
//	or:
//
//	        nil
type TrinoUserTelemetryPtrInput interface {
	pulumi.Input

	ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput
	ToTrinoUserTelemetryPtrOutputWithContext(context.Context) TrinoUserTelemetryPtrOutput
}

type trinoUserTelemetryPtrType TrinoUserTelemetryArgs

func TrinoUserTelemetryPtr(v *TrinoUserTelemetryArgs) TrinoUserTelemetryPtrInput {
	return (*trinoUserTelemetryPtrType)(v)
}

func (*trinoUserTelemetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserTelemetry)(nil)).Elem()
}

func (i *trinoUserTelemetryPtrType) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return i.ToTrinoUserTelemetryPtrOutputWithContext(context.Background())
}

func (i *trinoUserTelemetryPtrType) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserTelemetryPtrOutput)
}

// User telemetry
type TrinoUserTelemetryOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserTelemetry)(nil)).Elem()
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryOutput() TrinoUserTelemetryOutput {
	return o
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryOutputWithContext(ctx context.Context) TrinoUserTelemetryOutput {
	return o
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return o.ToTrinoUserTelemetryPtrOutputWithContext(context.Background())
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoUserTelemetry) *TrinoUserTelemetry {
		return &v
	}).(TrinoUserTelemetryPtrOutput)
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryOutput) Storage() TrinoTelemetryConfigPtrOutput {
	return o.ApplyT(func(v TrinoUserTelemetry) *TrinoTelemetryConfig { return v.Storage }).(TrinoTelemetryConfigPtrOutput)
}

type TrinoUserTelemetryPtrOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserTelemetry)(nil)).Elem()
}

func (o TrinoUserTelemetryPtrOutput) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return o
}

func (o TrinoUserTelemetryPtrOutput) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return o
}

func (o TrinoUserTelemetryPtrOutput) Elem() TrinoUserTelemetryOutput {
	return o.ApplyT(func(v *TrinoUserTelemetry) TrinoUserTelemetry {
		if v != nil {
			return *v
		}
		var ret TrinoUserTelemetry
		return ret
	}).(TrinoUserTelemetryOutput)
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryPtrOutput) Storage() TrinoTelemetryConfigPtrOutput {
	return o.ApplyT(func(v *TrinoUserTelemetry) *TrinoTelemetryConfig {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(TrinoTelemetryConfigPtrOutput)
}

// User telemetry
type TrinoUserTelemetryResponse struct {
	// Trino user telemetry definition.
	Storage *TrinoTelemetryConfigResponse `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for TrinoUserTelemetryResponse
func (val *TrinoUserTelemetryResponse) Defaults() *TrinoUserTelemetryResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Storage = tmp.Storage.Defaults()

	return &tmp
}

// User telemetry
type TrinoUserTelemetryResponseOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserTelemetryResponse)(nil)).Elem()
}

func (o TrinoUserTelemetryResponseOutput) ToTrinoUserTelemetryResponseOutput() TrinoUserTelemetryResponseOutput {
	return o
}

func (o TrinoUserTelemetryResponseOutput) ToTrinoUserTelemetryResponseOutputWithContext(ctx context.Context) TrinoUserTelemetryResponseOutput {
	return o
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryResponseOutput) Storage() TrinoTelemetryConfigResponsePtrOutput {
	return o.ApplyT(func(v TrinoUserTelemetryResponse) *TrinoTelemetryConfigResponse { return v.Storage }).(TrinoTelemetryConfigResponsePtrOutput)
}

type TrinoUserTelemetryResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserTelemetryResponse)(nil)).Elem()
}

func (o TrinoUserTelemetryResponsePtrOutput) ToTrinoUserTelemetryResponsePtrOutput() TrinoUserTelemetryResponsePtrOutput {
	return o
}

func (o TrinoUserTelemetryResponsePtrOutput) ToTrinoUserTelemetryResponsePtrOutputWithContext(ctx context.Context) TrinoUserTelemetryResponsePtrOutput {
	return o
}

func (o TrinoUserTelemetryResponsePtrOutput) Elem() TrinoUserTelemetryResponseOutput {
	return o.ApplyT(func(v *TrinoUserTelemetryResponse) TrinoUserTelemetryResponse {
		if v != nil {
			return *v
		}
		var ret TrinoUserTelemetryResponse
		return ret
	}).(TrinoUserTelemetryResponseOutput)
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryResponsePtrOutput) Storage() TrinoTelemetryConfigResponsePtrOutput {
	return o.ApplyT(func(v *TrinoUserTelemetryResponse) *TrinoTelemetryConfigResponse {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(TrinoTelemetryConfigResponsePtrOutput)
}

// Trino worker.
type TrinoWorker struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoWorker
func (val *TrinoWorker) Defaults() *TrinoWorker {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// TrinoWorkerInput is an input type that accepts TrinoWorkerArgs and TrinoWorkerOutput values.
// You can construct a concrete instance of `TrinoWorkerInput` via:
//
//	TrinoWorkerArgs{...}
type TrinoWorkerInput interface {
	pulumi.Input

	ToTrinoWorkerOutput() TrinoWorkerOutput
	ToTrinoWorkerOutputWithContext(context.Context) TrinoWorkerOutput
}

// Trino worker.
type TrinoWorkerArgs struct {
	// The flag that if enable debug or not.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// The debug port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoWorkerArgs
func (val *TrinoWorkerArgs) Defaults() *TrinoWorkerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		tmp.Enable = pulumi.BoolPtr(false)
	}
	if tmp.Port == nil {
		tmp.Port = pulumi.IntPtr(8008)
	}
	if tmp.Suspend == nil {
		tmp.Suspend = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TrinoWorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoWorker)(nil)).Elem()
}

func (i TrinoWorkerArgs) ToTrinoWorkerOutput() TrinoWorkerOutput {
	return i.ToTrinoWorkerOutputWithContext(context.Background())
}

func (i TrinoWorkerArgs) ToTrinoWorkerOutputWithContext(ctx context.Context) TrinoWorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoWorkerOutput)
}

func (i TrinoWorkerArgs) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return i.ToTrinoWorkerPtrOutputWithContext(context.Background())
}

func (i TrinoWorkerArgs) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoWorkerOutput).ToTrinoWorkerPtrOutputWithContext(ctx)
}

// TrinoWorkerPtrInput is an input type that accepts TrinoWorkerArgs, TrinoWorkerPtr and TrinoWorkerPtrOutput values.
// You can construct a concrete instance of `TrinoWorkerPtrInput` via:
//
//	        TrinoWorkerArgs{...}
//
//	or:
//
//	        nil
type TrinoWorkerPtrInput interface {
	pulumi.Input

	ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput
	ToTrinoWorkerPtrOutputWithContext(context.Context) TrinoWorkerPtrOutput
}

type trinoWorkerPtrType TrinoWorkerArgs

func TrinoWorkerPtr(v *TrinoWorkerArgs) TrinoWorkerPtrInput {
	return (*trinoWorkerPtrType)(v)
}

func (*trinoWorkerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoWorker)(nil)).Elem()
}

func (i *trinoWorkerPtrType) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return i.ToTrinoWorkerPtrOutputWithContext(context.Background())
}

func (i *trinoWorkerPtrType) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoWorkerPtrOutput)
}

// Trino worker.
type TrinoWorkerOutput struct{ *pulumi.OutputState }

func (TrinoWorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoWorker)(nil)).Elem()
}

func (o TrinoWorkerOutput) ToTrinoWorkerOutput() TrinoWorkerOutput {
	return o
}

func (o TrinoWorkerOutput) ToTrinoWorkerOutputWithContext(ctx context.Context) TrinoWorkerOutput {
	return o
}

func (o TrinoWorkerOutput) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return o.ToTrinoWorkerPtrOutputWithContext(context.Background())
}

func (o TrinoWorkerOutput) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoWorker) *TrinoWorker {
		return &v
	}).(TrinoWorkerPtrOutput)
}

// The flag that if enable debug or not.
func (o TrinoWorkerOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorker) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoWorker) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorker) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoWorkerPtrOutput struct{ *pulumi.OutputState }

func (TrinoWorkerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoWorker)(nil)).Elem()
}

func (o TrinoWorkerPtrOutput) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return o
}

func (o TrinoWorkerPtrOutput) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return o
}

func (o TrinoWorkerPtrOutput) Elem() TrinoWorkerOutput {
	return o.ApplyT(func(v *TrinoWorker) TrinoWorker {
		if v != nil {
			return *v
		}
		var ret TrinoWorker
		return ret
	}).(TrinoWorkerOutput)
}

// The flag that if enable debug or not.
func (o TrinoWorkerPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorker) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoWorker) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorker) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Trino worker.
type TrinoWorkerResponse struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoWorkerResponse
func (val *TrinoWorkerResponse) Defaults() *TrinoWorkerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// Trino worker.
type TrinoWorkerResponseOutput struct{ *pulumi.OutputState }

func (TrinoWorkerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoWorkerResponse)(nil)).Elem()
}

func (o TrinoWorkerResponseOutput) ToTrinoWorkerResponseOutput() TrinoWorkerResponseOutput {
	return o
}

func (o TrinoWorkerResponseOutput) ToTrinoWorkerResponseOutputWithContext(ctx context.Context) TrinoWorkerResponseOutput {
	return o
}

// The flag that if enable debug or not.
func (o TrinoWorkerResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorkerResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoWorkerResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerResponseOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorkerResponse) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoWorkerResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoWorkerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoWorkerResponse)(nil)).Elem()
}

func (o TrinoWorkerResponsePtrOutput) ToTrinoWorkerResponsePtrOutput() TrinoWorkerResponsePtrOutput {
	return o
}

func (o TrinoWorkerResponsePtrOutput) ToTrinoWorkerResponsePtrOutputWithContext(ctx context.Context) TrinoWorkerResponsePtrOutput {
	return o
}

func (o TrinoWorkerResponsePtrOutput) Elem() TrinoWorkerResponseOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) TrinoWorkerResponse {
		if v != nil {
			return *v
		}
		var ret TrinoWorkerResponse
		return ret
	}).(TrinoWorkerResponseOutput)
}

// The flag that if enable debug or not.
func (o TrinoWorkerResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerResponsePtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput{})
	pulumi.RegisterOutputType(AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(AuthorizationProfileOutput{})
	pulumi.RegisterOutputType(AuthorizationProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileOutput{})
	pulumi.RegisterOutputType(AutoscaleProfilePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CatalogOptionsOutput{})
	pulumi.RegisterOutputType(CatalogOptionsPtrOutput{})
	pulumi.RegisterOutputType(CatalogOptionsResponseOutput{})
	pulumi.RegisterOutputType(CatalogOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfileOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileArrayOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileResponseOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsPtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsResponseOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfileOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesClusterPoolProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesComputeProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesNetworkProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseAksClusterProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseComputeProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseNetworkProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterProfileOutput{})
	pulumi.RegisterOutputType(ClusterProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterProfileResponseComponentsOutput{})
	pulumi.RegisterOutputType(ClusterProfileResponseComponentsArrayOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfileOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfileOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(ComparisonRuleOutput{})
	pulumi.RegisterOutputType(ComparisonRuleResponseOutput{})
	pulumi.RegisterOutputType(ComputeProfileOutput{})
	pulumi.RegisterOutputType(ComputeProfileResponseOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectivityProfileResponseOutput{})
	pulumi.RegisterOutputType(ConnectivityProfileResponseWebOutput{})
	pulumi.RegisterOutputType(DiskStorageProfileOutput{})
	pulumi.RegisterOutputType(DiskStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(DiskStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(DiskStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsPtrOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsResponseOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionPtrOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionResponseOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkJobProfileOutput{})
	pulumi.RegisterOutputType(FlinkJobProfilePtrOutput{})
	pulumi.RegisterOutputType(FlinkJobProfileResponseOutput{})
	pulumi.RegisterOutputType(FlinkJobProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkProfileOutput{})
	pulumi.RegisterOutputType(FlinkProfilePtrOutput{})
	pulumi.RegisterOutputType(FlinkProfileResponseOutput{})
	pulumi.RegisterOutputType(FlinkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfileOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionArrayOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionResponseOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityProfileOutput{})
	pulumi.RegisterOutputType(IdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(IdentityProfileResponseOutput{})
	pulumi.RegisterOutputType(IdentityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaConnectivityEndpointsResponseOutput{})
	pulumi.RegisterOutputType(KafkaConnectivityEndpointsResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaProfileOutput{})
	pulumi.RegisterOutputType(KafkaProfilePtrOutput{})
	pulumi.RegisterOutputType(KafkaProfileResponseOutput{})
	pulumi.RegisterOutputType(KafkaProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigPtrOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigResponseOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfileOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecArrayOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeProfileOutput{})
	pulumi.RegisterOutputType(NodeProfileArrayOutput{})
	pulumi.RegisterOutputType(NodeProfileResponseOutput{})
	pulumi.RegisterOutputType(NodeProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecPtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecDatabaseOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecDatabasePtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponseOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponseDatabaseOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponseDatabasePtrOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecPtrOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecResponseOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerProfileOutput{})
	pulumi.RegisterOutputType(RangerProfilePtrOutput{})
	pulumi.RegisterOutputType(RangerProfileResponseOutput{})
	pulumi.RegisterOutputType(RangerProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecPtrOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecResponseOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(ScalingRuleOutput{})
	pulumi.RegisterOutputType(ScalingRuleArrayOutput{})
	pulumi.RegisterOutputType(ScalingRuleResponseOutput{})
	pulumi.RegisterOutputType(ScalingRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigPtrOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigResponseOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretReferenceOutput{})
	pulumi.RegisterOutputType(SecretReferenceArrayOutput{})
	pulumi.RegisterOutputType(SecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(SecretReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretsProfileOutput{})
	pulumi.RegisterOutputType(SecretsProfilePtrOutput{})
	pulumi.RegisterOutputType(SecretsProfileResponseOutput{})
	pulumi.RegisterOutputType(SecretsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecPtrOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecResponseOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkProfileOutput{})
	pulumi.RegisterOutputType(SparkProfilePtrOutput{})
	pulumi.RegisterOutputType(SparkProfileResponseOutput{})
	pulumi.RegisterOutputType(SparkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkUserPluginOutput{})
	pulumi.RegisterOutputType(SparkUserPluginArrayOutput{})
	pulumi.RegisterOutputType(SparkUserPluginResponseOutput{})
	pulumi.RegisterOutputType(SparkUserPluginResponseArrayOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsPtrOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsResponseOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsResponsePtrOutput{})
	pulumi.RegisterOutputType(SshConnectivityEndpointResponseOutput{})
	pulumi.RegisterOutputType(SshConnectivityEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(SshProfileOutput{})
	pulumi.RegisterOutputType(SshProfilePtrOutput{})
	pulumi.RegisterOutputType(SshProfileResponseOutput{})
	pulumi.RegisterOutputType(SshProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorPtrOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorResponseOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoProfileOutput{})
	pulumi.RegisterOutputType(TrinoProfilePtrOutput{})
	pulumi.RegisterOutputType(TrinoProfileResponseOutput{})
	pulumi.RegisterOutputType(TrinoProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigPtrOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigResponseOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginArrayOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginResponseOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginResponseArrayOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsPtrOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsResponseOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryPtrOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryResponseOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoWorkerOutput{})
	pulumi.RegisterOutputType(TrinoWorkerPtrOutput{})
	pulumi.RegisterOutputType(TrinoWorkerResponseOutput{})
	pulumi.RegisterOutputType(TrinoWorkerResponsePtrOutput{})
}
