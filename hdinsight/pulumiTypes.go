// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hdinsight

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Identity properties of the AKS cluster agentpool MSI
type AksClusterProfileResponseAksClusterAgentPoolIdentityProfile struct {
	// ClientId of the MSI.
	MsiClientId string `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId string `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId string `pulumi:"msiResourceId"`
}

// Identity properties of the AKS cluster agentpool MSI
type AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput struct{ *pulumi.OutputState }

func (AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksClusterProfileResponseAksClusterAgentPoolIdentityProfile)(nil)).Elem()
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput() AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput {
	return o
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutputWithContext(ctx context.Context) AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput {
	return o
}

// ClientId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) MsiClientId() pulumi.StringOutput {
	return o.ApplyT(func(v AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) string { return v.MsiClientId }).(pulumi.StringOutput)
}

// ObjectId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) MsiObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) string { return v.MsiObjectId }).(pulumi.StringOutput)
}

// ResourceId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput) MsiResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) string { return v.MsiResourceId }).(pulumi.StringOutput)
}

type AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksClusterProfileResponseAksClusterAgentPoolIdentityProfile)(nil)).Elem()
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput() AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput {
	return o
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) ToAksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutputWithContext(ctx context.Context) AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput {
	return o
}

func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) Elem() AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) AksClusterProfileResponseAksClusterAgentPoolIdentityProfile {
		if v != nil {
			return *v
		}
		var ret AksClusterProfileResponseAksClusterAgentPoolIdentityProfile
		return ret
	}).(AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput)
}

// ClientId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) MsiClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiClientId
	}).(pulumi.StringPtrOutput)
}

// ObjectId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) MsiObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiObjectId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the MSI.
func (o AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Gets the application SSH endpoint
type ApplicationGetEndpoint struct {
	// The destination port to connect to.
	DestinationPort *int `pulumi:"destinationPort"`
	// The location of the endpoint.
	Location *string `pulumi:"location"`
	// The private ip address of the endpoint.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The public port to connect to.
	PublicPort *int `pulumi:"publicPort"`
}

// ApplicationGetEndpointInput is an input type that accepts ApplicationGetEndpointArgs and ApplicationGetEndpointOutput values.
// You can construct a concrete instance of `ApplicationGetEndpointInput` via:
//
//	ApplicationGetEndpointArgs{...}
type ApplicationGetEndpointInput interface {
	pulumi.Input

	ToApplicationGetEndpointOutput() ApplicationGetEndpointOutput
	ToApplicationGetEndpointOutputWithContext(context.Context) ApplicationGetEndpointOutput
}

// Gets the application SSH endpoint
type ApplicationGetEndpointArgs struct {
	// The destination port to connect to.
	DestinationPort pulumi.IntPtrInput `pulumi:"destinationPort"`
	// The location of the endpoint.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The private ip address of the endpoint.
	PrivateIPAddress pulumi.StringPtrInput `pulumi:"privateIPAddress"`
	// The public port to connect to.
	PublicPort pulumi.IntPtrInput `pulumi:"publicPort"`
}

func (ApplicationGetEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGetEndpoint)(nil)).Elem()
}

func (i ApplicationGetEndpointArgs) ToApplicationGetEndpointOutput() ApplicationGetEndpointOutput {
	return i.ToApplicationGetEndpointOutputWithContext(context.Background())
}

func (i ApplicationGetEndpointArgs) ToApplicationGetEndpointOutputWithContext(ctx context.Context) ApplicationGetEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGetEndpointOutput)
}

// ApplicationGetEndpointArrayInput is an input type that accepts ApplicationGetEndpointArray and ApplicationGetEndpointArrayOutput values.
// You can construct a concrete instance of `ApplicationGetEndpointArrayInput` via:
//
//	ApplicationGetEndpointArray{ ApplicationGetEndpointArgs{...} }
type ApplicationGetEndpointArrayInput interface {
	pulumi.Input

	ToApplicationGetEndpointArrayOutput() ApplicationGetEndpointArrayOutput
	ToApplicationGetEndpointArrayOutputWithContext(context.Context) ApplicationGetEndpointArrayOutput
}

type ApplicationGetEndpointArray []ApplicationGetEndpointInput

func (ApplicationGetEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationGetEndpoint)(nil)).Elem()
}

func (i ApplicationGetEndpointArray) ToApplicationGetEndpointArrayOutput() ApplicationGetEndpointArrayOutput {
	return i.ToApplicationGetEndpointArrayOutputWithContext(context.Background())
}

func (i ApplicationGetEndpointArray) ToApplicationGetEndpointArrayOutputWithContext(ctx context.Context) ApplicationGetEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGetEndpointArrayOutput)
}

// Gets the application SSH endpoint
type ApplicationGetEndpointOutput struct{ *pulumi.OutputState }

func (ApplicationGetEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGetEndpoint)(nil)).Elem()
}

func (o ApplicationGetEndpointOutput) ToApplicationGetEndpointOutput() ApplicationGetEndpointOutput {
	return o
}

func (o ApplicationGetEndpointOutput) ToApplicationGetEndpointOutputWithContext(ctx context.Context) ApplicationGetEndpointOutput {
	return o
}

// The destination port to connect to.
func (o ApplicationGetEndpointOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpoint) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// The location of the endpoint.
func (o ApplicationGetEndpointOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpoint) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The private ip address of the endpoint.
func (o ApplicationGetEndpointOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpoint) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The public port to connect to.
func (o ApplicationGetEndpointOutput) PublicPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpoint) *int { return v.PublicPort }).(pulumi.IntPtrOutput)
}

type ApplicationGetEndpointArrayOutput struct{ *pulumi.OutputState }

func (ApplicationGetEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationGetEndpoint)(nil)).Elem()
}

func (o ApplicationGetEndpointArrayOutput) ToApplicationGetEndpointArrayOutput() ApplicationGetEndpointArrayOutput {
	return o
}

func (o ApplicationGetEndpointArrayOutput) ToApplicationGetEndpointArrayOutputWithContext(ctx context.Context) ApplicationGetEndpointArrayOutput {
	return o
}

func (o ApplicationGetEndpointArrayOutput) Index(i pulumi.IntInput) ApplicationGetEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationGetEndpoint {
		return vs[0].([]ApplicationGetEndpoint)[vs[1].(int)]
	}).(ApplicationGetEndpointOutput)
}

// Gets the application SSH endpoint
type ApplicationGetEndpointResponse struct {
	// The destination port to connect to.
	DestinationPort *int `pulumi:"destinationPort"`
	// The location of the endpoint.
	Location *string `pulumi:"location"`
	// The private ip address of the endpoint.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The public port to connect to.
	PublicPort *int `pulumi:"publicPort"`
}

// Gets the application SSH endpoint
type ApplicationGetEndpointResponseOutput struct{ *pulumi.OutputState }

func (ApplicationGetEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGetEndpointResponse)(nil)).Elem()
}

func (o ApplicationGetEndpointResponseOutput) ToApplicationGetEndpointResponseOutput() ApplicationGetEndpointResponseOutput {
	return o
}

func (o ApplicationGetEndpointResponseOutput) ToApplicationGetEndpointResponseOutputWithContext(ctx context.Context) ApplicationGetEndpointResponseOutput {
	return o
}

// The destination port to connect to.
func (o ApplicationGetEndpointResponseOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpointResponse) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// The location of the endpoint.
func (o ApplicationGetEndpointResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpointResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The private ip address of the endpoint.
func (o ApplicationGetEndpointResponseOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpointResponse) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The public port to connect to.
func (o ApplicationGetEndpointResponseOutput) PublicPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationGetEndpointResponse) *int { return v.PublicPort }).(pulumi.IntPtrOutput)
}

type ApplicationGetEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationGetEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationGetEndpointResponse)(nil)).Elem()
}

func (o ApplicationGetEndpointResponseArrayOutput) ToApplicationGetEndpointResponseArrayOutput() ApplicationGetEndpointResponseArrayOutput {
	return o
}

func (o ApplicationGetEndpointResponseArrayOutput) ToApplicationGetEndpointResponseArrayOutputWithContext(ctx context.Context) ApplicationGetEndpointResponseArrayOutput {
	return o
}

func (o ApplicationGetEndpointResponseArrayOutput) Index(i pulumi.IntInput) ApplicationGetEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationGetEndpointResponse {
		return vs[0].([]ApplicationGetEndpointResponse)[vs[1].(int)]
	}).(ApplicationGetEndpointResponseOutput)
}

// Gets the application HTTP endpoints.
type ApplicationGetHttpsEndpoint struct {
	// The list of access modes for the application.
	AccessModes []string `pulumi:"accessModes"`
	// The destination port to connect to.
	DestinationPort *int `pulumi:"destinationPort"`
	// The value indicates whether to disable GatewayAuth.
	DisableGatewayAuth *bool `pulumi:"disableGatewayAuth"`
	// The private ip address of the endpoint.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The subdomain suffix of the application.
	SubDomainSuffix *string `pulumi:"subDomainSuffix"`
}

// ApplicationGetHttpsEndpointInput is an input type that accepts ApplicationGetHttpsEndpointArgs and ApplicationGetHttpsEndpointOutput values.
// You can construct a concrete instance of `ApplicationGetHttpsEndpointInput` via:
//
//	ApplicationGetHttpsEndpointArgs{...}
type ApplicationGetHttpsEndpointInput interface {
	pulumi.Input

	ToApplicationGetHttpsEndpointOutput() ApplicationGetHttpsEndpointOutput
	ToApplicationGetHttpsEndpointOutputWithContext(context.Context) ApplicationGetHttpsEndpointOutput
}

// Gets the application HTTP endpoints.
type ApplicationGetHttpsEndpointArgs struct {
	// The list of access modes for the application.
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// The destination port to connect to.
	DestinationPort pulumi.IntPtrInput `pulumi:"destinationPort"`
	// The value indicates whether to disable GatewayAuth.
	DisableGatewayAuth pulumi.BoolPtrInput `pulumi:"disableGatewayAuth"`
	// The private ip address of the endpoint.
	PrivateIPAddress pulumi.StringPtrInput `pulumi:"privateIPAddress"`
	// The subdomain suffix of the application.
	SubDomainSuffix pulumi.StringPtrInput `pulumi:"subDomainSuffix"`
}

func (ApplicationGetHttpsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGetHttpsEndpoint)(nil)).Elem()
}

func (i ApplicationGetHttpsEndpointArgs) ToApplicationGetHttpsEndpointOutput() ApplicationGetHttpsEndpointOutput {
	return i.ToApplicationGetHttpsEndpointOutputWithContext(context.Background())
}

func (i ApplicationGetHttpsEndpointArgs) ToApplicationGetHttpsEndpointOutputWithContext(ctx context.Context) ApplicationGetHttpsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGetHttpsEndpointOutput)
}

// ApplicationGetHttpsEndpointArrayInput is an input type that accepts ApplicationGetHttpsEndpointArray and ApplicationGetHttpsEndpointArrayOutput values.
// You can construct a concrete instance of `ApplicationGetHttpsEndpointArrayInput` via:
//
//	ApplicationGetHttpsEndpointArray{ ApplicationGetHttpsEndpointArgs{...} }
type ApplicationGetHttpsEndpointArrayInput interface {
	pulumi.Input

	ToApplicationGetHttpsEndpointArrayOutput() ApplicationGetHttpsEndpointArrayOutput
	ToApplicationGetHttpsEndpointArrayOutputWithContext(context.Context) ApplicationGetHttpsEndpointArrayOutput
}

type ApplicationGetHttpsEndpointArray []ApplicationGetHttpsEndpointInput

func (ApplicationGetHttpsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationGetHttpsEndpoint)(nil)).Elem()
}

func (i ApplicationGetHttpsEndpointArray) ToApplicationGetHttpsEndpointArrayOutput() ApplicationGetHttpsEndpointArrayOutput {
	return i.ToApplicationGetHttpsEndpointArrayOutputWithContext(context.Background())
}

func (i ApplicationGetHttpsEndpointArray) ToApplicationGetHttpsEndpointArrayOutputWithContext(ctx context.Context) ApplicationGetHttpsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationGetHttpsEndpointArrayOutput)
}

// Gets the application HTTP endpoints.
type ApplicationGetHttpsEndpointOutput struct{ *pulumi.OutputState }

func (ApplicationGetHttpsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGetHttpsEndpoint)(nil)).Elem()
}

func (o ApplicationGetHttpsEndpointOutput) ToApplicationGetHttpsEndpointOutput() ApplicationGetHttpsEndpointOutput {
	return o
}

func (o ApplicationGetHttpsEndpointOutput) ToApplicationGetHttpsEndpointOutputWithContext(ctx context.Context) ApplicationGetHttpsEndpointOutput {
	return o
}

// The list of access modes for the application.
func (o ApplicationGetHttpsEndpointOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpoint) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// The destination port to connect to.
func (o ApplicationGetHttpsEndpointOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpoint) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// The value indicates whether to disable GatewayAuth.
func (o ApplicationGetHttpsEndpointOutput) DisableGatewayAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpoint) *bool { return v.DisableGatewayAuth }).(pulumi.BoolPtrOutput)
}

// The private ip address of the endpoint.
func (o ApplicationGetHttpsEndpointOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpoint) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The subdomain suffix of the application.
func (o ApplicationGetHttpsEndpointOutput) SubDomainSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpoint) *string { return v.SubDomainSuffix }).(pulumi.StringPtrOutput)
}

type ApplicationGetHttpsEndpointArrayOutput struct{ *pulumi.OutputState }

func (ApplicationGetHttpsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationGetHttpsEndpoint)(nil)).Elem()
}

func (o ApplicationGetHttpsEndpointArrayOutput) ToApplicationGetHttpsEndpointArrayOutput() ApplicationGetHttpsEndpointArrayOutput {
	return o
}

func (o ApplicationGetHttpsEndpointArrayOutput) ToApplicationGetHttpsEndpointArrayOutputWithContext(ctx context.Context) ApplicationGetHttpsEndpointArrayOutput {
	return o
}

func (o ApplicationGetHttpsEndpointArrayOutput) Index(i pulumi.IntInput) ApplicationGetHttpsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationGetHttpsEndpoint {
		return vs[0].([]ApplicationGetHttpsEndpoint)[vs[1].(int)]
	}).(ApplicationGetHttpsEndpointOutput)
}

// Gets the application HTTP endpoints.
type ApplicationGetHttpsEndpointResponse struct {
	// The list of access modes for the application.
	AccessModes []string `pulumi:"accessModes"`
	// The destination port to connect to.
	DestinationPort *int `pulumi:"destinationPort"`
	// The value indicates whether to disable GatewayAuth.
	DisableGatewayAuth *bool `pulumi:"disableGatewayAuth"`
	// The location of the endpoint.
	Location string `pulumi:"location"`
	// The private ip address of the endpoint.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The public port to connect to.
	PublicPort int `pulumi:"publicPort"`
}

// Gets the application HTTP endpoints.
type ApplicationGetHttpsEndpointResponseOutput struct{ *pulumi.OutputState }

func (ApplicationGetHttpsEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationGetHttpsEndpointResponse)(nil)).Elem()
}

func (o ApplicationGetHttpsEndpointResponseOutput) ToApplicationGetHttpsEndpointResponseOutput() ApplicationGetHttpsEndpointResponseOutput {
	return o
}

func (o ApplicationGetHttpsEndpointResponseOutput) ToApplicationGetHttpsEndpointResponseOutputWithContext(ctx context.Context) ApplicationGetHttpsEndpointResponseOutput {
	return o
}

// The list of access modes for the application.
func (o ApplicationGetHttpsEndpointResponseOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpointResponse) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// The destination port to connect to.
func (o ApplicationGetHttpsEndpointResponseOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpointResponse) *int { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// The value indicates whether to disable GatewayAuth.
func (o ApplicationGetHttpsEndpointResponseOutput) DisableGatewayAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpointResponse) *bool { return v.DisableGatewayAuth }).(pulumi.BoolPtrOutput)
}

// The location of the endpoint.
func (o ApplicationGetHttpsEndpointResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpointResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The private ip address of the endpoint.
func (o ApplicationGetHttpsEndpointResponseOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpointResponse) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The public port to connect to.
func (o ApplicationGetHttpsEndpointResponseOutput) PublicPort() pulumi.IntOutput {
	return o.ApplyT(func(v ApplicationGetHttpsEndpointResponse) int { return v.PublicPort }).(pulumi.IntOutput)
}

type ApplicationGetHttpsEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationGetHttpsEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationGetHttpsEndpointResponse)(nil)).Elem()
}

func (o ApplicationGetHttpsEndpointResponseArrayOutput) ToApplicationGetHttpsEndpointResponseArrayOutput() ApplicationGetHttpsEndpointResponseArrayOutput {
	return o
}

func (o ApplicationGetHttpsEndpointResponseArrayOutput) ToApplicationGetHttpsEndpointResponseArrayOutputWithContext(ctx context.Context) ApplicationGetHttpsEndpointResponseArrayOutput {
	return o
}

func (o ApplicationGetHttpsEndpointResponseArrayOutput) Index(i pulumi.IntInput) ApplicationGetHttpsEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationGetHttpsEndpointResponse {
		return vs[0].([]ApplicationGetHttpsEndpointResponse)[vs[1].(int)]
	}).(ApplicationGetHttpsEndpointResponseOutput)
}

// The HDInsight cluster application GET response.
type ApplicationProperties struct {
	// The application type.
	ApplicationType *string `pulumi:"applicationType"`
	// The list of roles in the cluster.
	ComputeProfile *ComputeProfile `pulumi:"computeProfile"`
	// The list of errors.
	Errors []Errors `pulumi:"errors"`
	// The list of application HTTPS endpoints.
	HttpsEndpoints []ApplicationGetHttpsEndpoint `pulumi:"httpsEndpoints"`
	// The list of install script actions.
	InstallScriptActions []RuntimeScriptAction `pulumi:"installScriptActions"`
	// The private link configurations.
	PrivateLinkConfigurations []PrivateLinkConfiguration `pulumi:"privateLinkConfigurations"`
	// The list of application SSH endpoints.
	SshEndpoints []ApplicationGetEndpoint `pulumi:"sshEndpoints"`
	// The list of uninstall script actions.
	UninstallScriptActions []RuntimeScriptAction `pulumi:"uninstallScriptActions"`
}

// ApplicationPropertiesInput is an input type that accepts ApplicationPropertiesArgs and ApplicationPropertiesOutput values.
// You can construct a concrete instance of `ApplicationPropertiesInput` via:
//
//	ApplicationPropertiesArgs{...}
type ApplicationPropertiesInput interface {
	pulumi.Input

	ToApplicationPropertiesOutput() ApplicationPropertiesOutput
	ToApplicationPropertiesOutputWithContext(context.Context) ApplicationPropertiesOutput
}

// The HDInsight cluster application GET response.
type ApplicationPropertiesArgs struct {
	// The application type.
	ApplicationType pulumi.StringPtrInput `pulumi:"applicationType"`
	// The list of roles in the cluster.
	ComputeProfile ComputeProfilePtrInput `pulumi:"computeProfile"`
	// The list of errors.
	Errors ErrorsArrayInput `pulumi:"errors"`
	// The list of application HTTPS endpoints.
	HttpsEndpoints ApplicationGetHttpsEndpointArrayInput `pulumi:"httpsEndpoints"`
	// The list of install script actions.
	InstallScriptActions RuntimeScriptActionArrayInput `pulumi:"installScriptActions"`
	// The private link configurations.
	PrivateLinkConfigurations PrivateLinkConfigurationArrayInput `pulumi:"privateLinkConfigurations"`
	// The list of application SSH endpoints.
	SshEndpoints ApplicationGetEndpointArrayInput `pulumi:"sshEndpoints"`
	// The list of uninstall script actions.
	UninstallScriptActions RuntimeScriptActionArrayInput `pulumi:"uninstallScriptActions"`
}

func (ApplicationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationProperties)(nil)).Elem()
}

func (i ApplicationPropertiesArgs) ToApplicationPropertiesOutput() ApplicationPropertiesOutput {
	return i.ToApplicationPropertiesOutputWithContext(context.Background())
}

func (i ApplicationPropertiesArgs) ToApplicationPropertiesOutputWithContext(ctx context.Context) ApplicationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPropertiesOutput)
}

func (i ApplicationPropertiesArgs) ToApplicationPropertiesPtrOutput() ApplicationPropertiesPtrOutput {
	return i.ToApplicationPropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationPropertiesArgs) ToApplicationPropertiesPtrOutputWithContext(ctx context.Context) ApplicationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPropertiesOutput).ToApplicationPropertiesPtrOutputWithContext(ctx)
}

// ApplicationPropertiesPtrInput is an input type that accepts ApplicationPropertiesArgs, ApplicationPropertiesPtr and ApplicationPropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationPropertiesPtrInput` via:
//
//	        ApplicationPropertiesArgs{...}
//
//	or:
//
//	        nil
type ApplicationPropertiesPtrInput interface {
	pulumi.Input

	ToApplicationPropertiesPtrOutput() ApplicationPropertiesPtrOutput
	ToApplicationPropertiesPtrOutputWithContext(context.Context) ApplicationPropertiesPtrOutput
}

type applicationPropertiesPtrType ApplicationPropertiesArgs

func ApplicationPropertiesPtr(v *ApplicationPropertiesArgs) ApplicationPropertiesPtrInput {
	return (*applicationPropertiesPtrType)(v)
}

func (*applicationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationProperties)(nil)).Elem()
}

func (i *applicationPropertiesPtrType) ToApplicationPropertiesPtrOutput() ApplicationPropertiesPtrOutput {
	return i.ToApplicationPropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationPropertiesPtrType) ToApplicationPropertiesPtrOutputWithContext(ctx context.Context) ApplicationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationPropertiesPtrOutput)
}

// The HDInsight cluster application GET response.
type ApplicationPropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationProperties)(nil)).Elem()
}

func (o ApplicationPropertiesOutput) ToApplicationPropertiesOutput() ApplicationPropertiesOutput {
	return o
}

func (o ApplicationPropertiesOutput) ToApplicationPropertiesOutputWithContext(ctx context.Context) ApplicationPropertiesOutput {
	return o
}

func (o ApplicationPropertiesOutput) ToApplicationPropertiesPtrOutput() ApplicationPropertiesPtrOutput {
	return o.ToApplicationPropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationPropertiesOutput) ToApplicationPropertiesPtrOutputWithContext(ctx context.Context) ApplicationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationProperties) *ApplicationProperties {
		return &v
	}).(ApplicationPropertiesPtrOutput)
}

// The application type.
func (o ApplicationPropertiesOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationProperties) *string { return v.ApplicationType }).(pulumi.StringPtrOutput)
}

// The list of roles in the cluster.
func (o ApplicationPropertiesOutput) ComputeProfile() ComputeProfilePtrOutput {
	return o.ApplyT(func(v ApplicationProperties) *ComputeProfile { return v.ComputeProfile }).(ComputeProfilePtrOutput)
}

// The list of errors.
func (o ApplicationPropertiesOutput) Errors() ErrorsArrayOutput {
	return o.ApplyT(func(v ApplicationProperties) []Errors { return v.Errors }).(ErrorsArrayOutput)
}

// The list of application HTTPS endpoints.
func (o ApplicationPropertiesOutput) HttpsEndpoints() ApplicationGetHttpsEndpointArrayOutput {
	return o.ApplyT(func(v ApplicationProperties) []ApplicationGetHttpsEndpoint { return v.HttpsEndpoints }).(ApplicationGetHttpsEndpointArrayOutput)
}

// The list of install script actions.
func (o ApplicationPropertiesOutput) InstallScriptActions() RuntimeScriptActionArrayOutput {
	return o.ApplyT(func(v ApplicationProperties) []RuntimeScriptAction { return v.InstallScriptActions }).(RuntimeScriptActionArrayOutput)
}

// The private link configurations.
func (o ApplicationPropertiesOutput) PrivateLinkConfigurations() PrivateLinkConfigurationArrayOutput {
	return o.ApplyT(func(v ApplicationProperties) []PrivateLinkConfiguration { return v.PrivateLinkConfigurations }).(PrivateLinkConfigurationArrayOutput)
}

// The list of application SSH endpoints.
func (o ApplicationPropertiesOutput) SshEndpoints() ApplicationGetEndpointArrayOutput {
	return o.ApplyT(func(v ApplicationProperties) []ApplicationGetEndpoint { return v.SshEndpoints }).(ApplicationGetEndpointArrayOutput)
}

// The list of uninstall script actions.
func (o ApplicationPropertiesOutput) UninstallScriptActions() RuntimeScriptActionArrayOutput {
	return o.ApplyT(func(v ApplicationProperties) []RuntimeScriptAction { return v.UninstallScriptActions }).(RuntimeScriptActionArrayOutput)
}

type ApplicationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationProperties)(nil)).Elem()
}

func (o ApplicationPropertiesPtrOutput) ToApplicationPropertiesPtrOutput() ApplicationPropertiesPtrOutput {
	return o
}

func (o ApplicationPropertiesPtrOutput) ToApplicationPropertiesPtrOutputWithContext(ctx context.Context) ApplicationPropertiesPtrOutput {
	return o
}

func (o ApplicationPropertiesPtrOutput) Elem() ApplicationPropertiesOutput {
	return o.ApplyT(func(v *ApplicationProperties) ApplicationProperties {
		if v != nil {
			return *v
		}
		var ret ApplicationProperties
		return ret
	}).(ApplicationPropertiesOutput)
}

// The application type.
func (o ApplicationPropertiesPtrOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationType
	}).(pulumi.StringPtrOutput)
}

// The list of roles in the cluster.
func (o ApplicationPropertiesPtrOutput) ComputeProfile() ComputeProfilePtrOutput {
	return o.ApplyT(func(v *ApplicationProperties) *ComputeProfile {
		if v == nil {
			return nil
		}
		return v.ComputeProfile
	}).(ComputeProfilePtrOutput)
}

// The list of errors.
func (o ApplicationPropertiesPtrOutput) Errors() ErrorsArrayOutput {
	return o.ApplyT(func(v *ApplicationProperties) []Errors {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ErrorsArrayOutput)
}

// The list of application HTTPS endpoints.
func (o ApplicationPropertiesPtrOutput) HttpsEndpoints() ApplicationGetHttpsEndpointArrayOutput {
	return o.ApplyT(func(v *ApplicationProperties) []ApplicationGetHttpsEndpoint {
		if v == nil {
			return nil
		}
		return v.HttpsEndpoints
	}).(ApplicationGetHttpsEndpointArrayOutput)
}

// The list of install script actions.
func (o ApplicationPropertiesPtrOutput) InstallScriptActions() RuntimeScriptActionArrayOutput {
	return o.ApplyT(func(v *ApplicationProperties) []RuntimeScriptAction {
		if v == nil {
			return nil
		}
		return v.InstallScriptActions
	}).(RuntimeScriptActionArrayOutput)
}

// The private link configurations.
func (o ApplicationPropertiesPtrOutput) PrivateLinkConfigurations() PrivateLinkConfigurationArrayOutput {
	return o.ApplyT(func(v *ApplicationProperties) []PrivateLinkConfiguration {
		if v == nil {
			return nil
		}
		return v.PrivateLinkConfigurations
	}).(PrivateLinkConfigurationArrayOutput)
}

// The list of application SSH endpoints.
func (o ApplicationPropertiesPtrOutput) SshEndpoints() ApplicationGetEndpointArrayOutput {
	return o.ApplyT(func(v *ApplicationProperties) []ApplicationGetEndpoint {
		if v == nil {
			return nil
		}
		return v.SshEndpoints
	}).(ApplicationGetEndpointArrayOutput)
}

// The list of uninstall script actions.
func (o ApplicationPropertiesPtrOutput) UninstallScriptActions() RuntimeScriptActionArrayOutput {
	return o.ApplyT(func(v *ApplicationProperties) []RuntimeScriptAction {
		if v == nil {
			return nil
		}
		return v.UninstallScriptActions
	}).(RuntimeScriptActionArrayOutput)
}

// The HDInsight cluster application GET response.
type ApplicationPropertiesResponse struct {
	// The application state.
	ApplicationState string `pulumi:"applicationState"`
	// The application type.
	ApplicationType *string `pulumi:"applicationType"`
	// The list of roles in the cluster.
	ComputeProfile *ComputeProfileResponse `pulumi:"computeProfile"`
	// The application create date time.
	CreatedDate string `pulumi:"createdDate"`
	// The list of errors.
	Errors []ErrorsResponse `pulumi:"errors"`
	// The list of application HTTPS endpoints.
	HttpsEndpoints []ApplicationGetHttpsEndpointResponse `pulumi:"httpsEndpoints"`
	// The list of install script actions.
	InstallScriptActions []RuntimeScriptActionResponse `pulumi:"installScriptActions"`
	// The marketplace identifier.
	MarketplaceIdentifier string `pulumi:"marketplaceIdentifier"`
	// The private link configurations.
	PrivateLinkConfigurations []PrivateLinkConfigurationResponse `pulumi:"privateLinkConfigurations"`
	// The provisioning state of the application.
	ProvisioningState string `pulumi:"provisioningState"`
	// The list of application SSH endpoints.
	SshEndpoints []ApplicationGetEndpointResponse `pulumi:"sshEndpoints"`
	// The list of uninstall script actions.
	UninstallScriptActions []RuntimeScriptActionResponse `pulumi:"uninstallScriptActions"`
}

// The HDInsight cluster application GET response.
type ApplicationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationPropertiesResponse)(nil)).Elem()
}

func (o ApplicationPropertiesResponseOutput) ToApplicationPropertiesResponseOutput() ApplicationPropertiesResponseOutput {
	return o
}

func (o ApplicationPropertiesResponseOutput) ToApplicationPropertiesResponseOutputWithContext(ctx context.Context) ApplicationPropertiesResponseOutput {
	return o
}

// The application state.
func (o ApplicationPropertiesResponseOutput) ApplicationState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) string { return v.ApplicationState }).(pulumi.StringOutput)
}

// The application type.
func (o ApplicationPropertiesResponseOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) *string { return v.ApplicationType }).(pulumi.StringPtrOutput)
}

// The list of roles in the cluster.
func (o ApplicationPropertiesResponseOutput) ComputeProfile() ComputeProfileResponsePtrOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) *ComputeProfileResponse { return v.ComputeProfile }).(ComputeProfileResponsePtrOutput)
}

// The application create date time.
func (o ApplicationPropertiesResponseOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// The list of errors.
func (o ApplicationPropertiesResponseOutput) Errors() ErrorsResponseArrayOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) []ErrorsResponse { return v.Errors }).(ErrorsResponseArrayOutput)
}

// The list of application HTTPS endpoints.
func (o ApplicationPropertiesResponseOutput) HttpsEndpoints() ApplicationGetHttpsEndpointResponseArrayOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) []ApplicationGetHttpsEndpointResponse { return v.HttpsEndpoints }).(ApplicationGetHttpsEndpointResponseArrayOutput)
}

// The list of install script actions.
func (o ApplicationPropertiesResponseOutput) InstallScriptActions() RuntimeScriptActionResponseArrayOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) []RuntimeScriptActionResponse { return v.InstallScriptActions }).(RuntimeScriptActionResponseArrayOutput)
}

// The marketplace identifier.
func (o ApplicationPropertiesResponseOutput) MarketplaceIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) string { return v.MarketplaceIdentifier }).(pulumi.StringOutput)
}

// The private link configurations.
func (o ApplicationPropertiesResponseOutput) PrivateLinkConfigurations() PrivateLinkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) []PrivateLinkConfigurationResponse {
		return v.PrivateLinkConfigurations
	}).(PrivateLinkConfigurationResponseArrayOutput)
}

// The provisioning state of the application.
func (o ApplicationPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The list of application SSH endpoints.
func (o ApplicationPropertiesResponseOutput) SshEndpoints() ApplicationGetEndpointResponseArrayOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) []ApplicationGetEndpointResponse { return v.SshEndpoints }).(ApplicationGetEndpointResponseArrayOutput)
}

// The list of uninstall script actions.
func (o ApplicationPropertiesResponseOutput) UninstallScriptActions() RuntimeScriptActionResponseArrayOutput {
	return o.ApplyT(func(v ApplicationPropertiesResponse) []RuntimeScriptActionResponse { return v.UninstallScriptActions }).(RuntimeScriptActionResponseArrayOutput)
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfile struct {
	// AAD group Ids authorized for data plane access.
	GroupIds []string `pulumi:"groupIds"`
	// AAD user Ids authorized for data plane access.
	UserIds []string `pulumi:"userIds"`
}

// AuthorizationProfileInput is an input type that accepts AuthorizationProfileArgs and AuthorizationProfileOutput values.
// You can construct a concrete instance of `AuthorizationProfileInput` via:
//
//	AuthorizationProfileArgs{...}
type AuthorizationProfileInput interface {
	pulumi.Input

	ToAuthorizationProfileOutput() AuthorizationProfileOutput
	ToAuthorizationProfileOutputWithContext(context.Context) AuthorizationProfileOutput
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileArgs struct {
	// AAD group Ids authorized for data plane access.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// AAD user Ids authorized for data plane access.
	UserIds pulumi.StringArrayInput `pulumi:"userIds"`
}

func (AuthorizationProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationProfile)(nil)).Elem()
}

func (i AuthorizationProfileArgs) ToAuthorizationProfileOutput() AuthorizationProfileOutput {
	return i.ToAuthorizationProfileOutputWithContext(context.Background())
}

func (i AuthorizationProfileArgs) ToAuthorizationProfileOutputWithContext(ctx context.Context) AuthorizationProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationProfileOutput)
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileOutput struct{ *pulumi.OutputState }

func (AuthorizationProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationProfile)(nil)).Elem()
}

func (o AuthorizationProfileOutput) ToAuthorizationProfileOutput() AuthorizationProfileOutput {
	return o
}

func (o AuthorizationProfileOutput) ToAuthorizationProfileOutputWithContext(ctx context.Context) AuthorizationProfileOutput {
	return o
}

// AAD group Ids authorized for data plane access.
func (o AuthorizationProfileOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfile) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// AAD user Ids authorized for data plane access.
func (o AuthorizationProfileOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfile) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileResponse struct {
	// AAD group Ids authorized for data plane access.
	GroupIds []string `pulumi:"groupIds"`
	// AAD user Ids authorized for data plane access.
	UserIds []string `pulumi:"userIds"`
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
type AuthorizationProfileResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationProfileResponse)(nil)).Elem()
}

func (o AuthorizationProfileResponseOutput) ToAuthorizationProfileResponseOutput() AuthorizationProfileResponseOutput {
	return o
}

func (o AuthorizationProfileResponseOutput) ToAuthorizationProfileResponseOutputWithContext(ctx context.Context) AuthorizationProfileResponseOutput {
	return o
}

// AAD group Ids authorized for data plane access.
func (o AuthorizationProfileResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfileResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// AAD user Ids authorized for data plane access.
func (o AuthorizationProfileResponseOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuthorizationProfileResponse) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

// The autoscale request parameters
type Autoscale struct {
	// Parameters for load-based autoscale
	Capacity *AutoscaleCapacity `pulumi:"capacity"`
	// Parameters for schedule-based autoscale
	Recurrence *AutoscaleRecurrence `pulumi:"recurrence"`
}

// AutoscaleInput is an input type that accepts AutoscaleArgs and AutoscaleOutput values.
// You can construct a concrete instance of `AutoscaleInput` via:
//
//	AutoscaleArgs{...}
type AutoscaleInput interface {
	pulumi.Input

	ToAutoscaleOutput() AutoscaleOutput
	ToAutoscaleOutputWithContext(context.Context) AutoscaleOutput
}

// The autoscale request parameters
type AutoscaleArgs struct {
	// Parameters for load-based autoscale
	Capacity AutoscaleCapacityPtrInput `pulumi:"capacity"`
	// Parameters for schedule-based autoscale
	Recurrence AutoscaleRecurrencePtrInput `pulumi:"recurrence"`
}

func (AutoscaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Autoscale)(nil)).Elem()
}

func (i AutoscaleArgs) ToAutoscaleOutput() AutoscaleOutput {
	return i.ToAutoscaleOutputWithContext(context.Background())
}

func (i AutoscaleArgs) ToAutoscaleOutputWithContext(ctx context.Context) AutoscaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleOutput)
}

func (i AutoscaleArgs) ToAutoscalePtrOutput() AutoscalePtrOutput {
	return i.ToAutoscalePtrOutputWithContext(context.Background())
}

func (i AutoscaleArgs) ToAutoscalePtrOutputWithContext(ctx context.Context) AutoscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleOutput).ToAutoscalePtrOutputWithContext(ctx)
}

// AutoscalePtrInput is an input type that accepts AutoscaleArgs, AutoscalePtr and AutoscalePtrOutput values.
// You can construct a concrete instance of `AutoscalePtrInput` via:
//
//	        AutoscaleArgs{...}
//
//	or:
//
//	        nil
type AutoscalePtrInput interface {
	pulumi.Input

	ToAutoscalePtrOutput() AutoscalePtrOutput
	ToAutoscalePtrOutputWithContext(context.Context) AutoscalePtrOutput
}

type autoscalePtrType AutoscaleArgs

func AutoscalePtr(v *AutoscaleArgs) AutoscalePtrInput {
	return (*autoscalePtrType)(v)
}

func (*autoscalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Autoscale)(nil)).Elem()
}

func (i *autoscalePtrType) ToAutoscalePtrOutput() AutoscalePtrOutput {
	return i.ToAutoscalePtrOutputWithContext(context.Background())
}

func (i *autoscalePtrType) ToAutoscalePtrOutputWithContext(ctx context.Context) AutoscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalePtrOutput)
}

// The autoscale request parameters
type AutoscaleOutput struct{ *pulumi.OutputState }

func (AutoscaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Autoscale)(nil)).Elem()
}

func (o AutoscaleOutput) ToAutoscaleOutput() AutoscaleOutput {
	return o
}

func (o AutoscaleOutput) ToAutoscaleOutputWithContext(ctx context.Context) AutoscaleOutput {
	return o
}

func (o AutoscaleOutput) ToAutoscalePtrOutput() AutoscalePtrOutput {
	return o.ToAutoscalePtrOutputWithContext(context.Background())
}

func (o AutoscaleOutput) ToAutoscalePtrOutputWithContext(ctx context.Context) AutoscalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Autoscale) *Autoscale {
		return &v
	}).(AutoscalePtrOutput)
}

// Parameters for load-based autoscale
func (o AutoscaleOutput) Capacity() AutoscaleCapacityPtrOutput {
	return o.ApplyT(func(v Autoscale) *AutoscaleCapacity { return v.Capacity }).(AutoscaleCapacityPtrOutput)
}

// Parameters for schedule-based autoscale
func (o AutoscaleOutput) Recurrence() AutoscaleRecurrencePtrOutput {
	return o.ApplyT(func(v Autoscale) *AutoscaleRecurrence { return v.Recurrence }).(AutoscaleRecurrencePtrOutput)
}

type AutoscalePtrOutput struct{ *pulumi.OutputState }

func (AutoscalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Autoscale)(nil)).Elem()
}

func (o AutoscalePtrOutput) ToAutoscalePtrOutput() AutoscalePtrOutput {
	return o
}

func (o AutoscalePtrOutput) ToAutoscalePtrOutputWithContext(ctx context.Context) AutoscalePtrOutput {
	return o
}

func (o AutoscalePtrOutput) Elem() AutoscaleOutput {
	return o.ApplyT(func(v *Autoscale) Autoscale {
		if v != nil {
			return *v
		}
		var ret Autoscale
		return ret
	}).(AutoscaleOutput)
}

// Parameters for load-based autoscale
func (o AutoscalePtrOutput) Capacity() AutoscaleCapacityPtrOutput {
	return o.ApplyT(func(v *Autoscale) *AutoscaleCapacity {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(AutoscaleCapacityPtrOutput)
}

// Parameters for schedule-based autoscale
func (o AutoscalePtrOutput) Recurrence() AutoscaleRecurrencePtrOutput {
	return o.ApplyT(func(v *Autoscale) *AutoscaleRecurrence {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(AutoscaleRecurrencePtrOutput)
}

// The load-based autoscale request parameters
type AutoscaleCapacity struct {
	// The maximum instance count of the cluster
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// The minimum instance count of the cluster
	MinInstanceCount *int `pulumi:"minInstanceCount"`
}

// AutoscaleCapacityInput is an input type that accepts AutoscaleCapacityArgs and AutoscaleCapacityOutput values.
// You can construct a concrete instance of `AutoscaleCapacityInput` via:
//
//	AutoscaleCapacityArgs{...}
type AutoscaleCapacityInput interface {
	pulumi.Input

	ToAutoscaleCapacityOutput() AutoscaleCapacityOutput
	ToAutoscaleCapacityOutputWithContext(context.Context) AutoscaleCapacityOutput
}

// The load-based autoscale request parameters
type AutoscaleCapacityArgs struct {
	// The maximum instance count of the cluster
	MaxInstanceCount pulumi.IntPtrInput `pulumi:"maxInstanceCount"`
	// The minimum instance count of the cluster
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
}

func (AutoscaleCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleCapacity)(nil)).Elem()
}

func (i AutoscaleCapacityArgs) ToAutoscaleCapacityOutput() AutoscaleCapacityOutput {
	return i.ToAutoscaleCapacityOutputWithContext(context.Background())
}

func (i AutoscaleCapacityArgs) ToAutoscaleCapacityOutputWithContext(ctx context.Context) AutoscaleCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleCapacityOutput)
}

func (i AutoscaleCapacityArgs) ToAutoscaleCapacityPtrOutput() AutoscaleCapacityPtrOutput {
	return i.ToAutoscaleCapacityPtrOutputWithContext(context.Background())
}

func (i AutoscaleCapacityArgs) ToAutoscaleCapacityPtrOutputWithContext(ctx context.Context) AutoscaleCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleCapacityOutput).ToAutoscaleCapacityPtrOutputWithContext(ctx)
}

// AutoscaleCapacityPtrInput is an input type that accepts AutoscaleCapacityArgs, AutoscaleCapacityPtr and AutoscaleCapacityPtrOutput values.
// You can construct a concrete instance of `AutoscaleCapacityPtrInput` via:
//
//	        AutoscaleCapacityArgs{...}
//
//	or:
//
//	        nil
type AutoscaleCapacityPtrInput interface {
	pulumi.Input

	ToAutoscaleCapacityPtrOutput() AutoscaleCapacityPtrOutput
	ToAutoscaleCapacityPtrOutputWithContext(context.Context) AutoscaleCapacityPtrOutput
}

type autoscaleCapacityPtrType AutoscaleCapacityArgs

func AutoscaleCapacityPtr(v *AutoscaleCapacityArgs) AutoscaleCapacityPtrInput {
	return (*autoscaleCapacityPtrType)(v)
}

func (*autoscaleCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleCapacity)(nil)).Elem()
}

func (i *autoscaleCapacityPtrType) ToAutoscaleCapacityPtrOutput() AutoscaleCapacityPtrOutput {
	return i.ToAutoscaleCapacityPtrOutputWithContext(context.Background())
}

func (i *autoscaleCapacityPtrType) ToAutoscaleCapacityPtrOutputWithContext(ctx context.Context) AutoscaleCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleCapacityPtrOutput)
}

// The load-based autoscale request parameters
type AutoscaleCapacityOutput struct{ *pulumi.OutputState }

func (AutoscaleCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleCapacity)(nil)).Elem()
}

func (o AutoscaleCapacityOutput) ToAutoscaleCapacityOutput() AutoscaleCapacityOutput {
	return o
}

func (o AutoscaleCapacityOutput) ToAutoscaleCapacityOutputWithContext(ctx context.Context) AutoscaleCapacityOutput {
	return o
}

func (o AutoscaleCapacityOutput) ToAutoscaleCapacityPtrOutput() AutoscaleCapacityPtrOutput {
	return o.ToAutoscaleCapacityPtrOutputWithContext(context.Background())
}

func (o AutoscaleCapacityOutput) ToAutoscaleCapacityPtrOutputWithContext(ctx context.Context) AutoscaleCapacityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleCapacity) *AutoscaleCapacity {
		return &v
	}).(AutoscaleCapacityPtrOutput)
}

// The maximum instance count of the cluster
func (o AutoscaleCapacityOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleCapacity) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleCapacityOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleCapacity) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

type AutoscaleCapacityPtrOutput struct{ *pulumi.OutputState }

func (AutoscaleCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleCapacity)(nil)).Elem()
}

func (o AutoscaleCapacityPtrOutput) ToAutoscaleCapacityPtrOutput() AutoscaleCapacityPtrOutput {
	return o
}

func (o AutoscaleCapacityPtrOutput) ToAutoscaleCapacityPtrOutputWithContext(ctx context.Context) AutoscaleCapacityPtrOutput {
	return o
}

func (o AutoscaleCapacityPtrOutput) Elem() AutoscaleCapacityOutput {
	return o.ApplyT(func(v *AutoscaleCapacity) AutoscaleCapacity {
		if v != nil {
			return *v
		}
		var ret AutoscaleCapacity
		return ret
	}).(AutoscaleCapacityOutput)
}

// The maximum instance count of the cluster
func (o AutoscaleCapacityPtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleCapacity) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleCapacityPtrOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleCapacity) *int {
		if v == nil {
			return nil
		}
		return v.MinInstanceCount
	}).(pulumi.IntPtrOutput)
}

// The load-based autoscale request parameters
type AutoscaleCapacityResponse struct {
	// The maximum instance count of the cluster
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// The minimum instance count of the cluster
	MinInstanceCount *int `pulumi:"minInstanceCount"`
}

// The load-based autoscale request parameters
type AutoscaleCapacityResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleCapacityResponse)(nil)).Elem()
}

func (o AutoscaleCapacityResponseOutput) ToAutoscaleCapacityResponseOutput() AutoscaleCapacityResponseOutput {
	return o
}

func (o AutoscaleCapacityResponseOutput) ToAutoscaleCapacityResponseOutputWithContext(ctx context.Context) AutoscaleCapacityResponseOutput {
	return o
}

// The maximum instance count of the cluster
func (o AutoscaleCapacityResponseOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleCapacityResponse) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleCapacityResponseOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleCapacityResponse) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

type AutoscaleCapacityResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleCapacityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleCapacityResponse)(nil)).Elem()
}

func (o AutoscaleCapacityResponsePtrOutput) ToAutoscaleCapacityResponsePtrOutput() AutoscaleCapacityResponsePtrOutput {
	return o
}

func (o AutoscaleCapacityResponsePtrOutput) ToAutoscaleCapacityResponsePtrOutputWithContext(ctx context.Context) AutoscaleCapacityResponsePtrOutput {
	return o
}

func (o AutoscaleCapacityResponsePtrOutput) Elem() AutoscaleCapacityResponseOutput {
	return o.ApplyT(func(v *AutoscaleCapacityResponse) AutoscaleCapacityResponse {
		if v != nil {
			return *v
		}
		var ret AutoscaleCapacityResponse
		return ret
	}).(AutoscaleCapacityResponseOutput)
}

// The maximum instance count of the cluster
func (o AutoscaleCapacityResponsePtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleCapacityResponsePtrOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinInstanceCount
	}).(pulumi.IntPtrOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfile struct {
	// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
	AutoscaleType *string `pulumi:"autoscaleType"`
	// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
	Enabled bool `pulumi:"enabled"`
	// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
	GracefulDecommissionTimeout *int `pulumi:"gracefulDecommissionTimeout"`
	// Profiles of load based Autoscale.
	LoadBasedConfig *LoadBasedConfig `pulumi:"loadBasedConfig"`
	// Profiles of schedule based Autoscale.
	ScheduleBasedConfig *ScheduleBasedConfig `pulumi:"scheduleBasedConfig"`
}

// AutoscaleProfileInput is an input type that accepts AutoscaleProfileArgs and AutoscaleProfileOutput values.
// You can construct a concrete instance of `AutoscaleProfileInput` via:
//
//	AutoscaleProfileArgs{...}
type AutoscaleProfileInput interface {
	pulumi.Input

	ToAutoscaleProfileOutput() AutoscaleProfileOutput
	ToAutoscaleProfileOutputWithContext(context.Context) AutoscaleProfileOutput
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileArgs struct {
	// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
	AutoscaleType pulumi.StringPtrInput `pulumi:"autoscaleType"`
	// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
	GracefulDecommissionTimeout pulumi.IntPtrInput `pulumi:"gracefulDecommissionTimeout"`
	// Profiles of load based Autoscale.
	LoadBasedConfig LoadBasedConfigPtrInput `pulumi:"loadBasedConfig"`
	// Profiles of schedule based Autoscale.
	ScheduleBasedConfig ScheduleBasedConfigPtrInput `pulumi:"scheduleBasedConfig"`
}

func (AutoscaleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfile)(nil)).Elem()
}

func (i AutoscaleProfileArgs) ToAutoscaleProfileOutput() AutoscaleProfileOutput {
	return i.ToAutoscaleProfileOutputWithContext(context.Background())
}

func (i AutoscaleProfileArgs) ToAutoscaleProfileOutputWithContext(ctx context.Context) AutoscaleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfileOutput)
}

func (i AutoscaleProfileArgs) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return i.ToAutoscaleProfilePtrOutputWithContext(context.Background())
}

func (i AutoscaleProfileArgs) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfileOutput).ToAutoscaleProfilePtrOutputWithContext(ctx)
}

// AutoscaleProfilePtrInput is an input type that accepts AutoscaleProfileArgs, AutoscaleProfilePtr and AutoscaleProfilePtrOutput values.
// You can construct a concrete instance of `AutoscaleProfilePtrInput` via:
//
//	        AutoscaleProfileArgs{...}
//
//	or:
//
//	        nil
type AutoscaleProfilePtrInput interface {
	pulumi.Input

	ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput
	ToAutoscaleProfilePtrOutputWithContext(context.Context) AutoscaleProfilePtrOutput
}

type autoscaleProfilePtrType AutoscaleProfileArgs

func AutoscaleProfilePtr(v *AutoscaleProfileArgs) AutoscaleProfilePtrInput {
	return (*autoscaleProfilePtrType)(v)
}

func (*autoscaleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleProfile)(nil)).Elem()
}

func (i *autoscaleProfilePtrType) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return i.ToAutoscaleProfilePtrOutputWithContext(context.Background())
}

func (i *autoscaleProfilePtrType) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfilePtrOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfile)(nil)).Elem()
}

func (o AutoscaleProfileOutput) ToAutoscaleProfileOutput() AutoscaleProfileOutput {
	return o
}

func (o AutoscaleProfileOutput) ToAutoscaleProfileOutputWithContext(ctx context.Context) AutoscaleProfileOutput {
	return o
}

func (o AutoscaleProfileOutput) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return o.ToAutoscaleProfilePtrOutputWithContext(context.Background())
}

func (o AutoscaleProfileOutput) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleProfile) *AutoscaleProfile {
		return &v
	}).(AutoscaleProfilePtrOutput)
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfileOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *string { return v.AutoscaleType }).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutoscaleProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfileOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *int { return v.GracefulDecommissionTimeout }).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfileOutput) LoadBasedConfig() LoadBasedConfigPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *LoadBasedConfig { return v.LoadBasedConfig }).(LoadBasedConfigPtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfileOutput) ScheduleBasedConfig() ScheduleBasedConfigPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *ScheduleBasedConfig { return v.ScheduleBasedConfig }).(ScheduleBasedConfigPtrOutput)
}

type AutoscaleProfilePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleProfile)(nil)).Elem()
}

func (o AutoscaleProfilePtrOutput) ToAutoscaleProfilePtrOutput() AutoscaleProfilePtrOutput {
	return o
}

func (o AutoscaleProfilePtrOutput) ToAutoscaleProfilePtrOutputWithContext(ctx context.Context) AutoscaleProfilePtrOutput {
	return o
}

func (o AutoscaleProfilePtrOutput) Elem() AutoscaleProfileOutput {
	return o.ApplyT(func(v *AutoscaleProfile) AutoscaleProfile {
		if v != nil {
			return *v
		}
		var ret AutoscaleProfile
		return ret
	}).(AutoscaleProfileOutput)
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfilePtrOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *string {
		if v == nil {
			return nil
		}
		return v.AutoscaleType
	}).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfilePtrOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *int {
		if v == nil {
			return nil
		}
		return v.GracefulDecommissionTimeout
	}).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfilePtrOutput) LoadBasedConfig() LoadBasedConfigPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *LoadBasedConfig {
		if v == nil {
			return nil
		}
		return v.LoadBasedConfig
	}).(LoadBasedConfigPtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfilePtrOutput) ScheduleBasedConfig() ScheduleBasedConfigPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfile) *ScheduleBasedConfig {
		if v == nil {
			return nil
		}
		return v.ScheduleBasedConfig
	}).(ScheduleBasedConfigPtrOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileResponse struct {
	// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
	AutoscaleType *string `pulumi:"autoscaleType"`
	// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
	Enabled bool `pulumi:"enabled"`
	// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
	GracefulDecommissionTimeout *int `pulumi:"gracefulDecommissionTimeout"`
	// Profiles of load based Autoscale.
	LoadBasedConfig *LoadBasedConfigResponse `pulumi:"loadBasedConfig"`
	// Profiles of schedule based Autoscale.
	ScheduleBasedConfig *ScheduleBasedConfigResponse `pulumi:"scheduleBasedConfig"`
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
type AutoscaleProfileResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfileResponse)(nil)).Elem()
}

func (o AutoscaleProfileResponseOutput) ToAutoscaleProfileResponseOutput() AutoscaleProfileResponseOutput {
	return o
}

func (o AutoscaleProfileResponseOutput) ToAutoscaleProfileResponseOutputWithContext(ctx context.Context) AutoscaleProfileResponseOutput {
	return o
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfileResponseOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *string { return v.AutoscaleType }).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfileResponseOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *int { return v.GracefulDecommissionTimeout }).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfileResponseOutput) LoadBasedConfig() LoadBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *LoadBasedConfigResponse { return v.LoadBasedConfig }).(LoadBasedConfigResponsePtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfileResponseOutput) ScheduleBasedConfig() ScheduleBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *ScheduleBasedConfigResponse { return v.ScheduleBasedConfig }).(ScheduleBasedConfigResponsePtrOutput)
}

type AutoscaleProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleProfileResponse)(nil)).Elem()
}

func (o AutoscaleProfileResponsePtrOutput) ToAutoscaleProfileResponsePtrOutput() AutoscaleProfileResponsePtrOutput {
	return o
}

func (o AutoscaleProfileResponsePtrOutput) ToAutoscaleProfileResponsePtrOutputWithContext(ctx context.Context) AutoscaleProfileResponsePtrOutput {
	return o
}

func (o AutoscaleProfileResponsePtrOutput) Elem() AutoscaleProfileResponseOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) AutoscaleProfileResponse {
		if v != nil {
			return *v
		}
		var ret AutoscaleProfileResponse
		return ret
	}).(AutoscaleProfileResponseOutput)
}

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
func (o AutoscaleProfileResponsePtrOutput) AutoscaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoscaleType
	}).(pulumi.StringPtrOutput)
}

// This indicates whether auto scale is enabled on HDInsight on AKS cluster.
func (o AutoscaleProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
func (o AutoscaleProfileResponsePtrOutput) GracefulDecommissionTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.GracefulDecommissionTimeout
	}).(pulumi.IntPtrOutput)
}

// Profiles of load based Autoscale.
func (o AutoscaleProfileResponsePtrOutput) LoadBasedConfig() LoadBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *LoadBasedConfigResponse {
		if v == nil {
			return nil
		}
		return v.LoadBasedConfig
	}).(LoadBasedConfigResponsePtrOutput)
}

// Profiles of schedule based Autoscale.
func (o AutoscaleProfileResponsePtrOutput) ScheduleBasedConfig() ScheduleBasedConfigResponsePtrOutput {
	return o.ApplyT(func(v *AutoscaleProfileResponse) *ScheduleBasedConfigResponse {
		if v == nil {
			return nil
		}
		return v.ScheduleBasedConfig
	}).(ScheduleBasedConfigResponsePtrOutput)
}

// Schedule-based autoscale request parameters
type AutoscaleRecurrence struct {
	// Array of schedule-based autoscale rules
	Schedule []AutoscaleSchedule `pulumi:"schedule"`
	// The time zone for the autoscale schedule times
	TimeZone *string `pulumi:"timeZone"`
}

// AutoscaleRecurrenceInput is an input type that accepts AutoscaleRecurrenceArgs and AutoscaleRecurrenceOutput values.
// You can construct a concrete instance of `AutoscaleRecurrenceInput` via:
//
//	AutoscaleRecurrenceArgs{...}
type AutoscaleRecurrenceInput interface {
	pulumi.Input

	ToAutoscaleRecurrenceOutput() AutoscaleRecurrenceOutput
	ToAutoscaleRecurrenceOutputWithContext(context.Context) AutoscaleRecurrenceOutput
}

// Schedule-based autoscale request parameters
type AutoscaleRecurrenceArgs struct {
	// Array of schedule-based autoscale rules
	Schedule AutoscaleScheduleArrayInput `pulumi:"schedule"`
	// The time zone for the autoscale schedule times
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (AutoscaleRecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleRecurrence)(nil)).Elem()
}

func (i AutoscaleRecurrenceArgs) ToAutoscaleRecurrenceOutput() AutoscaleRecurrenceOutput {
	return i.ToAutoscaleRecurrenceOutputWithContext(context.Background())
}

func (i AutoscaleRecurrenceArgs) ToAutoscaleRecurrenceOutputWithContext(ctx context.Context) AutoscaleRecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleRecurrenceOutput)
}

func (i AutoscaleRecurrenceArgs) ToAutoscaleRecurrencePtrOutput() AutoscaleRecurrencePtrOutput {
	return i.ToAutoscaleRecurrencePtrOutputWithContext(context.Background())
}

func (i AutoscaleRecurrenceArgs) ToAutoscaleRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleRecurrenceOutput).ToAutoscaleRecurrencePtrOutputWithContext(ctx)
}

// AutoscaleRecurrencePtrInput is an input type that accepts AutoscaleRecurrenceArgs, AutoscaleRecurrencePtr and AutoscaleRecurrencePtrOutput values.
// You can construct a concrete instance of `AutoscaleRecurrencePtrInput` via:
//
//	        AutoscaleRecurrenceArgs{...}
//
//	or:
//
//	        nil
type AutoscaleRecurrencePtrInput interface {
	pulumi.Input

	ToAutoscaleRecurrencePtrOutput() AutoscaleRecurrencePtrOutput
	ToAutoscaleRecurrencePtrOutputWithContext(context.Context) AutoscaleRecurrencePtrOutput
}

type autoscaleRecurrencePtrType AutoscaleRecurrenceArgs

func AutoscaleRecurrencePtr(v *AutoscaleRecurrenceArgs) AutoscaleRecurrencePtrInput {
	return (*autoscaleRecurrencePtrType)(v)
}

func (*autoscaleRecurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleRecurrence)(nil)).Elem()
}

func (i *autoscaleRecurrencePtrType) ToAutoscaleRecurrencePtrOutput() AutoscaleRecurrencePtrOutput {
	return i.ToAutoscaleRecurrencePtrOutputWithContext(context.Background())
}

func (i *autoscaleRecurrencePtrType) ToAutoscaleRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleRecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleRecurrencePtrOutput)
}

// Schedule-based autoscale request parameters
type AutoscaleRecurrenceOutput struct{ *pulumi.OutputState }

func (AutoscaleRecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleRecurrence)(nil)).Elem()
}

func (o AutoscaleRecurrenceOutput) ToAutoscaleRecurrenceOutput() AutoscaleRecurrenceOutput {
	return o
}

func (o AutoscaleRecurrenceOutput) ToAutoscaleRecurrenceOutputWithContext(ctx context.Context) AutoscaleRecurrenceOutput {
	return o
}

func (o AutoscaleRecurrenceOutput) ToAutoscaleRecurrencePtrOutput() AutoscaleRecurrencePtrOutput {
	return o.ToAutoscaleRecurrencePtrOutputWithContext(context.Background())
}

func (o AutoscaleRecurrenceOutput) ToAutoscaleRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleRecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleRecurrence) *AutoscaleRecurrence {
		return &v
	}).(AutoscaleRecurrencePtrOutput)
}

// Array of schedule-based autoscale rules
func (o AutoscaleRecurrenceOutput) Schedule() AutoscaleScheduleArrayOutput {
	return o.ApplyT(func(v AutoscaleRecurrence) []AutoscaleSchedule { return v.Schedule }).(AutoscaleScheduleArrayOutput)
}

// The time zone for the autoscale schedule times
func (o AutoscaleRecurrenceOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleRecurrence) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type AutoscaleRecurrencePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleRecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleRecurrence)(nil)).Elem()
}

func (o AutoscaleRecurrencePtrOutput) ToAutoscaleRecurrencePtrOutput() AutoscaleRecurrencePtrOutput {
	return o
}

func (o AutoscaleRecurrencePtrOutput) ToAutoscaleRecurrencePtrOutputWithContext(ctx context.Context) AutoscaleRecurrencePtrOutput {
	return o
}

func (o AutoscaleRecurrencePtrOutput) Elem() AutoscaleRecurrenceOutput {
	return o.ApplyT(func(v *AutoscaleRecurrence) AutoscaleRecurrence {
		if v != nil {
			return *v
		}
		var ret AutoscaleRecurrence
		return ret
	}).(AutoscaleRecurrenceOutput)
}

// Array of schedule-based autoscale rules
func (o AutoscaleRecurrencePtrOutput) Schedule() AutoscaleScheduleArrayOutput {
	return o.ApplyT(func(v *AutoscaleRecurrence) []AutoscaleSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(AutoscaleScheduleArrayOutput)
}

// The time zone for the autoscale schedule times
func (o AutoscaleRecurrencePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleRecurrence) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Schedule-based autoscale request parameters
type AutoscaleRecurrenceResponse struct {
	// Array of schedule-based autoscale rules
	Schedule []AutoscaleScheduleResponse `pulumi:"schedule"`
	// The time zone for the autoscale schedule times
	TimeZone *string `pulumi:"timeZone"`
}

// Schedule-based autoscale request parameters
type AutoscaleRecurrenceResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleRecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleRecurrenceResponse)(nil)).Elem()
}

func (o AutoscaleRecurrenceResponseOutput) ToAutoscaleRecurrenceResponseOutput() AutoscaleRecurrenceResponseOutput {
	return o
}

func (o AutoscaleRecurrenceResponseOutput) ToAutoscaleRecurrenceResponseOutputWithContext(ctx context.Context) AutoscaleRecurrenceResponseOutput {
	return o
}

// Array of schedule-based autoscale rules
func (o AutoscaleRecurrenceResponseOutput) Schedule() AutoscaleScheduleResponseArrayOutput {
	return o.ApplyT(func(v AutoscaleRecurrenceResponse) []AutoscaleScheduleResponse { return v.Schedule }).(AutoscaleScheduleResponseArrayOutput)
}

// The time zone for the autoscale schedule times
func (o AutoscaleRecurrenceResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleRecurrenceResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type AutoscaleRecurrenceResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleRecurrenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleRecurrenceResponse)(nil)).Elem()
}

func (o AutoscaleRecurrenceResponsePtrOutput) ToAutoscaleRecurrenceResponsePtrOutput() AutoscaleRecurrenceResponsePtrOutput {
	return o
}

func (o AutoscaleRecurrenceResponsePtrOutput) ToAutoscaleRecurrenceResponsePtrOutputWithContext(ctx context.Context) AutoscaleRecurrenceResponsePtrOutput {
	return o
}

func (o AutoscaleRecurrenceResponsePtrOutput) Elem() AutoscaleRecurrenceResponseOutput {
	return o.ApplyT(func(v *AutoscaleRecurrenceResponse) AutoscaleRecurrenceResponse {
		if v != nil {
			return *v
		}
		var ret AutoscaleRecurrenceResponse
		return ret
	}).(AutoscaleRecurrenceResponseOutput)
}

// Array of schedule-based autoscale rules
func (o AutoscaleRecurrenceResponsePtrOutput) Schedule() AutoscaleScheduleResponseArrayOutput {
	return o.ApplyT(func(v *AutoscaleRecurrenceResponse) []AutoscaleScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(AutoscaleScheduleResponseArrayOutput)
}

// The time zone for the autoscale schedule times
func (o AutoscaleRecurrenceResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleRecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The autoscale request parameters
type AutoscaleResponse struct {
	// Parameters for load-based autoscale
	Capacity *AutoscaleCapacityResponse `pulumi:"capacity"`
	// Parameters for schedule-based autoscale
	Recurrence *AutoscaleRecurrenceResponse `pulumi:"recurrence"`
}

// The autoscale request parameters
type AutoscaleResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleResponse)(nil)).Elem()
}

func (o AutoscaleResponseOutput) ToAutoscaleResponseOutput() AutoscaleResponseOutput {
	return o
}

func (o AutoscaleResponseOutput) ToAutoscaleResponseOutputWithContext(ctx context.Context) AutoscaleResponseOutput {
	return o
}

// Parameters for load-based autoscale
func (o AutoscaleResponseOutput) Capacity() AutoscaleCapacityResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleResponse) *AutoscaleCapacityResponse { return v.Capacity }).(AutoscaleCapacityResponsePtrOutput)
}

// Parameters for schedule-based autoscale
func (o AutoscaleResponseOutput) Recurrence() AutoscaleRecurrenceResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleResponse) *AutoscaleRecurrenceResponse { return v.Recurrence }).(AutoscaleRecurrenceResponsePtrOutput)
}

type AutoscaleResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleResponse)(nil)).Elem()
}

func (o AutoscaleResponsePtrOutput) ToAutoscaleResponsePtrOutput() AutoscaleResponsePtrOutput {
	return o
}

func (o AutoscaleResponsePtrOutput) ToAutoscaleResponsePtrOutputWithContext(ctx context.Context) AutoscaleResponsePtrOutput {
	return o
}

func (o AutoscaleResponsePtrOutput) Elem() AutoscaleResponseOutput {
	return o.ApplyT(func(v *AutoscaleResponse) AutoscaleResponse {
		if v != nil {
			return *v
		}
		var ret AutoscaleResponse
		return ret
	}).(AutoscaleResponseOutput)
}

// Parameters for load-based autoscale
func (o AutoscaleResponsePtrOutput) Capacity() AutoscaleCapacityResponsePtrOutput {
	return o.ApplyT(func(v *AutoscaleResponse) *AutoscaleCapacityResponse {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(AutoscaleCapacityResponsePtrOutput)
}

// Parameters for schedule-based autoscale
func (o AutoscaleResponsePtrOutput) Recurrence() AutoscaleRecurrenceResponsePtrOutput {
	return o.ApplyT(func(v *AutoscaleResponse) *AutoscaleRecurrenceResponse {
		if v == nil {
			return nil
		}
		return v.Recurrence
	}).(AutoscaleRecurrenceResponsePtrOutput)
}

// Parameters for a schedule-based autoscale rule, consisting of an array of days + a time and capacity
type AutoscaleSchedule struct {
	// Days of the week for a schedule-based autoscale rule
	Days []string `pulumi:"days"`
	// Time and capacity for a schedule-based autoscale rule
	TimeAndCapacity *AutoscaleTimeAndCapacity `pulumi:"timeAndCapacity"`
}

// AutoscaleScheduleInput is an input type that accepts AutoscaleScheduleArgs and AutoscaleScheduleOutput values.
// You can construct a concrete instance of `AutoscaleScheduleInput` via:
//
//	AutoscaleScheduleArgs{...}
type AutoscaleScheduleInput interface {
	pulumi.Input

	ToAutoscaleScheduleOutput() AutoscaleScheduleOutput
	ToAutoscaleScheduleOutputWithContext(context.Context) AutoscaleScheduleOutput
}

// Parameters for a schedule-based autoscale rule, consisting of an array of days + a time and capacity
type AutoscaleScheduleArgs struct {
	// Days of the week for a schedule-based autoscale rule
	Days pulumi.StringArrayInput `pulumi:"days"`
	// Time and capacity for a schedule-based autoscale rule
	TimeAndCapacity AutoscaleTimeAndCapacityPtrInput `pulumi:"timeAndCapacity"`
}

func (AutoscaleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSchedule)(nil)).Elem()
}

func (i AutoscaleScheduleArgs) ToAutoscaleScheduleOutput() AutoscaleScheduleOutput {
	return i.ToAutoscaleScheduleOutputWithContext(context.Background())
}

func (i AutoscaleScheduleArgs) ToAutoscaleScheduleOutputWithContext(ctx context.Context) AutoscaleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleScheduleOutput)
}

// AutoscaleScheduleArrayInput is an input type that accepts AutoscaleScheduleArray and AutoscaleScheduleArrayOutput values.
// You can construct a concrete instance of `AutoscaleScheduleArrayInput` via:
//
//	AutoscaleScheduleArray{ AutoscaleScheduleArgs{...} }
type AutoscaleScheduleArrayInput interface {
	pulumi.Input

	ToAutoscaleScheduleArrayOutput() AutoscaleScheduleArrayOutput
	ToAutoscaleScheduleArrayOutputWithContext(context.Context) AutoscaleScheduleArrayOutput
}

type AutoscaleScheduleArray []AutoscaleScheduleInput

func (AutoscaleScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSchedule)(nil)).Elem()
}

func (i AutoscaleScheduleArray) ToAutoscaleScheduleArrayOutput() AutoscaleScheduleArrayOutput {
	return i.ToAutoscaleScheduleArrayOutputWithContext(context.Background())
}

func (i AutoscaleScheduleArray) ToAutoscaleScheduleArrayOutputWithContext(ctx context.Context) AutoscaleScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleScheduleArrayOutput)
}

// Parameters for a schedule-based autoscale rule, consisting of an array of days + a time and capacity
type AutoscaleScheduleOutput struct{ *pulumi.OutputState }

func (AutoscaleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSchedule)(nil)).Elem()
}

func (o AutoscaleScheduleOutput) ToAutoscaleScheduleOutput() AutoscaleScheduleOutput {
	return o
}

func (o AutoscaleScheduleOutput) ToAutoscaleScheduleOutputWithContext(ctx context.Context) AutoscaleScheduleOutput {
	return o
}

// Days of the week for a schedule-based autoscale rule
func (o AutoscaleScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoscaleSchedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// Time and capacity for a schedule-based autoscale rule
func (o AutoscaleScheduleOutput) TimeAndCapacity() AutoscaleTimeAndCapacityPtrOutput {
	return o.ApplyT(func(v AutoscaleSchedule) *AutoscaleTimeAndCapacity { return v.TimeAndCapacity }).(AutoscaleTimeAndCapacityPtrOutput)
}

type AutoscaleScheduleArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleSchedule)(nil)).Elem()
}

func (o AutoscaleScheduleArrayOutput) ToAutoscaleScheduleArrayOutput() AutoscaleScheduleArrayOutput {
	return o
}

func (o AutoscaleScheduleArrayOutput) ToAutoscaleScheduleArrayOutputWithContext(ctx context.Context) AutoscaleScheduleArrayOutput {
	return o
}

func (o AutoscaleScheduleArrayOutput) Index(i pulumi.IntInput) AutoscaleScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleSchedule {
		return vs[0].([]AutoscaleSchedule)[vs[1].(int)]
	}).(AutoscaleScheduleOutput)
}

// Parameters for a schedule-based autoscale rule, consisting of an array of days + a time and capacity
type AutoscaleScheduleResponse struct {
	// Days of the week for a schedule-based autoscale rule
	Days []string `pulumi:"days"`
	// Time and capacity for a schedule-based autoscale rule
	TimeAndCapacity *AutoscaleTimeAndCapacityResponse `pulumi:"timeAndCapacity"`
}

// Parameters for a schedule-based autoscale rule, consisting of an array of days + a time and capacity
type AutoscaleScheduleResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleScheduleResponse)(nil)).Elem()
}

func (o AutoscaleScheduleResponseOutput) ToAutoscaleScheduleResponseOutput() AutoscaleScheduleResponseOutput {
	return o
}

func (o AutoscaleScheduleResponseOutput) ToAutoscaleScheduleResponseOutputWithContext(ctx context.Context) AutoscaleScheduleResponseOutput {
	return o
}

// Days of the week for a schedule-based autoscale rule
func (o AutoscaleScheduleResponseOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AutoscaleScheduleResponse) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// Time and capacity for a schedule-based autoscale rule
func (o AutoscaleScheduleResponseOutput) TimeAndCapacity() AutoscaleTimeAndCapacityResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleScheduleResponse) *AutoscaleTimeAndCapacityResponse { return v.TimeAndCapacity }).(AutoscaleTimeAndCapacityResponsePtrOutput)
}

type AutoscaleScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleScheduleResponse)(nil)).Elem()
}

func (o AutoscaleScheduleResponseArrayOutput) ToAutoscaleScheduleResponseArrayOutput() AutoscaleScheduleResponseArrayOutput {
	return o
}

func (o AutoscaleScheduleResponseArrayOutput) ToAutoscaleScheduleResponseArrayOutputWithContext(ctx context.Context) AutoscaleScheduleResponseArrayOutput {
	return o
}

func (o AutoscaleScheduleResponseArrayOutput) Index(i pulumi.IntInput) AutoscaleScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleScheduleResponse {
		return vs[0].([]AutoscaleScheduleResponse)[vs[1].(int)]
	}).(AutoscaleScheduleResponseOutput)
}

// Time and capacity request parameters
type AutoscaleTimeAndCapacity struct {
	// The maximum instance count of the cluster
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// The minimum instance count of the cluster
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// 24-hour time in the form xx:xx
	Time *string `pulumi:"time"`
}

// AutoscaleTimeAndCapacityInput is an input type that accepts AutoscaleTimeAndCapacityArgs and AutoscaleTimeAndCapacityOutput values.
// You can construct a concrete instance of `AutoscaleTimeAndCapacityInput` via:
//
//	AutoscaleTimeAndCapacityArgs{...}
type AutoscaleTimeAndCapacityInput interface {
	pulumi.Input

	ToAutoscaleTimeAndCapacityOutput() AutoscaleTimeAndCapacityOutput
	ToAutoscaleTimeAndCapacityOutputWithContext(context.Context) AutoscaleTimeAndCapacityOutput
}

// Time and capacity request parameters
type AutoscaleTimeAndCapacityArgs struct {
	// The maximum instance count of the cluster
	MaxInstanceCount pulumi.IntPtrInput `pulumi:"maxInstanceCount"`
	// The minimum instance count of the cluster
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// 24-hour time in the form xx:xx
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (AutoscaleTimeAndCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleTimeAndCapacity)(nil)).Elem()
}

func (i AutoscaleTimeAndCapacityArgs) ToAutoscaleTimeAndCapacityOutput() AutoscaleTimeAndCapacityOutput {
	return i.ToAutoscaleTimeAndCapacityOutputWithContext(context.Background())
}

func (i AutoscaleTimeAndCapacityArgs) ToAutoscaleTimeAndCapacityOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleTimeAndCapacityOutput)
}

func (i AutoscaleTimeAndCapacityArgs) ToAutoscaleTimeAndCapacityPtrOutput() AutoscaleTimeAndCapacityPtrOutput {
	return i.ToAutoscaleTimeAndCapacityPtrOutputWithContext(context.Background())
}

func (i AutoscaleTimeAndCapacityArgs) ToAutoscaleTimeAndCapacityPtrOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleTimeAndCapacityOutput).ToAutoscaleTimeAndCapacityPtrOutputWithContext(ctx)
}

// AutoscaleTimeAndCapacityPtrInput is an input type that accepts AutoscaleTimeAndCapacityArgs, AutoscaleTimeAndCapacityPtr and AutoscaleTimeAndCapacityPtrOutput values.
// You can construct a concrete instance of `AutoscaleTimeAndCapacityPtrInput` via:
//
//	        AutoscaleTimeAndCapacityArgs{...}
//
//	or:
//
//	        nil
type AutoscaleTimeAndCapacityPtrInput interface {
	pulumi.Input

	ToAutoscaleTimeAndCapacityPtrOutput() AutoscaleTimeAndCapacityPtrOutput
	ToAutoscaleTimeAndCapacityPtrOutputWithContext(context.Context) AutoscaleTimeAndCapacityPtrOutput
}

type autoscaleTimeAndCapacityPtrType AutoscaleTimeAndCapacityArgs

func AutoscaleTimeAndCapacityPtr(v *AutoscaleTimeAndCapacityArgs) AutoscaleTimeAndCapacityPtrInput {
	return (*autoscaleTimeAndCapacityPtrType)(v)
}

func (*autoscaleTimeAndCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleTimeAndCapacity)(nil)).Elem()
}

func (i *autoscaleTimeAndCapacityPtrType) ToAutoscaleTimeAndCapacityPtrOutput() AutoscaleTimeAndCapacityPtrOutput {
	return i.ToAutoscaleTimeAndCapacityPtrOutputWithContext(context.Background())
}

func (i *autoscaleTimeAndCapacityPtrType) ToAutoscaleTimeAndCapacityPtrOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleTimeAndCapacityPtrOutput)
}

// Time and capacity request parameters
type AutoscaleTimeAndCapacityOutput struct{ *pulumi.OutputState }

func (AutoscaleTimeAndCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleTimeAndCapacity)(nil)).Elem()
}

func (o AutoscaleTimeAndCapacityOutput) ToAutoscaleTimeAndCapacityOutput() AutoscaleTimeAndCapacityOutput {
	return o
}

func (o AutoscaleTimeAndCapacityOutput) ToAutoscaleTimeAndCapacityOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityOutput {
	return o
}

func (o AutoscaleTimeAndCapacityOutput) ToAutoscaleTimeAndCapacityPtrOutput() AutoscaleTimeAndCapacityPtrOutput {
	return o.ToAutoscaleTimeAndCapacityPtrOutputWithContext(context.Background())
}

func (o AutoscaleTimeAndCapacityOutput) ToAutoscaleTimeAndCapacityPtrOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleTimeAndCapacity) *AutoscaleTimeAndCapacity {
		return &v
	}).(AutoscaleTimeAndCapacityPtrOutput)
}

// The maximum instance count of the cluster
func (o AutoscaleTimeAndCapacityOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleTimeAndCapacity) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleTimeAndCapacityOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleTimeAndCapacity) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// 24-hour time in the form xx:xx
func (o AutoscaleTimeAndCapacityOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleTimeAndCapacity) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type AutoscaleTimeAndCapacityPtrOutput struct{ *pulumi.OutputState }

func (AutoscaleTimeAndCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleTimeAndCapacity)(nil)).Elem()
}

func (o AutoscaleTimeAndCapacityPtrOutput) ToAutoscaleTimeAndCapacityPtrOutput() AutoscaleTimeAndCapacityPtrOutput {
	return o
}

func (o AutoscaleTimeAndCapacityPtrOutput) ToAutoscaleTimeAndCapacityPtrOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityPtrOutput {
	return o
}

func (o AutoscaleTimeAndCapacityPtrOutput) Elem() AutoscaleTimeAndCapacityOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacity) AutoscaleTimeAndCapacity {
		if v != nil {
			return *v
		}
		var ret AutoscaleTimeAndCapacity
		return ret
	}).(AutoscaleTimeAndCapacityOutput)
}

// The maximum instance count of the cluster
func (o AutoscaleTimeAndCapacityPtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacity) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleTimeAndCapacityPtrOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacity) *int {
		if v == nil {
			return nil
		}
		return v.MinInstanceCount
	}).(pulumi.IntPtrOutput)
}

// 24-hour time in the form xx:xx
func (o AutoscaleTimeAndCapacityPtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacity) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// Time and capacity request parameters
type AutoscaleTimeAndCapacityResponse struct {
	// The maximum instance count of the cluster
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// The minimum instance count of the cluster
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// 24-hour time in the form xx:xx
	Time *string `pulumi:"time"`
}

// Time and capacity request parameters
type AutoscaleTimeAndCapacityResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleTimeAndCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleTimeAndCapacityResponse)(nil)).Elem()
}

func (o AutoscaleTimeAndCapacityResponseOutput) ToAutoscaleTimeAndCapacityResponseOutput() AutoscaleTimeAndCapacityResponseOutput {
	return o
}

func (o AutoscaleTimeAndCapacityResponseOutput) ToAutoscaleTimeAndCapacityResponseOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityResponseOutput {
	return o
}

// The maximum instance count of the cluster
func (o AutoscaleTimeAndCapacityResponseOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleTimeAndCapacityResponse) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleTimeAndCapacityResponseOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscaleTimeAndCapacityResponse) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// 24-hour time in the form xx:xx
func (o AutoscaleTimeAndCapacityResponseOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleTimeAndCapacityResponse) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type AutoscaleTimeAndCapacityResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleTimeAndCapacityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleTimeAndCapacityResponse)(nil)).Elem()
}

func (o AutoscaleTimeAndCapacityResponsePtrOutput) ToAutoscaleTimeAndCapacityResponsePtrOutput() AutoscaleTimeAndCapacityResponsePtrOutput {
	return o
}

func (o AutoscaleTimeAndCapacityResponsePtrOutput) ToAutoscaleTimeAndCapacityResponsePtrOutputWithContext(ctx context.Context) AutoscaleTimeAndCapacityResponsePtrOutput {
	return o
}

func (o AutoscaleTimeAndCapacityResponsePtrOutput) Elem() AutoscaleTimeAndCapacityResponseOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacityResponse) AutoscaleTimeAndCapacityResponse {
		if v != nil {
			return *v
		}
		var ret AutoscaleTimeAndCapacityResponse
		return ret
	}).(AutoscaleTimeAndCapacityResponseOutput)
}

// The maximum instance count of the cluster
func (o AutoscaleTimeAndCapacityResponsePtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// The minimum instance count of the cluster
func (o AutoscaleTimeAndCapacityResponsePtrOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacityResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinInstanceCount
	}).(pulumi.IntPtrOutput)
}

// 24-hour time in the form xx:xx
func (o AutoscaleTimeAndCapacityResponsePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoscaleTimeAndCapacityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// Trino cluster catalog options.
type CatalogOptions struct {
	// hive catalog options.
	Hive []HiveCatalogOption `pulumi:"hive"`
}

// CatalogOptionsInput is an input type that accepts CatalogOptionsArgs and CatalogOptionsOutput values.
// You can construct a concrete instance of `CatalogOptionsInput` via:
//
//	CatalogOptionsArgs{...}
type CatalogOptionsInput interface {
	pulumi.Input

	ToCatalogOptionsOutput() CatalogOptionsOutput
	ToCatalogOptionsOutputWithContext(context.Context) CatalogOptionsOutput
}

// Trino cluster catalog options.
type CatalogOptionsArgs struct {
	// hive catalog options.
	Hive HiveCatalogOptionArrayInput `pulumi:"hive"`
}

func (CatalogOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogOptions)(nil)).Elem()
}

func (i CatalogOptionsArgs) ToCatalogOptionsOutput() CatalogOptionsOutput {
	return i.ToCatalogOptionsOutputWithContext(context.Background())
}

func (i CatalogOptionsArgs) ToCatalogOptionsOutputWithContext(ctx context.Context) CatalogOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOptionsOutput)
}

func (i CatalogOptionsArgs) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return i.ToCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i CatalogOptionsArgs) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOptionsOutput).ToCatalogOptionsPtrOutputWithContext(ctx)
}

// CatalogOptionsPtrInput is an input type that accepts CatalogOptionsArgs, CatalogOptionsPtr and CatalogOptionsPtrOutput values.
// You can construct a concrete instance of `CatalogOptionsPtrInput` via:
//
//	        CatalogOptionsArgs{...}
//
//	or:
//
//	        nil
type CatalogOptionsPtrInput interface {
	pulumi.Input

	ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput
	ToCatalogOptionsPtrOutputWithContext(context.Context) CatalogOptionsPtrOutput
}

type catalogOptionsPtrType CatalogOptionsArgs

func CatalogOptionsPtr(v *CatalogOptionsArgs) CatalogOptionsPtrInput {
	return (*catalogOptionsPtrType)(v)
}

func (*catalogOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogOptions)(nil)).Elem()
}

func (i *catalogOptionsPtrType) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return i.ToCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i *catalogOptionsPtrType) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CatalogOptionsPtrOutput)
}

// Trino cluster catalog options.
type CatalogOptionsOutput struct{ *pulumi.OutputState }

func (CatalogOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogOptions)(nil)).Elem()
}

func (o CatalogOptionsOutput) ToCatalogOptionsOutput() CatalogOptionsOutput {
	return o
}

func (o CatalogOptionsOutput) ToCatalogOptionsOutputWithContext(ctx context.Context) CatalogOptionsOutput {
	return o
}

func (o CatalogOptionsOutput) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return o.ToCatalogOptionsPtrOutputWithContext(context.Background())
}

func (o CatalogOptionsOutput) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CatalogOptions) *CatalogOptions {
		return &v
	}).(CatalogOptionsPtrOutput)
}

// hive catalog options.
func (o CatalogOptionsOutput) Hive() HiveCatalogOptionArrayOutput {
	return o.ApplyT(func(v CatalogOptions) []HiveCatalogOption { return v.Hive }).(HiveCatalogOptionArrayOutput)
}

type CatalogOptionsPtrOutput struct{ *pulumi.OutputState }

func (CatalogOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogOptions)(nil)).Elem()
}

func (o CatalogOptionsPtrOutput) ToCatalogOptionsPtrOutput() CatalogOptionsPtrOutput {
	return o
}

func (o CatalogOptionsPtrOutput) ToCatalogOptionsPtrOutputWithContext(ctx context.Context) CatalogOptionsPtrOutput {
	return o
}

func (o CatalogOptionsPtrOutput) Elem() CatalogOptionsOutput {
	return o.ApplyT(func(v *CatalogOptions) CatalogOptions {
		if v != nil {
			return *v
		}
		var ret CatalogOptions
		return ret
	}).(CatalogOptionsOutput)
}

// hive catalog options.
func (o CatalogOptionsPtrOutput) Hive() HiveCatalogOptionArrayOutput {
	return o.ApplyT(func(v *CatalogOptions) []HiveCatalogOption {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(HiveCatalogOptionArrayOutput)
}

// Trino cluster catalog options.
type CatalogOptionsResponse struct {
	// hive catalog options.
	Hive []HiveCatalogOptionResponse `pulumi:"hive"`
}

// Trino cluster catalog options.
type CatalogOptionsResponseOutput struct{ *pulumi.OutputState }

func (CatalogOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CatalogOptionsResponse)(nil)).Elem()
}

func (o CatalogOptionsResponseOutput) ToCatalogOptionsResponseOutput() CatalogOptionsResponseOutput {
	return o
}

func (o CatalogOptionsResponseOutput) ToCatalogOptionsResponseOutputWithContext(ctx context.Context) CatalogOptionsResponseOutput {
	return o
}

// hive catalog options.
func (o CatalogOptionsResponseOutput) Hive() HiveCatalogOptionResponseArrayOutput {
	return o.ApplyT(func(v CatalogOptionsResponse) []HiveCatalogOptionResponse { return v.Hive }).(HiveCatalogOptionResponseArrayOutput)
}

type CatalogOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (CatalogOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CatalogOptionsResponse)(nil)).Elem()
}

func (o CatalogOptionsResponsePtrOutput) ToCatalogOptionsResponsePtrOutput() CatalogOptionsResponsePtrOutput {
	return o
}

func (o CatalogOptionsResponsePtrOutput) ToCatalogOptionsResponsePtrOutputWithContext(ctx context.Context) CatalogOptionsResponsePtrOutput {
	return o
}

func (o CatalogOptionsResponsePtrOutput) Elem() CatalogOptionsResponseOutput {
	return o.ApplyT(func(v *CatalogOptionsResponse) CatalogOptionsResponse {
		if v != nil {
			return *v
		}
		var ret CatalogOptionsResponse
		return ret
	}).(CatalogOptionsResponseOutput)
}

// hive catalog options.
func (o CatalogOptionsResponsePtrOutput) Hive() HiveCatalogOptionResponseArrayOutput {
	return o.ApplyT(func(v *CatalogOptionsResponse) []HiveCatalogOptionResponse {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(HiveCatalogOptionResponseArrayOutput)
}

// The information of AAD security group.
type ClientGroupInfo struct {
	// The AAD security group id.
	GroupId *string `pulumi:"groupId"`
	// The AAD security group name.
	GroupName *string `pulumi:"groupName"`
}

// ClientGroupInfoInput is an input type that accepts ClientGroupInfoArgs and ClientGroupInfoOutput values.
// You can construct a concrete instance of `ClientGroupInfoInput` via:
//
//	ClientGroupInfoArgs{...}
type ClientGroupInfoInput interface {
	pulumi.Input

	ToClientGroupInfoOutput() ClientGroupInfoOutput
	ToClientGroupInfoOutputWithContext(context.Context) ClientGroupInfoOutput
}

// The information of AAD security group.
type ClientGroupInfoArgs struct {
	// The AAD security group id.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The AAD security group name.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
}

func (ClientGroupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientGroupInfo)(nil)).Elem()
}

func (i ClientGroupInfoArgs) ToClientGroupInfoOutput() ClientGroupInfoOutput {
	return i.ToClientGroupInfoOutputWithContext(context.Background())
}

func (i ClientGroupInfoArgs) ToClientGroupInfoOutputWithContext(ctx context.Context) ClientGroupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGroupInfoOutput)
}

func (i ClientGroupInfoArgs) ToClientGroupInfoPtrOutput() ClientGroupInfoPtrOutput {
	return i.ToClientGroupInfoPtrOutputWithContext(context.Background())
}

func (i ClientGroupInfoArgs) ToClientGroupInfoPtrOutputWithContext(ctx context.Context) ClientGroupInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGroupInfoOutput).ToClientGroupInfoPtrOutputWithContext(ctx)
}

// ClientGroupInfoPtrInput is an input type that accepts ClientGroupInfoArgs, ClientGroupInfoPtr and ClientGroupInfoPtrOutput values.
// You can construct a concrete instance of `ClientGroupInfoPtrInput` via:
//
//	        ClientGroupInfoArgs{...}
//
//	or:
//
//	        nil
type ClientGroupInfoPtrInput interface {
	pulumi.Input

	ToClientGroupInfoPtrOutput() ClientGroupInfoPtrOutput
	ToClientGroupInfoPtrOutputWithContext(context.Context) ClientGroupInfoPtrOutput
}

type clientGroupInfoPtrType ClientGroupInfoArgs

func ClientGroupInfoPtr(v *ClientGroupInfoArgs) ClientGroupInfoPtrInput {
	return (*clientGroupInfoPtrType)(v)
}

func (*clientGroupInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGroupInfo)(nil)).Elem()
}

func (i *clientGroupInfoPtrType) ToClientGroupInfoPtrOutput() ClientGroupInfoPtrOutput {
	return i.ToClientGroupInfoPtrOutputWithContext(context.Background())
}

func (i *clientGroupInfoPtrType) ToClientGroupInfoPtrOutputWithContext(ctx context.Context) ClientGroupInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGroupInfoPtrOutput)
}

// The information of AAD security group.
type ClientGroupInfoOutput struct{ *pulumi.OutputState }

func (ClientGroupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientGroupInfo)(nil)).Elem()
}

func (o ClientGroupInfoOutput) ToClientGroupInfoOutput() ClientGroupInfoOutput {
	return o
}

func (o ClientGroupInfoOutput) ToClientGroupInfoOutputWithContext(ctx context.Context) ClientGroupInfoOutput {
	return o
}

func (o ClientGroupInfoOutput) ToClientGroupInfoPtrOutput() ClientGroupInfoPtrOutput {
	return o.ToClientGroupInfoPtrOutputWithContext(context.Background())
}

func (o ClientGroupInfoOutput) ToClientGroupInfoPtrOutputWithContext(ctx context.Context) ClientGroupInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientGroupInfo) *ClientGroupInfo {
		return &v
	}).(ClientGroupInfoPtrOutput)
}

// The AAD security group id.
func (o ClientGroupInfoOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientGroupInfo) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The AAD security group name.
func (o ClientGroupInfoOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientGroupInfo) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

type ClientGroupInfoPtrOutput struct{ *pulumi.OutputState }

func (ClientGroupInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGroupInfo)(nil)).Elem()
}

func (o ClientGroupInfoPtrOutput) ToClientGroupInfoPtrOutput() ClientGroupInfoPtrOutput {
	return o
}

func (o ClientGroupInfoPtrOutput) ToClientGroupInfoPtrOutputWithContext(ctx context.Context) ClientGroupInfoPtrOutput {
	return o
}

func (o ClientGroupInfoPtrOutput) Elem() ClientGroupInfoOutput {
	return o.ApplyT(func(v *ClientGroupInfo) ClientGroupInfo {
		if v != nil {
			return *v
		}
		var ret ClientGroupInfo
		return ret
	}).(ClientGroupInfoOutput)
}

// The AAD security group id.
func (o ClientGroupInfoPtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientGroupInfo) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The AAD security group name.
func (o ClientGroupInfoPtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientGroupInfo) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// The information of AAD security group.
type ClientGroupInfoResponse struct {
	// The AAD security group id.
	GroupId *string `pulumi:"groupId"`
	// The AAD security group name.
	GroupName *string `pulumi:"groupName"`
}

// The information of AAD security group.
type ClientGroupInfoResponseOutput struct{ *pulumi.OutputState }

func (ClientGroupInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientGroupInfoResponse)(nil)).Elem()
}

func (o ClientGroupInfoResponseOutput) ToClientGroupInfoResponseOutput() ClientGroupInfoResponseOutput {
	return o
}

func (o ClientGroupInfoResponseOutput) ToClientGroupInfoResponseOutputWithContext(ctx context.Context) ClientGroupInfoResponseOutput {
	return o
}

// The AAD security group id.
func (o ClientGroupInfoResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientGroupInfoResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The AAD security group name.
func (o ClientGroupInfoResponseOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientGroupInfoResponse) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

type ClientGroupInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientGroupInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGroupInfoResponse)(nil)).Elem()
}

func (o ClientGroupInfoResponsePtrOutput) ToClientGroupInfoResponsePtrOutput() ClientGroupInfoResponsePtrOutput {
	return o
}

func (o ClientGroupInfoResponsePtrOutput) ToClientGroupInfoResponsePtrOutputWithContext(ctx context.Context) ClientGroupInfoResponsePtrOutput {
	return o
}

func (o ClientGroupInfoResponsePtrOutput) Elem() ClientGroupInfoResponseOutput {
	return o.ApplyT(func(v *ClientGroupInfoResponse) ClientGroupInfoResponse {
		if v != nil {
			return *v
		}
		var ret ClientGroupInfoResponse
		return ret
	}).(ClientGroupInfoResponseOutput)
}

// The AAD security group id.
func (o ClientGroupInfoResponsePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientGroupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The AAD security group name.
func (o ClientGroupInfoResponsePtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientGroupInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// Cluster access profile.
type ClusterAccessProfile struct {
	// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
	EnableInternalIngress bool `pulumi:"enableInternalIngress"`
}

// ClusterAccessProfileInput is an input type that accepts ClusterAccessProfileArgs and ClusterAccessProfileOutput values.
// You can construct a concrete instance of `ClusterAccessProfileInput` via:
//
//	ClusterAccessProfileArgs{...}
type ClusterAccessProfileInput interface {
	pulumi.Input

	ToClusterAccessProfileOutput() ClusterAccessProfileOutput
	ToClusterAccessProfileOutputWithContext(context.Context) ClusterAccessProfileOutput
}

// Cluster access profile.
type ClusterAccessProfileArgs struct {
	// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
	EnableInternalIngress pulumi.BoolInput `pulumi:"enableInternalIngress"`
}

func (ClusterAccessProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessProfile)(nil)).Elem()
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfileOutput() ClusterAccessProfileOutput {
	return i.ToClusterAccessProfileOutputWithContext(context.Background())
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfileOutputWithContext(ctx context.Context) ClusterAccessProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessProfileOutput)
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return i.ToClusterAccessProfilePtrOutputWithContext(context.Background())
}

func (i ClusterAccessProfileArgs) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessProfileOutput).ToClusterAccessProfilePtrOutputWithContext(ctx)
}

// ClusterAccessProfilePtrInput is an input type that accepts ClusterAccessProfileArgs, ClusterAccessProfilePtr and ClusterAccessProfilePtrOutput values.
// You can construct a concrete instance of `ClusterAccessProfilePtrInput` via:
//
//	        ClusterAccessProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterAccessProfilePtrInput interface {
	pulumi.Input

	ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput
	ToClusterAccessProfilePtrOutputWithContext(context.Context) ClusterAccessProfilePtrOutput
}

type clusterAccessProfilePtrType ClusterAccessProfileArgs

func ClusterAccessProfilePtr(v *ClusterAccessProfileArgs) ClusterAccessProfilePtrInput {
	return (*clusterAccessProfilePtrType)(v)
}

func (*clusterAccessProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessProfile)(nil)).Elem()
}

func (i *clusterAccessProfilePtrType) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return i.ToClusterAccessProfilePtrOutputWithContext(context.Background())
}

func (i *clusterAccessProfilePtrType) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterAccessProfilePtrOutput)
}

// Cluster access profile.
type ClusterAccessProfileOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessProfile)(nil)).Elem()
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfileOutput() ClusterAccessProfileOutput {
	return o
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfileOutputWithContext(ctx context.Context) ClusterAccessProfileOutput {
	return o
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return o.ToClusterAccessProfilePtrOutputWithContext(context.Background())
}

func (o ClusterAccessProfileOutput) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterAccessProfile) *ClusterAccessProfile {
		return &v
	}).(ClusterAccessProfilePtrOutput)
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfileOutput) EnableInternalIngress() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterAccessProfile) bool { return v.EnableInternalIngress }).(pulumi.BoolOutput)
}

type ClusterAccessProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessProfile)(nil)).Elem()
}

func (o ClusterAccessProfilePtrOutput) ToClusterAccessProfilePtrOutput() ClusterAccessProfilePtrOutput {
	return o
}

func (o ClusterAccessProfilePtrOutput) ToClusterAccessProfilePtrOutputWithContext(ctx context.Context) ClusterAccessProfilePtrOutput {
	return o
}

func (o ClusterAccessProfilePtrOutput) Elem() ClusterAccessProfileOutput {
	return o.ApplyT(func(v *ClusterAccessProfile) ClusterAccessProfile {
		if v != nil {
			return *v
		}
		var ret ClusterAccessProfile
		return ret
	}).(ClusterAccessProfileOutput)
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfilePtrOutput) EnableInternalIngress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAccessProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableInternalIngress
	}).(pulumi.BoolPtrOutput)
}

// Cluster access profile.
type ClusterAccessProfileResponse struct {
	// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
	EnableInternalIngress bool `pulumi:"enableInternalIngress"`
	// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
	PrivateLinkServiceId string `pulumi:"privateLinkServiceId"`
}

// Cluster access profile.
type ClusterAccessProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAccessProfileResponse)(nil)).Elem()
}

func (o ClusterAccessProfileResponseOutput) ToClusterAccessProfileResponseOutput() ClusterAccessProfileResponseOutput {
	return o
}

func (o ClusterAccessProfileResponseOutput) ToClusterAccessProfileResponseOutputWithContext(ctx context.Context) ClusterAccessProfileResponseOutput {
	return o
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfileResponseOutput) EnableInternalIngress() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterAccessProfileResponse) bool { return v.EnableInternalIngress }).(pulumi.BoolOutput)
}

// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
func (o ClusterAccessProfileResponseOutput) PrivateLinkServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAccessProfileResponse) string { return v.PrivateLinkServiceId }).(pulumi.StringOutput)
}

type ClusterAccessProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterAccessProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterAccessProfileResponse)(nil)).Elem()
}

func (o ClusterAccessProfileResponsePtrOutput) ToClusterAccessProfileResponsePtrOutput() ClusterAccessProfileResponsePtrOutput {
	return o
}

func (o ClusterAccessProfileResponsePtrOutput) ToClusterAccessProfileResponsePtrOutputWithContext(ctx context.Context) ClusterAccessProfileResponsePtrOutput {
	return o
}

func (o ClusterAccessProfileResponsePtrOutput) Elem() ClusterAccessProfileResponseOutput {
	return o.ApplyT(func(v *ClusterAccessProfileResponse) ClusterAccessProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterAccessProfileResponse
		return ret
	}).(ClusterAccessProfileResponseOutput)
}

// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
func (o ClusterAccessProfileResponsePtrOutput) EnableInternalIngress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterAccessProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.EnableInternalIngress
	}).(pulumi.BoolPtrOutput)
}

// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
func (o ClusterAccessProfileResponsePtrOutput) PrivateLinkServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterAccessProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateLinkServiceId
	}).(pulumi.StringPtrOutput)
}

// Cluster configuration files.
type ClusterConfigFile struct {
	// Free form content of the entire configuration file.
	Content *string `pulumi:"content"`
	// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
	Encoding *string `pulumi:"encoding"`
	// Configuration file name.
	FileName string `pulumi:"fileName"`
	// Path of the config file if content is specified.
	Path *string `pulumi:"path"`
	// List of key value pairs
	// where key represents a valid service configuration name and value represents the value of the config.
	Values map[string]string `pulumi:"values"`
}

// ClusterConfigFileInput is an input type that accepts ClusterConfigFileArgs and ClusterConfigFileOutput values.
// You can construct a concrete instance of `ClusterConfigFileInput` via:
//
//	ClusterConfigFileArgs{...}
type ClusterConfigFileInput interface {
	pulumi.Input

	ToClusterConfigFileOutput() ClusterConfigFileOutput
	ToClusterConfigFileOutputWithContext(context.Context) ClusterConfigFileOutput
}

// Cluster configuration files.
type ClusterConfigFileArgs struct {
	// Free form content of the entire configuration file.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Configuration file name.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// Path of the config file if content is specified.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// List of key value pairs
	// where key represents a valid service configuration name and value represents the value of the config.
	Values pulumi.StringMapInput `pulumi:"values"`
}

func (ClusterConfigFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigFile)(nil)).Elem()
}

func (i ClusterConfigFileArgs) ToClusterConfigFileOutput() ClusterConfigFileOutput {
	return i.ToClusterConfigFileOutputWithContext(context.Background())
}

func (i ClusterConfigFileArgs) ToClusterConfigFileOutputWithContext(ctx context.Context) ClusterConfigFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigFileOutput)
}

// ClusterConfigFileArrayInput is an input type that accepts ClusterConfigFileArray and ClusterConfigFileArrayOutput values.
// You can construct a concrete instance of `ClusterConfigFileArrayInput` via:
//
//	ClusterConfigFileArray{ ClusterConfigFileArgs{...} }
type ClusterConfigFileArrayInput interface {
	pulumi.Input

	ToClusterConfigFileArrayOutput() ClusterConfigFileArrayOutput
	ToClusterConfigFileArrayOutputWithContext(context.Context) ClusterConfigFileArrayOutput
}

type ClusterConfigFileArray []ClusterConfigFileInput

func (ClusterConfigFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterConfigFile)(nil)).Elem()
}

func (i ClusterConfigFileArray) ToClusterConfigFileArrayOutput() ClusterConfigFileArrayOutput {
	return i.ToClusterConfigFileArrayOutputWithContext(context.Background())
}

func (i ClusterConfigFileArray) ToClusterConfigFileArrayOutputWithContext(ctx context.Context) ClusterConfigFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterConfigFileArrayOutput)
}

// Cluster configuration files.
type ClusterConfigFileOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigFile)(nil)).Elem()
}

func (o ClusterConfigFileOutput) ToClusterConfigFileOutput() ClusterConfigFileOutput {
	return o
}

func (o ClusterConfigFileOutput) ToClusterConfigFileOutputWithContext(ctx context.Context) ClusterConfigFileOutput {
	return o
}

// Free form content of the entire configuration file.
func (o ClusterConfigFileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFile) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
func (o ClusterConfigFileOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFile) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Configuration file name.
func (o ClusterConfigFileOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConfigFile) string { return v.FileName }).(pulumi.StringOutput)
}

// Path of the config file if content is specified.
func (o ClusterConfigFileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// List of key value pairs
// where key represents a valid service configuration name and value represents the value of the config.
func (o ClusterConfigFileOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterConfigFile) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type ClusterConfigFileArrayOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterConfigFile)(nil)).Elem()
}

func (o ClusterConfigFileArrayOutput) ToClusterConfigFileArrayOutput() ClusterConfigFileArrayOutput {
	return o
}

func (o ClusterConfigFileArrayOutput) ToClusterConfigFileArrayOutputWithContext(ctx context.Context) ClusterConfigFileArrayOutput {
	return o
}

func (o ClusterConfigFileArrayOutput) Index(i pulumi.IntInput) ClusterConfigFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterConfigFile {
		return vs[0].([]ClusterConfigFile)[vs[1].(int)]
	}).(ClusterConfigFileOutput)
}

// Cluster configuration files.
type ClusterConfigFileResponse struct {
	// Free form content of the entire configuration file.
	Content *string `pulumi:"content"`
	// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
	Encoding *string `pulumi:"encoding"`
	// Configuration file name.
	FileName string `pulumi:"fileName"`
	// Path of the config file if content is specified.
	Path *string `pulumi:"path"`
	// List of key value pairs
	// where key represents a valid service configuration name and value represents the value of the config.
	Values map[string]string `pulumi:"values"`
}

// Cluster configuration files.
type ClusterConfigFileResponseOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterConfigFileResponse)(nil)).Elem()
}

func (o ClusterConfigFileResponseOutput) ToClusterConfigFileResponseOutput() ClusterConfigFileResponseOutput {
	return o
}

func (o ClusterConfigFileResponseOutput) ToClusterConfigFileResponseOutputWithContext(ctx context.Context) ClusterConfigFileResponseOutput {
	return o
}

// Free form content of the entire configuration file.
func (o ClusterConfigFileResponseOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
func (o ClusterConfigFileResponseOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Configuration file name.
func (o ClusterConfigFileResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// Path of the config file if content is specified.
func (o ClusterConfigFileResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// List of key value pairs
// where key represents a valid service configuration name and value represents the value of the config.
func (o ClusterConfigFileResponseOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterConfigFileResponse) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

type ClusterConfigFileResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterConfigFileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterConfigFileResponse)(nil)).Elem()
}

func (o ClusterConfigFileResponseArrayOutput) ToClusterConfigFileResponseArrayOutput() ClusterConfigFileResponseArrayOutput {
	return o
}

func (o ClusterConfigFileResponseArrayOutput) ToClusterConfigFileResponseArrayOutputWithContext(ctx context.Context) ClusterConfigFileResponseArrayOutput {
	return o
}

func (o ClusterConfigFileResponseArrayOutput) Index(i pulumi.IntInput) ClusterConfigFileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterConfigFileResponse {
		return vs[0].([]ClusterConfigFileResponse)[vs[1].(int)]
	}).(ClusterConfigFileResponseOutput)
}

// The cluster create parameters.
type ClusterCreateProperties struct {
	// The cluster definition.
	ClusterDefinition *ClusterDefinition `pulumi:"clusterDefinition"`
	// The version of the cluster.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// The compute isolation properties.
	ComputeIsolationProperties *ComputeIsolationProperties `pulumi:"computeIsolationProperties"`
	// The compute profile.
	ComputeProfile *ComputeProfile `pulumi:"computeProfile"`
	// The disk encryption properties.
	DiskEncryptionProperties *DiskEncryptionProperties `pulumi:"diskEncryptionProperties"`
	// The encryption-in-transit properties.
	EncryptionInTransitProperties *EncryptionInTransitProperties `pulumi:"encryptionInTransitProperties"`
	// The cluster kafka rest proxy configuration.
	KafkaRestProperties *KafkaRestProperties `pulumi:"kafkaRestProperties"`
	// The minimal supported tls version.
	MinSupportedTlsVersion *string `pulumi:"minSupportedTlsVersion"`
	// The network properties.
	NetworkProperties *NetworkProperties `pulumi:"networkProperties"`
	// The type of operating system.
	OsType *string `pulumi:"osType"`
	// The private link configurations.
	PrivateLinkConfigurations []PrivateLinkConfiguration `pulumi:"privateLinkConfigurations"`
	// The security profile.
	SecurityProfile *SecurityProfile `pulumi:"securityProfile"`
	// The storage profile.
	StorageProfile *StorageProfile `pulumi:"storageProfile"`
	// The cluster tier.
	Tier *string `pulumi:"tier"`
}

// Defaults sets the appropriate defaults for ClusterCreateProperties
func (val *ClusterCreateProperties) Defaults() *ClusterCreateProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ComputeIsolationProperties = tmp.ComputeIsolationProperties.Defaults()

	tmp.DiskEncryptionProperties = tmp.DiskEncryptionProperties.Defaults()

	tmp.EncryptionInTransitProperties = tmp.EncryptionInTransitProperties.Defaults()

	if tmp.Tier == nil {
		tier_ := "Standard"
		tmp.Tier = &tier_
	}
	return &tmp
}

// ClusterCreatePropertiesInput is an input type that accepts ClusterCreatePropertiesArgs and ClusterCreatePropertiesOutput values.
// You can construct a concrete instance of `ClusterCreatePropertiesInput` via:
//
//	ClusterCreatePropertiesArgs{...}
type ClusterCreatePropertiesInput interface {
	pulumi.Input

	ToClusterCreatePropertiesOutput() ClusterCreatePropertiesOutput
	ToClusterCreatePropertiesOutputWithContext(context.Context) ClusterCreatePropertiesOutput
}

// The cluster create parameters.
type ClusterCreatePropertiesArgs struct {
	// The cluster definition.
	ClusterDefinition ClusterDefinitionPtrInput `pulumi:"clusterDefinition"`
	// The version of the cluster.
	ClusterVersion pulumi.StringPtrInput `pulumi:"clusterVersion"`
	// The compute isolation properties.
	ComputeIsolationProperties ComputeIsolationPropertiesPtrInput `pulumi:"computeIsolationProperties"`
	// The compute profile.
	ComputeProfile ComputeProfilePtrInput `pulumi:"computeProfile"`
	// The disk encryption properties.
	DiskEncryptionProperties DiskEncryptionPropertiesPtrInput `pulumi:"diskEncryptionProperties"`
	// The encryption-in-transit properties.
	EncryptionInTransitProperties EncryptionInTransitPropertiesPtrInput `pulumi:"encryptionInTransitProperties"`
	// The cluster kafka rest proxy configuration.
	KafkaRestProperties KafkaRestPropertiesPtrInput `pulumi:"kafkaRestProperties"`
	// The minimal supported tls version.
	MinSupportedTlsVersion pulumi.StringPtrInput `pulumi:"minSupportedTlsVersion"`
	// The network properties.
	NetworkProperties NetworkPropertiesPtrInput `pulumi:"networkProperties"`
	// The type of operating system.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The private link configurations.
	PrivateLinkConfigurations PrivateLinkConfigurationArrayInput `pulumi:"privateLinkConfigurations"`
	// The security profile.
	SecurityProfile SecurityProfilePtrInput `pulumi:"securityProfile"`
	// The storage profile.
	StorageProfile StorageProfilePtrInput `pulumi:"storageProfile"`
	// The cluster tier.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

// Defaults sets the appropriate defaults for ClusterCreatePropertiesArgs
func (val *ClusterCreatePropertiesArgs) Defaults() *ClusterCreatePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Tier == nil {
		tmp.Tier = pulumi.StringPtr("Standard")
	}
	return &tmp
}
func (ClusterCreatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCreateProperties)(nil)).Elem()
}

func (i ClusterCreatePropertiesArgs) ToClusterCreatePropertiesOutput() ClusterCreatePropertiesOutput {
	return i.ToClusterCreatePropertiesOutputWithContext(context.Background())
}

func (i ClusterCreatePropertiesArgs) ToClusterCreatePropertiesOutputWithContext(ctx context.Context) ClusterCreatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCreatePropertiesOutput)
}

func (i ClusterCreatePropertiesArgs) ToClusterCreatePropertiesPtrOutput() ClusterCreatePropertiesPtrOutput {
	return i.ToClusterCreatePropertiesPtrOutputWithContext(context.Background())
}

func (i ClusterCreatePropertiesArgs) ToClusterCreatePropertiesPtrOutputWithContext(ctx context.Context) ClusterCreatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCreatePropertiesOutput).ToClusterCreatePropertiesPtrOutputWithContext(ctx)
}

// ClusterCreatePropertiesPtrInput is an input type that accepts ClusterCreatePropertiesArgs, ClusterCreatePropertiesPtr and ClusterCreatePropertiesPtrOutput values.
// You can construct a concrete instance of `ClusterCreatePropertiesPtrInput` via:
//
//	        ClusterCreatePropertiesArgs{...}
//
//	or:
//
//	        nil
type ClusterCreatePropertiesPtrInput interface {
	pulumi.Input

	ToClusterCreatePropertiesPtrOutput() ClusterCreatePropertiesPtrOutput
	ToClusterCreatePropertiesPtrOutputWithContext(context.Context) ClusterCreatePropertiesPtrOutput
}

type clusterCreatePropertiesPtrType ClusterCreatePropertiesArgs

func ClusterCreatePropertiesPtr(v *ClusterCreatePropertiesArgs) ClusterCreatePropertiesPtrInput {
	return (*clusterCreatePropertiesPtrType)(v)
}

func (*clusterCreatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCreateProperties)(nil)).Elem()
}

func (i *clusterCreatePropertiesPtrType) ToClusterCreatePropertiesPtrOutput() ClusterCreatePropertiesPtrOutput {
	return i.ToClusterCreatePropertiesPtrOutputWithContext(context.Background())
}

func (i *clusterCreatePropertiesPtrType) ToClusterCreatePropertiesPtrOutputWithContext(ctx context.Context) ClusterCreatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCreatePropertiesPtrOutput)
}

// The cluster create parameters.
type ClusterCreatePropertiesOutput struct{ *pulumi.OutputState }

func (ClusterCreatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCreateProperties)(nil)).Elem()
}

func (o ClusterCreatePropertiesOutput) ToClusterCreatePropertiesOutput() ClusterCreatePropertiesOutput {
	return o
}

func (o ClusterCreatePropertiesOutput) ToClusterCreatePropertiesOutputWithContext(ctx context.Context) ClusterCreatePropertiesOutput {
	return o
}

func (o ClusterCreatePropertiesOutput) ToClusterCreatePropertiesPtrOutput() ClusterCreatePropertiesPtrOutput {
	return o.ToClusterCreatePropertiesPtrOutputWithContext(context.Background())
}

func (o ClusterCreatePropertiesOutput) ToClusterCreatePropertiesPtrOutputWithContext(ctx context.Context) ClusterCreatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterCreateProperties) *ClusterCreateProperties {
		return &v
	}).(ClusterCreatePropertiesPtrOutput)
}

// The cluster definition.
func (o ClusterCreatePropertiesOutput) ClusterDefinition() ClusterDefinitionPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *ClusterDefinition { return v.ClusterDefinition }).(ClusterDefinitionPtrOutput)
}

// The version of the cluster.
func (o ClusterCreatePropertiesOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *string { return v.ClusterVersion }).(pulumi.StringPtrOutput)
}

// The compute isolation properties.
func (o ClusterCreatePropertiesOutput) ComputeIsolationProperties() ComputeIsolationPropertiesPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *ComputeIsolationProperties { return v.ComputeIsolationProperties }).(ComputeIsolationPropertiesPtrOutput)
}

// The compute profile.
func (o ClusterCreatePropertiesOutput) ComputeProfile() ComputeProfilePtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *ComputeProfile { return v.ComputeProfile }).(ComputeProfilePtrOutput)
}

// The disk encryption properties.
func (o ClusterCreatePropertiesOutput) DiskEncryptionProperties() DiskEncryptionPropertiesPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *DiskEncryptionProperties { return v.DiskEncryptionProperties }).(DiskEncryptionPropertiesPtrOutput)
}

// The encryption-in-transit properties.
func (o ClusterCreatePropertiesOutput) EncryptionInTransitProperties() EncryptionInTransitPropertiesPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *EncryptionInTransitProperties { return v.EncryptionInTransitProperties }).(EncryptionInTransitPropertiesPtrOutput)
}

// The cluster kafka rest proxy configuration.
func (o ClusterCreatePropertiesOutput) KafkaRestProperties() KafkaRestPropertiesPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *KafkaRestProperties { return v.KafkaRestProperties }).(KafkaRestPropertiesPtrOutput)
}

// The minimal supported tls version.
func (o ClusterCreatePropertiesOutput) MinSupportedTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *string { return v.MinSupportedTlsVersion }).(pulumi.StringPtrOutput)
}

// The network properties.
func (o ClusterCreatePropertiesOutput) NetworkProperties() NetworkPropertiesPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *NetworkProperties { return v.NetworkProperties }).(NetworkPropertiesPtrOutput)
}

// The type of operating system.
func (o ClusterCreatePropertiesOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The private link configurations.
func (o ClusterCreatePropertiesOutput) PrivateLinkConfigurations() PrivateLinkConfigurationArrayOutput {
	return o.ApplyT(func(v ClusterCreateProperties) []PrivateLinkConfiguration { return v.PrivateLinkConfigurations }).(PrivateLinkConfigurationArrayOutput)
}

// The security profile.
func (o ClusterCreatePropertiesOutput) SecurityProfile() SecurityProfilePtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *SecurityProfile { return v.SecurityProfile }).(SecurityProfilePtrOutput)
}

// The storage profile.
func (o ClusterCreatePropertiesOutput) StorageProfile() StorageProfilePtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *StorageProfile { return v.StorageProfile }).(StorageProfilePtrOutput)
}

// The cluster tier.
func (o ClusterCreatePropertiesOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCreateProperties) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type ClusterCreatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ClusterCreatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterCreateProperties)(nil)).Elem()
}

func (o ClusterCreatePropertiesPtrOutput) ToClusterCreatePropertiesPtrOutput() ClusterCreatePropertiesPtrOutput {
	return o
}

func (o ClusterCreatePropertiesPtrOutput) ToClusterCreatePropertiesPtrOutputWithContext(ctx context.Context) ClusterCreatePropertiesPtrOutput {
	return o
}

func (o ClusterCreatePropertiesPtrOutput) Elem() ClusterCreatePropertiesOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) ClusterCreateProperties {
		if v != nil {
			return *v
		}
		var ret ClusterCreateProperties
		return ret
	}).(ClusterCreatePropertiesOutput)
}

// The cluster definition.
func (o ClusterCreatePropertiesPtrOutput) ClusterDefinition() ClusterDefinitionPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *ClusterDefinition {
		if v == nil {
			return nil
		}
		return v.ClusterDefinition
	}).(ClusterDefinitionPtrOutput)
}

// The version of the cluster.
func (o ClusterCreatePropertiesPtrOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterVersion
	}).(pulumi.StringPtrOutput)
}

// The compute isolation properties.
func (o ClusterCreatePropertiesPtrOutput) ComputeIsolationProperties() ComputeIsolationPropertiesPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *ComputeIsolationProperties {
		if v == nil {
			return nil
		}
		return v.ComputeIsolationProperties
	}).(ComputeIsolationPropertiesPtrOutput)
}

// The compute profile.
func (o ClusterCreatePropertiesPtrOutput) ComputeProfile() ComputeProfilePtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *ComputeProfile {
		if v == nil {
			return nil
		}
		return v.ComputeProfile
	}).(ComputeProfilePtrOutput)
}

// The disk encryption properties.
func (o ClusterCreatePropertiesPtrOutput) DiskEncryptionProperties() DiskEncryptionPropertiesPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *DiskEncryptionProperties {
		if v == nil {
			return nil
		}
		return v.DiskEncryptionProperties
	}).(DiskEncryptionPropertiesPtrOutput)
}

// The encryption-in-transit properties.
func (o ClusterCreatePropertiesPtrOutput) EncryptionInTransitProperties() EncryptionInTransitPropertiesPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *EncryptionInTransitProperties {
		if v == nil {
			return nil
		}
		return v.EncryptionInTransitProperties
	}).(EncryptionInTransitPropertiesPtrOutput)
}

// The cluster kafka rest proxy configuration.
func (o ClusterCreatePropertiesPtrOutput) KafkaRestProperties() KafkaRestPropertiesPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *KafkaRestProperties {
		if v == nil {
			return nil
		}
		return v.KafkaRestProperties
	}).(KafkaRestPropertiesPtrOutput)
}

// The minimal supported tls version.
func (o ClusterCreatePropertiesPtrOutput) MinSupportedTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.MinSupportedTlsVersion
	}).(pulumi.StringPtrOutput)
}

// The network properties.
func (o ClusterCreatePropertiesPtrOutput) NetworkProperties() NetworkPropertiesPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *NetworkProperties {
		if v == nil {
			return nil
		}
		return v.NetworkProperties
	}).(NetworkPropertiesPtrOutput)
}

// The type of operating system.
func (o ClusterCreatePropertiesPtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// The private link configurations.
func (o ClusterCreatePropertiesPtrOutput) PrivateLinkConfigurations() PrivateLinkConfigurationArrayOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) []PrivateLinkConfiguration {
		if v == nil {
			return nil
		}
		return v.PrivateLinkConfigurations
	}).(PrivateLinkConfigurationArrayOutput)
}

// The security profile.
func (o ClusterCreatePropertiesPtrOutput) SecurityProfile() SecurityProfilePtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *SecurityProfile {
		if v == nil {
			return nil
		}
		return v.SecurityProfile
	}).(SecurityProfilePtrOutput)
}

// The storage profile.
func (o ClusterCreatePropertiesPtrOutput) StorageProfile() StorageProfilePtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *StorageProfile {
		if v == nil {
			return nil
		}
		return v.StorageProfile
	}).(StorageProfilePtrOutput)
}

// The cluster tier.
func (o ClusterCreatePropertiesPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterCreateProperties) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The cluster definition.
type ClusterDefinition struct {
	// The link to the blueprint.
	Blueprint *string `pulumi:"blueprint"`
	// The versions of different services in the cluster.
	ComponentVersion map[string]string `pulumi:"componentVersion"`
	// The cluster configurations.
	Configurations interface{} `pulumi:"configurations"`
	// The type of cluster.
	Kind *string `pulumi:"kind"`
}

// ClusterDefinitionInput is an input type that accepts ClusterDefinitionArgs and ClusterDefinitionOutput values.
// You can construct a concrete instance of `ClusterDefinitionInput` via:
//
//	ClusterDefinitionArgs{...}
type ClusterDefinitionInput interface {
	pulumi.Input

	ToClusterDefinitionOutput() ClusterDefinitionOutput
	ToClusterDefinitionOutputWithContext(context.Context) ClusterDefinitionOutput
}

// The cluster definition.
type ClusterDefinitionArgs struct {
	// The link to the blueprint.
	Blueprint pulumi.StringPtrInput `pulumi:"blueprint"`
	// The versions of different services in the cluster.
	ComponentVersion pulumi.StringMapInput `pulumi:"componentVersion"`
	// The cluster configurations.
	Configurations pulumi.Input `pulumi:"configurations"`
	// The type of cluster.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ClusterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDefinition)(nil)).Elem()
}

func (i ClusterDefinitionArgs) ToClusterDefinitionOutput() ClusterDefinitionOutput {
	return i.ToClusterDefinitionOutputWithContext(context.Background())
}

func (i ClusterDefinitionArgs) ToClusterDefinitionOutputWithContext(ctx context.Context) ClusterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefinitionOutput)
}

func (i ClusterDefinitionArgs) ToClusterDefinitionPtrOutput() ClusterDefinitionPtrOutput {
	return i.ToClusterDefinitionPtrOutputWithContext(context.Background())
}

func (i ClusterDefinitionArgs) ToClusterDefinitionPtrOutputWithContext(ctx context.Context) ClusterDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefinitionOutput).ToClusterDefinitionPtrOutputWithContext(ctx)
}

// ClusterDefinitionPtrInput is an input type that accepts ClusterDefinitionArgs, ClusterDefinitionPtr and ClusterDefinitionPtrOutput values.
// You can construct a concrete instance of `ClusterDefinitionPtrInput` via:
//
//	        ClusterDefinitionArgs{...}
//
//	or:
//
//	        nil
type ClusterDefinitionPtrInput interface {
	pulumi.Input

	ToClusterDefinitionPtrOutput() ClusterDefinitionPtrOutput
	ToClusterDefinitionPtrOutputWithContext(context.Context) ClusterDefinitionPtrOutput
}

type clusterDefinitionPtrType ClusterDefinitionArgs

func ClusterDefinitionPtr(v *ClusterDefinitionArgs) ClusterDefinitionPtrInput {
	return (*clusterDefinitionPtrType)(v)
}

func (*clusterDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDefinition)(nil)).Elem()
}

func (i *clusterDefinitionPtrType) ToClusterDefinitionPtrOutput() ClusterDefinitionPtrOutput {
	return i.ToClusterDefinitionPtrOutputWithContext(context.Background())
}

func (i *clusterDefinitionPtrType) ToClusterDefinitionPtrOutputWithContext(ctx context.Context) ClusterDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterDefinitionPtrOutput)
}

// The cluster definition.
type ClusterDefinitionOutput struct{ *pulumi.OutputState }

func (ClusterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDefinition)(nil)).Elem()
}

func (o ClusterDefinitionOutput) ToClusterDefinitionOutput() ClusterDefinitionOutput {
	return o
}

func (o ClusterDefinitionOutput) ToClusterDefinitionOutputWithContext(ctx context.Context) ClusterDefinitionOutput {
	return o
}

func (o ClusterDefinitionOutput) ToClusterDefinitionPtrOutput() ClusterDefinitionPtrOutput {
	return o.ToClusterDefinitionPtrOutputWithContext(context.Background())
}

func (o ClusterDefinitionOutput) ToClusterDefinitionPtrOutputWithContext(ctx context.Context) ClusterDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterDefinition) *ClusterDefinition {
		return &v
	}).(ClusterDefinitionPtrOutput)
}

// The link to the blueprint.
func (o ClusterDefinitionOutput) Blueprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDefinition) *string { return v.Blueprint }).(pulumi.StringPtrOutput)
}

// The versions of different services in the cluster.
func (o ClusterDefinitionOutput) ComponentVersion() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterDefinition) map[string]string { return v.ComponentVersion }).(pulumi.StringMapOutput)
}

// The cluster configurations.
func (o ClusterDefinitionOutput) Configurations() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterDefinition) interface{} { return v.Configurations }).(pulumi.AnyOutput)
}

// The type of cluster.
func (o ClusterDefinitionOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDefinition) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ClusterDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ClusterDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterDefinition)(nil)).Elem()
}

func (o ClusterDefinitionPtrOutput) ToClusterDefinitionPtrOutput() ClusterDefinitionPtrOutput {
	return o
}

func (o ClusterDefinitionPtrOutput) ToClusterDefinitionPtrOutputWithContext(ctx context.Context) ClusterDefinitionPtrOutput {
	return o
}

func (o ClusterDefinitionPtrOutput) Elem() ClusterDefinitionOutput {
	return o.ApplyT(func(v *ClusterDefinition) ClusterDefinition {
		if v != nil {
			return *v
		}
		var ret ClusterDefinition
		return ret
	}).(ClusterDefinitionOutput)
}

// The link to the blueprint.
func (o ClusterDefinitionPtrOutput) Blueprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Blueprint
	}).(pulumi.StringPtrOutput)
}

// The versions of different services in the cluster.
func (o ClusterDefinitionPtrOutput) ComponentVersion() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ClusterDefinition) map[string]string {
		if v == nil {
			return nil
		}
		return v.ComponentVersion
	}).(pulumi.StringMapOutput)
}

// The cluster configurations.
func (o ClusterDefinitionPtrOutput) Configurations() pulumi.AnyOutput {
	return o.ApplyT(func(v *ClusterDefinition) interface{} {
		if v == nil {
			return nil
		}
		return v.Configurations
	}).(pulumi.AnyOutput)
}

// The type of cluster.
func (o ClusterDefinitionPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The cluster definition.
type ClusterDefinitionResponse struct {
	// The link to the blueprint.
	Blueprint *string `pulumi:"blueprint"`
	// The versions of different services in the cluster.
	ComponentVersion map[string]string `pulumi:"componentVersion"`
	// The cluster configurations.
	Configurations interface{} `pulumi:"configurations"`
	// The type of cluster.
	Kind *string `pulumi:"kind"`
}

// The cluster definition.
type ClusterDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ClusterDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterDefinitionResponse)(nil)).Elem()
}

func (o ClusterDefinitionResponseOutput) ToClusterDefinitionResponseOutput() ClusterDefinitionResponseOutput {
	return o
}

func (o ClusterDefinitionResponseOutput) ToClusterDefinitionResponseOutputWithContext(ctx context.Context) ClusterDefinitionResponseOutput {
	return o
}

// The link to the blueprint.
func (o ClusterDefinitionResponseOutput) Blueprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDefinitionResponse) *string { return v.Blueprint }).(pulumi.StringPtrOutput)
}

// The versions of different services in the cluster.
func (o ClusterDefinitionResponseOutput) ComponentVersion() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterDefinitionResponse) map[string]string { return v.ComponentVersion }).(pulumi.StringMapOutput)
}

// The cluster configurations.
func (o ClusterDefinitionResponseOutput) Configurations() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterDefinitionResponse) interface{} { return v.Configurations }).(pulumi.AnyOutput)
}

// The type of cluster.
func (o ClusterDefinitionResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterDefinitionResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The properties of cluster.
type ClusterGetPropertiesResponse struct {
	// The cluster definition.
	ClusterDefinition ClusterDefinitionResponse `pulumi:"clusterDefinition"`
	// The hdp version of the cluster.
	ClusterHdpVersion *string `pulumi:"clusterHdpVersion"`
	// The cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// The state of the cluster.
	ClusterState *string `pulumi:"clusterState"`
	// The version of the cluster.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// The compute isolation properties.
	ComputeIsolationProperties *ComputeIsolationPropertiesResponse `pulumi:"computeIsolationProperties"`
	// The compute profile.
	ComputeProfile *ComputeProfileResponse `pulumi:"computeProfile"`
	// The list of connectivity endpoints.
	ConnectivityEndpoints []ConnectivityEndpointResponse `pulumi:"connectivityEndpoints"`
	// The date on which the cluster was created.
	CreatedDate *string `pulumi:"createdDate"`
	// The disk encryption properties.
	DiskEncryptionProperties *DiskEncryptionPropertiesResponse `pulumi:"diskEncryptionProperties"`
	// The encryption-in-transit properties.
	EncryptionInTransitProperties *EncryptionInTransitPropertiesResponse `pulumi:"encryptionInTransitProperties"`
	// The list of errors.
	Errors []ErrorsResponse `pulumi:"errors"`
	// The excluded services config.
	ExcludedServicesConfig *ExcludedServicesConfigResponse `pulumi:"excludedServicesConfig"`
	// The cluster kafka rest proxy configuration.
	KafkaRestProperties *KafkaRestPropertiesResponse `pulumi:"kafkaRestProperties"`
	// The minimal supported tls version.
	MinSupportedTlsVersion *string `pulumi:"minSupportedTlsVersion"`
	// The network properties.
	NetworkProperties *NetworkPropertiesResponse `pulumi:"networkProperties"`
	// The type of operating system.
	OsType *string `pulumi:"osType"`
	// The list of private endpoint connections.
	PrivateEndpointConnections []PrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// The private link configurations.
	PrivateLinkConfigurations []PrivateLinkConfigurationResponse `pulumi:"privateLinkConfigurations"`
	// The provisioning state, which only appears in the response.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The quota information.
	QuotaInfo *QuotaInfoResponse `pulumi:"quotaInfo"`
	// The security profile.
	SecurityProfile *SecurityProfileResponse `pulumi:"securityProfile"`
	// The storage profile.
	StorageProfile *StorageProfileResponse `pulumi:"storageProfile"`
	// The cluster tier.
	Tier *string `pulumi:"tier"`
}

// Defaults sets the appropriate defaults for ClusterGetPropertiesResponse
func (val *ClusterGetPropertiesResponse) Defaults() *ClusterGetPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ComputeIsolationProperties = tmp.ComputeIsolationProperties.Defaults()

	tmp.DiskEncryptionProperties = tmp.DiskEncryptionProperties.Defaults()

	tmp.EncryptionInTransitProperties = tmp.EncryptionInTransitProperties.Defaults()

	return &tmp
}

// The properties of cluster.
type ClusterGetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ClusterGetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterGetPropertiesResponse)(nil)).Elem()
}

func (o ClusterGetPropertiesResponseOutput) ToClusterGetPropertiesResponseOutput() ClusterGetPropertiesResponseOutput {
	return o
}

func (o ClusterGetPropertiesResponseOutput) ToClusterGetPropertiesResponseOutputWithContext(ctx context.Context) ClusterGetPropertiesResponseOutput {
	return o
}

// The cluster definition.
func (o ClusterGetPropertiesResponseOutput) ClusterDefinition() ClusterDefinitionResponseOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) ClusterDefinitionResponse { return v.ClusterDefinition }).(ClusterDefinitionResponseOutput)
}

// The hdp version of the cluster.
func (o ClusterGetPropertiesResponseOutput) ClusterHdpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.ClusterHdpVersion }).(pulumi.StringPtrOutput)
}

// The cluster id.
func (o ClusterGetPropertiesResponseOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The state of the cluster.
func (o ClusterGetPropertiesResponseOutput) ClusterState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.ClusterState }).(pulumi.StringPtrOutput)
}

// The version of the cluster.
func (o ClusterGetPropertiesResponseOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.ClusterVersion }).(pulumi.StringPtrOutput)
}

// The compute isolation properties.
func (o ClusterGetPropertiesResponseOutput) ComputeIsolationProperties() ComputeIsolationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *ComputeIsolationPropertiesResponse {
		return v.ComputeIsolationProperties
	}).(ComputeIsolationPropertiesResponsePtrOutput)
}

// The compute profile.
func (o ClusterGetPropertiesResponseOutput) ComputeProfile() ComputeProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *ComputeProfileResponse { return v.ComputeProfile }).(ComputeProfileResponsePtrOutput)
}

// The list of connectivity endpoints.
func (o ClusterGetPropertiesResponseOutput) ConnectivityEndpoints() ConnectivityEndpointResponseArrayOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) []ConnectivityEndpointResponse { return v.ConnectivityEndpoints }).(ConnectivityEndpointResponseArrayOutput)
}

// The date on which the cluster was created.
func (o ClusterGetPropertiesResponseOutput) CreatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.CreatedDate }).(pulumi.StringPtrOutput)
}

// The disk encryption properties.
func (o ClusterGetPropertiesResponseOutput) DiskEncryptionProperties() DiskEncryptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *DiskEncryptionPropertiesResponse {
		return v.DiskEncryptionProperties
	}).(DiskEncryptionPropertiesResponsePtrOutput)
}

// The encryption-in-transit properties.
func (o ClusterGetPropertiesResponseOutput) EncryptionInTransitProperties() EncryptionInTransitPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *EncryptionInTransitPropertiesResponse {
		return v.EncryptionInTransitProperties
	}).(EncryptionInTransitPropertiesResponsePtrOutput)
}

// The list of errors.
func (o ClusterGetPropertiesResponseOutput) Errors() ErrorsResponseArrayOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) []ErrorsResponse { return v.Errors }).(ErrorsResponseArrayOutput)
}

// The excluded services config.
func (o ClusterGetPropertiesResponseOutput) ExcludedServicesConfig() ExcludedServicesConfigResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *ExcludedServicesConfigResponse { return v.ExcludedServicesConfig }).(ExcludedServicesConfigResponsePtrOutput)
}

// The cluster kafka rest proxy configuration.
func (o ClusterGetPropertiesResponseOutput) KafkaRestProperties() KafkaRestPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *KafkaRestPropertiesResponse { return v.KafkaRestProperties }).(KafkaRestPropertiesResponsePtrOutput)
}

// The minimal supported tls version.
func (o ClusterGetPropertiesResponseOutput) MinSupportedTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.MinSupportedTlsVersion }).(pulumi.StringPtrOutput)
}

// The network properties.
func (o ClusterGetPropertiesResponseOutput) NetworkProperties() NetworkPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *NetworkPropertiesResponse { return v.NetworkProperties }).(NetworkPropertiesResponsePtrOutput)
}

// The type of operating system.
func (o ClusterGetPropertiesResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The list of private endpoint connections.
func (o ClusterGetPropertiesResponseOutput) PrivateEndpointConnections() PrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) []PrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(PrivateEndpointConnectionResponseArrayOutput)
}

// The private link configurations.
func (o ClusterGetPropertiesResponseOutput) PrivateLinkConfigurations() PrivateLinkConfigurationResponseArrayOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) []PrivateLinkConfigurationResponse {
		return v.PrivateLinkConfigurations
	}).(PrivateLinkConfigurationResponseArrayOutput)
}

// The provisioning state, which only appears in the response.
func (o ClusterGetPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The quota information.
func (o ClusterGetPropertiesResponseOutput) QuotaInfo() QuotaInfoResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *QuotaInfoResponse { return v.QuotaInfo }).(QuotaInfoResponsePtrOutput)
}

// The security profile.
func (o ClusterGetPropertiesResponseOutput) SecurityProfile() SecurityProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *SecurityProfileResponse { return v.SecurityProfile }).(SecurityProfileResponsePtrOutput)
}

// The storage profile.
func (o ClusterGetPropertiesResponseOutput) StorageProfile() StorageProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *StorageProfileResponse { return v.StorageProfile }).(StorageProfileResponsePtrOutput)
}

// The cluster tier.
func (o ClusterGetPropertiesResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterGetPropertiesResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// Identity for the cluster.
type ClusterIdentity struct {
	// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentity `pulumi:"userAssignedIdentities"`
}

// ClusterIdentityInput is an input type that accepts ClusterIdentityArgs and ClusterIdentityOutput values.
// You can construct a concrete instance of `ClusterIdentityInput` via:
//
//	ClusterIdentityArgs{...}
type ClusterIdentityInput interface {
	pulumi.Input

	ToClusterIdentityOutput() ClusterIdentityOutput
	ToClusterIdentityOutputWithContext(context.Context) ClusterIdentityOutput
}

// Identity for the cluster.
type ClusterIdentityArgs struct {
	// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities UserAssignedIdentityMapInput `pulumi:"userAssignedIdentities"`
}

func (ClusterIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentity)(nil)).Elem()
}

func (i ClusterIdentityArgs) ToClusterIdentityOutput() ClusterIdentityOutput {
	return i.ToClusterIdentityOutputWithContext(context.Background())
}

func (i ClusterIdentityArgs) ToClusterIdentityOutputWithContext(ctx context.Context) ClusterIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOutput)
}

func (i ClusterIdentityArgs) ToClusterIdentityPtrOutput() ClusterIdentityPtrOutput {
	return i.ToClusterIdentityPtrOutputWithContext(context.Background())
}

func (i ClusterIdentityArgs) ToClusterIdentityPtrOutputWithContext(ctx context.Context) ClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityOutput).ToClusterIdentityPtrOutputWithContext(ctx)
}

// ClusterIdentityPtrInput is an input type that accepts ClusterIdentityArgs, ClusterIdentityPtr and ClusterIdentityPtrOutput values.
// You can construct a concrete instance of `ClusterIdentityPtrInput` via:
//
//	        ClusterIdentityArgs{...}
//
//	or:
//
//	        nil
type ClusterIdentityPtrInput interface {
	pulumi.Input

	ToClusterIdentityPtrOutput() ClusterIdentityPtrOutput
	ToClusterIdentityPtrOutputWithContext(context.Context) ClusterIdentityPtrOutput
}

type clusterIdentityPtrType ClusterIdentityArgs

func ClusterIdentityPtr(v *ClusterIdentityArgs) ClusterIdentityPtrInput {
	return (*clusterIdentityPtrType)(v)
}

func (*clusterIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIdentity)(nil)).Elem()
}

func (i *clusterIdentityPtrType) ToClusterIdentityPtrOutput() ClusterIdentityPtrOutput {
	return i.ToClusterIdentityPtrOutputWithContext(context.Background())
}

func (i *clusterIdentityPtrType) ToClusterIdentityPtrOutputWithContext(ctx context.Context) ClusterIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterIdentityPtrOutput)
}

// Identity for the cluster.
type ClusterIdentityOutput struct{ *pulumi.OutputState }

func (ClusterIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentity)(nil)).Elem()
}

func (o ClusterIdentityOutput) ToClusterIdentityOutput() ClusterIdentityOutput {
	return o
}

func (o ClusterIdentityOutput) ToClusterIdentityOutputWithContext(ctx context.Context) ClusterIdentityOutput {
	return o
}

func (o ClusterIdentityOutput) ToClusterIdentityPtrOutput() ClusterIdentityPtrOutput {
	return o.ToClusterIdentityPtrOutputWithContext(context.Background())
}

func (o ClusterIdentityOutput) ToClusterIdentityPtrOutputWithContext(ctx context.Context) ClusterIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterIdentity) *ClusterIdentity {
		return &v
	}).(ClusterIdentityPtrOutput)
}

// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
func (o ClusterIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ClusterIdentityOutput) UserAssignedIdentities() UserAssignedIdentityMapOutput {
	return o.ApplyT(func(v ClusterIdentity) map[string]UserAssignedIdentity { return v.UserAssignedIdentities }).(UserAssignedIdentityMapOutput)
}

type ClusterIdentityPtrOutput struct{ *pulumi.OutputState }

func (ClusterIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIdentity)(nil)).Elem()
}

func (o ClusterIdentityPtrOutput) ToClusterIdentityPtrOutput() ClusterIdentityPtrOutput {
	return o
}

func (o ClusterIdentityPtrOutput) ToClusterIdentityPtrOutputWithContext(ctx context.Context) ClusterIdentityPtrOutput {
	return o
}

func (o ClusterIdentityPtrOutput) Elem() ClusterIdentityOutput {
	return o.ApplyT(func(v *ClusterIdentity) ClusterIdentity {
		if v != nil {
			return *v
		}
		var ret ClusterIdentity
		return ret
	}).(ClusterIdentityOutput)
}

// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
func (o ClusterIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ClusterIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityMapOutput {
	return o.ApplyT(func(v *ClusterIdentity) map[string]UserAssignedIdentity {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityMapOutput)
}

// Identity for the cluster.
type ClusterIdentityResponse struct {
	// The principal id of cluster identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the cluster. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the cluster.
type ClusterIdentityResponseOutput struct{ *pulumi.OutputState }

func (ClusterIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterIdentityResponse)(nil)).Elem()
}

func (o ClusterIdentityResponseOutput) ToClusterIdentityResponseOutput() ClusterIdentityResponseOutput {
	return o
}

func (o ClusterIdentityResponseOutput) ToClusterIdentityResponseOutputWithContext(ctx context.Context) ClusterIdentityResponseOutput {
	return o
}

// The principal id of cluster identity. This property will only be provided for a system assigned identity.
func (o ClusterIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the cluster. This property will only be provided for a system assigned identity.
func (o ClusterIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
func (o ClusterIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ClusterIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ClusterIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ClusterIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterIdentityResponse)(nil)).Elem()
}

func (o ClusterIdentityResponsePtrOutput) ToClusterIdentityResponsePtrOutput() ClusterIdentityResponsePtrOutput {
	return o
}

func (o ClusterIdentityResponsePtrOutput) ToClusterIdentityResponsePtrOutputWithContext(ctx context.Context) ClusterIdentityResponsePtrOutput {
	return o
}

func (o ClusterIdentityResponsePtrOutput) Elem() ClusterIdentityResponseOutput {
	return o.ApplyT(func(v *ClusterIdentityResponse) ClusterIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ClusterIdentityResponse
		return ret
	}).(ClusterIdentityResponseOutput)
}

// The principal id of cluster identity. This property will only be provided for a system assigned identity.
func (o ClusterIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the cluster. This property will only be provided for a system assigned identity.
func (o ClusterIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the cluster. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities.
func (o ClusterIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the cluster. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ClusterIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ClusterIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogs struct {
	// True if stderror is enabled, otherwise false.
	StdErrorEnabled *bool `pulumi:"stdErrorEnabled"`
	// True if stdout is enabled, otherwise false.
	StdOutEnabled *bool `pulumi:"stdOutEnabled"`
}

// ClusterLogAnalyticsApplicationLogsInput is an input type that accepts ClusterLogAnalyticsApplicationLogsArgs and ClusterLogAnalyticsApplicationLogsOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsApplicationLogsInput` via:
//
//	ClusterLogAnalyticsApplicationLogsArgs{...}
type ClusterLogAnalyticsApplicationLogsInput interface {
	pulumi.Input

	ToClusterLogAnalyticsApplicationLogsOutput() ClusterLogAnalyticsApplicationLogsOutput
	ToClusterLogAnalyticsApplicationLogsOutputWithContext(context.Context) ClusterLogAnalyticsApplicationLogsOutput
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsArgs struct {
	// True if stderror is enabled, otherwise false.
	StdErrorEnabled pulumi.BoolPtrInput `pulumi:"stdErrorEnabled"`
	// True if stdout is enabled, otherwise false.
	StdOutEnabled pulumi.BoolPtrInput `pulumi:"stdOutEnabled"`
}

func (ClusterLogAnalyticsApplicationLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsOutput() ClusterLogAnalyticsApplicationLogsOutput {
	return i.ToClusterLogAnalyticsApplicationLogsOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsApplicationLogsOutput)
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return i.ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsApplicationLogsArgs) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsApplicationLogsOutput).ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx)
}

// ClusterLogAnalyticsApplicationLogsPtrInput is an input type that accepts ClusterLogAnalyticsApplicationLogsArgs, ClusterLogAnalyticsApplicationLogsPtr and ClusterLogAnalyticsApplicationLogsPtrOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsApplicationLogsPtrInput` via:
//
//	        ClusterLogAnalyticsApplicationLogsArgs{...}
//
//	or:
//
//	        nil
type ClusterLogAnalyticsApplicationLogsPtrInput interface {
	pulumi.Input

	ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput
	ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput
}

type clusterLogAnalyticsApplicationLogsPtrType ClusterLogAnalyticsApplicationLogsArgs

func ClusterLogAnalyticsApplicationLogsPtr(v *ClusterLogAnalyticsApplicationLogsArgs) ClusterLogAnalyticsApplicationLogsPtrInput {
	return (*clusterLogAnalyticsApplicationLogsPtrType)(v)
}

func (*clusterLogAnalyticsApplicationLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (i *clusterLogAnalyticsApplicationLogsPtrType) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return i.ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Background())
}

func (i *clusterLogAnalyticsApplicationLogsPtrType) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsOutput() ClusterLogAnalyticsApplicationLogsOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(context.Background())
}

func (o ClusterLogAnalyticsApplicationLogsOutput) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLogAnalyticsApplicationLogs) *ClusterLogAnalyticsApplicationLogs {
		return &v
	}).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogs) *bool { return v.StdErrorEnabled }).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogs) *bool { return v.StdOutEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsApplicationLogsPtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsApplicationLogs)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsPtrOutput) ToClusterLogAnalyticsApplicationLogsPtrOutput() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsPtrOutput) ToClusterLogAnalyticsApplicationLogsPtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsPtrOutput) Elem() ClusterLogAnalyticsApplicationLogsOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogs) ClusterLogAnalyticsApplicationLogs {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsApplicationLogs
		return ret
	}).(ClusterLogAnalyticsApplicationLogsOutput)
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsPtrOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogs) *bool {
		if v == nil {
			return nil
		}
		return v.StdErrorEnabled
	}).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsPtrOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogs) *bool {
		if v == nil {
			return nil
		}
		return v.StdOutEnabled
	}).(pulumi.BoolPtrOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsResponse struct {
	// True if stderror is enabled, otherwise false.
	StdErrorEnabled *bool `pulumi:"stdErrorEnabled"`
	// True if stdout is enabled, otherwise false.
	StdOutEnabled *bool `pulumi:"stdOutEnabled"`
}

// Collection of logs to be enabled or disabled for log analytics.
type ClusterLogAnalyticsApplicationLogsResponseOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsApplicationLogsResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsResponseOutput) ToClusterLogAnalyticsApplicationLogsResponseOutput() ClusterLogAnalyticsApplicationLogsResponseOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsResponseOutput) ToClusterLogAnalyticsApplicationLogsResponseOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsResponseOutput {
	return o
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponseOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogsResponse) *bool { return v.StdErrorEnabled }).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponseOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsApplicationLogsResponse) *bool { return v.StdOutEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsApplicationLogsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsApplicationLogsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsApplicationLogsResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) ToClusterLogAnalyticsApplicationLogsResponsePtrOutput() ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) ToClusterLogAnalyticsApplicationLogsResponsePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) Elem() ClusterLogAnalyticsApplicationLogsResponseOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogsResponse) ClusterLogAnalyticsApplicationLogsResponse {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsApplicationLogsResponse
		return ret
	}).(ClusterLogAnalyticsApplicationLogsResponseOutput)
}

// True if stderror is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) StdErrorEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StdErrorEnabled
	}).(pulumi.BoolPtrOutput)
}

// True if stdout is enabled, otherwise false.
func (o ClusterLogAnalyticsApplicationLogsResponsePtrOutput) StdOutEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsApplicationLogsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StdOutEnabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfile struct {
	// Collection of logs to be enabled or disabled for log analytics.
	ApplicationLogs *ClusterLogAnalyticsApplicationLogs `pulumi:"applicationLogs"`
	// True if log analytics is enabled for the cluster, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// True if metrics are enabled, otherwise false.
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
}

// ClusterLogAnalyticsProfileInput is an input type that accepts ClusterLogAnalyticsProfileArgs and ClusterLogAnalyticsProfileOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsProfileInput` via:
//
//	ClusterLogAnalyticsProfileArgs{...}
type ClusterLogAnalyticsProfileInput interface {
	pulumi.Input

	ToClusterLogAnalyticsProfileOutput() ClusterLogAnalyticsProfileOutput
	ToClusterLogAnalyticsProfileOutputWithContext(context.Context) ClusterLogAnalyticsProfileOutput
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileArgs struct {
	// Collection of logs to be enabled or disabled for log analytics.
	ApplicationLogs ClusterLogAnalyticsApplicationLogsPtrInput `pulumi:"applicationLogs"`
	// True if log analytics is enabled for the cluster, otherwise false.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// True if metrics are enabled, otherwise false.
	MetricsEnabled pulumi.BoolPtrInput `pulumi:"metricsEnabled"`
}

func (ClusterLogAnalyticsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfileOutput() ClusterLogAnalyticsProfileOutput {
	return i.ToClusterLogAnalyticsProfileOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsProfileOutput)
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return i.ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i ClusterLogAnalyticsProfileArgs) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsProfileOutput).ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx)
}

// ClusterLogAnalyticsProfilePtrInput is an input type that accepts ClusterLogAnalyticsProfileArgs, ClusterLogAnalyticsProfilePtr and ClusterLogAnalyticsProfilePtrOutput values.
// You can construct a concrete instance of `ClusterLogAnalyticsProfilePtrInput` via:
//
//	        ClusterLogAnalyticsProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterLogAnalyticsProfilePtrInput interface {
	pulumi.Input

	ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput
	ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Context) ClusterLogAnalyticsProfilePtrOutput
}

type clusterLogAnalyticsProfilePtrType ClusterLogAnalyticsProfileArgs

func ClusterLogAnalyticsProfilePtr(v *ClusterLogAnalyticsProfileArgs) ClusterLogAnalyticsProfilePtrInput {
	return (*clusterLogAnalyticsProfilePtrType)(v)
}

func (*clusterLogAnalyticsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (i *clusterLogAnalyticsProfilePtrType) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return i.ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i *clusterLogAnalyticsProfilePtrType) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterLogAnalyticsProfilePtrOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfileOutput() ClusterLogAnalyticsProfileOutput {
	return o
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileOutput {
	return o
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return o.ToClusterLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (o ClusterLogAnalyticsProfileOutput) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterLogAnalyticsProfile) *ClusterLogAnalyticsProfile {
		return &v
	}).(ClusterLogAnalyticsProfilePtrOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfileOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfile) *ClusterLogAnalyticsApplicationLogs { return v.ApplicationLogs }).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfileOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfile) *bool { return v.MetricsEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfilePtrOutput) ToClusterLogAnalyticsProfilePtrOutput() ClusterLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfilePtrOutput) ToClusterLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfilePtrOutput) Elem() ClusterLogAnalyticsProfileOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) ClusterLogAnalyticsProfile {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsProfile
		return ret
	}).(ClusterLogAnalyticsProfileOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfilePtrOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) *ClusterLogAnalyticsApplicationLogs {
		if v == nil {
			return nil
		}
		return v.ApplicationLogs
	}).(ClusterLogAnalyticsApplicationLogsPtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfilePtrOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return v.MetricsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileResponse struct {
	// Collection of logs to be enabled or disabled for log analytics.
	ApplicationLogs *ClusterLogAnalyticsApplicationLogsResponse `pulumi:"applicationLogs"`
	// True if log analytics is enabled for the cluster, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// True if metrics are enabled, otherwise false.
	MetricsEnabled *bool `pulumi:"metricsEnabled"`
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
type ClusterLogAnalyticsProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterLogAnalyticsProfileResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfileResponseOutput) ToClusterLogAnalyticsProfileResponseOutput() ClusterLogAnalyticsProfileResponseOutput {
	return o
}

func (o ClusterLogAnalyticsProfileResponseOutput) ToClusterLogAnalyticsProfileResponseOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileResponseOutput {
	return o
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfileResponseOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfileResponse) *ClusterLogAnalyticsApplicationLogsResponse {
		return v.ApplicationLogs
	}).(ClusterLogAnalyticsApplicationLogsResponsePtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfileResponseOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterLogAnalyticsProfileResponse) *bool { return v.MetricsEnabled }).(pulumi.BoolPtrOutput)
}

type ClusterLogAnalyticsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterLogAnalyticsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterLogAnalyticsProfileResponse)(nil)).Elem()
}

func (o ClusterLogAnalyticsProfileResponsePtrOutput) ToClusterLogAnalyticsProfileResponsePtrOutput() ClusterLogAnalyticsProfileResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfileResponsePtrOutput) ToClusterLogAnalyticsProfileResponsePtrOutputWithContext(ctx context.Context) ClusterLogAnalyticsProfileResponsePtrOutput {
	return o
}

func (o ClusterLogAnalyticsProfileResponsePtrOutput) Elem() ClusterLogAnalyticsProfileResponseOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) ClusterLogAnalyticsProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterLogAnalyticsProfileResponse
		return ret
	}).(ClusterLogAnalyticsProfileResponseOutput)
}

// Collection of logs to be enabled or disabled for log analytics.
func (o ClusterLogAnalyticsProfileResponsePtrOutput) ApplicationLogs() ClusterLogAnalyticsApplicationLogsResponsePtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) *ClusterLogAnalyticsApplicationLogsResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationLogs
	}).(ClusterLogAnalyticsApplicationLogsResponsePtrOutput)
}

// True if log analytics is enabled for the cluster, otherwise false.
func (o ClusterLogAnalyticsProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// True if metrics are enabled, otherwise false.
func (o ClusterLogAnalyticsProfileResponsePtrOutput) MetricsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterLogAnalyticsProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MetricsEnabled
	}).(pulumi.BoolPtrOutput)
}

// The compute profile.
type ClusterPoolComputeProfile struct {
	// The list of Availability zones to use for AKS VMSS nodes.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The nodes definitions.
	Nodes []NodeProfile `pulumi:"nodes"`
}

// ClusterPoolComputeProfileInput is an input type that accepts ClusterPoolComputeProfileArgs and ClusterPoolComputeProfileOutput values.
// You can construct a concrete instance of `ClusterPoolComputeProfileInput` via:
//
//	ClusterPoolComputeProfileArgs{...}
type ClusterPoolComputeProfileInput interface {
	pulumi.Input

	ToClusterPoolComputeProfileOutput() ClusterPoolComputeProfileOutput
	ToClusterPoolComputeProfileOutputWithContext(context.Context) ClusterPoolComputeProfileOutput
}

// The compute profile.
type ClusterPoolComputeProfileArgs struct {
	// The list of Availability zones to use for AKS VMSS nodes.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The nodes definitions.
	Nodes NodeProfileArrayInput `pulumi:"nodes"`
}

func (ClusterPoolComputeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolComputeProfile)(nil)).Elem()
}

func (i ClusterPoolComputeProfileArgs) ToClusterPoolComputeProfileOutput() ClusterPoolComputeProfileOutput {
	return i.ToClusterPoolComputeProfileOutputWithContext(context.Background())
}

func (i ClusterPoolComputeProfileArgs) ToClusterPoolComputeProfileOutputWithContext(ctx context.Context) ClusterPoolComputeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolComputeProfileOutput)
}

// The compute profile.
type ClusterPoolComputeProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolComputeProfile)(nil)).Elem()
}

func (o ClusterPoolComputeProfileOutput) ToClusterPoolComputeProfileOutput() ClusterPoolComputeProfileOutput {
	return o
}

func (o ClusterPoolComputeProfileOutput) ToClusterPoolComputeProfileOutputWithContext(ctx context.Context) ClusterPoolComputeProfileOutput {
	return o
}

// The list of Availability zones to use for AKS VMSS nodes.
func (o ClusterPoolComputeProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolComputeProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The nodes definitions.
func (o ClusterPoolComputeProfileOutput) Nodes() NodeProfileArrayOutput {
	return o.ApplyT(func(v ClusterPoolComputeProfile) []NodeProfile { return v.Nodes }).(NodeProfileArrayOutput)
}

// The compute profile.
type ClusterPoolComputeProfileResponse struct {
	// The list of Availability zones to use for AKS VMSS nodes.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The nodes definitions.
	Nodes []NodeProfileResponse `pulumi:"nodes"`
}

// The compute profile.
type ClusterPoolComputeProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterPoolComputeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolComputeProfileResponse)(nil)).Elem()
}

func (o ClusterPoolComputeProfileResponseOutput) ToClusterPoolComputeProfileResponseOutput() ClusterPoolComputeProfileResponseOutput {
	return o
}

func (o ClusterPoolComputeProfileResponseOutput) ToClusterPoolComputeProfileResponseOutputWithContext(ctx context.Context) ClusterPoolComputeProfileResponseOutput {
	return o
}

// The list of Availability zones to use for AKS VMSS nodes.
func (o ClusterPoolComputeProfileResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolComputeProfileResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The nodes definitions.
func (o ClusterPoolComputeProfileResponseOutput) Nodes() NodeProfileResponseArrayOutput {
	return o.ApplyT(func(v ClusterPoolComputeProfileResponse) []NodeProfileResponse { return v.Nodes }).(NodeProfileResponseArrayOutput)
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesClusterPoolProfile struct {
	// Cluster pool version is a 2-part version.
	ClusterPoolVersion string `pulumi:"clusterPoolVersion"`
	// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
	PublicIpTag *IpTag `pulumi:"publicIpTag"`
}

// ClusterPoolResourcePropertiesClusterPoolProfileInput is an input type that accepts ClusterPoolResourcePropertiesClusterPoolProfileArgs and ClusterPoolResourcePropertiesClusterPoolProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesClusterPoolProfileInput` via:
//
//	ClusterPoolResourcePropertiesClusterPoolProfileArgs{...}
type ClusterPoolResourcePropertiesClusterPoolProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesClusterPoolProfileOutput() ClusterPoolResourcePropertiesClusterPoolProfileOutput
	ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesClusterPoolProfileOutput
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesClusterPoolProfileArgs struct {
	// Cluster pool version is a 2-part version.
	ClusterPoolVersion pulumi.StringInput `pulumi:"clusterPoolVersion"`
	// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
	PublicIpTag IpTagPtrInput `pulumi:"publicIpTag"`
}

func (ClusterPoolResourcePropertiesClusterPoolProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfileOutput() ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return i.ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesClusterPoolProfileOutput)
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesClusterPoolProfileArgs) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesClusterPoolProfileOutput).ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx)
}

// ClusterPoolResourcePropertiesClusterPoolProfilePtrInput is an input type that accepts ClusterPoolResourcePropertiesClusterPoolProfileArgs, ClusterPoolResourcePropertiesClusterPoolProfilePtr and ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesClusterPoolProfilePtrInput` via:
//
//	        ClusterPoolResourcePropertiesClusterPoolProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolResourcePropertiesClusterPoolProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput
	ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput
}

type clusterPoolResourcePropertiesClusterPoolProfilePtrType ClusterPoolResourcePropertiesClusterPoolProfileArgs

func ClusterPoolResourcePropertiesClusterPoolProfilePtr(v *ClusterPoolResourcePropertiesClusterPoolProfileArgs) ClusterPoolResourcePropertiesClusterPoolProfilePtrInput {
	return (*clusterPoolResourcePropertiesClusterPoolProfilePtrType)(v)
}

func (*clusterPoolResourcePropertiesClusterPoolProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (i *clusterPoolResourcePropertiesClusterPoolProfilePtrType) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolResourcePropertiesClusterPoolProfilePtrType) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput)
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesClusterPoolProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesClusterPoolProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfileOutput() ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o.ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolResourcePropertiesClusterPoolProfile) *ClusterPoolResourcePropertiesClusterPoolProfile {
		return &v
	}).(ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput)
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) ClusterPoolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesClusterPoolProfile) string { return v.ClusterPoolVersion }).(pulumi.StringOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
func (o ClusterPoolResourcePropertiesClusterPoolProfileOutput) PublicIpTag() IpTagPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesClusterPoolProfile) *IpTag { return v.PublicIpTag }).(IpTagPtrOutput)
}

type ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) Elem() ClusterPoolResourcePropertiesClusterPoolProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesClusterPoolProfile) ClusterPoolResourcePropertiesClusterPoolProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesClusterPoolProfile
		return ret
	}).(ClusterPoolResourcePropertiesClusterPoolProfileOutput)
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) ClusterPoolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesClusterPoolProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterPoolVersion
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
func (o ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput) PublicIpTag() IpTagPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesClusterPoolProfile) *IpTag {
		if v == nil {
			return nil
		}
		return v.PublicIpTag
	}).(IpTagPtrOutput)
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesComputeProfile struct {
	// The list of Availability zones to use for AKS VMSS nodes.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// ClusterPoolResourcePropertiesComputeProfileInput is an input type that accepts ClusterPoolResourcePropertiesComputeProfileArgs and ClusterPoolResourcePropertiesComputeProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesComputeProfileInput` via:
//
//	ClusterPoolResourcePropertiesComputeProfileArgs{...}
type ClusterPoolResourcePropertiesComputeProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesComputeProfileOutput() ClusterPoolResourcePropertiesComputeProfileOutput
	ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesComputeProfileOutput
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesComputeProfileArgs struct {
	// The list of Availability zones to use for AKS VMSS nodes.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The virtual machine SKU.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (ClusterPoolResourcePropertiesComputeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesComputeProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesComputeProfileArgs) ToClusterPoolResourcePropertiesComputeProfileOutput() ClusterPoolResourcePropertiesComputeProfileOutput {
	return i.ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesComputeProfileArgs) ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesComputeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesComputeProfileOutput)
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesComputeProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesComputeProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesComputeProfileOutput) ToClusterPoolResourcePropertiesComputeProfileOutput() ClusterPoolResourcePropertiesComputeProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesComputeProfileOutput) ToClusterPoolResourcePropertiesComputeProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesComputeProfileOutput {
	return o
}

// The list of Availability zones to use for AKS VMSS nodes.
func (o ClusterPoolResourcePropertiesComputeProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesComputeProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The virtual machine SKU.
func (o ClusterPoolResourcePropertiesComputeProfileOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesComputeProfile) string { return v.VmSize }).(pulumi.StringOutput)
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesLogAnalyticsProfile struct {
	// True if log analytics is enabled for cluster pool, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// Log analytics workspace to associate with the OMS agent.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// ClusterPoolResourcePropertiesLogAnalyticsProfileInput is an input type that accepts ClusterPoolResourcePropertiesLogAnalyticsProfileArgs and ClusterPoolResourcePropertiesLogAnalyticsProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesLogAnalyticsProfileInput` via:
//
//	ClusterPoolResourcePropertiesLogAnalyticsProfileArgs{...}
type ClusterPoolResourcePropertiesLogAnalyticsProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput
	ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfileOutput
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesLogAnalyticsProfileArgs struct {
	// True if log analytics is enabled for cluster pool, otherwise false.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Log analytics workspace to associate with the OMS agent.
	WorkspaceId pulumi.StringPtrInput `pulumi:"workspaceId"`
}

func (ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return i.ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput)
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput).ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx)
}

// ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput is an input type that accepts ClusterPoolResourcePropertiesLogAnalyticsProfileArgs, ClusterPoolResourcePropertiesLogAnalyticsProfilePtr and ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput` via:
//
//	        ClusterPoolResourcePropertiesLogAnalyticsProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput
	ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput
}

type clusterPoolResourcePropertiesLogAnalyticsProfilePtrType ClusterPoolResourcePropertiesLogAnalyticsProfileArgs

func ClusterPoolResourcePropertiesLogAnalyticsProfilePtr(v *ClusterPoolResourcePropertiesLogAnalyticsProfileArgs) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrInput {
	return (*clusterPoolResourcePropertiesLogAnalyticsProfilePtrType)(v)
}

func (*clusterPoolResourcePropertiesLogAnalyticsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (i *clusterPoolResourcePropertiesLogAnalyticsProfilePtrType) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolResourcePropertiesLogAnalyticsProfilePtrType) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput)
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesLogAnalyticsProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o.ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolResourcePropertiesLogAnalyticsProfile) *ClusterPoolResourcePropertiesLogAnalyticsProfile {
		return &v
	}).(ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput)
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesLogAnalyticsProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfileOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesLogAnalyticsProfile) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) Elem() ClusterPoolResourcePropertiesLogAnalyticsProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesLogAnalyticsProfile) ClusterPoolResourcePropertiesLogAnalyticsProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesLogAnalyticsProfile
		return ret
	}).(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput)
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesLogAnalyticsProfile) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesNetworkProfile struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
	ApiServerAuthorizedIpRanges []string `pulumi:"apiServerAuthorizedIpRanges"`
	// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
	EnablePrivateApiServer *bool `pulumi:"enablePrivateApiServer"`
	// This can only be set at cluster pool creation time and cannot be changed later.
	OutboundType *string `pulumi:"outboundType"`
	// Cluster pool subnet resource id.
	SubnetId string `pulumi:"subnetId"`
}

// Defaults sets the appropriate defaults for ClusterPoolResourcePropertiesNetworkProfile
func (val *ClusterPoolResourcePropertiesNetworkProfile) Defaults() *ClusterPoolResourcePropertiesNetworkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OutboundType == nil {
		outboundType_ := "loadBalancer"
		tmp.OutboundType = &outboundType_
	}
	return &tmp
}

// ClusterPoolResourcePropertiesNetworkProfileInput is an input type that accepts ClusterPoolResourcePropertiesNetworkProfileArgs and ClusterPoolResourcePropertiesNetworkProfileOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesNetworkProfileInput` via:
//
//	ClusterPoolResourcePropertiesNetworkProfileArgs{...}
type ClusterPoolResourcePropertiesNetworkProfileInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesNetworkProfileOutput() ClusterPoolResourcePropertiesNetworkProfileOutput
	ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(context.Context) ClusterPoolResourcePropertiesNetworkProfileOutput
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesNetworkProfileArgs struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
	ApiServerAuthorizedIpRanges pulumi.StringArrayInput `pulumi:"apiServerAuthorizedIpRanges"`
	// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
	EnablePrivateApiServer pulumi.BoolPtrInput `pulumi:"enablePrivateApiServer"`
	// This can only be set at cluster pool creation time and cannot be changed later.
	OutboundType pulumi.StringPtrInput `pulumi:"outboundType"`
	// Cluster pool subnet resource id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

// Defaults sets the appropriate defaults for ClusterPoolResourcePropertiesNetworkProfileArgs
func (val *ClusterPoolResourcePropertiesNetworkProfileArgs) Defaults() *ClusterPoolResourcePropertiesNetworkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OutboundType == nil {
		tmp.OutboundType = pulumi.StringPtr("loadBalancer")
	}
	return &tmp
}
func (ClusterPoolResourcePropertiesNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfileOutput() ClusterPoolResourcePropertiesNetworkProfileOutput {
	return i.ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesNetworkProfileOutput)
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolResourcePropertiesNetworkProfileArgs) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesNetworkProfileOutput).ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx)
}

// ClusterPoolResourcePropertiesNetworkProfilePtrInput is an input type that accepts ClusterPoolResourcePropertiesNetworkProfileArgs, ClusterPoolResourcePropertiesNetworkProfilePtr and ClusterPoolResourcePropertiesNetworkProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolResourcePropertiesNetworkProfilePtrInput` via:
//
//	        ClusterPoolResourcePropertiesNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolResourcePropertiesNetworkProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput
	ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput
}

type clusterPoolResourcePropertiesNetworkProfilePtrType ClusterPoolResourcePropertiesNetworkProfileArgs

func ClusterPoolResourcePropertiesNetworkProfilePtr(v *ClusterPoolResourcePropertiesNetworkProfileArgs) ClusterPoolResourcePropertiesNetworkProfilePtrInput {
	return (*clusterPoolResourcePropertiesNetworkProfilePtrType)(v)
}

func (*clusterPoolResourcePropertiesNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (i *clusterPoolResourcePropertiesNetworkProfilePtrType) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return i.ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolResourcePropertiesNetworkProfilePtrType) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolResourcePropertiesNetworkProfilePtrOutput)
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesNetworkProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfileOutput() ClusterPoolResourcePropertiesNetworkProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o.ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolResourcePropertiesNetworkProfile) *ClusterPoolResourcePropertiesNetworkProfile {
		return &v
	}).(ClusterPoolResourcePropertiesNetworkProfilePtrOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) []string { return v.ApiServerAuthorizedIpRanges }).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) *bool { return v.EnablePrivateApiServer }).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesNetworkProfileOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesNetworkProfile) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ClusterPoolResourcePropertiesNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutput() ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) Elem() ClusterPoolResourcePropertiesNetworkProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) ClusterPoolResourcePropertiesNetworkProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesNetworkProfile
		return ret
	}).(ClusterPoolResourcePropertiesNetworkProfileOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ApiServerAuthorizedIpRanges
	}).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateApiServer
	}).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesNetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Properties of underlying AKS cluster.
type ClusterPoolResourcePropertiesResponseAksClusterProfile struct {
	// Identity properties of the AKS cluster agentpool MSI
	AksClusterAgentPoolIdentityProfile *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile `pulumi:"aksClusterAgentPoolIdentityProfile"`
	// ARM Resource ID of the AKS cluster
	AksClusterResourceId *string `pulumi:"aksClusterResourceId"`
	// AKS control plane and default node pool version of this ClusterPool
	AksVersion string `pulumi:"aksVersion"`
}

// Properties of underlying AKS cluster.
type ClusterPoolResourcePropertiesResponseAksClusterProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseAksClusterProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) ToClusterPoolResourcePropertiesResponseAksClusterProfileOutput() ClusterPoolResourcePropertiesResponseAksClusterProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) ToClusterPoolResourcePropertiesResponseAksClusterProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseAksClusterProfileOutput {
	return o
}

// Identity properties of the AKS cluster agentpool MSI
func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) AksClusterAgentPoolIdentityProfile() AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseAksClusterProfile) *AksClusterProfileResponseAksClusterAgentPoolIdentityProfile {
		return v.AksClusterAgentPoolIdentityProfile
	}).(AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput)
}

// ARM Resource ID of the AKS cluster
func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) AksClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseAksClusterProfile) *string { return v.AksClusterResourceId }).(pulumi.StringPtrOutput)
}

// AKS control plane and default node pool version of this ClusterPool
func (o ClusterPoolResourcePropertiesResponseAksClusterProfileOutput) AksVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseAksClusterProfile) string { return v.AksVersion }).(pulumi.StringOutput)
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesResponseClusterPoolProfile struct {
	// Cluster pool version is a 2-part version.
	ClusterPoolVersion string `pulumi:"clusterPoolVersion"`
	// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
	PublicIpTag *IpTagResponse `pulumi:"publicIpTag"`
}

// CLuster pool profile.
type ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfileOutput() ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput {
	return o
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) ClusterPoolVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseClusterPoolProfile) string { return v.ClusterPoolVersion }).(pulumi.StringOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
func (o ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput) PublicIpTag() IpTagResponsePtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseClusterPoolProfile) *IpTagResponse { return v.PublicIpTag }).(IpTagResponsePtrOutput)
}

type ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesResponseClusterPoolProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput() ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ToClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) Elem() ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseClusterPoolProfile) ClusterPoolResourcePropertiesResponseClusterPoolProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesResponseClusterPoolProfile
		return ret
	}).(ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput)
}

// Cluster pool version is a 2-part version.
func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) ClusterPoolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseClusterPoolProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterPoolVersion
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsightOnAks ClusterPools and Clusters.
func (o ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput) PublicIpTag() IpTagResponsePtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseClusterPoolProfile) *IpTagResponse {
		if v == nil {
			return nil
		}
		return v.PublicIpTag
	}).(IpTagResponsePtrOutput)
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesResponseComputeProfile struct {
	// The list of Availability zones to use for AKS VMSS nodes.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of virtual machines.
	Count int `pulumi:"count"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// CLuster pool compute profile.
type ClusterPoolResourcePropertiesResponseComputeProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseComputeProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) ToClusterPoolResourcePropertiesResponseComputeProfileOutput() ClusterPoolResourcePropertiesResponseComputeProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) ToClusterPoolResourcePropertiesResponseComputeProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseComputeProfileOutput {
	return o
}

// The list of Availability zones to use for AKS VMSS nodes.
func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseComputeProfile) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The number of virtual machines.
func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseComputeProfile) int { return v.Count }).(pulumi.IntOutput)
}

// The virtual machine SKU.
func (o ClusterPoolResourcePropertiesResponseComputeProfileOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseComputeProfile) string { return v.VmSize }).(pulumi.StringOutput)
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesResponseLogAnalyticsProfile struct {
	// True if log analytics is enabled for cluster pool, otherwise false.
	Enabled bool `pulumi:"enabled"`
	// Log analytics workspace to associate with the OMS agent.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// Cluster pool log analytics profile to enable OMS agent for AKS cluster.
type ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput() ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput {
	return o
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

type ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesResponseLogAnalyticsProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput() ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) ToClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) Elem() ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) ClusterPoolResourcePropertiesResponseLogAnalyticsProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesResponseLogAnalyticsProfile
		return ret
	}).(ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput)
}

// True if log analytics is enabled for cluster pool, otherwise false.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Log analytics workspace to associate with the OMS agent.
func (o ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseLogAnalyticsProfile) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesResponseNetworkProfile struct {
	// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
	ApiServerAuthorizedIpRanges []string `pulumi:"apiServerAuthorizedIpRanges"`
	// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
	EnablePrivateApiServer *bool `pulumi:"enablePrivateApiServer"`
	// This can only be set at cluster pool creation time and cannot be changed later.
	OutboundType *string `pulumi:"outboundType"`
	// Cluster pool subnet resource id.
	SubnetId string `pulumi:"subnetId"`
}

// Defaults sets the appropriate defaults for ClusterPoolResourcePropertiesResponseNetworkProfile
func (val *ClusterPoolResourcePropertiesResponseNetworkProfile) Defaults() *ClusterPoolResourcePropertiesResponseNetworkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OutboundType == nil {
		outboundType_ := "loadBalancer"
		tmp.OutboundType = &outboundType_
	}
	return &tmp
}

// Cluster pool network profile.
type ClusterPoolResourcePropertiesResponseNetworkProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolResourcePropertiesResponseNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ToClusterPoolResourcePropertiesResponseNetworkProfileOutput() ClusterPoolResourcePropertiesResponseNetworkProfileOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ToClusterPoolResourcePropertiesResponseNetworkProfileOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseNetworkProfileOutput {
	return o
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) []string {
		return v.ApiServerAuthorizedIpRanges
	}).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) *bool { return v.EnablePrivateApiServer }).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) *string { return v.OutboundType }).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesResponseNetworkProfileOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolResourcePropertiesResponseNetworkProfile) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolResourcePropertiesResponseNetworkProfile)(nil)).Elem()
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput() ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ToClusterPoolResourcePropertiesResponseNetworkProfilePtrOutputWithContext(ctx context.Context) ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput {
	return o
}

func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) Elem() ClusterPoolResourcePropertiesResponseNetworkProfileOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) ClusterPoolResourcePropertiesResponseNetworkProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolResourcePropertiesResponseNetworkProfile
		return ret
	}).(ClusterPoolResourcePropertiesResponseNetworkProfileOutput)
}

// IP ranges are specified in CIDR format, e.g. 137.117.106.88/29. This feature is not compatible with private AKS clusters. So you cannot set enablePrivateApiServer to true and apiServerAuthorizedIpRanges at the same time. Currently, this property is not supported and please don't use it.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) ApiServerAuthorizedIpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) []string {
		if v == nil {
			return nil
		}
		return v.ApiServerAuthorizedIpRanges
	}).(pulumi.StringArrayOutput)
}

// ClusterPool is based on AKS cluster. AKS cluster exposes the API server to public internet by default. If you set this property to true, a private AKS cluster will be created, and it will use private apiserver, which is not exposed to public internet.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) EnablePrivateApiServer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateApiServer
	}).(pulumi.BoolPtrOutput)
}

// This can only be set at cluster pool creation time and cannot be changed later.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) OutboundType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.OutboundType
	}).(pulumi.StringPtrOutput)
}

// Cluster pool subnet resource id.
func (o ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolResourcePropertiesResponseNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Ssh profile for the cluster.
type ClusterPoolSshProfile struct {
	// Number of ssh pods per cluster.
	Count int `pulumi:"count"`
	// The virtual machine SKU.
	VmSize *string `pulumi:"vmSize"`
}

// ClusterPoolSshProfileInput is an input type that accepts ClusterPoolSshProfileArgs and ClusterPoolSshProfileOutput values.
// You can construct a concrete instance of `ClusterPoolSshProfileInput` via:
//
//	ClusterPoolSshProfileArgs{...}
type ClusterPoolSshProfileInput interface {
	pulumi.Input

	ToClusterPoolSshProfileOutput() ClusterPoolSshProfileOutput
	ToClusterPoolSshProfileOutputWithContext(context.Context) ClusterPoolSshProfileOutput
}

// Ssh profile for the cluster.
type ClusterPoolSshProfileArgs struct {
	// Number of ssh pods per cluster.
	Count pulumi.IntInput `pulumi:"count"`
	// The virtual machine SKU.
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

func (ClusterPoolSshProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolSshProfile)(nil)).Elem()
}

func (i ClusterPoolSshProfileArgs) ToClusterPoolSshProfileOutput() ClusterPoolSshProfileOutput {
	return i.ToClusterPoolSshProfileOutputWithContext(context.Background())
}

func (i ClusterPoolSshProfileArgs) ToClusterPoolSshProfileOutputWithContext(ctx context.Context) ClusterPoolSshProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolSshProfileOutput)
}

func (i ClusterPoolSshProfileArgs) ToClusterPoolSshProfilePtrOutput() ClusterPoolSshProfilePtrOutput {
	return i.ToClusterPoolSshProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPoolSshProfileArgs) ToClusterPoolSshProfilePtrOutputWithContext(ctx context.Context) ClusterPoolSshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolSshProfileOutput).ToClusterPoolSshProfilePtrOutputWithContext(ctx)
}

// ClusterPoolSshProfilePtrInput is an input type that accepts ClusterPoolSshProfileArgs, ClusterPoolSshProfilePtr and ClusterPoolSshProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPoolSshProfilePtrInput` via:
//
//	        ClusterPoolSshProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPoolSshProfilePtrInput interface {
	pulumi.Input

	ToClusterPoolSshProfilePtrOutput() ClusterPoolSshProfilePtrOutput
	ToClusterPoolSshProfilePtrOutputWithContext(context.Context) ClusterPoolSshProfilePtrOutput
}

type clusterPoolSshProfilePtrType ClusterPoolSshProfileArgs

func ClusterPoolSshProfilePtr(v *ClusterPoolSshProfileArgs) ClusterPoolSshProfilePtrInput {
	return (*clusterPoolSshProfilePtrType)(v)
}

func (*clusterPoolSshProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolSshProfile)(nil)).Elem()
}

func (i *clusterPoolSshProfilePtrType) ToClusterPoolSshProfilePtrOutput() ClusterPoolSshProfilePtrOutput {
	return i.ToClusterPoolSshProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPoolSshProfilePtrType) ToClusterPoolSshProfilePtrOutputWithContext(ctx context.Context) ClusterPoolSshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPoolSshProfilePtrOutput)
}

// Ssh profile for the cluster.
type ClusterPoolSshProfileOutput struct{ *pulumi.OutputState }

func (ClusterPoolSshProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolSshProfile)(nil)).Elem()
}

func (o ClusterPoolSshProfileOutput) ToClusterPoolSshProfileOutput() ClusterPoolSshProfileOutput {
	return o
}

func (o ClusterPoolSshProfileOutput) ToClusterPoolSshProfileOutputWithContext(ctx context.Context) ClusterPoolSshProfileOutput {
	return o
}

func (o ClusterPoolSshProfileOutput) ToClusterPoolSshProfilePtrOutput() ClusterPoolSshProfilePtrOutput {
	return o.ToClusterPoolSshProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPoolSshProfileOutput) ToClusterPoolSshProfilePtrOutputWithContext(ctx context.Context) ClusterPoolSshProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPoolSshProfile) *ClusterPoolSshProfile {
		return &v
	}).(ClusterPoolSshProfilePtrOutput)
}

// Number of ssh pods per cluster.
func (o ClusterPoolSshProfileOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterPoolSshProfile) int { return v.Count }).(pulumi.IntOutput)
}

// The virtual machine SKU.
func (o ClusterPoolSshProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolSshProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ClusterPoolSshProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolSshProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolSshProfile)(nil)).Elem()
}

func (o ClusterPoolSshProfilePtrOutput) ToClusterPoolSshProfilePtrOutput() ClusterPoolSshProfilePtrOutput {
	return o
}

func (o ClusterPoolSshProfilePtrOutput) ToClusterPoolSshProfilePtrOutputWithContext(ctx context.Context) ClusterPoolSshProfilePtrOutput {
	return o
}

func (o ClusterPoolSshProfilePtrOutput) Elem() ClusterPoolSshProfileOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfile) ClusterPoolSshProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPoolSshProfile
		return ret
	}).(ClusterPoolSshProfileOutput)
}

// Number of ssh pods per cluster.
func (o ClusterPoolSshProfilePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfile) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The virtual machine SKU.
func (o ClusterPoolSshProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Ssh profile for the cluster.
type ClusterPoolSshProfileResponse struct {
	// Number of ssh pods per cluster.
	Count int `pulumi:"count"`
	// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
	PodPrefix string `pulumi:"podPrefix"`
	// The virtual machine SKU.
	VmSize *string `pulumi:"vmSize"`
}

// Ssh profile for the cluster.
type ClusterPoolSshProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterPoolSshProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPoolSshProfileResponse)(nil)).Elem()
}

func (o ClusterPoolSshProfileResponseOutput) ToClusterPoolSshProfileResponseOutput() ClusterPoolSshProfileResponseOutput {
	return o
}

func (o ClusterPoolSshProfileResponseOutput) ToClusterPoolSshProfileResponseOutputWithContext(ctx context.Context) ClusterPoolSshProfileResponseOutput {
	return o
}

// Number of ssh pods per cluster.
func (o ClusterPoolSshProfileResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterPoolSshProfileResponse) int { return v.Count }).(pulumi.IntOutput)
}

// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
func (o ClusterPoolSshProfileResponseOutput) PodPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterPoolSshProfileResponse) string { return v.PodPrefix }).(pulumi.StringOutput)
}

// The virtual machine SKU.
func (o ClusterPoolSshProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPoolSshProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ClusterPoolSshProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterPoolSshProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPoolSshProfileResponse)(nil)).Elem()
}

func (o ClusterPoolSshProfileResponsePtrOutput) ToClusterPoolSshProfileResponsePtrOutput() ClusterPoolSshProfileResponsePtrOutput {
	return o
}

func (o ClusterPoolSshProfileResponsePtrOutput) ToClusterPoolSshProfileResponsePtrOutputWithContext(ctx context.Context) ClusterPoolSshProfileResponsePtrOutput {
	return o
}

func (o ClusterPoolSshProfileResponsePtrOutput) Elem() ClusterPoolSshProfileResponseOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfileResponse) ClusterPoolSshProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterPoolSshProfileResponse
		return ret
	}).(ClusterPoolSshProfileResponseOutput)
}

// Number of ssh pods per cluster.
func (o ClusterPoolSshProfileResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>
func (o ClusterPoolSshProfileResponsePtrOutput) PodPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PodPrefix
	}).(pulumi.StringPtrOutput)
}

// The virtual machine SKU.
func (o ClusterPoolSshProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPoolSshProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Cluster profile.
type ClusterProfile struct {
	// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
	AuthorizationProfile AuthorizationProfile `pulumi:"authorizationProfile"`
	// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
	AutoscaleProfile *AutoscaleProfile `pulumi:"autoscaleProfile"`
	// Cluster access profile.
	ClusterAccessProfile *ClusterAccessProfile `pulumi:"clusterAccessProfile"`
	// Version with 3/4 part.
	ClusterVersion string `pulumi:"clusterVersion"`
	// The Flink cluster profile.
	FlinkProfile *FlinkProfile `pulumi:"flinkProfile"`
	// This is deprecated. Please use managed identity profile instead.
	IdentityProfile *IdentityProfile `pulumi:"identityProfile"`
	// The Kafka cluster profile.
	KafkaProfile *KafkaProfile `pulumi:"kafkaProfile"`
	// LLAP cluster profile.
	LlapProfile interface{} `pulumi:"llapProfile"`
	// Cluster log analytics profile to enable or disable OMS agent for cluster.
	LogAnalyticsProfile *ClusterLogAnalyticsProfile `pulumi:"logAnalyticsProfile"`
	// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
	ManagedIdentityProfile *ManagedIdentityProfile `pulumi:"managedIdentityProfile"`
	// Version with three part.
	OssVersion string `pulumi:"ossVersion"`
	// Cluster Prometheus profile.
	PrometheusProfile *ClusterPrometheusProfile `pulumi:"prometheusProfile"`
	// Cluster Ranger plugin profile.
	RangerPluginProfile *ClusterRangerPluginProfile `pulumi:"rangerPluginProfile"`
	// The ranger cluster profile.
	RangerProfile *RangerProfile `pulumi:"rangerProfile"`
	// The script action profile list.
	ScriptActionProfiles []ScriptActionProfile `pulumi:"scriptActionProfiles"`
	// The cluster secret profile.
	SecretsProfile *SecretsProfile `pulumi:"secretsProfile"`
	// The service configs profiles.
	ServiceConfigsProfiles []ClusterServiceConfigsProfile `pulumi:"serviceConfigsProfiles"`
	// The spark cluster profile.
	SparkProfile *SparkProfile `pulumi:"sparkProfile"`
	// Ssh profile for the cluster.
	SshProfile *ClusterPoolSshProfile `pulumi:"sshProfile"`
	// Stub cluster profile.
	StubProfile interface{} `pulumi:"stubProfile"`
	// Trino Cluster profile.
	TrinoProfile *TrinoProfile `pulumi:"trinoProfile"`
}

// Defaults sets the appropriate defaults for ClusterProfile
func (val *ClusterProfile) Defaults() *ClusterProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FlinkProfile = tmp.FlinkProfile.Defaults()

	tmp.KafkaProfile = tmp.KafkaProfile.Defaults()

	tmp.PrometheusProfile = tmp.PrometheusProfile.Defaults()

	tmp.RangerPluginProfile = tmp.RangerPluginProfile.Defaults()

	tmp.RangerProfile = tmp.RangerProfile.Defaults()

	tmp.SparkProfile = tmp.SparkProfile.Defaults()

	tmp.TrinoProfile = tmp.TrinoProfile.Defaults()

	return &tmp
}

// ClusterProfileInput is an input type that accepts ClusterProfileArgs and ClusterProfileOutput values.
// You can construct a concrete instance of `ClusterProfileInput` via:
//
//	ClusterProfileArgs{...}
type ClusterProfileInput interface {
	pulumi.Input

	ToClusterProfileOutput() ClusterProfileOutput
	ToClusterProfileOutputWithContext(context.Context) ClusterProfileOutput
}

// Cluster profile.
type ClusterProfileArgs struct {
	// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
	AuthorizationProfile AuthorizationProfileInput `pulumi:"authorizationProfile"`
	// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
	AutoscaleProfile AutoscaleProfilePtrInput `pulumi:"autoscaleProfile"`
	// Cluster access profile.
	ClusterAccessProfile ClusterAccessProfilePtrInput `pulumi:"clusterAccessProfile"`
	// Version with 3/4 part.
	ClusterVersion pulumi.StringInput `pulumi:"clusterVersion"`
	// The Flink cluster profile.
	FlinkProfile FlinkProfilePtrInput `pulumi:"flinkProfile"`
	// This is deprecated. Please use managed identity profile instead.
	IdentityProfile IdentityProfilePtrInput `pulumi:"identityProfile"`
	// The Kafka cluster profile.
	KafkaProfile KafkaProfilePtrInput `pulumi:"kafkaProfile"`
	// LLAP cluster profile.
	LlapProfile pulumi.Input `pulumi:"llapProfile"`
	// Cluster log analytics profile to enable or disable OMS agent for cluster.
	LogAnalyticsProfile ClusterLogAnalyticsProfilePtrInput `pulumi:"logAnalyticsProfile"`
	// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
	ManagedIdentityProfile ManagedIdentityProfilePtrInput `pulumi:"managedIdentityProfile"`
	// Version with three part.
	OssVersion pulumi.StringInput `pulumi:"ossVersion"`
	// Cluster Prometheus profile.
	PrometheusProfile ClusterPrometheusProfilePtrInput `pulumi:"prometheusProfile"`
	// Cluster Ranger plugin profile.
	RangerPluginProfile ClusterRangerPluginProfilePtrInput `pulumi:"rangerPluginProfile"`
	// The ranger cluster profile.
	RangerProfile RangerProfilePtrInput `pulumi:"rangerProfile"`
	// The script action profile list.
	ScriptActionProfiles ScriptActionProfileArrayInput `pulumi:"scriptActionProfiles"`
	// The cluster secret profile.
	SecretsProfile SecretsProfilePtrInput `pulumi:"secretsProfile"`
	// The service configs profiles.
	ServiceConfigsProfiles ClusterServiceConfigsProfileArrayInput `pulumi:"serviceConfigsProfiles"`
	// The spark cluster profile.
	SparkProfile SparkProfilePtrInput `pulumi:"sparkProfile"`
	// Ssh profile for the cluster.
	SshProfile ClusterPoolSshProfilePtrInput `pulumi:"sshProfile"`
	// Stub cluster profile.
	StubProfile pulumi.Input `pulumi:"stubProfile"`
	// Trino Cluster profile.
	TrinoProfile TrinoProfilePtrInput `pulumi:"trinoProfile"`
}

// Defaults sets the appropriate defaults for ClusterProfileArgs
func (val *ClusterProfileArgs) Defaults() *ClusterProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ClusterProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfile)(nil)).Elem()
}

func (i ClusterProfileArgs) ToClusterProfileOutput() ClusterProfileOutput {
	return i.ToClusterProfileOutputWithContext(context.Background())
}

func (i ClusterProfileArgs) ToClusterProfileOutputWithContext(ctx context.Context) ClusterProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterProfileOutput)
}

// Cluster profile.
type ClusterProfileOutput struct{ *pulumi.OutputState }

func (ClusterProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfile)(nil)).Elem()
}

func (o ClusterProfileOutput) ToClusterProfileOutput() ClusterProfileOutput {
	return o
}

func (o ClusterProfileOutput) ToClusterProfileOutputWithContext(ctx context.Context) ClusterProfileOutput {
	return o
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
func (o ClusterProfileOutput) AuthorizationProfile() AuthorizationProfileOutput {
	return o.ApplyT(func(v ClusterProfile) AuthorizationProfile { return v.AuthorizationProfile }).(AuthorizationProfileOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
func (o ClusterProfileOutput) AutoscaleProfile() AutoscaleProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *AutoscaleProfile { return v.AutoscaleProfile }).(AutoscaleProfilePtrOutput)
}

// Cluster access profile.
func (o ClusterProfileOutput) ClusterAccessProfile() ClusterAccessProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterAccessProfile { return v.ClusterAccessProfile }).(ClusterAccessProfilePtrOutput)
}

// Version with 3/4 part.
func (o ClusterProfileOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfile) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

// The Flink cluster profile.
func (o ClusterProfileOutput) FlinkProfile() FlinkProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *FlinkProfile { return v.FlinkProfile }).(FlinkProfilePtrOutput)
}

// This is deprecated. Please use managed identity profile instead.
func (o ClusterProfileOutput) IdentityProfile() IdentityProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *IdentityProfile { return v.IdentityProfile }).(IdentityProfilePtrOutput)
}

// The Kafka cluster profile.
func (o ClusterProfileOutput) KafkaProfile() KafkaProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *KafkaProfile { return v.KafkaProfile }).(KafkaProfilePtrOutput)
}

// LLAP cluster profile.
func (o ClusterProfileOutput) LlapProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfile) interface{} { return v.LlapProfile }).(pulumi.AnyOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
func (o ClusterProfileOutput) LogAnalyticsProfile() ClusterLogAnalyticsProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterLogAnalyticsProfile { return v.LogAnalyticsProfile }).(ClusterLogAnalyticsProfilePtrOutput)
}

// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
func (o ClusterProfileOutput) ManagedIdentityProfile() ManagedIdentityProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ManagedIdentityProfile { return v.ManagedIdentityProfile }).(ManagedIdentityProfilePtrOutput)
}

// Version with three part.
func (o ClusterProfileOutput) OssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfile) string { return v.OssVersion }).(pulumi.StringOutput)
}

// Cluster Prometheus profile.
func (o ClusterProfileOutput) PrometheusProfile() ClusterPrometheusProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterPrometheusProfile { return v.PrometheusProfile }).(ClusterPrometheusProfilePtrOutput)
}

// Cluster Ranger plugin profile.
func (o ClusterProfileOutput) RangerPluginProfile() ClusterRangerPluginProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterRangerPluginProfile { return v.RangerPluginProfile }).(ClusterRangerPluginProfilePtrOutput)
}

// The ranger cluster profile.
func (o ClusterProfileOutput) RangerProfile() RangerProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *RangerProfile { return v.RangerProfile }).(RangerProfilePtrOutput)
}

// The script action profile list.
func (o ClusterProfileOutput) ScriptActionProfiles() ScriptActionProfileArrayOutput {
	return o.ApplyT(func(v ClusterProfile) []ScriptActionProfile { return v.ScriptActionProfiles }).(ScriptActionProfileArrayOutput)
}

// The cluster secret profile.
func (o ClusterProfileOutput) SecretsProfile() SecretsProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *SecretsProfile { return v.SecretsProfile }).(SecretsProfilePtrOutput)
}

// The service configs profiles.
func (o ClusterProfileOutput) ServiceConfigsProfiles() ClusterServiceConfigsProfileArrayOutput {
	return o.ApplyT(func(v ClusterProfile) []ClusterServiceConfigsProfile { return v.ServiceConfigsProfiles }).(ClusterServiceConfigsProfileArrayOutput)
}

// The spark cluster profile.
func (o ClusterProfileOutput) SparkProfile() SparkProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *SparkProfile { return v.SparkProfile }).(SparkProfilePtrOutput)
}

// Ssh profile for the cluster.
func (o ClusterProfileOutput) SshProfile() ClusterPoolSshProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *ClusterPoolSshProfile { return v.SshProfile }).(ClusterPoolSshProfilePtrOutput)
}

// Stub cluster profile.
func (o ClusterProfileOutput) StubProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfile) interface{} { return v.StubProfile }).(pulumi.AnyOutput)
}

// Trino Cluster profile.
func (o ClusterProfileOutput) TrinoProfile() TrinoProfilePtrOutput {
	return o.ApplyT(func(v ClusterProfile) *TrinoProfile { return v.TrinoProfile }).(TrinoProfilePtrOutput)
}

// Cluster profile.
type ClusterProfileResponse struct {
	// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
	AuthorizationProfile AuthorizationProfileResponse `pulumi:"authorizationProfile"`
	// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
	AutoscaleProfile *AutoscaleProfileResponse `pulumi:"autoscaleProfile"`
	// Cluster access profile.
	ClusterAccessProfile *ClusterAccessProfileResponse `pulumi:"clusterAccessProfile"`
	// Version with 3/4 part.
	ClusterVersion string `pulumi:"clusterVersion"`
	// Component list of this cluster type and version.
	Components []ClusterProfileResponseComponents `pulumi:"components"`
	// Cluster connectivity profile.
	ConnectivityProfile ConnectivityProfileResponse `pulumi:"connectivityProfile"`
	// The Flink cluster profile.
	FlinkProfile *FlinkProfileResponse `pulumi:"flinkProfile"`
	// This is deprecated. Please use managed identity profile instead.
	IdentityProfile *IdentityProfileResponse `pulumi:"identityProfile"`
	// The Kafka cluster profile.
	KafkaProfile *KafkaProfileResponse `pulumi:"kafkaProfile"`
	// LLAP cluster profile.
	LlapProfile interface{} `pulumi:"llapProfile"`
	// Cluster log analytics profile to enable or disable OMS agent for cluster.
	LogAnalyticsProfile *ClusterLogAnalyticsProfileResponse `pulumi:"logAnalyticsProfile"`
	// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
	ManagedIdentityProfile *ManagedIdentityProfileResponse `pulumi:"managedIdentityProfile"`
	// Version with three part.
	OssVersion string `pulumi:"ossVersion"`
	// Cluster Prometheus profile.
	PrometheusProfile *ClusterPrometheusProfileResponse `pulumi:"prometheusProfile"`
	// Cluster Ranger plugin profile.
	RangerPluginProfile *ClusterRangerPluginProfileResponse `pulumi:"rangerPluginProfile"`
	// The ranger cluster profile.
	RangerProfile *RangerProfileResponse `pulumi:"rangerProfile"`
	// The script action profile list.
	ScriptActionProfiles []ScriptActionProfileResponse `pulumi:"scriptActionProfiles"`
	// The cluster secret profile.
	SecretsProfile *SecretsProfileResponse `pulumi:"secretsProfile"`
	// The service configs profiles.
	ServiceConfigsProfiles []ClusterServiceConfigsProfileResponse `pulumi:"serviceConfigsProfiles"`
	// The spark cluster profile.
	SparkProfile *SparkProfileResponse `pulumi:"sparkProfile"`
	// Ssh profile for the cluster.
	SshProfile *ClusterPoolSshProfileResponse `pulumi:"sshProfile"`
	// Stub cluster profile.
	StubProfile interface{} `pulumi:"stubProfile"`
	// Trino Cluster profile.
	TrinoProfile *TrinoProfileResponse `pulumi:"trinoProfile"`
}

// Defaults sets the appropriate defaults for ClusterProfileResponse
func (val *ClusterProfileResponse) Defaults() *ClusterProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FlinkProfile = tmp.FlinkProfile.Defaults()

	tmp.KafkaProfile = tmp.KafkaProfile.Defaults()

	tmp.PrometheusProfile = tmp.PrometheusProfile.Defaults()

	tmp.RangerPluginProfile = tmp.RangerPluginProfile.Defaults()

	tmp.RangerProfile = tmp.RangerProfile.Defaults()

	tmp.SparkProfile = tmp.SparkProfile.Defaults()

	tmp.TrinoProfile = tmp.TrinoProfile.Defaults()

	return &tmp
}

// Cluster profile.
type ClusterProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfileResponse)(nil)).Elem()
}

func (o ClusterProfileResponseOutput) ToClusterProfileResponseOutput() ClusterProfileResponseOutput {
	return o
}

func (o ClusterProfileResponseOutput) ToClusterProfileResponseOutputWithContext(ctx context.Context) ClusterProfileResponseOutput {
	return o
}

// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
func (o ClusterProfileResponseOutput) AuthorizationProfile() AuthorizationProfileResponseOutput {
	return o.ApplyT(func(v ClusterProfileResponse) AuthorizationProfileResponse { return v.AuthorizationProfile }).(AuthorizationProfileResponseOutput)
}

// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
func (o ClusterProfileResponseOutput) AutoscaleProfile() AutoscaleProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *AutoscaleProfileResponse { return v.AutoscaleProfile }).(AutoscaleProfileResponsePtrOutput)
}

// Cluster access profile.
func (o ClusterProfileResponseOutput) ClusterAccessProfile() ClusterAccessProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterAccessProfileResponse { return v.ClusterAccessProfile }).(ClusterAccessProfileResponsePtrOutput)
}

// Version with 3/4 part.
func (o ClusterProfileResponseOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfileResponse) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

// Component list of this cluster type and version.
func (o ClusterProfileResponseOutput) Components() ClusterProfileResponseComponentsArrayOutput {
	return o.ApplyT(func(v ClusterProfileResponse) []ClusterProfileResponseComponents { return v.Components }).(ClusterProfileResponseComponentsArrayOutput)
}

// Cluster connectivity profile.
func (o ClusterProfileResponseOutput) ConnectivityProfile() ConnectivityProfileResponseOutput {
	return o.ApplyT(func(v ClusterProfileResponse) ConnectivityProfileResponse { return v.ConnectivityProfile }).(ConnectivityProfileResponseOutput)
}

// The Flink cluster profile.
func (o ClusterProfileResponseOutput) FlinkProfile() FlinkProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *FlinkProfileResponse { return v.FlinkProfile }).(FlinkProfileResponsePtrOutput)
}

// This is deprecated. Please use managed identity profile instead.
func (o ClusterProfileResponseOutput) IdentityProfile() IdentityProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *IdentityProfileResponse { return v.IdentityProfile }).(IdentityProfileResponsePtrOutput)
}

// The Kafka cluster profile.
func (o ClusterProfileResponseOutput) KafkaProfile() KafkaProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *KafkaProfileResponse { return v.KafkaProfile }).(KafkaProfileResponsePtrOutput)
}

// LLAP cluster profile.
func (o ClusterProfileResponseOutput) LlapProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfileResponse) interface{} { return v.LlapProfile }).(pulumi.AnyOutput)
}

// Cluster log analytics profile to enable or disable OMS agent for cluster.
func (o ClusterProfileResponseOutput) LogAnalyticsProfile() ClusterLogAnalyticsProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterLogAnalyticsProfileResponse { return v.LogAnalyticsProfile }).(ClusterLogAnalyticsProfileResponsePtrOutput)
}

// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
func (o ClusterProfileResponseOutput) ManagedIdentityProfile() ManagedIdentityProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ManagedIdentityProfileResponse { return v.ManagedIdentityProfile }).(ManagedIdentityProfileResponsePtrOutput)
}

// Version with three part.
func (o ClusterProfileResponseOutput) OssVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterProfileResponse) string { return v.OssVersion }).(pulumi.StringOutput)
}

// Cluster Prometheus profile.
func (o ClusterProfileResponseOutput) PrometheusProfile() ClusterPrometheusProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterPrometheusProfileResponse { return v.PrometheusProfile }).(ClusterPrometheusProfileResponsePtrOutput)
}

// Cluster Ranger plugin profile.
func (o ClusterProfileResponseOutput) RangerPluginProfile() ClusterRangerPluginProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterRangerPluginProfileResponse { return v.RangerPluginProfile }).(ClusterRangerPluginProfileResponsePtrOutput)
}

// The ranger cluster profile.
func (o ClusterProfileResponseOutput) RangerProfile() RangerProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *RangerProfileResponse { return v.RangerProfile }).(RangerProfileResponsePtrOutput)
}

// The script action profile list.
func (o ClusterProfileResponseOutput) ScriptActionProfiles() ScriptActionProfileResponseArrayOutput {
	return o.ApplyT(func(v ClusterProfileResponse) []ScriptActionProfileResponse { return v.ScriptActionProfiles }).(ScriptActionProfileResponseArrayOutput)
}

// The cluster secret profile.
func (o ClusterProfileResponseOutput) SecretsProfile() SecretsProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *SecretsProfileResponse { return v.SecretsProfile }).(SecretsProfileResponsePtrOutput)
}

// The service configs profiles.
func (o ClusterProfileResponseOutput) ServiceConfigsProfiles() ClusterServiceConfigsProfileResponseArrayOutput {
	return o.ApplyT(func(v ClusterProfileResponse) []ClusterServiceConfigsProfileResponse { return v.ServiceConfigsProfiles }).(ClusterServiceConfigsProfileResponseArrayOutput)
}

// The spark cluster profile.
func (o ClusterProfileResponseOutput) SparkProfile() SparkProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *SparkProfileResponse { return v.SparkProfile }).(SparkProfileResponsePtrOutput)
}

// Ssh profile for the cluster.
func (o ClusterProfileResponseOutput) SshProfile() ClusterPoolSshProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *ClusterPoolSshProfileResponse { return v.SshProfile }).(ClusterPoolSshProfileResponsePtrOutput)
}

// Stub cluster profile.
func (o ClusterProfileResponseOutput) StubProfile() pulumi.AnyOutput {
	return o.ApplyT(func(v ClusterProfileResponse) interface{} { return v.StubProfile }).(pulumi.AnyOutput)
}

// Trino Cluster profile.
func (o ClusterProfileResponseOutput) TrinoProfile() TrinoProfileResponsePtrOutput {
	return o.ApplyT(func(v ClusterProfileResponse) *TrinoProfileResponse { return v.TrinoProfile }).(TrinoProfileResponsePtrOutput)
}

type ClusterProfileResponseComponents struct {
	Name    *string `pulumi:"name"`
	Version *string `pulumi:"version"`
}

type ClusterProfileResponseComponentsOutput struct{ *pulumi.OutputState }

func (ClusterProfileResponseComponentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterProfileResponseComponents)(nil)).Elem()
}

func (o ClusterProfileResponseComponentsOutput) ToClusterProfileResponseComponentsOutput() ClusterProfileResponseComponentsOutput {
	return o
}

func (o ClusterProfileResponseComponentsOutput) ToClusterProfileResponseComponentsOutputWithContext(ctx context.Context) ClusterProfileResponseComponentsOutput {
	return o
}

func (o ClusterProfileResponseComponentsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProfileResponseComponents) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClusterProfileResponseComponentsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterProfileResponseComponents) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ClusterProfileResponseComponentsArrayOutput struct{ *pulumi.OutputState }

func (ClusterProfileResponseComponentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterProfileResponseComponents)(nil)).Elem()
}

func (o ClusterProfileResponseComponentsArrayOutput) ToClusterProfileResponseComponentsArrayOutput() ClusterProfileResponseComponentsArrayOutput {
	return o
}

func (o ClusterProfileResponseComponentsArrayOutput) ToClusterProfileResponseComponentsArrayOutputWithContext(ctx context.Context) ClusterProfileResponseComponentsArrayOutput {
	return o
}

func (o ClusterProfileResponseComponentsArrayOutput) Index(i pulumi.IntInput) ClusterProfileResponseComponentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterProfileResponseComponents {
		return vs[0].([]ClusterProfileResponseComponents)[vs[1].(int)]
	}).(ClusterProfileResponseComponentsOutput)
}

// Cluster Prometheus profile.
type ClusterPrometheusProfile struct {
	// Enable Prometheus for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterPrometheusProfile
func (val *ClusterPrometheusProfile) Defaults() *ClusterPrometheusProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// ClusterPrometheusProfileInput is an input type that accepts ClusterPrometheusProfileArgs and ClusterPrometheusProfileOutput values.
// You can construct a concrete instance of `ClusterPrometheusProfileInput` via:
//
//	ClusterPrometheusProfileArgs{...}
type ClusterPrometheusProfileInput interface {
	pulumi.Input

	ToClusterPrometheusProfileOutput() ClusterPrometheusProfileOutput
	ToClusterPrometheusProfileOutputWithContext(context.Context) ClusterPrometheusProfileOutput
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileArgs struct {
	// Enable Prometheus for cluster or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterPrometheusProfileArgs
func (val *ClusterPrometheusProfileArgs) Defaults() *ClusterPrometheusProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.Bool(false)
	}
	return &tmp
}
func (ClusterPrometheusProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheusProfile)(nil)).Elem()
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfileOutput() ClusterPrometheusProfileOutput {
	return i.ToClusterPrometheusProfileOutputWithContext(context.Background())
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfileOutputWithContext(ctx context.Context) ClusterPrometheusProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusProfileOutput)
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return i.ToClusterPrometheusProfilePtrOutputWithContext(context.Background())
}

func (i ClusterPrometheusProfileArgs) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusProfileOutput).ToClusterPrometheusProfilePtrOutputWithContext(ctx)
}

// ClusterPrometheusProfilePtrInput is an input type that accepts ClusterPrometheusProfileArgs, ClusterPrometheusProfilePtr and ClusterPrometheusProfilePtrOutput values.
// You can construct a concrete instance of `ClusterPrometheusProfilePtrInput` via:
//
//	        ClusterPrometheusProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterPrometheusProfilePtrInput interface {
	pulumi.Input

	ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput
	ToClusterPrometheusProfilePtrOutputWithContext(context.Context) ClusterPrometheusProfilePtrOutput
}

type clusterPrometheusProfilePtrType ClusterPrometheusProfileArgs

func ClusterPrometheusProfilePtr(v *ClusterPrometheusProfileArgs) ClusterPrometheusProfilePtrInput {
	return (*clusterPrometheusProfilePtrType)(v)
}

func (*clusterPrometheusProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheusProfile)(nil)).Elem()
}

func (i *clusterPrometheusProfilePtrType) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return i.ToClusterPrometheusProfilePtrOutputWithContext(context.Background())
}

func (i *clusterPrometheusProfilePtrType) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPrometheusProfilePtrOutput)
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheusProfile)(nil)).Elem()
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfileOutput() ClusterPrometheusProfileOutput {
	return o
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfileOutputWithContext(ctx context.Context) ClusterPrometheusProfileOutput {
	return o
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return o.ToClusterPrometheusProfilePtrOutputWithContext(context.Background())
}

func (o ClusterPrometheusProfileOutput) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPrometheusProfile) *ClusterPrometheusProfile {
		return &v
	}).(ClusterPrometheusProfilePtrOutput)
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPrometheusProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterPrometheusProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheusProfile)(nil)).Elem()
}

func (o ClusterPrometheusProfilePtrOutput) ToClusterPrometheusProfilePtrOutput() ClusterPrometheusProfilePtrOutput {
	return o
}

func (o ClusterPrometheusProfilePtrOutput) ToClusterPrometheusProfilePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfilePtrOutput {
	return o
}

func (o ClusterPrometheusProfilePtrOutput) Elem() ClusterPrometheusProfileOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfile) ClusterPrometheusProfile {
		if v != nil {
			return *v
		}
		var ret ClusterPrometheusProfile
		return ret
	}).(ClusterPrometheusProfileOutput)
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileResponse struct {
	// Enable Prometheus for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterPrometheusProfileResponse
func (val *ClusterPrometheusProfileResponse) Defaults() *ClusterPrometheusProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// Cluster Prometheus profile.
type ClusterPrometheusProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPrometheusProfileResponse)(nil)).Elem()
}

func (o ClusterPrometheusProfileResponseOutput) ToClusterPrometheusProfileResponseOutput() ClusterPrometheusProfileResponseOutput {
	return o
}

func (o ClusterPrometheusProfileResponseOutput) ToClusterPrometheusProfileResponseOutputWithContext(ctx context.Context) ClusterPrometheusProfileResponseOutput {
	return o
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPrometheusProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterPrometheusProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterPrometheusProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPrometheusProfileResponse)(nil)).Elem()
}

func (o ClusterPrometheusProfileResponsePtrOutput) ToClusterPrometheusProfileResponsePtrOutput() ClusterPrometheusProfileResponsePtrOutput {
	return o
}

func (o ClusterPrometheusProfileResponsePtrOutput) ToClusterPrometheusProfileResponsePtrOutputWithContext(ctx context.Context) ClusterPrometheusProfileResponsePtrOutput {
	return o
}

func (o ClusterPrometheusProfileResponsePtrOutput) Elem() ClusterPrometheusProfileResponseOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfileResponse) ClusterPrometheusProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterPrometheusProfileResponse
		return ret
	}).(ClusterPrometheusProfileResponseOutput)
}

// Enable Prometheus for cluster or not.
func (o ClusterPrometheusProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPrometheusProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfile struct {
	// Enable Ranger for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterRangerPluginProfile
func (val *ClusterRangerPluginProfile) Defaults() *ClusterRangerPluginProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// ClusterRangerPluginProfileInput is an input type that accepts ClusterRangerPluginProfileArgs and ClusterRangerPluginProfileOutput values.
// You can construct a concrete instance of `ClusterRangerPluginProfileInput` via:
//
//	ClusterRangerPluginProfileArgs{...}
type ClusterRangerPluginProfileInput interface {
	pulumi.Input

	ToClusterRangerPluginProfileOutput() ClusterRangerPluginProfileOutput
	ToClusterRangerPluginProfileOutputWithContext(context.Context) ClusterRangerPluginProfileOutput
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileArgs struct {
	// Enable Ranger for cluster or not.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterRangerPluginProfileArgs
func (val *ClusterRangerPluginProfileArgs) Defaults() *ClusterRangerPluginProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.Bool(false)
	}
	return &tmp
}
func (ClusterRangerPluginProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRangerPluginProfile)(nil)).Elem()
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfileOutput() ClusterRangerPluginProfileOutput {
	return i.ToClusterRangerPluginProfileOutputWithContext(context.Background())
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfileOutputWithContext(ctx context.Context) ClusterRangerPluginProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRangerPluginProfileOutput)
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return i.ToClusterRangerPluginProfilePtrOutputWithContext(context.Background())
}

func (i ClusterRangerPluginProfileArgs) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRangerPluginProfileOutput).ToClusterRangerPluginProfilePtrOutputWithContext(ctx)
}

// ClusterRangerPluginProfilePtrInput is an input type that accepts ClusterRangerPluginProfileArgs, ClusterRangerPluginProfilePtr and ClusterRangerPluginProfilePtrOutput values.
// You can construct a concrete instance of `ClusterRangerPluginProfilePtrInput` via:
//
//	        ClusterRangerPluginProfileArgs{...}
//
//	or:
//
//	        nil
type ClusterRangerPluginProfilePtrInput interface {
	pulumi.Input

	ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput
	ToClusterRangerPluginProfilePtrOutputWithContext(context.Context) ClusterRangerPluginProfilePtrOutput
}

type clusterRangerPluginProfilePtrType ClusterRangerPluginProfileArgs

func ClusterRangerPluginProfilePtr(v *ClusterRangerPluginProfileArgs) ClusterRangerPluginProfilePtrInput {
	return (*clusterRangerPluginProfilePtrType)(v)
}

func (*clusterRangerPluginProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRangerPluginProfile)(nil)).Elem()
}

func (i *clusterRangerPluginProfilePtrType) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return i.ToClusterRangerPluginProfilePtrOutputWithContext(context.Background())
}

func (i *clusterRangerPluginProfilePtrType) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterRangerPluginProfilePtrOutput)
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRangerPluginProfile)(nil)).Elem()
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfileOutput() ClusterRangerPluginProfileOutput {
	return o
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfileOutputWithContext(ctx context.Context) ClusterRangerPluginProfileOutput {
	return o
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return o.ToClusterRangerPluginProfilePtrOutputWithContext(context.Background())
}

func (o ClusterRangerPluginProfileOutput) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterRangerPluginProfile) *ClusterRangerPluginProfile {
		return &v
	}).(ClusterRangerPluginProfilePtrOutput)
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterRangerPluginProfile) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterRangerPluginProfilePtrOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRangerPluginProfile)(nil)).Elem()
}

func (o ClusterRangerPluginProfilePtrOutput) ToClusterRangerPluginProfilePtrOutput() ClusterRangerPluginProfilePtrOutput {
	return o
}

func (o ClusterRangerPluginProfilePtrOutput) ToClusterRangerPluginProfilePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfilePtrOutput {
	return o
}

func (o ClusterRangerPluginProfilePtrOutput) Elem() ClusterRangerPluginProfileOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfile) ClusterRangerPluginProfile {
		if v != nil {
			return *v
		}
		var ret ClusterRangerPluginProfile
		return ret
	}).(ClusterRangerPluginProfileOutput)
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfilePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfile) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileResponse struct {
	// Enable Ranger for cluster or not.
	Enabled bool `pulumi:"enabled"`
}

// Defaults sets the appropriate defaults for ClusterRangerPluginProfileResponse
func (val *ClusterRangerPluginProfileResponse) Defaults() *ClusterRangerPluginProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Enabled) {
		tmp.Enabled = false
	}
	return &tmp
}

// Cluster Ranger plugin profile.
type ClusterRangerPluginProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterRangerPluginProfileResponse)(nil)).Elem()
}

func (o ClusterRangerPluginProfileResponseOutput) ToClusterRangerPluginProfileResponseOutput() ClusterRangerPluginProfileResponseOutput {
	return o
}

func (o ClusterRangerPluginProfileResponseOutput) ToClusterRangerPluginProfileResponseOutputWithContext(ctx context.Context) ClusterRangerPluginProfileResponseOutput {
	return o
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfileResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterRangerPluginProfileResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ClusterRangerPluginProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterRangerPluginProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterRangerPluginProfileResponse)(nil)).Elem()
}

func (o ClusterRangerPluginProfileResponsePtrOutput) ToClusterRangerPluginProfileResponsePtrOutput() ClusterRangerPluginProfileResponsePtrOutput {
	return o
}

func (o ClusterRangerPluginProfileResponsePtrOutput) ToClusterRangerPluginProfileResponsePtrOutputWithContext(ctx context.Context) ClusterRangerPluginProfileResponsePtrOutput {
	return o
}

func (o ClusterRangerPluginProfileResponsePtrOutput) Elem() ClusterRangerPluginProfileResponseOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfileResponse) ClusterRangerPluginProfileResponse {
		if v != nil {
			return *v
		}
		var ret ClusterRangerPluginProfileResponse
		return ret
	}).(ClusterRangerPluginProfileResponseOutput)
}

// Enable Ranger for cluster or not.
func (o ClusterRangerPluginProfileResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterRangerPluginProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Cluster configs per component.
type ClusterServiceConfig struct {
	// Name of the component the config files should apply to.
	Component string `pulumi:"component"`
	// List of Config Files.
	Files []ClusterConfigFile `pulumi:"files"`
}

// ClusterServiceConfigInput is an input type that accepts ClusterServiceConfigArgs and ClusterServiceConfigOutput values.
// You can construct a concrete instance of `ClusterServiceConfigInput` via:
//
//	ClusterServiceConfigArgs{...}
type ClusterServiceConfigInput interface {
	pulumi.Input

	ToClusterServiceConfigOutput() ClusterServiceConfigOutput
	ToClusterServiceConfigOutputWithContext(context.Context) ClusterServiceConfigOutput
}

// Cluster configs per component.
type ClusterServiceConfigArgs struct {
	// Name of the component the config files should apply to.
	Component pulumi.StringInput `pulumi:"component"`
	// List of Config Files.
	Files ClusterConfigFileArrayInput `pulumi:"files"`
}

func (ClusterServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfig)(nil)).Elem()
}

func (i ClusterServiceConfigArgs) ToClusterServiceConfigOutput() ClusterServiceConfigOutput {
	return i.ToClusterServiceConfigOutputWithContext(context.Background())
}

func (i ClusterServiceConfigArgs) ToClusterServiceConfigOutputWithContext(ctx context.Context) ClusterServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigOutput)
}

// ClusterServiceConfigArrayInput is an input type that accepts ClusterServiceConfigArray and ClusterServiceConfigArrayOutput values.
// You can construct a concrete instance of `ClusterServiceConfigArrayInput` via:
//
//	ClusterServiceConfigArray{ ClusterServiceConfigArgs{...} }
type ClusterServiceConfigArrayInput interface {
	pulumi.Input

	ToClusterServiceConfigArrayOutput() ClusterServiceConfigArrayOutput
	ToClusterServiceConfigArrayOutputWithContext(context.Context) ClusterServiceConfigArrayOutput
}

type ClusterServiceConfigArray []ClusterServiceConfigInput

func (ClusterServiceConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfig)(nil)).Elem()
}

func (i ClusterServiceConfigArray) ToClusterServiceConfigArrayOutput() ClusterServiceConfigArrayOutput {
	return i.ToClusterServiceConfigArrayOutputWithContext(context.Background())
}

func (i ClusterServiceConfigArray) ToClusterServiceConfigArrayOutputWithContext(ctx context.Context) ClusterServiceConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigArrayOutput)
}

// Cluster configs per component.
type ClusterServiceConfigOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfig)(nil)).Elem()
}

func (o ClusterServiceConfigOutput) ToClusterServiceConfigOutput() ClusterServiceConfigOutput {
	return o
}

func (o ClusterServiceConfigOutput) ToClusterServiceConfigOutputWithContext(ctx context.Context) ClusterServiceConfigOutput {
	return o
}

// Name of the component the config files should apply to.
func (o ClusterServiceConfigOutput) Component() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfig) string { return v.Component }).(pulumi.StringOutput)
}

// List of Config Files.
func (o ClusterServiceConfigOutput) Files() ClusterConfigFileArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfig) []ClusterConfigFile { return v.Files }).(ClusterConfigFileArrayOutput)
}

type ClusterServiceConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfig)(nil)).Elem()
}

func (o ClusterServiceConfigArrayOutput) ToClusterServiceConfigArrayOutput() ClusterServiceConfigArrayOutput {
	return o
}

func (o ClusterServiceConfigArrayOutput) ToClusterServiceConfigArrayOutputWithContext(ctx context.Context) ClusterServiceConfigArrayOutput {
	return o
}

func (o ClusterServiceConfigArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfig {
		return vs[0].([]ClusterServiceConfig)[vs[1].(int)]
	}).(ClusterServiceConfigOutput)
}

// Cluster configs per component.
type ClusterServiceConfigResponse struct {
	// Name of the component the config files should apply to.
	Component string `pulumi:"component"`
	// List of Config Files.
	Files []ClusterConfigFileResponse `pulumi:"files"`
}

// Cluster configs per component.
type ClusterServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigResponse)(nil)).Elem()
}

func (o ClusterServiceConfigResponseOutput) ToClusterServiceConfigResponseOutput() ClusterServiceConfigResponseOutput {
	return o
}

func (o ClusterServiceConfigResponseOutput) ToClusterServiceConfigResponseOutputWithContext(ctx context.Context) ClusterServiceConfigResponseOutput {
	return o
}

// Name of the component the config files should apply to.
func (o ClusterServiceConfigResponseOutput) Component() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfigResponse) string { return v.Component }).(pulumi.StringOutput)
}

// List of Config Files.
func (o ClusterServiceConfigResponseOutput) Files() ClusterConfigFileResponseArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfigResponse) []ClusterConfigFileResponse { return v.Files }).(ClusterConfigFileResponseArrayOutput)
}

type ClusterServiceConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigResponse)(nil)).Elem()
}

func (o ClusterServiceConfigResponseArrayOutput) ToClusterServiceConfigResponseArrayOutput() ClusterServiceConfigResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigResponseArrayOutput) ToClusterServiceConfigResponseArrayOutputWithContext(ctx context.Context) ClusterServiceConfigResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigResponseArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfigResponse {
		return vs[0].([]ClusterServiceConfigResponse)[vs[1].(int)]
	}).(ClusterServiceConfigResponseOutput)
}

// Cluster service configs.
type ClusterServiceConfigsProfile struct {
	// List of service configs.
	Configs []ClusterServiceConfig `pulumi:"configs"`
	// Name of the service the configurations should apply to.
	ServiceName string `pulumi:"serviceName"`
}

// ClusterServiceConfigsProfileInput is an input type that accepts ClusterServiceConfigsProfileArgs and ClusterServiceConfigsProfileOutput values.
// You can construct a concrete instance of `ClusterServiceConfigsProfileInput` via:
//
//	ClusterServiceConfigsProfileArgs{...}
type ClusterServiceConfigsProfileInput interface {
	pulumi.Input

	ToClusterServiceConfigsProfileOutput() ClusterServiceConfigsProfileOutput
	ToClusterServiceConfigsProfileOutputWithContext(context.Context) ClusterServiceConfigsProfileOutput
}

// Cluster service configs.
type ClusterServiceConfigsProfileArgs struct {
	// List of service configs.
	Configs ClusterServiceConfigArrayInput `pulumi:"configs"`
	// Name of the service the configurations should apply to.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (ClusterServiceConfigsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigsProfile)(nil)).Elem()
}

func (i ClusterServiceConfigsProfileArgs) ToClusterServiceConfigsProfileOutput() ClusterServiceConfigsProfileOutput {
	return i.ToClusterServiceConfigsProfileOutputWithContext(context.Background())
}

func (i ClusterServiceConfigsProfileArgs) ToClusterServiceConfigsProfileOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigsProfileOutput)
}

// ClusterServiceConfigsProfileArrayInput is an input type that accepts ClusterServiceConfigsProfileArray and ClusterServiceConfigsProfileArrayOutput values.
// You can construct a concrete instance of `ClusterServiceConfigsProfileArrayInput` via:
//
//	ClusterServiceConfigsProfileArray{ ClusterServiceConfigsProfileArgs{...} }
type ClusterServiceConfigsProfileArrayInput interface {
	pulumi.Input

	ToClusterServiceConfigsProfileArrayOutput() ClusterServiceConfigsProfileArrayOutput
	ToClusterServiceConfigsProfileArrayOutputWithContext(context.Context) ClusterServiceConfigsProfileArrayOutput
}

type ClusterServiceConfigsProfileArray []ClusterServiceConfigsProfileInput

func (ClusterServiceConfigsProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigsProfile)(nil)).Elem()
}

func (i ClusterServiceConfigsProfileArray) ToClusterServiceConfigsProfileArrayOutput() ClusterServiceConfigsProfileArrayOutput {
	return i.ToClusterServiceConfigsProfileArrayOutputWithContext(context.Background())
}

func (i ClusterServiceConfigsProfileArray) ToClusterServiceConfigsProfileArrayOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterServiceConfigsProfileArrayOutput)
}

// Cluster service configs.
type ClusterServiceConfigsProfileOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigsProfile)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileOutput) ToClusterServiceConfigsProfileOutput() ClusterServiceConfigsProfileOutput {
	return o
}

func (o ClusterServiceConfigsProfileOutput) ToClusterServiceConfigsProfileOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileOutput {
	return o
}

// List of service configs.
func (o ClusterServiceConfigsProfileOutput) Configs() ClusterServiceConfigArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfile) []ClusterServiceConfig { return v.Configs }).(ClusterServiceConfigArrayOutput)
}

// Name of the service the configurations should apply to.
func (o ClusterServiceConfigsProfileOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfile) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ClusterServiceConfigsProfileArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigsProfile)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileArrayOutput) ToClusterServiceConfigsProfileArrayOutput() ClusterServiceConfigsProfileArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileArrayOutput) ToClusterServiceConfigsProfileArrayOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigsProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfigsProfile {
		return vs[0].([]ClusterServiceConfigsProfile)[vs[1].(int)]
	}).(ClusterServiceConfigsProfileOutput)
}

// Cluster service configs.
type ClusterServiceConfigsProfileResponse struct {
	// List of service configs.
	Configs []ClusterServiceConfigResponse `pulumi:"configs"`
	// Name of the service the configurations should apply to.
	ServiceName string `pulumi:"serviceName"`
}

// Cluster service configs.
type ClusterServiceConfigsProfileResponseOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterServiceConfigsProfileResponse)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileResponseOutput) ToClusterServiceConfigsProfileResponseOutput() ClusterServiceConfigsProfileResponseOutput {
	return o
}

func (o ClusterServiceConfigsProfileResponseOutput) ToClusterServiceConfigsProfileResponseOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileResponseOutput {
	return o
}

// List of service configs.
func (o ClusterServiceConfigsProfileResponseOutput) Configs() ClusterServiceConfigResponseArrayOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfileResponse) []ClusterServiceConfigResponse { return v.Configs }).(ClusterServiceConfigResponseArrayOutput)
}

// Name of the service the configurations should apply to.
func (o ClusterServiceConfigsProfileResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterServiceConfigsProfileResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ClusterServiceConfigsProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterServiceConfigsProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterServiceConfigsProfileResponse)(nil)).Elem()
}

func (o ClusterServiceConfigsProfileResponseArrayOutput) ToClusterServiceConfigsProfileResponseArrayOutput() ClusterServiceConfigsProfileResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileResponseArrayOutput) ToClusterServiceConfigsProfileResponseArrayOutputWithContext(ctx context.Context) ClusterServiceConfigsProfileResponseArrayOutput {
	return o
}

func (o ClusterServiceConfigsProfileResponseArrayOutput) Index(i pulumi.IntInput) ClusterServiceConfigsProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterServiceConfigsProfileResponse {
		return vs[0].([]ClusterServiceConfigsProfileResponse)[vs[1].(int)]
	}).(ClusterServiceConfigsProfileResponseOutput)
}

// The comparison rule.
type ComparisonRule struct {
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold setting.
	Threshold float64 `pulumi:"threshold"`
}

// ComparisonRuleInput is an input type that accepts ComparisonRuleArgs and ComparisonRuleOutput values.
// You can construct a concrete instance of `ComparisonRuleInput` via:
//
//	ComparisonRuleArgs{...}
type ComparisonRuleInput interface {
	pulumi.Input

	ToComparisonRuleOutput() ComparisonRuleOutput
	ToComparisonRuleOutputWithContext(context.Context) ComparisonRuleOutput
}

// The comparison rule.
type ComparisonRuleArgs struct {
	// The comparison operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Threshold setting.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
}

func (ComparisonRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonRule)(nil)).Elem()
}

func (i ComparisonRuleArgs) ToComparisonRuleOutput() ComparisonRuleOutput {
	return i.ToComparisonRuleOutputWithContext(context.Background())
}

func (i ComparisonRuleArgs) ToComparisonRuleOutputWithContext(ctx context.Context) ComparisonRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComparisonRuleOutput)
}

// The comparison rule.
type ComparisonRuleOutput struct{ *pulumi.OutputState }

func (ComparisonRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonRule)(nil)).Elem()
}

func (o ComparisonRuleOutput) ToComparisonRuleOutput() ComparisonRuleOutput {
	return o
}

func (o ComparisonRuleOutput) ToComparisonRuleOutputWithContext(ctx context.Context) ComparisonRuleOutput {
	return o
}

// The comparison operator.
func (o ComparisonRuleOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ComparisonRule) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold setting.
func (o ComparisonRuleOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ComparisonRule) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The comparison rule.
type ComparisonRuleResponse struct {
	// The comparison operator.
	Operator string `pulumi:"operator"`
	// Threshold setting.
	Threshold float64 `pulumi:"threshold"`
}

// The comparison rule.
type ComparisonRuleResponseOutput struct{ *pulumi.OutputState }

func (ComparisonRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonRuleResponse)(nil)).Elem()
}

func (o ComparisonRuleResponseOutput) ToComparisonRuleResponseOutput() ComparisonRuleResponseOutput {
	return o
}

func (o ComparisonRuleResponseOutput) ToComparisonRuleResponseOutputWithContext(ctx context.Context) ComparisonRuleResponseOutput {
	return o
}

// The comparison operator.
func (o ComparisonRuleResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ComparisonRuleResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold setting.
func (o ComparisonRuleResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v ComparisonRuleResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// The compute isolation properties.
type ComputeIsolationProperties struct {
	// The flag indicates whether enable compute isolation or not.
	EnableComputeIsolation *bool `pulumi:"enableComputeIsolation"`
	// The host sku.
	HostSku *string `pulumi:"hostSku"`
}

// Defaults sets the appropriate defaults for ComputeIsolationProperties
func (val *ComputeIsolationProperties) Defaults() *ComputeIsolationProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableComputeIsolation == nil {
		enableComputeIsolation_ := false
		tmp.EnableComputeIsolation = &enableComputeIsolation_
	}
	return &tmp
}

// ComputeIsolationPropertiesInput is an input type that accepts ComputeIsolationPropertiesArgs and ComputeIsolationPropertiesOutput values.
// You can construct a concrete instance of `ComputeIsolationPropertiesInput` via:
//
//	ComputeIsolationPropertiesArgs{...}
type ComputeIsolationPropertiesInput interface {
	pulumi.Input

	ToComputeIsolationPropertiesOutput() ComputeIsolationPropertiesOutput
	ToComputeIsolationPropertiesOutputWithContext(context.Context) ComputeIsolationPropertiesOutput
}

// The compute isolation properties.
type ComputeIsolationPropertiesArgs struct {
	// The flag indicates whether enable compute isolation or not.
	EnableComputeIsolation pulumi.BoolPtrInput `pulumi:"enableComputeIsolation"`
	// The host sku.
	HostSku pulumi.StringPtrInput `pulumi:"hostSku"`
}

// Defaults sets the appropriate defaults for ComputeIsolationPropertiesArgs
func (val *ComputeIsolationPropertiesArgs) Defaults() *ComputeIsolationPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableComputeIsolation == nil {
		tmp.EnableComputeIsolation = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComputeIsolationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeIsolationProperties)(nil)).Elem()
}

func (i ComputeIsolationPropertiesArgs) ToComputeIsolationPropertiesOutput() ComputeIsolationPropertiesOutput {
	return i.ToComputeIsolationPropertiesOutputWithContext(context.Background())
}

func (i ComputeIsolationPropertiesArgs) ToComputeIsolationPropertiesOutputWithContext(ctx context.Context) ComputeIsolationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeIsolationPropertiesOutput)
}

func (i ComputeIsolationPropertiesArgs) ToComputeIsolationPropertiesPtrOutput() ComputeIsolationPropertiesPtrOutput {
	return i.ToComputeIsolationPropertiesPtrOutputWithContext(context.Background())
}

func (i ComputeIsolationPropertiesArgs) ToComputeIsolationPropertiesPtrOutputWithContext(ctx context.Context) ComputeIsolationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeIsolationPropertiesOutput).ToComputeIsolationPropertiesPtrOutputWithContext(ctx)
}

// ComputeIsolationPropertiesPtrInput is an input type that accepts ComputeIsolationPropertiesArgs, ComputeIsolationPropertiesPtr and ComputeIsolationPropertiesPtrOutput values.
// You can construct a concrete instance of `ComputeIsolationPropertiesPtrInput` via:
//
//	        ComputeIsolationPropertiesArgs{...}
//
//	or:
//
//	        nil
type ComputeIsolationPropertiesPtrInput interface {
	pulumi.Input

	ToComputeIsolationPropertiesPtrOutput() ComputeIsolationPropertiesPtrOutput
	ToComputeIsolationPropertiesPtrOutputWithContext(context.Context) ComputeIsolationPropertiesPtrOutput
}

type computeIsolationPropertiesPtrType ComputeIsolationPropertiesArgs

func ComputeIsolationPropertiesPtr(v *ComputeIsolationPropertiesArgs) ComputeIsolationPropertiesPtrInput {
	return (*computeIsolationPropertiesPtrType)(v)
}

func (*computeIsolationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeIsolationProperties)(nil)).Elem()
}

func (i *computeIsolationPropertiesPtrType) ToComputeIsolationPropertiesPtrOutput() ComputeIsolationPropertiesPtrOutput {
	return i.ToComputeIsolationPropertiesPtrOutputWithContext(context.Background())
}

func (i *computeIsolationPropertiesPtrType) ToComputeIsolationPropertiesPtrOutputWithContext(ctx context.Context) ComputeIsolationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeIsolationPropertiesPtrOutput)
}

// The compute isolation properties.
type ComputeIsolationPropertiesOutput struct{ *pulumi.OutputState }

func (ComputeIsolationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeIsolationProperties)(nil)).Elem()
}

func (o ComputeIsolationPropertiesOutput) ToComputeIsolationPropertiesOutput() ComputeIsolationPropertiesOutput {
	return o
}

func (o ComputeIsolationPropertiesOutput) ToComputeIsolationPropertiesOutputWithContext(ctx context.Context) ComputeIsolationPropertiesOutput {
	return o
}

func (o ComputeIsolationPropertiesOutput) ToComputeIsolationPropertiesPtrOutput() ComputeIsolationPropertiesPtrOutput {
	return o.ToComputeIsolationPropertiesPtrOutputWithContext(context.Background())
}

func (o ComputeIsolationPropertiesOutput) ToComputeIsolationPropertiesPtrOutputWithContext(ctx context.Context) ComputeIsolationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeIsolationProperties) *ComputeIsolationProperties {
		return &v
	}).(ComputeIsolationPropertiesPtrOutput)
}

// The flag indicates whether enable compute isolation or not.
func (o ComputeIsolationPropertiesOutput) EnableComputeIsolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeIsolationProperties) *bool { return v.EnableComputeIsolation }).(pulumi.BoolPtrOutput)
}

// The host sku.
func (o ComputeIsolationPropertiesOutput) HostSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeIsolationProperties) *string { return v.HostSku }).(pulumi.StringPtrOutput)
}

type ComputeIsolationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComputeIsolationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeIsolationProperties)(nil)).Elem()
}

func (o ComputeIsolationPropertiesPtrOutput) ToComputeIsolationPropertiesPtrOutput() ComputeIsolationPropertiesPtrOutput {
	return o
}

func (o ComputeIsolationPropertiesPtrOutput) ToComputeIsolationPropertiesPtrOutputWithContext(ctx context.Context) ComputeIsolationPropertiesPtrOutput {
	return o
}

func (o ComputeIsolationPropertiesPtrOutput) Elem() ComputeIsolationPropertiesOutput {
	return o.ApplyT(func(v *ComputeIsolationProperties) ComputeIsolationProperties {
		if v != nil {
			return *v
		}
		var ret ComputeIsolationProperties
		return ret
	}).(ComputeIsolationPropertiesOutput)
}

// The flag indicates whether enable compute isolation or not.
func (o ComputeIsolationPropertiesPtrOutput) EnableComputeIsolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeIsolationProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableComputeIsolation
	}).(pulumi.BoolPtrOutput)
}

// The host sku.
func (o ComputeIsolationPropertiesPtrOutput) HostSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeIsolationProperties) *string {
		if v == nil {
			return nil
		}
		return v.HostSku
	}).(pulumi.StringPtrOutput)
}

// The compute isolation properties.
type ComputeIsolationPropertiesResponse struct {
	// The flag indicates whether enable compute isolation or not.
	EnableComputeIsolation *bool `pulumi:"enableComputeIsolation"`
	// The host sku.
	HostSku *string `pulumi:"hostSku"`
}

// Defaults sets the appropriate defaults for ComputeIsolationPropertiesResponse
func (val *ComputeIsolationPropertiesResponse) Defaults() *ComputeIsolationPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableComputeIsolation == nil {
		enableComputeIsolation_ := false
		tmp.EnableComputeIsolation = &enableComputeIsolation_
	}
	return &tmp
}

// The compute isolation properties.
type ComputeIsolationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ComputeIsolationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeIsolationPropertiesResponse)(nil)).Elem()
}

func (o ComputeIsolationPropertiesResponseOutput) ToComputeIsolationPropertiesResponseOutput() ComputeIsolationPropertiesResponseOutput {
	return o
}

func (o ComputeIsolationPropertiesResponseOutput) ToComputeIsolationPropertiesResponseOutputWithContext(ctx context.Context) ComputeIsolationPropertiesResponseOutput {
	return o
}

// The flag indicates whether enable compute isolation or not.
func (o ComputeIsolationPropertiesResponseOutput) EnableComputeIsolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeIsolationPropertiesResponse) *bool { return v.EnableComputeIsolation }).(pulumi.BoolPtrOutput)
}

// The host sku.
func (o ComputeIsolationPropertiesResponseOutput) HostSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeIsolationPropertiesResponse) *string { return v.HostSku }).(pulumi.StringPtrOutput)
}

type ComputeIsolationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeIsolationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeIsolationPropertiesResponse)(nil)).Elem()
}

func (o ComputeIsolationPropertiesResponsePtrOutput) ToComputeIsolationPropertiesResponsePtrOutput() ComputeIsolationPropertiesResponsePtrOutput {
	return o
}

func (o ComputeIsolationPropertiesResponsePtrOutput) ToComputeIsolationPropertiesResponsePtrOutputWithContext(ctx context.Context) ComputeIsolationPropertiesResponsePtrOutput {
	return o
}

func (o ComputeIsolationPropertiesResponsePtrOutput) Elem() ComputeIsolationPropertiesResponseOutput {
	return o.ApplyT(func(v *ComputeIsolationPropertiesResponse) ComputeIsolationPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ComputeIsolationPropertiesResponse
		return ret
	}).(ComputeIsolationPropertiesResponseOutput)
}

// The flag indicates whether enable compute isolation or not.
func (o ComputeIsolationPropertiesResponsePtrOutput) EnableComputeIsolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeIsolationPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableComputeIsolation
	}).(pulumi.BoolPtrOutput)
}

// The host sku.
func (o ComputeIsolationPropertiesResponsePtrOutput) HostSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeIsolationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostSku
	}).(pulumi.StringPtrOutput)
}

// Describes the compute profile.
type ComputeProfile struct {
	// The list of roles in the cluster.
	Roles []Role `pulumi:"roles"`
}

// ComputeProfileInput is an input type that accepts ComputeProfileArgs and ComputeProfileOutput values.
// You can construct a concrete instance of `ComputeProfileInput` via:
//
//	ComputeProfileArgs{...}
type ComputeProfileInput interface {
	pulumi.Input

	ToComputeProfileOutput() ComputeProfileOutput
	ToComputeProfileOutputWithContext(context.Context) ComputeProfileOutput
}

// Describes the compute profile.
type ComputeProfileArgs struct {
	// The list of roles in the cluster.
	Roles RoleArrayInput `pulumi:"roles"`
}

func (ComputeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeProfile)(nil)).Elem()
}

func (i ComputeProfileArgs) ToComputeProfileOutput() ComputeProfileOutput {
	return i.ToComputeProfileOutputWithContext(context.Background())
}

func (i ComputeProfileArgs) ToComputeProfileOutputWithContext(ctx context.Context) ComputeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeProfileOutput)
}

func (i ComputeProfileArgs) ToComputeProfilePtrOutput() ComputeProfilePtrOutput {
	return i.ToComputeProfilePtrOutputWithContext(context.Background())
}

func (i ComputeProfileArgs) ToComputeProfilePtrOutputWithContext(ctx context.Context) ComputeProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeProfileOutput).ToComputeProfilePtrOutputWithContext(ctx)
}

// ComputeProfilePtrInput is an input type that accepts ComputeProfileArgs, ComputeProfilePtr and ComputeProfilePtrOutput values.
// You can construct a concrete instance of `ComputeProfilePtrInput` via:
//
//	        ComputeProfileArgs{...}
//
//	or:
//
//	        nil
type ComputeProfilePtrInput interface {
	pulumi.Input

	ToComputeProfilePtrOutput() ComputeProfilePtrOutput
	ToComputeProfilePtrOutputWithContext(context.Context) ComputeProfilePtrOutput
}

type computeProfilePtrType ComputeProfileArgs

func ComputeProfilePtr(v *ComputeProfileArgs) ComputeProfilePtrInput {
	return (*computeProfilePtrType)(v)
}

func (*computeProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeProfile)(nil)).Elem()
}

func (i *computeProfilePtrType) ToComputeProfilePtrOutput() ComputeProfilePtrOutput {
	return i.ToComputeProfilePtrOutputWithContext(context.Background())
}

func (i *computeProfilePtrType) ToComputeProfilePtrOutputWithContext(ctx context.Context) ComputeProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeProfilePtrOutput)
}

// Describes the compute profile.
type ComputeProfileOutput struct{ *pulumi.OutputState }

func (ComputeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeProfile)(nil)).Elem()
}

func (o ComputeProfileOutput) ToComputeProfileOutput() ComputeProfileOutput {
	return o
}

func (o ComputeProfileOutput) ToComputeProfileOutputWithContext(ctx context.Context) ComputeProfileOutput {
	return o
}

func (o ComputeProfileOutput) ToComputeProfilePtrOutput() ComputeProfilePtrOutput {
	return o.ToComputeProfilePtrOutputWithContext(context.Background())
}

func (o ComputeProfileOutput) ToComputeProfilePtrOutputWithContext(ctx context.Context) ComputeProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeProfile) *ComputeProfile {
		return &v
	}).(ComputeProfilePtrOutput)
}

// The list of roles in the cluster.
func (o ComputeProfileOutput) Roles() RoleArrayOutput {
	return o.ApplyT(func(v ComputeProfile) []Role { return v.Roles }).(RoleArrayOutput)
}

type ComputeProfilePtrOutput struct{ *pulumi.OutputState }

func (ComputeProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeProfile)(nil)).Elem()
}

func (o ComputeProfilePtrOutput) ToComputeProfilePtrOutput() ComputeProfilePtrOutput {
	return o
}

func (o ComputeProfilePtrOutput) ToComputeProfilePtrOutputWithContext(ctx context.Context) ComputeProfilePtrOutput {
	return o
}

func (o ComputeProfilePtrOutput) Elem() ComputeProfileOutput {
	return o.ApplyT(func(v *ComputeProfile) ComputeProfile {
		if v != nil {
			return *v
		}
		var ret ComputeProfile
		return ret
	}).(ComputeProfileOutput)
}

// The list of roles in the cluster.
func (o ComputeProfilePtrOutput) Roles() RoleArrayOutput {
	return o.ApplyT(func(v *ComputeProfile) []Role {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(RoleArrayOutput)
}

// Describes the compute profile.
type ComputeProfileResponse struct {
	// The list of roles in the cluster.
	Roles []RoleResponse `pulumi:"roles"`
}

// Describes the compute profile.
type ComputeProfileResponseOutput struct{ *pulumi.OutputState }

func (ComputeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeProfileResponse)(nil)).Elem()
}

func (o ComputeProfileResponseOutput) ToComputeProfileResponseOutput() ComputeProfileResponseOutput {
	return o
}

func (o ComputeProfileResponseOutput) ToComputeProfileResponseOutputWithContext(ctx context.Context) ComputeProfileResponseOutput {
	return o
}

// The list of roles in the cluster.
func (o ComputeProfileResponseOutput) Roles() RoleResponseArrayOutput {
	return o.ApplyT(func(v ComputeProfileResponse) []RoleResponse { return v.Roles }).(RoleResponseArrayOutput)
}

type ComputeProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeProfileResponse)(nil)).Elem()
}

func (o ComputeProfileResponsePtrOutput) ToComputeProfileResponsePtrOutput() ComputeProfileResponsePtrOutput {
	return o
}

func (o ComputeProfileResponsePtrOutput) ToComputeProfileResponsePtrOutputWithContext(ctx context.Context) ComputeProfileResponsePtrOutput {
	return o
}

func (o ComputeProfileResponsePtrOutput) Elem() ComputeProfileResponseOutput {
	return o.ApplyT(func(v *ComputeProfileResponse) ComputeProfileResponse {
		if v != nil {
			return *v
		}
		var ret ComputeProfileResponse
		return ret
	}).(ComputeProfileResponseOutput)
}

// The list of roles in the cluster.
func (o ComputeProfileResponsePtrOutput) Roles() RoleResponseArrayOutput {
	return o.ApplyT(func(v *ComputeProfileResponse) []RoleResponse {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(RoleResponseArrayOutput)
}

// The cpu and memory requirement definition.
type ComputeResourceDefinition struct {
	// The required CPU.
	Cpu float64 `pulumi:"cpu"`
	// The required memory in MB, Container memory will be 110 percentile
	Memory float64 `pulumi:"memory"`
}

// ComputeResourceDefinitionInput is an input type that accepts ComputeResourceDefinitionArgs and ComputeResourceDefinitionOutput values.
// You can construct a concrete instance of `ComputeResourceDefinitionInput` via:
//
//	ComputeResourceDefinitionArgs{...}
type ComputeResourceDefinitionInput interface {
	pulumi.Input

	ToComputeResourceDefinitionOutput() ComputeResourceDefinitionOutput
	ToComputeResourceDefinitionOutputWithContext(context.Context) ComputeResourceDefinitionOutput
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionArgs struct {
	// The required CPU.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The required memory in MB, Container memory will be 110 percentile
	Memory pulumi.Float64Input `pulumi:"memory"`
}

func (ComputeResourceDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeResourceDefinition)(nil)).Elem()
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionOutput() ComputeResourceDefinitionOutput {
	return i.ToComputeResourceDefinitionOutputWithContext(context.Background())
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionOutputWithContext(ctx context.Context) ComputeResourceDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeResourceDefinitionOutput)
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return i.ToComputeResourceDefinitionPtrOutputWithContext(context.Background())
}

func (i ComputeResourceDefinitionArgs) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeResourceDefinitionOutput).ToComputeResourceDefinitionPtrOutputWithContext(ctx)
}

// ComputeResourceDefinitionPtrInput is an input type that accepts ComputeResourceDefinitionArgs, ComputeResourceDefinitionPtr and ComputeResourceDefinitionPtrOutput values.
// You can construct a concrete instance of `ComputeResourceDefinitionPtrInput` via:
//
//	        ComputeResourceDefinitionArgs{...}
//
//	or:
//
//	        nil
type ComputeResourceDefinitionPtrInput interface {
	pulumi.Input

	ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput
	ToComputeResourceDefinitionPtrOutputWithContext(context.Context) ComputeResourceDefinitionPtrOutput
}

type computeResourceDefinitionPtrType ComputeResourceDefinitionArgs

func ComputeResourceDefinitionPtr(v *ComputeResourceDefinitionArgs) ComputeResourceDefinitionPtrInput {
	return (*computeResourceDefinitionPtrType)(v)
}

func (*computeResourceDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeResourceDefinition)(nil)).Elem()
}

func (i *computeResourceDefinitionPtrType) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return i.ToComputeResourceDefinitionPtrOutputWithContext(context.Background())
}

func (i *computeResourceDefinitionPtrType) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeResourceDefinitionPtrOutput)
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeResourceDefinition)(nil)).Elem()
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionOutput() ComputeResourceDefinitionOutput {
	return o
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionOutputWithContext(ctx context.Context) ComputeResourceDefinitionOutput {
	return o
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return o.ToComputeResourceDefinitionPtrOutputWithContext(context.Background())
}

func (o ComputeResourceDefinitionOutput) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeResourceDefinition) *ComputeResourceDefinition {
		return &v
	}).(ComputeResourceDefinitionPtrOutput)
}

// The required CPU.
func (o ComputeResourceDefinitionOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinition) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinition) float64 { return v.Memory }).(pulumi.Float64Output)
}

type ComputeResourceDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeResourceDefinition)(nil)).Elem()
}

func (o ComputeResourceDefinitionPtrOutput) ToComputeResourceDefinitionPtrOutput() ComputeResourceDefinitionPtrOutput {
	return o
}

func (o ComputeResourceDefinitionPtrOutput) ToComputeResourceDefinitionPtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionPtrOutput {
	return o
}

func (o ComputeResourceDefinitionPtrOutput) Elem() ComputeResourceDefinitionOutput {
	return o.ApplyT(func(v *ComputeResourceDefinition) ComputeResourceDefinition {
		if v != nil {
			return *v
		}
		var ret ComputeResourceDefinition
		return ret
	}).(ComputeResourceDefinitionOutput)
}

// The required CPU.
func (o ComputeResourceDefinitionPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinition) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionPtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinition) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionResponse struct {
	// The required CPU.
	Cpu float64 `pulumi:"cpu"`
	// The required memory in MB, Container memory will be 110 percentile
	Memory float64 `pulumi:"memory"`
}

// The cpu and memory requirement definition.
type ComputeResourceDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeResourceDefinitionResponse)(nil)).Elem()
}

func (o ComputeResourceDefinitionResponseOutput) ToComputeResourceDefinitionResponseOutput() ComputeResourceDefinitionResponseOutput {
	return o
}

func (o ComputeResourceDefinitionResponseOutput) ToComputeResourceDefinitionResponseOutputWithContext(ctx context.Context) ComputeResourceDefinitionResponseOutput {
	return o
}

// The required CPU.
func (o ComputeResourceDefinitionResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinitionResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionResponseOutput) Memory() pulumi.Float64Output {
	return o.ApplyT(func(v ComputeResourceDefinitionResponse) float64 { return v.Memory }).(pulumi.Float64Output)
}

type ComputeResourceDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeResourceDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeResourceDefinitionResponse)(nil)).Elem()
}

func (o ComputeResourceDefinitionResponsePtrOutput) ToComputeResourceDefinitionResponsePtrOutput() ComputeResourceDefinitionResponsePtrOutput {
	return o
}

func (o ComputeResourceDefinitionResponsePtrOutput) ToComputeResourceDefinitionResponsePtrOutputWithContext(ctx context.Context) ComputeResourceDefinitionResponsePtrOutput {
	return o
}

func (o ComputeResourceDefinitionResponsePtrOutput) Elem() ComputeResourceDefinitionResponseOutput {
	return o.ApplyT(func(v *ComputeResourceDefinitionResponse) ComputeResourceDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ComputeResourceDefinitionResponse
		return ret
	}).(ComputeResourceDefinitionResponseOutput)
}

// The required CPU.
func (o ComputeResourceDefinitionResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The required memory in MB, Container memory will be 110 percentile
func (o ComputeResourceDefinitionResponsePtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ComputeResourceDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Memory
	}).(pulumi.Float64PtrOutput)
}

// The connectivity properties
type ConnectivityEndpointResponse struct {
	// The location of the endpoint.
	Location *string `pulumi:"location"`
	// The name of the endpoint.
	Name *string `pulumi:"name"`
	// The port to connect to.
	Port *int `pulumi:"port"`
	// The private ip address of the endpoint.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The protocol of the endpoint.
	Protocol *string `pulumi:"protocol"`
}

// The connectivity properties
type ConnectivityEndpointResponseOutput struct{ *pulumi.OutputState }

func (ConnectivityEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityEndpointResponse)(nil)).Elem()
}

func (o ConnectivityEndpointResponseOutput) ToConnectivityEndpointResponseOutput() ConnectivityEndpointResponseOutput {
	return o
}

func (o ConnectivityEndpointResponseOutput) ToConnectivityEndpointResponseOutputWithContext(ctx context.Context) ConnectivityEndpointResponseOutput {
	return o
}

// The location of the endpoint.
func (o ConnectivityEndpointResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectivityEndpointResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the endpoint.
func (o ConnectivityEndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectivityEndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port to connect to.
func (o ConnectivityEndpointResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectivityEndpointResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The private ip address of the endpoint.
func (o ConnectivityEndpointResponseOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectivityEndpointResponse) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The protocol of the endpoint.
func (o ConnectivityEndpointResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectivityEndpointResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ConnectivityEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectivityEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectivityEndpointResponse)(nil)).Elem()
}

func (o ConnectivityEndpointResponseArrayOutput) ToConnectivityEndpointResponseArrayOutput() ConnectivityEndpointResponseArrayOutput {
	return o
}

func (o ConnectivityEndpointResponseArrayOutput) ToConnectivityEndpointResponseArrayOutputWithContext(ctx context.Context) ConnectivityEndpointResponseArrayOutput {
	return o
}

func (o ConnectivityEndpointResponseArrayOutput) Index(i pulumi.IntInput) ConnectivityEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectivityEndpointResponse {
		return vs[0].([]ConnectivityEndpointResponse)[vs[1].(int)]
	}).(ConnectivityEndpointResponseOutput)
}

// Cluster connectivity profile.
type ConnectivityProfileResponse struct {
	// List of SSH connectivity endpoints.
	Ssh []SshConnectivityEndpointResponse `pulumi:"ssh"`
	// Web connectivity endpoint details.
	Web ConnectivityProfileResponseWeb `pulumi:"web"`
}

// Cluster connectivity profile.
type ConnectivityProfileResponseOutput struct{ *pulumi.OutputState }

func (ConnectivityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityProfileResponse)(nil)).Elem()
}

func (o ConnectivityProfileResponseOutput) ToConnectivityProfileResponseOutput() ConnectivityProfileResponseOutput {
	return o
}

func (o ConnectivityProfileResponseOutput) ToConnectivityProfileResponseOutputWithContext(ctx context.Context) ConnectivityProfileResponseOutput {
	return o
}

// List of SSH connectivity endpoints.
func (o ConnectivityProfileResponseOutput) Ssh() SshConnectivityEndpointResponseArrayOutput {
	return o.ApplyT(func(v ConnectivityProfileResponse) []SshConnectivityEndpointResponse { return v.Ssh }).(SshConnectivityEndpointResponseArrayOutput)
}

// Web connectivity endpoint details.
func (o ConnectivityProfileResponseOutput) Web() ConnectivityProfileResponseWebOutput {
	return o.ApplyT(func(v ConnectivityProfileResponse) ConnectivityProfileResponseWeb { return v.Web }).(ConnectivityProfileResponseWebOutput)
}

// Web connectivity endpoint details.
type ConnectivityProfileResponseWeb struct {
	// Web connectivity endpoint.
	Fqdn string `pulumi:"fqdn"`
	// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
	PrivateFqdn *string `pulumi:"privateFqdn"`
}

// Web connectivity endpoint details.
type ConnectivityProfileResponseWebOutput struct{ *pulumi.OutputState }

func (ConnectivityProfileResponseWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityProfileResponseWeb)(nil)).Elem()
}

func (o ConnectivityProfileResponseWebOutput) ToConnectivityProfileResponseWebOutput() ConnectivityProfileResponseWebOutput {
	return o
}

func (o ConnectivityProfileResponseWebOutput) ToConnectivityProfileResponseWebOutputWithContext(ctx context.Context) ConnectivityProfileResponseWebOutput {
	return o
}

// Web connectivity endpoint.
func (o ConnectivityProfileResponseWebOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectivityProfileResponseWeb) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
func (o ConnectivityProfileResponseWebOutput) PrivateFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectivityProfileResponseWeb) *string { return v.PrivateFqdn }).(pulumi.StringPtrOutput)
}

// The data disks groups for the role.
type DataDisksGroups struct {
	// The number of disks per node.
	DisksPerNode *int `pulumi:"disksPerNode"`
}

// DataDisksGroupsInput is an input type that accepts DataDisksGroupsArgs and DataDisksGroupsOutput values.
// You can construct a concrete instance of `DataDisksGroupsInput` via:
//
//	DataDisksGroupsArgs{...}
type DataDisksGroupsInput interface {
	pulumi.Input

	ToDataDisksGroupsOutput() DataDisksGroupsOutput
	ToDataDisksGroupsOutputWithContext(context.Context) DataDisksGroupsOutput
}

// The data disks groups for the role.
type DataDisksGroupsArgs struct {
	// The number of disks per node.
	DisksPerNode pulumi.IntPtrInput `pulumi:"disksPerNode"`
}

func (DataDisksGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksGroups)(nil)).Elem()
}

func (i DataDisksGroupsArgs) ToDataDisksGroupsOutput() DataDisksGroupsOutput {
	return i.ToDataDisksGroupsOutputWithContext(context.Background())
}

func (i DataDisksGroupsArgs) ToDataDisksGroupsOutputWithContext(ctx context.Context) DataDisksGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksGroupsOutput)
}

// DataDisksGroupsArrayInput is an input type that accepts DataDisksGroupsArray and DataDisksGroupsArrayOutput values.
// You can construct a concrete instance of `DataDisksGroupsArrayInput` via:
//
//	DataDisksGroupsArray{ DataDisksGroupsArgs{...} }
type DataDisksGroupsArrayInput interface {
	pulumi.Input

	ToDataDisksGroupsArrayOutput() DataDisksGroupsArrayOutput
	ToDataDisksGroupsArrayOutputWithContext(context.Context) DataDisksGroupsArrayOutput
}

type DataDisksGroupsArray []DataDisksGroupsInput

func (DataDisksGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisksGroups)(nil)).Elem()
}

func (i DataDisksGroupsArray) ToDataDisksGroupsArrayOutput() DataDisksGroupsArrayOutput {
	return i.ToDataDisksGroupsArrayOutputWithContext(context.Background())
}

func (i DataDisksGroupsArray) ToDataDisksGroupsArrayOutputWithContext(ctx context.Context) DataDisksGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDisksGroupsArrayOutput)
}

// The data disks groups for the role.
type DataDisksGroupsOutput struct{ *pulumi.OutputState }

func (DataDisksGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksGroups)(nil)).Elem()
}

func (o DataDisksGroupsOutput) ToDataDisksGroupsOutput() DataDisksGroupsOutput {
	return o
}

func (o DataDisksGroupsOutput) ToDataDisksGroupsOutputWithContext(ctx context.Context) DataDisksGroupsOutput {
	return o
}

// The number of disks per node.
func (o DataDisksGroupsOutput) DisksPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataDisksGroups) *int { return v.DisksPerNode }).(pulumi.IntPtrOutput)
}

type DataDisksGroupsArrayOutput struct{ *pulumi.OutputState }

func (DataDisksGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisksGroups)(nil)).Elem()
}

func (o DataDisksGroupsArrayOutput) ToDataDisksGroupsArrayOutput() DataDisksGroupsArrayOutput {
	return o
}

func (o DataDisksGroupsArrayOutput) ToDataDisksGroupsArrayOutputWithContext(ctx context.Context) DataDisksGroupsArrayOutput {
	return o
}

func (o DataDisksGroupsArrayOutput) Index(i pulumi.IntInput) DataDisksGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDisksGroups {
		return vs[0].([]DataDisksGroups)[vs[1].(int)]
	}).(DataDisksGroupsOutput)
}

// The data disks groups for the role.
type DataDisksGroupsResponse struct {
	// ReadOnly. The DiskSize in GB. Do not set this value.
	DiskSizeGB int `pulumi:"diskSizeGB"`
	// The number of disks per node.
	DisksPerNode *int `pulumi:"disksPerNode"`
	// ReadOnly. The storage account type. Do not set this value.
	StorageAccountType string `pulumi:"storageAccountType"`
}

// The data disks groups for the role.
type DataDisksGroupsResponseOutput struct{ *pulumi.OutputState }

func (DataDisksGroupsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDisksGroupsResponse)(nil)).Elem()
}

func (o DataDisksGroupsResponseOutput) ToDataDisksGroupsResponseOutput() DataDisksGroupsResponseOutput {
	return o
}

func (o DataDisksGroupsResponseOutput) ToDataDisksGroupsResponseOutputWithContext(ctx context.Context) DataDisksGroupsResponseOutput {
	return o
}

// ReadOnly. The DiskSize in GB. Do not set this value.
func (o DataDisksGroupsResponseOutput) DiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v DataDisksGroupsResponse) int { return v.DiskSizeGB }).(pulumi.IntOutput)
}

// The number of disks per node.
func (o DataDisksGroupsResponseOutput) DisksPerNode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DataDisksGroupsResponse) *int { return v.DisksPerNode }).(pulumi.IntPtrOutput)
}

// ReadOnly. The storage account type. Do not set this value.
func (o DataDisksGroupsResponseOutput) StorageAccountType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDisksGroupsResponse) string { return v.StorageAccountType }).(pulumi.StringOutput)
}

type DataDisksGroupsResponseArrayOutput struct{ *pulumi.OutputState }

func (DataDisksGroupsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataDisksGroupsResponse)(nil)).Elem()
}

func (o DataDisksGroupsResponseArrayOutput) ToDataDisksGroupsResponseArrayOutput() DataDisksGroupsResponseArrayOutput {
	return o
}

func (o DataDisksGroupsResponseArrayOutput) ToDataDisksGroupsResponseArrayOutputWithContext(ctx context.Context) DataDisksGroupsResponseArrayOutput {
	return o
}

func (o DataDisksGroupsResponseArrayOutput) Index(i pulumi.IntInput) DataDisksGroupsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataDisksGroupsResponse {
		return vs[0].([]DataDisksGroupsResponse)[vs[1].(int)]
	}).(DataDisksGroupsResponseOutput)
}

// The disk encryption properties
type DiskEncryptionProperties struct {
	// Algorithm identifier for encryption, default RSA-OAEP.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// Indicates whether or not resource disk encryption is enabled.
	EncryptionAtHost *bool `pulumi:"encryptionAtHost"`
	// Key name that is used for enabling disk encryption.
	KeyName *string `pulumi:"keyName"`
	// Specific key version that is used for enabling disk encryption.
	KeyVersion *string `pulumi:"keyVersion"`
	// Resource ID of Managed Identity that is used to access the key vault.
	MsiResourceId *string `pulumi:"msiResourceId"`
	// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
	VaultUri *string `pulumi:"vaultUri"`
}

// Defaults sets the appropriate defaults for DiskEncryptionProperties
func (val *DiskEncryptionProperties) Defaults() *DiskEncryptionProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptionAtHost == nil {
		encryptionAtHost_ := false
		tmp.EncryptionAtHost = &encryptionAtHost_
	}
	return &tmp
}

// DiskEncryptionPropertiesInput is an input type that accepts DiskEncryptionPropertiesArgs and DiskEncryptionPropertiesOutput values.
// You can construct a concrete instance of `DiskEncryptionPropertiesInput` via:
//
//	DiskEncryptionPropertiesArgs{...}
type DiskEncryptionPropertiesInput interface {
	pulumi.Input

	ToDiskEncryptionPropertiesOutput() DiskEncryptionPropertiesOutput
	ToDiskEncryptionPropertiesOutputWithContext(context.Context) DiskEncryptionPropertiesOutput
}

// The disk encryption properties
type DiskEncryptionPropertiesArgs struct {
	// Algorithm identifier for encryption, default RSA-OAEP.
	EncryptionAlgorithm pulumi.StringPtrInput `pulumi:"encryptionAlgorithm"`
	// Indicates whether or not resource disk encryption is enabled.
	EncryptionAtHost pulumi.BoolPtrInput `pulumi:"encryptionAtHost"`
	// Key name that is used for enabling disk encryption.
	KeyName pulumi.StringPtrInput `pulumi:"keyName"`
	// Specific key version that is used for enabling disk encryption.
	KeyVersion pulumi.StringPtrInput `pulumi:"keyVersion"`
	// Resource ID of Managed Identity that is used to access the key vault.
	MsiResourceId pulumi.StringPtrInput `pulumi:"msiResourceId"`
	// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
	VaultUri pulumi.StringPtrInput `pulumi:"vaultUri"`
}

// Defaults sets the appropriate defaults for DiskEncryptionPropertiesArgs
func (val *DiskEncryptionPropertiesArgs) Defaults() *DiskEncryptionPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptionAtHost == nil {
		tmp.EncryptionAtHost = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DiskEncryptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionProperties)(nil)).Elem()
}

func (i DiskEncryptionPropertiesArgs) ToDiskEncryptionPropertiesOutput() DiskEncryptionPropertiesOutput {
	return i.ToDiskEncryptionPropertiesOutputWithContext(context.Background())
}

func (i DiskEncryptionPropertiesArgs) ToDiskEncryptionPropertiesOutputWithContext(ctx context.Context) DiskEncryptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionPropertiesOutput)
}

func (i DiskEncryptionPropertiesArgs) ToDiskEncryptionPropertiesPtrOutput() DiskEncryptionPropertiesPtrOutput {
	return i.ToDiskEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionPropertiesArgs) ToDiskEncryptionPropertiesPtrOutputWithContext(ctx context.Context) DiskEncryptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionPropertiesOutput).ToDiskEncryptionPropertiesPtrOutputWithContext(ctx)
}

// DiskEncryptionPropertiesPtrInput is an input type that accepts DiskEncryptionPropertiesArgs, DiskEncryptionPropertiesPtr and DiskEncryptionPropertiesPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionPropertiesPtrInput` via:
//
//	        DiskEncryptionPropertiesArgs{...}
//
//	or:
//
//	        nil
type DiskEncryptionPropertiesPtrInput interface {
	pulumi.Input

	ToDiskEncryptionPropertiesPtrOutput() DiskEncryptionPropertiesPtrOutput
	ToDiskEncryptionPropertiesPtrOutputWithContext(context.Context) DiskEncryptionPropertiesPtrOutput
}

type diskEncryptionPropertiesPtrType DiskEncryptionPropertiesArgs

func DiskEncryptionPropertiesPtr(v *DiskEncryptionPropertiesArgs) DiskEncryptionPropertiesPtrInput {
	return (*diskEncryptionPropertiesPtrType)(v)
}

func (*diskEncryptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionProperties)(nil)).Elem()
}

func (i *diskEncryptionPropertiesPtrType) ToDiskEncryptionPropertiesPtrOutput() DiskEncryptionPropertiesPtrOutput {
	return i.ToDiskEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionPropertiesPtrType) ToDiskEncryptionPropertiesPtrOutputWithContext(ctx context.Context) DiskEncryptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionPropertiesPtrOutput)
}

// The disk encryption properties
type DiskEncryptionPropertiesOutput struct{ *pulumi.OutputState }

func (DiskEncryptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionProperties)(nil)).Elem()
}

func (o DiskEncryptionPropertiesOutput) ToDiskEncryptionPropertiesOutput() DiskEncryptionPropertiesOutput {
	return o
}

func (o DiskEncryptionPropertiesOutput) ToDiskEncryptionPropertiesOutputWithContext(ctx context.Context) DiskEncryptionPropertiesOutput {
	return o
}

func (o DiskEncryptionPropertiesOutput) ToDiskEncryptionPropertiesPtrOutput() DiskEncryptionPropertiesPtrOutput {
	return o.ToDiskEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionPropertiesOutput) ToDiskEncryptionPropertiesPtrOutputWithContext(ctx context.Context) DiskEncryptionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskEncryptionProperties) *DiskEncryptionProperties {
		return &v
	}).(DiskEncryptionPropertiesPtrOutput)
}

// Algorithm identifier for encryption, default RSA-OAEP.
func (o DiskEncryptionPropertiesOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionProperties) *string { return v.EncryptionAlgorithm }).(pulumi.StringPtrOutput)
}

// Indicates whether or not resource disk encryption is enabled.
func (o DiskEncryptionPropertiesOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiskEncryptionProperties) *bool { return v.EncryptionAtHost }).(pulumi.BoolPtrOutput)
}

// Key name that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionProperties) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Specific key version that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionProperties) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// Resource ID of Managed Identity that is used to access the key vault.
func (o DiskEncryptionPropertiesOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionProperties) *string { return v.MsiResourceId }).(pulumi.StringPtrOutput)
}

// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
func (o DiskEncryptionPropertiesOutput) VaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionProperties) *string { return v.VaultUri }).(pulumi.StringPtrOutput)
}

type DiskEncryptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionProperties)(nil)).Elem()
}

func (o DiskEncryptionPropertiesPtrOutput) ToDiskEncryptionPropertiesPtrOutput() DiskEncryptionPropertiesPtrOutput {
	return o
}

func (o DiskEncryptionPropertiesPtrOutput) ToDiskEncryptionPropertiesPtrOutputWithContext(ctx context.Context) DiskEncryptionPropertiesPtrOutput {
	return o
}

func (o DiskEncryptionPropertiesPtrOutput) Elem() DiskEncryptionPropertiesOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) DiskEncryptionProperties {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionProperties
		return ret
	}).(DiskEncryptionPropertiesOutput)
}

// Algorithm identifier for encryption, default RSA-OAEP.
func (o DiskEncryptionPropertiesPtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not resource disk encryption is enabled.
func (o DiskEncryptionPropertiesPtrOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionAtHost
	}).(pulumi.BoolPtrOutput)
}

// Key name that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// Specific key version that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// Resource ID of Managed Identity that is used to access the key vault.
func (o DiskEncryptionPropertiesPtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
func (o DiskEncryptionPropertiesPtrOutput) VaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.VaultUri
	}).(pulumi.StringPtrOutput)
}

// The disk encryption properties
type DiskEncryptionPropertiesResponse struct {
	// Algorithm identifier for encryption, default RSA-OAEP.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// Indicates whether or not resource disk encryption is enabled.
	EncryptionAtHost *bool `pulumi:"encryptionAtHost"`
	// Key name that is used for enabling disk encryption.
	KeyName *string `pulumi:"keyName"`
	// Specific key version that is used for enabling disk encryption.
	KeyVersion *string `pulumi:"keyVersion"`
	// Resource ID of Managed Identity that is used to access the key vault.
	MsiResourceId *string `pulumi:"msiResourceId"`
	// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
	VaultUri *string `pulumi:"vaultUri"`
}

// Defaults sets the appropriate defaults for DiskEncryptionPropertiesResponse
func (val *DiskEncryptionPropertiesResponse) Defaults() *DiskEncryptionPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptionAtHost == nil {
		encryptionAtHost_ := false
		tmp.EncryptionAtHost = &encryptionAtHost_
	}
	return &tmp
}

// The disk encryption properties
type DiskEncryptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionPropertiesResponse)(nil)).Elem()
}

func (o DiskEncryptionPropertiesResponseOutput) ToDiskEncryptionPropertiesResponseOutput() DiskEncryptionPropertiesResponseOutput {
	return o
}

func (o DiskEncryptionPropertiesResponseOutput) ToDiskEncryptionPropertiesResponseOutputWithContext(ctx context.Context) DiskEncryptionPropertiesResponseOutput {
	return o
}

// Algorithm identifier for encryption, default RSA-OAEP.
func (o DiskEncryptionPropertiesResponseOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionPropertiesResponse) *string { return v.EncryptionAlgorithm }).(pulumi.StringPtrOutput)
}

// Indicates whether or not resource disk encryption is enabled.
func (o DiskEncryptionPropertiesResponseOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DiskEncryptionPropertiesResponse) *bool { return v.EncryptionAtHost }).(pulumi.BoolPtrOutput)
}

// Key name that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesResponseOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionPropertiesResponse) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Specific key version that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesResponseOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionPropertiesResponse) *string { return v.KeyVersion }).(pulumi.StringPtrOutput)
}

// Resource ID of Managed Identity that is used to access the key vault.
func (o DiskEncryptionPropertiesResponseOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionPropertiesResponse) *string { return v.MsiResourceId }).(pulumi.StringPtrOutput)
}

// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
func (o DiskEncryptionPropertiesResponseOutput) VaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionPropertiesResponse) *string { return v.VaultUri }).(pulumi.StringPtrOutput)
}

type DiskEncryptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionPropertiesResponse)(nil)).Elem()
}

func (o DiskEncryptionPropertiesResponsePtrOutput) ToDiskEncryptionPropertiesResponsePtrOutput() DiskEncryptionPropertiesResponsePtrOutput {
	return o
}

func (o DiskEncryptionPropertiesResponsePtrOutput) ToDiskEncryptionPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskEncryptionPropertiesResponsePtrOutput {
	return o
}

func (o DiskEncryptionPropertiesResponsePtrOutput) Elem() DiskEncryptionPropertiesResponseOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) DiskEncryptionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionPropertiesResponse
		return ret
	}).(DiskEncryptionPropertiesResponseOutput)
}

// Algorithm identifier for encryption, default RSA-OAEP.
func (o DiskEncryptionPropertiesResponsePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not resource disk encryption is enabled.
func (o DiskEncryptionPropertiesResponsePtrOutput) EncryptionAtHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EncryptionAtHost
	}).(pulumi.BoolPtrOutput)
}

// Key name that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyName
	}).(pulumi.StringPtrOutput)
}

// Specific key version that is used for enabling disk encryption.
func (o DiskEncryptionPropertiesResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// Resource ID of Managed Identity that is used to access the key vault.
func (o DiskEncryptionPropertiesResponsePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
func (o DiskEncryptionPropertiesResponsePtrOutput) VaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VaultUri
	}).(pulumi.StringPtrOutput)
}

// Kafka disk storage profile.
type DiskStorageProfile struct {
	// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
	DataDiskSize int `pulumi:"dataDiskSize"`
	// Managed Disk Type.
	DataDiskType string `pulumi:"dataDiskType"`
}

// DiskStorageProfileInput is an input type that accepts DiskStorageProfileArgs and DiskStorageProfileOutput values.
// You can construct a concrete instance of `DiskStorageProfileInput` via:
//
//	DiskStorageProfileArgs{...}
type DiskStorageProfileInput interface {
	pulumi.Input

	ToDiskStorageProfileOutput() DiskStorageProfileOutput
	ToDiskStorageProfileOutputWithContext(context.Context) DiskStorageProfileOutput
}

// Kafka disk storage profile.
type DiskStorageProfileArgs struct {
	// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
	DataDiskSize pulumi.IntInput `pulumi:"dataDiskSize"`
	// Managed Disk Type.
	DataDiskType pulumi.StringInput `pulumi:"dataDiskType"`
}

func (DiskStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskStorageProfile)(nil)).Elem()
}

func (i DiskStorageProfileArgs) ToDiskStorageProfileOutput() DiskStorageProfileOutput {
	return i.ToDiskStorageProfileOutputWithContext(context.Background())
}

func (i DiskStorageProfileArgs) ToDiskStorageProfileOutputWithContext(ctx context.Context) DiskStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskStorageProfileOutput)
}

func (i DiskStorageProfileArgs) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return i.ToDiskStorageProfilePtrOutputWithContext(context.Background())
}

func (i DiskStorageProfileArgs) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskStorageProfileOutput).ToDiskStorageProfilePtrOutputWithContext(ctx)
}

// DiskStorageProfilePtrInput is an input type that accepts DiskStorageProfileArgs, DiskStorageProfilePtr and DiskStorageProfilePtrOutput values.
// You can construct a concrete instance of `DiskStorageProfilePtrInput` via:
//
//	        DiskStorageProfileArgs{...}
//
//	or:
//
//	        nil
type DiskStorageProfilePtrInput interface {
	pulumi.Input

	ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput
	ToDiskStorageProfilePtrOutputWithContext(context.Context) DiskStorageProfilePtrOutput
}

type diskStorageProfilePtrType DiskStorageProfileArgs

func DiskStorageProfilePtr(v *DiskStorageProfileArgs) DiskStorageProfilePtrInput {
	return (*diskStorageProfilePtrType)(v)
}

func (*diskStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskStorageProfile)(nil)).Elem()
}

func (i *diskStorageProfilePtrType) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return i.ToDiskStorageProfilePtrOutputWithContext(context.Background())
}

func (i *diskStorageProfilePtrType) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskStorageProfilePtrOutput)
}

// Kafka disk storage profile.
type DiskStorageProfileOutput struct{ *pulumi.OutputState }

func (DiskStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskStorageProfile)(nil)).Elem()
}

func (o DiskStorageProfileOutput) ToDiskStorageProfileOutput() DiskStorageProfileOutput {
	return o
}

func (o DiskStorageProfileOutput) ToDiskStorageProfileOutputWithContext(ctx context.Context) DiskStorageProfileOutput {
	return o
}

func (o DiskStorageProfileOutput) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return o.ToDiskStorageProfilePtrOutputWithContext(context.Background())
}

func (o DiskStorageProfileOutput) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskStorageProfile) *DiskStorageProfile {
		return &v
	}).(DiskStorageProfilePtrOutput)
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfileOutput) DataDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v DiskStorageProfile) int { return v.DataDiskSize }).(pulumi.IntOutput)
}

// Managed Disk Type.
func (o DiskStorageProfileOutput) DataDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskStorageProfile) string { return v.DataDiskType }).(pulumi.StringOutput)
}

type DiskStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (DiskStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskStorageProfile)(nil)).Elem()
}

func (o DiskStorageProfilePtrOutput) ToDiskStorageProfilePtrOutput() DiskStorageProfilePtrOutput {
	return o
}

func (o DiskStorageProfilePtrOutput) ToDiskStorageProfilePtrOutputWithContext(ctx context.Context) DiskStorageProfilePtrOutput {
	return o
}

func (o DiskStorageProfilePtrOutput) Elem() DiskStorageProfileOutput {
	return o.ApplyT(func(v *DiskStorageProfile) DiskStorageProfile {
		if v != nil {
			return *v
		}
		var ret DiskStorageProfile
		return ret
	}).(DiskStorageProfileOutput)
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfilePtrOutput) DataDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfile) *int {
		if v == nil {
			return nil
		}
		return &v.DataDiskSize
	}).(pulumi.IntPtrOutput)
}

// Managed Disk Type.
func (o DiskStorageProfilePtrOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DataDiskType
	}).(pulumi.StringPtrOutput)
}

// Kafka disk storage profile.
type DiskStorageProfileResponse struct {
	// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
	DataDiskSize int `pulumi:"dataDiskSize"`
	// Managed Disk Type.
	DataDiskType string `pulumi:"dataDiskType"`
}

// Kafka disk storage profile.
type DiskStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (DiskStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskStorageProfileResponse)(nil)).Elem()
}

func (o DiskStorageProfileResponseOutput) ToDiskStorageProfileResponseOutput() DiskStorageProfileResponseOutput {
	return o
}

func (o DiskStorageProfileResponseOutput) ToDiskStorageProfileResponseOutputWithContext(ctx context.Context) DiskStorageProfileResponseOutput {
	return o
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfileResponseOutput) DataDiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v DiskStorageProfileResponse) int { return v.DataDiskSize }).(pulumi.IntOutput)
}

// Managed Disk Type.
func (o DiskStorageProfileResponseOutput) DataDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskStorageProfileResponse) string { return v.DataDiskType }).(pulumi.StringOutput)
}

type DiskStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskStorageProfileResponse)(nil)).Elem()
}

func (o DiskStorageProfileResponsePtrOutput) ToDiskStorageProfileResponsePtrOutput() DiskStorageProfileResponsePtrOutput {
	return o
}

func (o DiskStorageProfileResponsePtrOutput) ToDiskStorageProfileResponsePtrOutputWithContext(ctx context.Context) DiskStorageProfileResponsePtrOutput {
	return o
}

func (o DiskStorageProfileResponsePtrOutput) Elem() DiskStorageProfileResponseOutput {
	return o.ApplyT(func(v *DiskStorageProfileResponse) DiskStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret DiskStorageProfileResponse
		return ret
	}).(DiskStorageProfileResponseOutput)
}

// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.
func (o DiskStorageProfileResponsePtrOutput) DataDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DataDiskSize
	}).(pulumi.IntPtrOutput)
}

// Managed Disk Type.
func (o DiskStorageProfileResponsePtrOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataDiskType
	}).(pulumi.StringPtrOutput)
}

// The encryption-in-transit properties.
type EncryptionInTransitProperties struct {
	// Indicates whether or not inter cluster node communication is encrypted in transit.
	IsEncryptionInTransitEnabled *bool `pulumi:"isEncryptionInTransitEnabled"`
}

// Defaults sets the appropriate defaults for EncryptionInTransitProperties
func (val *EncryptionInTransitProperties) Defaults() *EncryptionInTransitProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEncryptionInTransitEnabled == nil {
		isEncryptionInTransitEnabled_ := false
		tmp.IsEncryptionInTransitEnabled = &isEncryptionInTransitEnabled_
	}
	return &tmp
}

// EncryptionInTransitPropertiesInput is an input type that accepts EncryptionInTransitPropertiesArgs and EncryptionInTransitPropertiesOutput values.
// You can construct a concrete instance of `EncryptionInTransitPropertiesInput` via:
//
//	EncryptionInTransitPropertiesArgs{...}
type EncryptionInTransitPropertiesInput interface {
	pulumi.Input

	ToEncryptionInTransitPropertiesOutput() EncryptionInTransitPropertiesOutput
	ToEncryptionInTransitPropertiesOutputWithContext(context.Context) EncryptionInTransitPropertiesOutput
}

// The encryption-in-transit properties.
type EncryptionInTransitPropertiesArgs struct {
	// Indicates whether or not inter cluster node communication is encrypted in transit.
	IsEncryptionInTransitEnabled pulumi.BoolPtrInput `pulumi:"isEncryptionInTransitEnabled"`
}

// Defaults sets the appropriate defaults for EncryptionInTransitPropertiesArgs
func (val *EncryptionInTransitPropertiesArgs) Defaults() *EncryptionInTransitPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEncryptionInTransitEnabled == nil {
		tmp.IsEncryptionInTransitEnabled = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EncryptionInTransitPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInTransitProperties)(nil)).Elem()
}

func (i EncryptionInTransitPropertiesArgs) ToEncryptionInTransitPropertiesOutput() EncryptionInTransitPropertiesOutput {
	return i.ToEncryptionInTransitPropertiesOutputWithContext(context.Background())
}

func (i EncryptionInTransitPropertiesArgs) ToEncryptionInTransitPropertiesOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInTransitPropertiesOutput)
}

func (i EncryptionInTransitPropertiesArgs) ToEncryptionInTransitPropertiesPtrOutput() EncryptionInTransitPropertiesPtrOutput {
	return i.ToEncryptionInTransitPropertiesPtrOutputWithContext(context.Background())
}

func (i EncryptionInTransitPropertiesArgs) ToEncryptionInTransitPropertiesPtrOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInTransitPropertiesOutput).ToEncryptionInTransitPropertiesPtrOutputWithContext(ctx)
}

// EncryptionInTransitPropertiesPtrInput is an input type that accepts EncryptionInTransitPropertiesArgs, EncryptionInTransitPropertiesPtr and EncryptionInTransitPropertiesPtrOutput values.
// You can construct a concrete instance of `EncryptionInTransitPropertiesPtrInput` via:
//
//	        EncryptionInTransitPropertiesArgs{...}
//
//	or:
//
//	        nil
type EncryptionInTransitPropertiesPtrInput interface {
	pulumi.Input

	ToEncryptionInTransitPropertiesPtrOutput() EncryptionInTransitPropertiesPtrOutput
	ToEncryptionInTransitPropertiesPtrOutputWithContext(context.Context) EncryptionInTransitPropertiesPtrOutput
}

type encryptionInTransitPropertiesPtrType EncryptionInTransitPropertiesArgs

func EncryptionInTransitPropertiesPtr(v *EncryptionInTransitPropertiesArgs) EncryptionInTransitPropertiesPtrInput {
	return (*encryptionInTransitPropertiesPtrType)(v)
}

func (*encryptionInTransitPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInTransitProperties)(nil)).Elem()
}

func (i *encryptionInTransitPropertiesPtrType) ToEncryptionInTransitPropertiesPtrOutput() EncryptionInTransitPropertiesPtrOutput {
	return i.ToEncryptionInTransitPropertiesPtrOutputWithContext(context.Background())
}

func (i *encryptionInTransitPropertiesPtrType) ToEncryptionInTransitPropertiesPtrOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionInTransitPropertiesPtrOutput)
}

// The encryption-in-transit properties.
type EncryptionInTransitPropertiesOutput struct{ *pulumi.OutputState }

func (EncryptionInTransitPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInTransitProperties)(nil)).Elem()
}

func (o EncryptionInTransitPropertiesOutput) ToEncryptionInTransitPropertiesOutput() EncryptionInTransitPropertiesOutput {
	return o
}

func (o EncryptionInTransitPropertiesOutput) ToEncryptionInTransitPropertiesOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesOutput {
	return o
}

func (o EncryptionInTransitPropertiesOutput) ToEncryptionInTransitPropertiesPtrOutput() EncryptionInTransitPropertiesPtrOutput {
	return o.ToEncryptionInTransitPropertiesPtrOutputWithContext(context.Background())
}

func (o EncryptionInTransitPropertiesOutput) ToEncryptionInTransitPropertiesPtrOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionInTransitProperties) *EncryptionInTransitProperties {
		return &v
	}).(EncryptionInTransitPropertiesPtrOutput)
}

// Indicates whether or not inter cluster node communication is encrypted in transit.
func (o EncryptionInTransitPropertiesOutput) IsEncryptionInTransitEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EncryptionInTransitProperties) *bool { return v.IsEncryptionInTransitEnabled }).(pulumi.BoolPtrOutput)
}

type EncryptionInTransitPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EncryptionInTransitPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInTransitProperties)(nil)).Elem()
}

func (o EncryptionInTransitPropertiesPtrOutput) ToEncryptionInTransitPropertiesPtrOutput() EncryptionInTransitPropertiesPtrOutput {
	return o
}

func (o EncryptionInTransitPropertiesPtrOutput) ToEncryptionInTransitPropertiesPtrOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesPtrOutput {
	return o
}

func (o EncryptionInTransitPropertiesPtrOutput) Elem() EncryptionInTransitPropertiesOutput {
	return o.ApplyT(func(v *EncryptionInTransitProperties) EncryptionInTransitProperties {
		if v != nil {
			return *v
		}
		var ret EncryptionInTransitProperties
		return ret
	}).(EncryptionInTransitPropertiesOutput)
}

// Indicates whether or not inter cluster node communication is encrypted in transit.
func (o EncryptionInTransitPropertiesPtrOutput) IsEncryptionInTransitEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionInTransitProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsEncryptionInTransitEnabled
	}).(pulumi.BoolPtrOutput)
}

// The encryption-in-transit properties.
type EncryptionInTransitPropertiesResponse struct {
	// Indicates whether or not inter cluster node communication is encrypted in transit.
	IsEncryptionInTransitEnabled *bool `pulumi:"isEncryptionInTransitEnabled"`
}

// Defaults sets the appropriate defaults for EncryptionInTransitPropertiesResponse
func (val *EncryptionInTransitPropertiesResponse) Defaults() *EncryptionInTransitPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEncryptionInTransitEnabled == nil {
		isEncryptionInTransitEnabled_ := false
		tmp.IsEncryptionInTransitEnabled = &isEncryptionInTransitEnabled_
	}
	return &tmp
}

// The encryption-in-transit properties.
type EncryptionInTransitPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionInTransitPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionInTransitPropertiesResponse)(nil)).Elem()
}

func (o EncryptionInTransitPropertiesResponseOutput) ToEncryptionInTransitPropertiesResponseOutput() EncryptionInTransitPropertiesResponseOutput {
	return o
}

func (o EncryptionInTransitPropertiesResponseOutput) ToEncryptionInTransitPropertiesResponseOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesResponseOutput {
	return o
}

// Indicates whether or not inter cluster node communication is encrypted in transit.
func (o EncryptionInTransitPropertiesResponseOutput) IsEncryptionInTransitEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EncryptionInTransitPropertiesResponse) *bool { return v.IsEncryptionInTransitEnabled }).(pulumi.BoolPtrOutput)
}

type EncryptionInTransitPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionInTransitPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionInTransitPropertiesResponse)(nil)).Elem()
}

func (o EncryptionInTransitPropertiesResponsePtrOutput) ToEncryptionInTransitPropertiesResponsePtrOutput() EncryptionInTransitPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionInTransitPropertiesResponsePtrOutput) ToEncryptionInTransitPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionInTransitPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionInTransitPropertiesResponsePtrOutput) Elem() EncryptionInTransitPropertiesResponseOutput {
	return o.ApplyT(func(v *EncryptionInTransitPropertiesResponse) EncryptionInTransitPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionInTransitPropertiesResponse
		return ret
	}).(EncryptionInTransitPropertiesResponseOutput)
}

// Indicates whether or not inter cluster node communication is encrypted in transit.
func (o EncryptionInTransitPropertiesResponsePtrOutput) IsEncryptionInTransitEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EncryptionInTransitPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsEncryptionInTransitEnabled
	}).(pulumi.BoolPtrOutput)
}

// The error message associated with the cluster creation.
type Errors struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The error message.
	Message *string `pulumi:"message"`
}

// ErrorsInput is an input type that accepts ErrorsArgs and ErrorsOutput values.
// You can construct a concrete instance of `ErrorsInput` via:
//
//	ErrorsArgs{...}
type ErrorsInput interface {
	pulumi.Input

	ToErrorsOutput() ErrorsOutput
	ToErrorsOutputWithContext(context.Context) ErrorsOutput
}

// The error message associated with the cluster creation.
type ErrorsArgs struct {
	// The error code.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// The error message.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (ErrorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Errors)(nil)).Elem()
}

func (i ErrorsArgs) ToErrorsOutput() ErrorsOutput {
	return i.ToErrorsOutputWithContext(context.Background())
}

func (i ErrorsArgs) ToErrorsOutputWithContext(ctx context.Context) ErrorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorsOutput)
}

// ErrorsArrayInput is an input type that accepts ErrorsArray and ErrorsArrayOutput values.
// You can construct a concrete instance of `ErrorsArrayInput` via:
//
//	ErrorsArray{ ErrorsArgs{...} }
type ErrorsArrayInput interface {
	pulumi.Input

	ToErrorsArrayOutput() ErrorsArrayOutput
	ToErrorsArrayOutputWithContext(context.Context) ErrorsArrayOutput
}

type ErrorsArray []ErrorsInput

func (ErrorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Errors)(nil)).Elem()
}

func (i ErrorsArray) ToErrorsArrayOutput() ErrorsArrayOutput {
	return i.ToErrorsArrayOutputWithContext(context.Background())
}

func (i ErrorsArray) ToErrorsArrayOutputWithContext(ctx context.Context) ErrorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorsArrayOutput)
}

// The error message associated with the cluster creation.
type ErrorsOutput struct{ *pulumi.OutputState }

func (ErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Errors)(nil)).Elem()
}

func (o ErrorsOutput) ToErrorsOutput() ErrorsOutput {
	return o
}

func (o ErrorsOutput) ToErrorsOutputWithContext(ctx context.Context) ErrorsOutput {
	return o
}

// The error code.
func (o ErrorsOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Errors) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The error message.
func (o ErrorsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Errors) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ErrorsArrayOutput struct{ *pulumi.OutputState }

func (ErrorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Errors)(nil)).Elem()
}

func (o ErrorsArrayOutput) ToErrorsArrayOutput() ErrorsArrayOutput {
	return o
}

func (o ErrorsArrayOutput) ToErrorsArrayOutputWithContext(ctx context.Context) ErrorsArrayOutput {
	return o
}

func (o ErrorsArrayOutput) Index(i pulumi.IntInput) ErrorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Errors {
		return vs[0].([]Errors)[vs[1].(int)]
	}).(ErrorsOutput)
}

// The error message associated with the cluster creation.
type ErrorsResponse struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The error message.
	Message *string `pulumi:"message"`
}

// The error message associated with the cluster creation.
type ErrorsResponseOutput struct{ *pulumi.OutputState }

func (ErrorsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorsResponse)(nil)).Elem()
}

func (o ErrorsResponseOutput) ToErrorsResponseOutput() ErrorsResponseOutput {
	return o
}

func (o ErrorsResponseOutput) ToErrorsResponseOutputWithContext(ctx context.Context) ErrorsResponseOutput {
	return o
}

// The error code.
func (o ErrorsResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorsResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The error message.
func (o ErrorsResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ErrorsResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type ErrorsResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorsResponse)(nil)).Elem()
}

func (o ErrorsResponseArrayOutput) ToErrorsResponseArrayOutput() ErrorsResponseArrayOutput {
	return o
}

func (o ErrorsResponseArrayOutput) ToErrorsResponseArrayOutputWithContext(ctx context.Context) ErrorsResponseArrayOutput {
	return o
}

func (o ErrorsResponseArrayOutput) Index(i pulumi.IntInput) ErrorsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorsResponse {
		return vs[0].([]ErrorsResponse)[vs[1].(int)]
	}).(ErrorsResponseOutput)
}

// The configuration that services will be excluded when creating cluster.
type ExcludedServicesConfigResponse struct {
	// The config id of excluded services.
	ExcludedServicesConfigId *string `pulumi:"excludedServicesConfigId"`
	// The list of excluded services.
	ExcludedServicesList *string `pulumi:"excludedServicesList"`
}

// The configuration that services will be excluded when creating cluster.
type ExcludedServicesConfigResponseOutput struct{ *pulumi.OutputState }

func (ExcludedServicesConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcludedServicesConfigResponse)(nil)).Elem()
}

func (o ExcludedServicesConfigResponseOutput) ToExcludedServicesConfigResponseOutput() ExcludedServicesConfigResponseOutput {
	return o
}

func (o ExcludedServicesConfigResponseOutput) ToExcludedServicesConfigResponseOutputWithContext(ctx context.Context) ExcludedServicesConfigResponseOutput {
	return o
}

// The config id of excluded services.
func (o ExcludedServicesConfigResponseOutput) ExcludedServicesConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcludedServicesConfigResponse) *string { return v.ExcludedServicesConfigId }).(pulumi.StringPtrOutput)
}

// The list of excluded services.
func (o ExcludedServicesConfigResponseOutput) ExcludedServicesList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExcludedServicesConfigResponse) *string { return v.ExcludedServicesList }).(pulumi.StringPtrOutput)
}

type ExcludedServicesConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ExcludedServicesConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExcludedServicesConfigResponse)(nil)).Elem()
}

func (o ExcludedServicesConfigResponsePtrOutput) ToExcludedServicesConfigResponsePtrOutput() ExcludedServicesConfigResponsePtrOutput {
	return o
}

func (o ExcludedServicesConfigResponsePtrOutput) ToExcludedServicesConfigResponsePtrOutputWithContext(ctx context.Context) ExcludedServicesConfigResponsePtrOutput {
	return o
}

func (o ExcludedServicesConfigResponsePtrOutput) Elem() ExcludedServicesConfigResponseOutput {
	return o.ApplyT(func(v *ExcludedServicesConfigResponse) ExcludedServicesConfigResponse {
		if v != nil {
			return *v
		}
		var ret ExcludedServicesConfigResponse
		return ret
	}).(ExcludedServicesConfigResponseOutput)
}

// The config id of excluded services.
func (o ExcludedServicesConfigResponsePtrOutput) ExcludedServicesConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExcludedServicesConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExcludedServicesConfigId
	}).(pulumi.StringPtrOutput)
}

// The list of excluded services.
func (o ExcludedServicesConfigResponsePtrOutput) ExcludedServicesList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExcludedServicesConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExcludedServicesList
	}).(pulumi.StringPtrOutput)
}

// Flink cluster catalog options.
type FlinkCatalogOptions struct {
	// Hive Catalog Option for Flink cluster.
	Hive *FlinkHiveCatalogOption `pulumi:"hive"`
}

// Defaults sets the appropriate defaults for FlinkCatalogOptions
func (val *FlinkCatalogOptions) Defaults() *FlinkCatalogOptions {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Hive = tmp.Hive.Defaults()

	return &tmp
}

// FlinkCatalogOptionsInput is an input type that accepts FlinkCatalogOptionsArgs and FlinkCatalogOptionsOutput values.
// You can construct a concrete instance of `FlinkCatalogOptionsInput` via:
//
//	FlinkCatalogOptionsArgs{...}
type FlinkCatalogOptionsInput interface {
	pulumi.Input

	ToFlinkCatalogOptionsOutput() FlinkCatalogOptionsOutput
	ToFlinkCatalogOptionsOutputWithContext(context.Context) FlinkCatalogOptionsOutput
}

// Flink cluster catalog options.
type FlinkCatalogOptionsArgs struct {
	// Hive Catalog Option for Flink cluster.
	Hive FlinkHiveCatalogOptionPtrInput `pulumi:"hive"`
}

// Defaults sets the appropriate defaults for FlinkCatalogOptionsArgs
func (val *FlinkCatalogOptionsArgs) Defaults() *FlinkCatalogOptionsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (FlinkCatalogOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkCatalogOptions)(nil)).Elem()
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsOutput() FlinkCatalogOptionsOutput {
	return i.ToFlinkCatalogOptionsOutputWithContext(context.Background())
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsOutputWithContext(ctx context.Context) FlinkCatalogOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkCatalogOptionsOutput)
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return i.ToFlinkCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i FlinkCatalogOptionsArgs) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkCatalogOptionsOutput).ToFlinkCatalogOptionsPtrOutputWithContext(ctx)
}

// FlinkCatalogOptionsPtrInput is an input type that accepts FlinkCatalogOptionsArgs, FlinkCatalogOptionsPtr and FlinkCatalogOptionsPtrOutput values.
// You can construct a concrete instance of `FlinkCatalogOptionsPtrInput` via:
//
//	        FlinkCatalogOptionsArgs{...}
//
//	or:
//
//	        nil
type FlinkCatalogOptionsPtrInput interface {
	pulumi.Input

	ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput
	ToFlinkCatalogOptionsPtrOutputWithContext(context.Context) FlinkCatalogOptionsPtrOutput
}

type flinkCatalogOptionsPtrType FlinkCatalogOptionsArgs

func FlinkCatalogOptionsPtr(v *FlinkCatalogOptionsArgs) FlinkCatalogOptionsPtrInput {
	return (*flinkCatalogOptionsPtrType)(v)
}

func (*flinkCatalogOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkCatalogOptions)(nil)).Elem()
}

func (i *flinkCatalogOptionsPtrType) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return i.ToFlinkCatalogOptionsPtrOutputWithContext(context.Background())
}

func (i *flinkCatalogOptionsPtrType) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkCatalogOptionsPtrOutput)
}

// Flink cluster catalog options.
type FlinkCatalogOptionsOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkCatalogOptions)(nil)).Elem()
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsOutput() FlinkCatalogOptionsOutput {
	return o
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsOutputWithContext(ctx context.Context) FlinkCatalogOptionsOutput {
	return o
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return o.ToFlinkCatalogOptionsPtrOutputWithContext(context.Background())
}

func (o FlinkCatalogOptionsOutput) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkCatalogOptions) *FlinkCatalogOptions {
		return &v
	}).(FlinkCatalogOptionsPtrOutput)
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsOutput) Hive() FlinkHiveCatalogOptionPtrOutput {
	return o.ApplyT(func(v FlinkCatalogOptions) *FlinkHiveCatalogOption { return v.Hive }).(FlinkHiveCatalogOptionPtrOutput)
}

type FlinkCatalogOptionsPtrOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkCatalogOptions)(nil)).Elem()
}

func (o FlinkCatalogOptionsPtrOutput) ToFlinkCatalogOptionsPtrOutput() FlinkCatalogOptionsPtrOutput {
	return o
}

func (o FlinkCatalogOptionsPtrOutput) ToFlinkCatalogOptionsPtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsPtrOutput {
	return o
}

func (o FlinkCatalogOptionsPtrOutput) Elem() FlinkCatalogOptionsOutput {
	return o.ApplyT(func(v *FlinkCatalogOptions) FlinkCatalogOptions {
		if v != nil {
			return *v
		}
		var ret FlinkCatalogOptions
		return ret
	}).(FlinkCatalogOptionsOutput)
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsPtrOutput) Hive() FlinkHiveCatalogOptionPtrOutput {
	return o.ApplyT(func(v *FlinkCatalogOptions) *FlinkHiveCatalogOption {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(FlinkHiveCatalogOptionPtrOutput)
}

// Flink cluster catalog options.
type FlinkCatalogOptionsResponse struct {
	// Hive Catalog Option for Flink cluster.
	Hive *FlinkHiveCatalogOptionResponse `pulumi:"hive"`
}

// Defaults sets the appropriate defaults for FlinkCatalogOptionsResponse
func (val *FlinkCatalogOptionsResponse) Defaults() *FlinkCatalogOptionsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Hive = tmp.Hive.Defaults()

	return &tmp
}

// Flink cluster catalog options.
type FlinkCatalogOptionsResponseOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkCatalogOptionsResponse)(nil)).Elem()
}

func (o FlinkCatalogOptionsResponseOutput) ToFlinkCatalogOptionsResponseOutput() FlinkCatalogOptionsResponseOutput {
	return o
}

func (o FlinkCatalogOptionsResponseOutput) ToFlinkCatalogOptionsResponseOutputWithContext(ctx context.Context) FlinkCatalogOptionsResponseOutput {
	return o
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsResponseOutput) Hive() FlinkHiveCatalogOptionResponsePtrOutput {
	return o.ApplyT(func(v FlinkCatalogOptionsResponse) *FlinkHiveCatalogOptionResponse { return v.Hive }).(FlinkHiveCatalogOptionResponsePtrOutput)
}

type FlinkCatalogOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkCatalogOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkCatalogOptionsResponse)(nil)).Elem()
}

func (o FlinkCatalogOptionsResponsePtrOutput) ToFlinkCatalogOptionsResponsePtrOutput() FlinkCatalogOptionsResponsePtrOutput {
	return o
}

func (o FlinkCatalogOptionsResponsePtrOutput) ToFlinkCatalogOptionsResponsePtrOutputWithContext(ctx context.Context) FlinkCatalogOptionsResponsePtrOutput {
	return o
}

func (o FlinkCatalogOptionsResponsePtrOutput) Elem() FlinkCatalogOptionsResponseOutput {
	return o.ApplyT(func(v *FlinkCatalogOptionsResponse) FlinkCatalogOptionsResponse {
		if v != nil {
			return *v
		}
		var ret FlinkCatalogOptionsResponse
		return ret
	}).(FlinkCatalogOptionsResponseOutput)
}

// Hive Catalog Option for Flink cluster.
func (o FlinkCatalogOptionsResponsePtrOutput) Hive() FlinkHiveCatalogOptionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkCatalogOptionsResponse) *FlinkHiveCatalogOptionResponse {
		if v == nil {
			return nil
		}
		return v.Hive
	}).(FlinkHiveCatalogOptionResponsePtrOutput)
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOption struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
}

// Defaults sets the appropriate defaults for FlinkHiveCatalogOption
func (val *FlinkHiveCatalogOption) Defaults() *FlinkHiveCatalogOption {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// FlinkHiveCatalogOptionInput is an input type that accepts FlinkHiveCatalogOptionArgs and FlinkHiveCatalogOptionOutput values.
// You can construct a concrete instance of `FlinkHiveCatalogOptionInput` via:
//
//	FlinkHiveCatalogOptionArgs{...}
type FlinkHiveCatalogOptionInput interface {
	pulumi.Input

	ToFlinkHiveCatalogOptionOutput() FlinkHiveCatalogOptionOutput
	ToFlinkHiveCatalogOptionOutputWithContext(context.Context) FlinkHiveCatalogOptionOutput
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionArgs struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode pulumi.StringPtrInput `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret pulumi.StringPtrInput `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL pulumi.StringInput `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName pulumi.StringPtrInput `pulumi:"metastoreDbConnectionUserName"`
}

// Defaults sets the appropriate defaults for FlinkHiveCatalogOptionArgs
func (val *FlinkHiveCatalogOptionArgs) Defaults() *FlinkHiveCatalogOptionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		tmp.MetastoreDbConnectionAuthenticationMode = pulumi.StringPtr("IdentityAuth")
	}
	return &tmp
}
func (FlinkHiveCatalogOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkHiveCatalogOption)(nil)).Elem()
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionOutput() FlinkHiveCatalogOptionOutput {
	return i.ToFlinkHiveCatalogOptionOutputWithContext(context.Background())
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkHiveCatalogOptionOutput)
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return i.ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Background())
}

func (i FlinkHiveCatalogOptionArgs) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkHiveCatalogOptionOutput).ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx)
}

// FlinkHiveCatalogOptionPtrInput is an input type that accepts FlinkHiveCatalogOptionArgs, FlinkHiveCatalogOptionPtr and FlinkHiveCatalogOptionPtrOutput values.
// You can construct a concrete instance of `FlinkHiveCatalogOptionPtrInput` via:
//
//	        FlinkHiveCatalogOptionArgs{...}
//
//	or:
//
//	        nil
type FlinkHiveCatalogOptionPtrInput interface {
	pulumi.Input

	ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput
	ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Context) FlinkHiveCatalogOptionPtrOutput
}

type flinkHiveCatalogOptionPtrType FlinkHiveCatalogOptionArgs

func FlinkHiveCatalogOptionPtr(v *FlinkHiveCatalogOptionArgs) FlinkHiveCatalogOptionPtrInput {
	return (*flinkHiveCatalogOptionPtrType)(v)
}

func (*flinkHiveCatalogOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkHiveCatalogOption)(nil)).Elem()
}

func (i *flinkHiveCatalogOptionPtrType) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return i.ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Background())
}

func (i *flinkHiveCatalogOptionPtrType) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkHiveCatalogOptionPtrOutput)
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkHiveCatalogOption)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionOutput() FlinkHiveCatalogOptionOutput {
	return o
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionOutput {
	return o
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return o.ToFlinkHiveCatalogOptionPtrOutputWithContext(context.Background())
}

func (o FlinkHiveCatalogOptionOutput) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkHiveCatalogOption) *FlinkHiveCatalogOption {
		return &v
	}).(FlinkHiveCatalogOptionPtrOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOption) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

type FlinkHiveCatalogOptionPtrOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkHiveCatalogOption)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionPtrOutput) ToFlinkHiveCatalogOptionPtrOutput() FlinkHiveCatalogOptionPtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionPtrOutput) ToFlinkHiveCatalogOptionPtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionPtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionPtrOutput) Elem() FlinkHiveCatalogOptionOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) FlinkHiveCatalogOption {
		if v != nil {
			return *v
		}
		var ret FlinkHiveCatalogOption
		return ret
	}).(FlinkHiveCatalogOptionOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionPasswordSecret
	}).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return &v.MetastoreDbConnectionURL
	}).(pulumi.StringPtrOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionPtrOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOption) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionUserName
	}).(pulumi.StringPtrOutput)
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionResponse struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
}

// Defaults sets the appropriate defaults for FlinkHiveCatalogOptionResponse
func (val *FlinkHiveCatalogOptionResponse) Defaults() *FlinkHiveCatalogOptionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// Hive Catalog Option for Flink cluster.
type FlinkHiveCatalogOptionResponseOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkHiveCatalogOptionResponse)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionResponseOutput) ToFlinkHiveCatalogOptionResponseOutput() FlinkHiveCatalogOptionResponseOutput {
	return o
}

func (o FlinkHiveCatalogOptionResponseOutput) ToFlinkHiveCatalogOptionResponseOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionResponseOutput {
	return o
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionResponseOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkHiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

type FlinkHiveCatalogOptionResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkHiveCatalogOptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkHiveCatalogOptionResponse)(nil)).Elem()
}

func (o FlinkHiveCatalogOptionResponsePtrOutput) ToFlinkHiveCatalogOptionResponsePtrOutput() FlinkHiveCatalogOptionResponsePtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionResponsePtrOutput) ToFlinkHiveCatalogOptionResponsePtrOutputWithContext(ctx context.Context) FlinkHiveCatalogOptionResponsePtrOutput {
	return o
}

func (o FlinkHiveCatalogOptionResponsePtrOutput) Elem() FlinkHiveCatalogOptionResponseOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) FlinkHiveCatalogOptionResponse {
		if v != nil {
			return *v
		}
		var ret FlinkHiveCatalogOptionResponse
		return ret
	}).(FlinkHiveCatalogOptionResponseOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionPasswordSecret
	}).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionURL() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MetastoreDbConnectionURL
	}).(pulumi.StringPtrOutput)
}

// User name for database connection.
func (o FlinkHiveCatalogOptionResponsePtrOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkHiveCatalogOptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreDbConnectionUserName
	}).(pulumi.StringPtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfile struct {
	// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
	Args *string `pulumi:"args"`
	// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
	EntryClass *string `pulumi:"entryClass"`
	// A string property that represents the name of the job JAR.
	JarName string `pulumi:"jarName"`
	// A string property that specifies the directory where the job JAR is located.
	JobJarDirectory string `pulumi:"jobJarDirectory"`
	// A string property that represents the name of the savepoint for the Flink job
	SavePointName *string `pulumi:"savePointName"`
	// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
	UpgradeMode string `pulumi:"upgradeMode"`
}

// FlinkJobProfileInput is an input type that accepts FlinkJobProfileArgs and FlinkJobProfileOutput values.
// You can construct a concrete instance of `FlinkJobProfileInput` via:
//
//	FlinkJobProfileArgs{...}
type FlinkJobProfileInput interface {
	pulumi.Input

	ToFlinkJobProfileOutput() FlinkJobProfileOutput
	ToFlinkJobProfileOutputWithContext(context.Context) FlinkJobProfileOutput
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileArgs struct {
	// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
	Args pulumi.StringPtrInput `pulumi:"args"`
	// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
	EntryClass pulumi.StringPtrInput `pulumi:"entryClass"`
	// A string property that represents the name of the job JAR.
	JarName pulumi.StringInput `pulumi:"jarName"`
	// A string property that specifies the directory where the job JAR is located.
	JobJarDirectory pulumi.StringInput `pulumi:"jobJarDirectory"`
	// A string property that represents the name of the savepoint for the Flink job
	SavePointName pulumi.StringPtrInput `pulumi:"savePointName"`
	// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
	UpgradeMode pulumi.StringInput `pulumi:"upgradeMode"`
}

func (FlinkJobProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkJobProfile)(nil)).Elem()
}

func (i FlinkJobProfileArgs) ToFlinkJobProfileOutput() FlinkJobProfileOutput {
	return i.ToFlinkJobProfileOutputWithContext(context.Background())
}

func (i FlinkJobProfileArgs) ToFlinkJobProfileOutputWithContext(ctx context.Context) FlinkJobProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkJobProfileOutput)
}

func (i FlinkJobProfileArgs) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return i.ToFlinkJobProfilePtrOutputWithContext(context.Background())
}

func (i FlinkJobProfileArgs) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkJobProfileOutput).ToFlinkJobProfilePtrOutputWithContext(ctx)
}

// FlinkJobProfilePtrInput is an input type that accepts FlinkJobProfileArgs, FlinkJobProfilePtr and FlinkJobProfilePtrOutput values.
// You can construct a concrete instance of `FlinkJobProfilePtrInput` via:
//
//	        FlinkJobProfileArgs{...}
//
//	or:
//
//	        nil
type FlinkJobProfilePtrInput interface {
	pulumi.Input

	ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput
	ToFlinkJobProfilePtrOutputWithContext(context.Context) FlinkJobProfilePtrOutput
}

type flinkJobProfilePtrType FlinkJobProfileArgs

func FlinkJobProfilePtr(v *FlinkJobProfileArgs) FlinkJobProfilePtrInput {
	return (*flinkJobProfilePtrType)(v)
}

func (*flinkJobProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkJobProfile)(nil)).Elem()
}

func (i *flinkJobProfilePtrType) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return i.ToFlinkJobProfilePtrOutputWithContext(context.Background())
}

func (i *flinkJobProfilePtrType) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkJobProfilePtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileOutput struct{ *pulumi.OutputState }

func (FlinkJobProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkJobProfile)(nil)).Elem()
}

func (o FlinkJobProfileOutput) ToFlinkJobProfileOutput() FlinkJobProfileOutput {
	return o
}

func (o FlinkJobProfileOutput) ToFlinkJobProfileOutputWithContext(ctx context.Context) FlinkJobProfileOutput {
	return o
}

func (o FlinkJobProfileOutput) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return o.ToFlinkJobProfilePtrOutputWithContext(context.Background())
}

func (o FlinkJobProfileOutput) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkJobProfile) *FlinkJobProfile {
		return &v
	}).(FlinkJobProfilePtrOutput)
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfileOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfile) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfileOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfile) *string { return v.EntryClass }).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfileOutput) JarName() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfile) string { return v.JarName }).(pulumi.StringOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfileOutput) JobJarDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfile) string { return v.JobJarDirectory }).(pulumi.StringOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfileOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfile) *string { return v.SavePointName }).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfileOutput) UpgradeMode() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfile) string { return v.UpgradeMode }).(pulumi.StringOutput)
}

type FlinkJobProfilePtrOutput struct{ *pulumi.OutputState }

func (FlinkJobProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkJobProfile)(nil)).Elem()
}

func (o FlinkJobProfilePtrOutput) ToFlinkJobProfilePtrOutput() FlinkJobProfilePtrOutput {
	return o
}

func (o FlinkJobProfilePtrOutput) ToFlinkJobProfilePtrOutputWithContext(ctx context.Context) FlinkJobProfilePtrOutput {
	return o
}

func (o FlinkJobProfilePtrOutput) Elem() FlinkJobProfileOutput {
	return o.ApplyT(func(v *FlinkJobProfile) FlinkJobProfile {
		if v != nil {
			return *v
		}
		var ret FlinkJobProfile
		return ret
	}).(FlinkJobProfileOutput)
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfilePtrOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfilePtrOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return v.EntryClass
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfilePtrOutput) JarName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return &v.JarName
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfilePtrOutput) JobJarDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return &v.JobJarDirectory
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfilePtrOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return v.SavePointName
	}).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfilePtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfile) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileResponse struct {
	// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
	Args *string `pulumi:"args"`
	// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
	EntryClass *string `pulumi:"entryClass"`
	// A string property that represents the name of the job JAR.
	JarName string `pulumi:"jarName"`
	// A string property that specifies the directory where the job JAR is located.
	JobJarDirectory string `pulumi:"jobJarDirectory"`
	// A string property that represents the name of the savepoint for the Flink job
	SavePointName *string `pulumi:"savePointName"`
	// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
	UpgradeMode string `pulumi:"upgradeMode"`
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
type FlinkJobProfileResponseOutput struct{ *pulumi.OutputState }

func (FlinkJobProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkJobProfileResponse)(nil)).Elem()
}

func (o FlinkJobProfileResponseOutput) ToFlinkJobProfileResponseOutput() FlinkJobProfileResponseOutput {
	return o
}

func (o FlinkJobProfileResponseOutput) ToFlinkJobProfileResponseOutputWithContext(ctx context.Context) FlinkJobProfileResponseOutput {
	return o
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfileResponseOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfileResponseOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) *string { return v.EntryClass }).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfileResponseOutput) JarName() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) string { return v.JarName }).(pulumi.StringOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfileResponseOutput) JobJarDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) string { return v.JobJarDirectory }).(pulumi.StringOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfileResponseOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) *string { return v.SavePointName }).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfileResponseOutput) UpgradeMode() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkJobProfileResponse) string { return v.UpgradeMode }).(pulumi.StringOutput)
}

type FlinkJobProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkJobProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkJobProfileResponse)(nil)).Elem()
}

func (o FlinkJobProfileResponsePtrOutput) ToFlinkJobProfileResponsePtrOutput() FlinkJobProfileResponsePtrOutput {
	return o
}

func (o FlinkJobProfileResponsePtrOutput) ToFlinkJobProfileResponsePtrOutputWithContext(ctx context.Context) FlinkJobProfileResponsePtrOutput {
	return o
}

func (o FlinkJobProfileResponsePtrOutput) Elem() FlinkJobProfileResponseOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) FlinkJobProfileResponse {
		if v != nil {
			return *v
		}
		var ret FlinkJobProfileResponse
		return ret
	}).(FlinkJobProfileResponseOutput)
}

// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
func (o FlinkJobProfileResponsePtrOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.
func (o FlinkJobProfileResponsePtrOutput) EntryClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.EntryClass
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the job JAR.
func (o FlinkJobProfileResponsePtrOutput) JarName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JarName
	}).(pulumi.StringPtrOutput)
}

// A string property that specifies the directory where the job JAR is located.
func (o FlinkJobProfileResponsePtrOutput) JobJarDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobJarDirectory
	}).(pulumi.StringPtrOutput)
}

// A string property that represents the name of the savepoint for the Flink job
func (o FlinkJobProfileResponsePtrOutput) SavePointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.SavePointName
	}).(pulumi.StringPtrOutput)
}

// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
func (o FlinkJobProfileResponsePtrOutput) UpgradeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkJobProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpgradeMode
	}).(pulumi.StringPtrOutput)
}

// The Flink cluster profile.
type FlinkProfile struct {
	// Flink cluster catalog options.
	CatalogOptions *FlinkCatalogOptions `pulumi:"catalogOptions"`
	// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
	DeploymentMode *string `pulumi:"deploymentMode"`
	// History Server container/ process CPU and memory requirements
	HistoryServer *ComputeResourceDefinition `pulumi:"historyServer"`
	// Job Manager container/ process CPU and memory requirements
	JobManager ComputeResourceDefinition `pulumi:"jobManager"`
	// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
	JobSpec *FlinkJobProfile `pulumi:"jobSpec"`
	// The number of task managers.
	NumReplicas *int `pulumi:"numReplicas"`
	// The storage profile
	Storage FlinkStorageProfile `pulumi:"storage"`
	// Task Manager container/ process CPU and memory requirements
	TaskManager ComputeResourceDefinition `pulumi:"taskManager"`
}

// Defaults sets the appropriate defaults for FlinkProfile
func (val *FlinkProfile) Defaults() *FlinkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CatalogOptions = tmp.CatalogOptions.Defaults()

	return &tmp
}

// FlinkProfileInput is an input type that accepts FlinkProfileArgs and FlinkProfileOutput values.
// You can construct a concrete instance of `FlinkProfileInput` via:
//
//	FlinkProfileArgs{...}
type FlinkProfileInput interface {
	pulumi.Input

	ToFlinkProfileOutput() FlinkProfileOutput
	ToFlinkProfileOutputWithContext(context.Context) FlinkProfileOutput
}

// The Flink cluster profile.
type FlinkProfileArgs struct {
	// Flink cluster catalog options.
	CatalogOptions FlinkCatalogOptionsPtrInput `pulumi:"catalogOptions"`
	// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
	DeploymentMode pulumi.StringPtrInput `pulumi:"deploymentMode"`
	// History Server container/ process CPU and memory requirements
	HistoryServer ComputeResourceDefinitionPtrInput `pulumi:"historyServer"`
	// Job Manager container/ process CPU and memory requirements
	JobManager ComputeResourceDefinitionInput `pulumi:"jobManager"`
	// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
	JobSpec FlinkJobProfilePtrInput `pulumi:"jobSpec"`
	// The number of task managers.
	NumReplicas pulumi.IntPtrInput `pulumi:"numReplicas"`
	// The storage profile
	Storage FlinkStorageProfileInput `pulumi:"storage"`
	// Task Manager container/ process CPU and memory requirements
	TaskManager ComputeResourceDefinitionInput `pulumi:"taskManager"`
}

// Defaults sets the appropriate defaults for FlinkProfileArgs
func (val *FlinkProfileArgs) Defaults() *FlinkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (FlinkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkProfile)(nil)).Elem()
}

func (i FlinkProfileArgs) ToFlinkProfileOutput() FlinkProfileOutput {
	return i.ToFlinkProfileOutputWithContext(context.Background())
}

func (i FlinkProfileArgs) ToFlinkProfileOutputWithContext(ctx context.Context) FlinkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkProfileOutput)
}

func (i FlinkProfileArgs) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return i.ToFlinkProfilePtrOutputWithContext(context.Background())
}

func (i FlinkProfileArgs) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkProfileOutput).ToFlinkProfilePtrOutputWithContext(ctx)
}

// FlinkProfilePtrInput is an input type that accepts FlinkProfileArgs, FlinkProfilePtr and FlinkProfilePtrOutput values.
// You can construct a concrete instance of `FlinkProfilePtrInput` via:
//
//	        FlinkProfileArgs{...}
//
//	or:
//
//	        nil
type FlinkProfilePtrInput interface {
	pulumi.Input

	ToFlinkProfilePtrOutput() FlinkProfilePtrOutput
	ToFlinkProfilePtrOutputWithContext(context.Context) FlinkProfilePtrOutput
}

type flinkProfilePtrType FlinkProfileArgs

func FlinkProfilePtr(v *FlinkProfileArgs) FlinkProfilePtrInput {
	return (*flinkProfilePtrType)(v)
}

func (*flinkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkProfile)(nil)).Elem()
}

func (i *flinkProfilePtrType) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return i.ToFlinkProfilePtrOutputWithContext(context.Background())
}

func (i *flinkProfilePtrType) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkProfilePtrOutput)
}

// The Flink cluster profile.
type FlinkProfileOutput struct{ *pulumi.OutputState }

func (FlinkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkProfile)(nil)).Elem()
}

func (o FlinkProfileOutput) ToFlinkProfileOutput() FlinkProfileOutput {
	return o
}

func (o FlinkProfileOutput) ToFlinkProfileOutputWithContext(ctx context.Context) FlinkProfileOutput {
	return o
}

func (o FlinkProfileOutput) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return o.ToFlinkProfilePtrOutputWithContext(context.Background())
}

func (o FlinkProfileOutput) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkProfile) *FlinkProfile {
		return &v
	}).(FlinkProfilePtrOutput)
}

// Flink cluster catalog options.
func (o FlinkProfileOutput) CatalogOptions() FlinkCatalogOptionsPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *FlinkCatalogOptions { return v.CatalogOptions }).(FlinkCatalogOptionsPtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfileOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *string { return v.DeploymentMode }).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfileOutput) HistoryServer() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *ComputeResourceDefinition { return v.HistoryServer }).(ComputeResourceDefinitionPtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfileOutput) JobManager() ComputeResourceDefinitionOutput {
	return o.ApplyT(func(v FlinkProfile) ComputeResourceDefinition { return v.JobManager }).(ComputeResourceDefinitionOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfileOutput) JobSpec() FlinkJobProfilePtrOutput {
	return o.ApplyT(func(v FlinkProfile) *FlinkJobProfile { return v.JobSpec }).(FlinkJobProfilePtrOutput)
}

// The number of task managers.
func (o FlinkProfileOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlinkProfile) *int { return v.NumReplicas }).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfileOutput) Storage() FlinkStorageProfileOutput {
	return o.ApplyT(func(v FlinkProfile) FlinkStorageProfile { return v.Storage }).(FlinkStorageProfileOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfileOutput) TaskManager() ComputeResourceDefinitionOutput {
	return o.ApplyT(func(v FlinkProfile) ComputeResourceDefinition { return v.TaskManager }).(ComputeResourceDefinitionOutput)
}

type FlinkProfilePtrOutput struct{ *pulumi.OutputState }

func (FlinkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkProfile)(nil)).Elem()
}

func (o FlinkProfilePtrOutput) ToFlinkProfilePtrOutput() FlinkProfilePtrOutput {
	return o
}

func (o FlinkProfilePtrOutput) ToFlinkProfilePtrOutputWithContext(ctx context.Context) FlinkProfilePtrOutput {
	return o
}

func (o FlinkProfilePtrOutput) Elem() FlinkProfileOutput {
	return o.ApplyT(func(v *FlinkProfile) FlinkProfile {
		if v != nil {
			return *v
		}
		var ret FlinkProfile
		return ret
	}).(FlinkProfileOutput)
}

// Flink cluster catalog options.
func (o FlinkProfilePtrOutput) CatalogOptions() FlinkCatalogOptionsPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *FlinkCatalogOptions {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(FlinkCatalogOptionsPtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfilePtrOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentMode
	}).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfilePtrOutput) HistoryServer() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *ComputeResourceDefinition {
		if v == nil {
			return nil
		}
		return v.HistoryServer
	}).(ComputeResourceDefinitionPtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfilePtrOutput) JobManager() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *ComputeResourceDefinition {
		if v == nil {
			return nil
		}
		return &v.JobManager
	}).(ComputeResourceDefinitionPtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfilePtrOutput) JobSpec() FlinkJobProfilePtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *FlinkJobProfile {
		if v == nil {
			return nil
		}
		return v.JobSpec
	}).(FlinkJobProfilePtrOutput)
}

// The number of task managers.
func (o FlinkProfilePtrOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *int {
		if v == nil {
			return nil
		}
		return v.NumReplicas
	}).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfilePtrOutput) Storage() FlinkStorageProfilePtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *FlinkStorageProfile {
		if v == nil {
			return nil
		}
		return &v.Storage
	}).(FlinkStorageProfilePtrOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfilePtrOutput) TaskManager() ComputeResourceDefinitionPtrOutput {
	return o.ApplyT(func(v *FlinkProfile) *ComputeResourceDefinition {
		if v == nil {
			return nil
		}
		return &v.TaskManager
	}).(ComputeResourceDefinitionPtrOutput)
}

// The Flink cluster profile.
type FlinkProfileResponse struct {
	// Flink cluster catalog options.
	CatalogOptions *FlinkCatalogOptionsResponse `pulumi:"catalogOptions"`
	// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
	DeploymentMode *string `pulumi:"deploymentMode"`
	// History Server container/ process CPU and memory requirements
	HistoryServer *ComputeResourceDefinitionResponse `pulumi:"historyServer"`
	// Job Manager container/ process CPU and memory requirements
	JobManager ComputeResourceDefinitionResponse `pulumi:"jobManager"`
	// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
	JobSpec *FlinkJobProfileResponse `pulumi:"jobSpec"`
	// The number of task managers.
	NumReplicas *int `pulumi:"numReplicas"`
	// The storage profile
	Storage FlinkStorageProfileResponse `pulumi:"storage"`
	// Task Manager container/ process CPU and memory requirements
	TaskManager ComputeResourceDefinitionResponse `pulumi:"taskManager"`
}

// Defaults sets the appropriate defaults for FlinkProfileResponse
func (val *FlinkProfileResponse) Defaults() *FlinkProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CatalogOptions = tmp.CatalogOptions.Defaults()

	return &tmp
}

// The Flink cluster profile.
type FlinkProfileResponseOutput struct{ *pulumi.OutputState }

func (FlinkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkProfileResponse)(nil)).Elem()
}

func (o FlinkProfileResponseOutput) ToFlinkProfileResponseOutput() FlinkProfileResponseOutput {
	return o
}

func (o FlinkProfileResponseOutput) ToFlinkProfileResponseOutputWithContext(ctx context.Context) FlinkProfileResponseOutput {
	return o
}

// Flink cluster catalog options.
func (o FlinkProfileResponseOutput) CatalogOptions() FlinkCatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *FlinkCatalogOptionsResponse { return v.CatalogOptions }).(FlinkCatalogOptionsResponsePtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfileResponseOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *string { return v.DeploymentMode }).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfileResponseOutput) HistoryServer() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *ComputeResourceDefinitionResponse { return v.HistoryServer }).(ComputeResourceDefinitionResponsePtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfileResponseOutput) JobManager() ComputeResourceDefinitionResponseOutput {
	return o.ApplyT(func(v FlinkProfileResponse) ComputeResourceDefinitionResponse { return v.JobManager }).(ComputeResourceDefinitionResponseOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfileResponseOutput) JobSpec() FlinkJobProfileResponsePtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *FlinkJobProfileResponse { return v.JobSpec }).(FlinkJobProfileResponsePtrOutput)
}

// The number of task managers.
func (o FlinkProfileResponseOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlinkProfileResponse) *int { return v.NumReplicas }).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfileResponseOutput) Storage() FlinkStorageProfileResponseOutput {
	return o.ApplyT(func(v FlinkProfileResponse) FlinkStorageProfileResponse { return v.Storage }).(FlinkStorageProfileResponseOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfileResponseOutput) TaskManager() ComputeResourceDefinitionResponseOutput {
	return o.ApplyT(func(v FlinkProfileResponse) ComputeResourceDefinitionResponse { return v.TaskManager }).(ComputeResourceDefinitionResponseOutput)
}

type FlinkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkProfileResponse)(nil)).Elem()
}

func (o FlinkProfileResponsePtrOutput) ToFlinkProfileResponsePtrOutput() FlinkProfileResponsePtrOutput {
	return o
}

func (o FlinkProfileResponsePtrOutput) ToFlinkProfileResponsePtrOutputWithContext(ctx context.Context) FlinkProfileResponsePtrOutput {
	return o
}

func (o FlinkProfileResponsePtrOutput) Elem() FlinkProfileResponseOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) FlinkProfileResponse {
		if v != nil {
			return *v
		}
		var ret FlinkProfileResponse
		return ret
	}).(FlinkProfileResponseOutput)
}

// Flink cluster catalog options.
func (o FlinkProfileResponsePtrOutput) CatalogOptions() FlinkCatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *FlinkCatalogOptionsResponse {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(FlinkCatalogOptionsResponsePtrOutput)
}

// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session
func (o FlinkProfileResponsePtrOutput) DeploymentMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentMode
	}).(pulumi.StringPtrOutput)
}

// History Server container/ process CPU and memory requirements
func (o FlinkProfileResponsePtrOutput) HistoryServer() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *ComputeResourceDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.HistoryServer
	}).(ComputeResourceDefinitionResponsePtrOutput)
}

// Job Manager container/ process CPU and memory requirements
func (o FlinkProfileResponsePtrOutput) JobManager() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *ComputeResourceDefinitionResponse {
		if v == nil {
			return nil
		}
		return &v.JobManager
	}).(ComputeResourceDefinitionResponsePtrOutput)
}

// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
func (o FlinkProfileResponsePtrOutput) JobSpec() FlinkJobProfileResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *FlinkJobProfileResponse {
		if v == nil {
			return nil
		}
		return v.JobSpec
	}).(FlinkJobProfileResponsePtrOutput)
}

// The number of task managers.
func (o FlinkProfileResponsePtrOutput) NumReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumReplicas
	}).(pulumi.IntPtrOutput)
}

// The storage profile
func (o FlinkProfileResponsePtrOutput) Storage() FlinkStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *FlinkStorageProfileResponse {
		if v == nil {
			return nil
		}
		return &v.Storage
	}).(FlinkStorageProfileResponsePtrOutput)
}

// Task Manager container/ process CPU and memory requirements
func (o FlinkProfileResponsePtrOutput) TaskManager() ComputeResourceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *FlinkProfileResponse) *ComputeResourceDefinitionResponse {
		if v == nil {
			return nil
		}
		return &v.TaskManager
	}).(ComputeResourceDefinitionResponsePtrOutput)
}

// The storage profile
type FlinkStorageProfile struct {
	// Storage account uri which is used for savepoint and checkpoint state.
	StorageUri string `pulumi:"storageUri"`
	// Storage key is only required for wasb(s) storage.
	Storagekey *string `pulumi:"storagekey"`
}

// FlinkStorageProfileInput is an input type that accepts FlinkStorageProfileArgs and FlinkStorageProfileOutput values.
// You can construct a concrete instance of `FlinkStorageProfileInput` via:
//
//	FlinkStorageProfileArgs{...}
type FlinkStorageProfileInput interface {
	pulumi.Input

	ToFlinkStorageProfileOutput() FlinkStorageProfileOutput
	ToFlinkStorageProfileOutputWithContext(context.Context) FlinkStorageProfileOutput
}

// The storage profile
type FlinkStorageProfileArgs struct {
	// Storage account uri which is used for savepoint and checkpoint state.
	StorageUri pulumi.StringInput `pulumi:"storageUri"`
	// Storage key is only required for wasb(s) storage.
	Storagekey pulumi.StringPtrInput `pulumi:"storagekey"`
}

func (FlinkStorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkStorageProfile)(nil)).Elem()
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfileOutput() FlinkStorageProfileOutput {
	return i.ToFlinkStorageProfileOutputWithContext(context.Background())
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfileOutputWithContext(ctx context.Context) FlinkStorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkStorageProfileOutput)
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return i.ToFlinkStorageProfilePtrOutputWithContext(context.Background())
}

func (i FlinkStorageProfileArgs) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkStorageProfileOutput).ToFlinkStorageProfilePtrOutputWithContext(ctx)
}

// FlinkStorageProfilePtrInput is an input type that accepts FlinkStorageProfileArgs, FlinkStorageProfilePtr and FlinkStorageProfilePtrOutput values.
// You can construct a concrete instance of `FlinkStorageProfilePtrInput` via:
//
//	        FlinkStorageProfileArgs{...}
//
//	or:
//
//	        nil
type FlinkStorageProfilePtrInput interface {
	pulumi.Input

	ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput
	ToFlinkStorageProfilePtrOutputWithContext(context.Context) FlinkStorageProfilePtrOutput
}

type flinkStorageProfilePtrType FlinkStorageProfileArgs

func FlinkStorageProfilePtr(v *FlinkStorageProfileArgs) FlinkStorageProfilePtrInput {
	return (*flinkStorageProfilePtrType)(v)
}

func (*flinkStorageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkStorageProfile)(nil)).Elem()
}

func (i *flinkStorageProfilePtrType) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return i.ToFlinkStorageProfilePtrOutputWithContext(context.Background())
}

func (i *flinkStorageProfilePtrType) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlinkStorageProfilePtrOutput)
}

// The storage profile
type FlinkStorageProfileOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkStorageProfile)(nil)).Elem()
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfileOutput() FlinkStorageProfileOutput {
	return o
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfileOutputWithContext(ctx context.Context) FlinkStorageProfileOutput {
	return o
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return o.ToFlinkStorageProfilePtrOutputWithContext(context.Background())
}

func (o FlinkStorageProfileOutput) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlinkStorageProfile) *FlinkStorageProfile {
		return &v
	}).(FlinkStorageProfilePtrOutput)
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfileOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkStorageProfile) string { return v.StorageUri }).(pulumi.StringOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfileOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkStorageProfile) *string { return v.Storagekey }).(pulumi.StringPtrOutput)
}

type FlinkStorageProfilePtrOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkStorageProfile)(nil)).Elem()
}

func (o FlinkStorageProfilePtrOutput) ToFlinkStorageProfilePtrOutput() FlinkStorageProfilePtrOutput {
	return o
}

func (o FlinkStorageProfilePtrOutput) ToFlinkStorageProfilePtrOutputWithContext(ctx context.Context) FlinkStorageProfilePtrOutput {
	return o
}

func (o FlinkStorageProfilePtrOutput) Elem() FlinkStorageProfileOutput {
	return o.ApplyT(func(v *FlinkStorageProfile) FlinkStorageProfile {
		if v != nil {
			return *v
		}
		var ret FlinkStorageProfile
		return ret
	}).(FlinkStorageProfileOutput)
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfilePtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfile) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfilePtrOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfile) *string {
		if v == nil {
			return nil
		}
		return v.Storagekey
	}).(pulumi.StringPtrOutput)
}

// The storage profile
type FlinkStorageProfileResponse struct {
	// Storage account uri which is used for savepoint and checkpoint state.
	StorageUri string `pulumi:"storageUri"`
	// Storage key is only required for wasb(s) storage.
	Storagekey *string `pulumi:"storagekey"`
}

// The storage profile
type FlinkStorageProfileResponseOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlinkStorageProfileResponse)(nil)).Elem()
}

func (o FlinkStorageProfileResponseOutput) ToFlinkStorageProfileResponseOutput() FlinkStorageProfileResponseOutput {
	return o
}

func (o FlinkStorageProfileResponseOutput) ToFlinkStorageProfileResponseOutputWithContext(ctx context.Context) FlinkStorageProfileResponseOutput {
	return o
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfileResponseOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v FlinkStorageProfileResponse) string { return v.StorageUri }).(pulumi.StringOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfileResponseOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlinkStorageProfileResponse) *string { return v.Storagekey }).(pulumi.StringPtrOutput)
}

type FlinkStorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FlinkStorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlinkStorageProfileResponse)(nil)).Elem()
}

func (o FlinkStorageProfileResponsePtrOutput) ToFlinkStorageProfileResponsePtrOutput() FlinkStorageProfileResponsePtrOutput {
	return o
}

func (o FlinkStorageProfileResponsePtrOutput) ToFlinkStorageProfileResponsePtrOutputWithContext(ctx context.Context) FlinkStorageProfileResponsePtrOutput {
	return o
}

func (o FlinkStorageProfileResponsePtrOutput) Elem() FlinkStorageProfileResponseOutput {
	return o.ApplyT(func(v *FlinkStorageProfileResponse) FlinkStorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret FlinkStorageProfileResponse
		return ret
	}).(FlinkStorageProfileResponseOutput)
}

// Storage account uri which is used for savepoint and checkpoint state.
func (o FlinkStorageProfileResponsePtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// Storage key is only required for wasb(s) storage.
func (o FlinkStorageProfileResponsePtrOutput) Storagekey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlinkStorageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Storagekey
	}).(pulumi.StringPtrOutput)
}

// The hardware profile.
type HardwareProfile struct {
	// The size of the VM
	VmSize *string `pulumi:"vmSize"`
}

// HardwareProfileInput is an input type that accepts HardwareProfileArgs and HardwareProfileOutput values.
// You can construct a concrete instance of `HardwareProfileInput` via:
//
//	HardwareProfileArgs{...}
type HardwareProfileInput interface {
	pulumi.Input

	ToHardwareProfileOutput() HardwareProfileOutput
	ToHardwareProfileOutputWithContext(context.Context) HardwareProfileOutput
}

// The hardware profile.
type HardwareProfileArgs struct {
	// The size of the VM
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

func (HardwareProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfile)(nil)).Elem()
}

func (i HardwareProfileArgs) ToHardwareProfileOutput() HardwareProfileOutput {
	return i.ToHardwareProfileOutputWithContext(context.Background())
}

func (i HardwareProfileArgs) ToHardwareProfileOutputWithContext(ctx context.Context) HardwareProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfileOutput)
}

func (i HardwareProfileArgs) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return i.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (i HardwareProfileArgs) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfileOutput).ToHardwareProfilePtrOutputWithContext(ctx)
}

// HardwareProfilePtrInput is an input type that accepts HardwareProfileArgs, HardwareProfilePtr and HardwareProfilePtrOutput values.
// You can construct a concrete instance of `HardwareProfilePtrInput` via:
//
//	        HardwareProfileArgs{...}
//
//	or:
//
//	        nil
type HardwareProfilePtrInput interface {
	pulumi.Input

	ToHardwareProfilePtrOutput() HardwareProfilePtrOutput
	ToHardwareProfilePtrOutputWithContext(context.Context) HardwareProfilePtrOutput
}

type hardwareProfilePtrType HardwareProfileArgs

func HardwareProfilePtr(v *HardwareProfileArgs) HardwareProfilePtrInput {
	return (*hardwareProfilePtrType)(v)
}

func (*hardwareProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfile)(nil)).Elem()
}

func (i *hardwareProfilePtrType) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return i.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (i *hardwareProfilePtrType) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HardwareProfilePtrOutput)
}

// The hardware profile.
type HardwareProfileOutput struct{ *pulumi.OutputState }

func (HardwareProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfile)(nil)).Elem()
}

func (o HardwareProfileOutput) ToHardwareProfileOutput() HardwareProfileOutput {
	return o
}

func (o HardwareProfileOutput) ToHardwareProfileOutputWithContext(ctx context.Context) HardwareProfileOutput {
	return o
}

func (o HardwareProfileOutput) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return o.ToHardwareProfilePtrOutputWithContext(context.Background())
}

func (o HardwareProfileOutput) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HardwareProfile) *HardwareProfile {
		return &v
	}).(HardwareProfilePtrOutput)
}

// The size of the VM
func (o HardwareProfileOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HardwareProfile) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type HardwareProfilePtrOutput struct{ *pulumi.OutputState }

func (HardwareProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfile)(nil)).Elem()
}

func (o HardwareProfilePtrOutput) ToHardwareProfilePtrOutput() HardwareProfilePtrOutput {
	return o
}

func (o HardwareProfilePtrOutput) ToHardwareProfilePtrOutputWithContext(ctx context.Context) HardwareProfilePtrOutput {
	return o
}

func (o HardwareProfilePtrOutput) Elem() HardwareProfileOutput {
	return o.ApplyT(func(v *HardwareProfile) HardwareProfile {
		if v != nil {
			return *v
		}
		var ret HardwareProfile
		return ret
	}).(HardwareProfileOutput)
}

// The size of the VM
func (o HardwareProfilePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardwareProfile) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// The hardware profile.
type HardwareProfileResponse struct {
	// The size of the VM
	VmSize *string `pulumi:"vmSize"`
}

// The hardware profile.
type HardwareProfileResponseOutput struct{ *pulumi.OutputState }

func (HardwareProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareProfileResponse)(nil)).Elem()
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponseOutput() HardwareProfileResponseOutput {
	return o
}

func (o HardwareProfileResponseOutput) ToHardwareProfileResponseOutputWithContext(ctx context.Context) HardwareProfileResponseOutput {
	return o
}

// The size of the VM
func (o HardwareProfileResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HardwareProfileResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type HardwareProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (HardwareProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HardwareProfileResponse)(nil)).Elem()
}

func (o HardwareProfileResponsePtrOutput) ToHardwareProfileResponsePtrOutput() HardwareProfileResponsePtrOutput {
	return o
}

func (o HardwareProfileResponsePtrOutput) ToHardwareProfileResponsePtrOutputWithContext(ctx context.Context) HardwareProfileResponsePtrOutput {
	return o
}

func (o HardwareProfileResponsePtrOutput) Elem() HardwareProfileResponseOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) HardwareProfileResponse {
		if v != nil {
			return *v
		}
		var ret HardwareProfileResponse
		return ret
	}).(HardwareProfileResponseOutput)
}

// The size of the VM
func (o HardwareProfileResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HardwareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Hive Catalog Option
type HiveCatalogOption struct {
	// Name of trino catalog which should use specified hive metastore.
	CatalogName string `pulumi:"catalogName"`
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
	// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
	MetastoreWarehouseDir string `pulumi:"metastoreWarehouseDir"`
}

// Defaults sets the appropriate defaults for HiveCatalogOption
func (val *HiveCatalogOption) Defaults() *HiveCatalogOption {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// HiveCatalogOptionInput is an input type that accepts HiveCatalogOptionArgs and HiveCatalogOptionOutput values.
// You can construct a concrete instance of `HiveCatalogOptionInput` via:
//
//	HiveCatalogOptionArgs{...}
type HiveCatalogOptionInput interface {
	pulumi.Input

	ToHiveCatalogOptionOutput() HiveCatalogOptionOutput
	ToHiveCatalogOptionOutputWithContext(context.Context) HiveCatalogOptionOutput
}

// Hive Catalog Option
type HiveCatalogOptionArgs struct {
	// Name of trino catalog which should use specified hive metastore.
	CatalogName pulumi.StringInput `pulumi:"catalogName"`
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode pulumi.StringPtrInput `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret pulumi.StringPtrInput `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL pulumi.StringInput `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName pulumi.StringPtrInput `pulumi:"metastoreDbConnectionUserName"`
	// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
	MetastoreWarehouseDir pulumi.StringInput `pulumi:"metastoreWarehouseDir"`
}

// Defaults sets the appropriate defaults for HiveCatalogOptionArgs
func (val *HiveCatalogOptionArgs) Defaults() *HiveCatalogOptionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		tmp.MetastoreDbConnectionAuthenticationMode = pulumi.StringPtr("IdentityAuth")
	}
	return &tmp
}
func (HiveCatalogOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveCatalogOption)(nil)).Elem()
}

func (i HiveCatalogOptionArgs) ToHiveCatalogOptionOutput() HiveCatalogOptionOutput {
	return i.ToHiveCatalogOptionOutputWithContext(context.Background())
}

func (i HiveCatalogOptionArgs) ToHiveCatalogOptionOutputWithContext(ctx context.Context) HiveCatalogOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveCatalogOptionOutput)
}

// HiveCatalogOptionArrayInput is an input type that accepts HiveCatalogOptionArray and HiveCatalogOptionArrayOutput values.
// You can construct a concrete instance of `HiveCatalogOptionArrayInput` via:
//
//	HiveCatalogOptionArray{ HiveCatalogOptionArgs{...} }
type HiveCatalogOptionArrayInput interface {
	pulumi.Input

	ToHiveCatalogOptionArrayOutput() HiveCatalogOptionArrayOutput
	ToHiveCatalogOptionArrayOutputWithContext(context.Context) HiveCatalogOptionArrayOutput
}

type HiveCatalogOptionArray []HiveCatalogOptionInput

func (HiveCatalogOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HiveCatalogOption)(nil)).Elem()
}

func (i HiveCatalogOptionArray) ToHiveCatalogOptionArrayOutput() HiveCatalogOptionArrayOutput {
	return i.ToHiveCatalogOptionArrayOutputWithContext(context.Background())
}

func (i HiveCatalogOptionArray) ToHiveCatalogOptionArrayOutputWithContext(ctx context.Context) HiveCatalogOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HiveCatalogOptionArrayOutput)
}

// Hive Catalog Option
type HiveCatalogOptionOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveCatalogOption)(nil)).Elem()
}

func (o HiveCatalogOptionOutput) ToHiveCatalogOptionOutput() HiveCatalogOptionOutput {
	return o
}

func (o HiveCatalogOptionOutput) ToHiveCatalogOptionOutputWithContext(ctx context.Context) HiveCatalogOptionOutput {
	return o
}

// Name of trino catalog which should use specified hive metastore.
func (o HiveCatalogOptionOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOption) string { return v.CatalogName }).(pulumi.StringOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o HiveCatalogOptionOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOption) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o HiveCatalogOptionOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOption) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o HiveCatalogOptionOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOption) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o HiveCatalogOptionOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOption) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
func (o HiveCatalogOptionOutput) MetastoreWarehouseDir() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOption) string { return v.MetastoreWarehouseDir }).(pulumi.StringOutput)
}

type HiveCatalogOptionArrayOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HiveCatalogOption)(nil)).Elem()
}

func (o HiveCatalogOptionArrayOutput) ToHiveCatalogOptionArrayOutput() HiveCatalogOptionArrayOutput {
	return o
}

func (o HiveCatalogOptionArrayOutput) ToHiveCatalogOptionArrayOutputWithContext(ctx context.Context) HiveCatalogOptionArrayOutput {
	return o
}

func (o HiveCatalogOptionArrayOutput) Index(i pulumi.IntInput) HiveCatalogOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HiveCatalogOption {
		return vs[0].([]HiveCatalogOption)[vs[1].(int)]
	}).(HiveCatalogOptionOutput)
}

// Hive Catalog Option
type HiveCatalogOptionResponse struct {
	// Name of trino catalog which should use specified hive metastore.
	CatalogName string `pulumi:"catalogName"`
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	MetastoreDbConnectionAuthenticationMode *string `pulumi:"metastoreDbConnectionAuthenticationMode"`
	// Secret reference name from secretsProfile.secrets containing password for database connection.
	MetastoreDbConnectionPasswordSecret *string `pulumi:"metastoreDbConnectionPasswordSecret"`
	// Connection string for hive metastore database.
	MetastoreDbConnectionURL string `pulumi:"metastoreDbConnectionURL"`
	// User name for database connection.
	MetastoreDbConnectionUserName *string `pulumi:"metastoreDbConnectionUserName"`
	// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
	MetastoreWarehouseDir string `pulumi:"metastoreWarehouseDir"`
}

// Defaults sets the appropriate defaults for HiveCatalogOptionResponse
func (val *HiveCatalogOptionResponse) Defaults() *HiveCatalogOptionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MetastoreDbConnectionAuthenticationMode == nil {
		metastoreDbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.MetastoreDbConnectionAuthenticationMode = &metastoreDbConnectionAuthenticationMode_
	}
	return &tmp
}

// Hive Catalog Option
type HiveCatalogOptionResponseOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HiveCatalogOptionResponse)(nil)).Elem()
}

func (o HiveCatalogOptionResponseOutput) ToHiveCatalogOptionResponseOutput() HiveCatalogOptionResponseOutput {
	return o
}

func (o HiveCatalogOptionResponseOutput) ToHiveCatalogOptionResponseOutputWithContext(ctx context.Context) HiveCatalogOptionResponseOutput {
	return o
}

// Name of trino catalog which should use specified hive metastore.
func (o HiveCatalogOptionResponseOutput) CatalogName() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) string { return v.CatalogName }).(pulumi.StringOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// Secret reference name from secretsProfile.secrets containing password for database connection.
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionPasswordSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionPasswordSecret }).(pulumi.StringPtrOutput)
}

// Connection string for hive metastore database.
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionURL() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) string { return v.MetastoreDbConnectionURL }).(pulumi.StringOutput)
}

// User name for database connection.
func (o HiveCatalogOptionResponseOutput) MetastoreDbConnectionUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) *string { return v.MetastoreDbConnectionUserName }).(pulumi.StringPtrOutput)
}

// Metastore root directory URI, format: abfs[s]://<container>@<account_name>.dfs.core.windows.net/<path>. More details: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction-abfs-uri
func (o HiveCatalogOptionResponseOutput) MetastoreWarehouseDir() pulumi.StringOutput {
	return o.ApplyT(func(v HiveCatalogOptionResponse) string { return v.MetastoreWarehouseDir }).(pulumi.StringOutput)
}

type HiveCatalogOptionResponseArrayOutput struct{ *pulumi.OutputState }

func (HiveCatalogOptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HiveCatalogOptionResponse)(nil)).Elem()
}

func (o HiveCatalogOptionResponseArrayOutput) ToHiveCatalogOptionResponseArrayOutput() HiveCatalogOptionResponseArrayOutput {
	return o
}

func (o HiveCatalogOptionResponseArrayOutput) ToHiveCatalogOptionResponseArrayOutputWithContext(ctx context.Context) HiveCatalogOptionResponseArrayOutput {
	return o
}

func (o HiveCatalogOptionResponseArrayOutput) Index(i pulumi.IntInput) HiveCatalogOptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HiveCatalogOptionResponse {
		return vs[0].([]HiveCatalogOptionResponse)[vs[1].(int)]
	}).(HiveCatalogOptionResponseOutput)
}

// The ip configurations for the private link service.
type IPConfiguration struct {
	// The name of private link IP configuration.
	Name string `pulumi:"name"`
	// Indicates whether this IP configuration is primary for the corresponding NIC.
	Primary *bool `pulumi:"primary"`
	// The IP address.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The method that private IP address is allocated.
	PrivateIPAllocationMethod *string `pulumi:"privateIPAllocationMethod"`
	// The subnet resource id.
	Subnet *ResourceId `pulumi:"subnet"`
}

// IPConfigurationInput is an input type that accepts IPConfigurationArgs and IPConfigurationOutput values.
// You can construct a concrete instance of `IPConfigurationInput` via:
//
//	IPConfigurationArgs{...}
type IPConfigurationInput interface {
	pulumi.Input

	ToIPConfigurationOutput() IPConfigurationOutput
	ToIPConfigurationOutputWithContext(context.Context) IPConfigurationOutput
}

// The ip configurations for the private link service.
type IPConfigurationArgs struct {
	// The name of private link IP configuration.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether this IP configuration is primary for the corresponding NIC.
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// The IP address.
	PrivateIPAddress pulumi.StringPtrInput `pulumi:"privateIPAddress"`
	// The method that private IP address is allocated.
	PrivateIPAllocationMethod pulumi.StringPtrInput `pulumi:"privateIPAllocationMethod"`
	// The subnet resource id.
	Subnet ResourceIdPtrInput `pulumi:"subnet"`
}

func (IPConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IPConfiguration)(nil)).Elem()
}

func (i IPConfigurationArgs) ToIPConfigurationOutput() IPConfigurationOutput {
	return i.ToIPConfigurationOutputWithContext(context.Background())
}

func (i IPConfigurationArgs) ToIPConfigurationOutputWithContext(ctx context.Context) IPConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPConfigurationOutput)
}

// IPConfigurationArrayInput is an input type that accepts IPConfigurationArray and IPConfigurationArrayOutput values.
// You can construct a concrete instance of `IPConfigurationArrayInput` via:
//
//	IPConfigurationArray{ IPConfigurationArgs{...} }
type IPConfigurationArrayInput interface {
	pulumi.Input

	ToIPConfigurationArrayOutput() IPConfigurationArrayOutput
	ToIPConfigurationArrayOutputWithContext(context.Context) IPConfigurationArrayOutput
}

type IPConfigurationArray []IPConfigurationInput

func (IPConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPConfiguration)(nil)).Elem()
}

func (i IPConfigurationArray) ToIPConfigurationArrayOutput() IPConfigurationArrayOutput {
	return i.ToIPConfigurationArrayOutputWithContext(context.Background())
}

func (i IPConfigurationArray) ToIPConfigurationArrayOutputWithContext(ctx context.Context) IPConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IPConfigurationArrayOutput)
}

// The ip configurations for the private link service.
type IPConfigurationOutput struct{ *pulumi.OutputState }

func (IPConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPConfiguration)(nil)).Elem()
}

func (o IPConfigurationOutput) ToIPConfigurationOutput() IPConfigurationOutput {
	return o
}

func (o IPConfigurationOutput) ToIPConfigurationOutputWithContext(ctx context.Context) IPConfigurationOutput {
	return o
}

// The name of private link IP configuration.
func (o IPConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IPConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether this IP configuration is primary for the corresponding NIC.
func (o IPConfigurationOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPConfiguration) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// The IP address.
func (o IPConfigurationOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPConfiguration) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The method that private IP address is allocated.
func (o IPConfigurationOutput) PrivateIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPConfiguration) *string { return v.PrivateIPAllocationMethod }).(pulumi.StringPtrOutput)
}

// The subnet resource id.
func (o IPConfigurationOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v IPConfiguration) *ResourceId { return v.Subnet }).(ResourceIdPtrOutput)
}

type IPConfigurationArrayOutput struct{ *pulumi.OutputState }

func (IPConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPConfiguration)(nil)).Elem()
}

func (o IPConfigurationArrayOutput) ToIPConfigurationArrayOutput() IPConfigurationArrayOutput {
	return o
}

func (o IPConfigurationArrayOutput) ToIPConfigurationArrayOutputWithContext(ctx context.Context) IPConfigurationArrayOutput {
	return o
}

func (o IPConfigurationArrayOutput) Index(i pulumi.IntInput) IPConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPConfiguration {
		return vs[0].([]IPConfiguration)[vs[1].(int)]
	}).(IPConfigurationOutput)
}

// The ip configurations for the private link service.
type IPConfigurationResponse struct {
	// The private link IP configuration id.
	Id string `pulumi:"id"`
	// The name of private link IP configuration.
	Name string `pulumi:"name"`
	// Indicates whether this IP configuration is primary for the corresponding NIC.
	Primary *bool `pulumi:"primary"`
	// The IP address.
	PrivateIPAddress *string `pulumi:"privateIPAddress"`
	// The method that private IP address is allocated.
	PrivateIPAllocationMethod *string `pulumi:"privateIPAllocationMethod"`
	// The private link configuration provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The subnet resource id.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// The type of the private link IP configuration.
	Type string `pulumi:"type"`
}

// The ip configurations for the private link service.
type IPConfigurationResponseOutput struct{ *pulumi.OutputState }

func (IPConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IPConfigurationResponse)(nil)).Elem()
}

func (o IPConfigurationResponseOutput) ToIPConfigurationResponseOutput() IPConfigurationResponseOutput {
	return o
}

func (o IPConfigurationResponseOutput) ToIPConfigurationResponseOutputWithContext(ctx context.Context) IPConfigurationResponseOutput {
	return o
}

// The private link IP configuration id.
func (o IPConfigurationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IPConfigurationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of private link IP configuration.
func (o IPConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IPConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether this IP configuration is primary for the corresponding NIC.
func (o IPConfigurationResponseOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IPConfigurationResponse) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// The IP address.
func (o IPConfigurationResponseOutput) PrivateIPAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPConfigurationResponse) *string { return v.PrivateIPAddress }).(pulumi.StringPtrOutput)
}

// The method that private IP address is allocated.
func (o IPConfigurationResponseOutput) PrivateIPAllocationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IPConfigurationResponse) *string { return v.PrivateIPAllocationMethod }).(pulumi.StringPtrOutput)
}

// The private link configuration provisioning state, which only appears in the response.
func (o IPConfigurationResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v IPConfigurationResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The subnet resource id.
func (o IPConfigurationResponseOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v IPConfigurationResponse) *ResourceIdResponse { return v.Subnet }).(ResourceIdResponsePtrOutput)
}

// The type of the private link IP configuration.
func (o IPConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IPConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IPConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (IPConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IPConfigurationResponse)(nil)).Elem()
}

func (o IPConfigurationResponseArrayOutput) ToIPConfigurationResponseArrayOutput() IPConfigurationResponseArrayOutput {
	return o
}

func (o IPConfigurationResponseArrayOutput) ToIPConfigurationResponseArrayOutputWithContext(ctx context.Context) IPConfigurationResponseArrayOutput {
	return o
}

func (o IPConfigurationResponseArrayOutput) Index(i pulumi.IntInput) IPConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IPConfigurationResponse {
		return vs[0].([]IPConfigurationResponse)[vs[1].(int)]
	}).(IPConfigurationResponseOutput)
}

// Identity Profile with details of an MSI.
type IdentityProfile struct {
	// ClientId of the MSI.
	MsiClientId string `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId string `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId string `pulumi:"msiResourceId"`
}

// IdentityProfileInput is an input type that accepts IdentityProfileArgs and IdentityProfileOutput values.
// You can construct a concrete instance of `IdentityProfileInput` via:
//
//	IdentityProfileArgs{...}
type IdentityProfileInput interface {
	pulumi.Input

	ToIdentityProfileOutput() IdentityProfileOutput
	ToIdentityProfileOutputWithContext(context.Context) IdentityProfileOutput
}

// Identity Profile with details of an MSI.
type IdentityProfileArgs struct {
	// ClientId of the MSI.
	MsiClientId pulumi.StringInput `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId pulumi.StringInput `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId pulumi.StringInput `pulumi:"msiResourceId"`
}

func (IdentityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProfile)(nil)).Elem()
}

func (i IdentityProfileArgs) ToIdentityProfileOutput() IdentityProfileOutput {
	return i.ToIdentityProfileOutputWithContext(context.Background())
}

func (i IdentityProfileArgs) ToIdentityProfileOutputWithContext(ctx context.Context) IdentityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProfileOutput)
}

func (i IdentityProfileArgs) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return i.ToIdentityProfilePtrOutputWithContext(context.Background())
}

func (i IdentityProfileArgs) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProfileOutput).ToIdentityProfilePtrOutputWithContext(ctx)
}

// IdentityProfilePtrInput is an input type that accepts IdentityProfileArgs, IdentityProfilePtr and IdentityProfilePtrOutput values.
// You can construct a concrete instance of `IdentityProfilePtrInput` via:
//
//	        IdentityProfileArgs{...}
//
//	or:
//
//	        nil
type IdentityProfilePtrInput interface {
	pulumi.Input

	ToIdentityProfilePtrOutput() IdentityProfilePtrOutput
	ToIdentityProfilePtrOutputWithContext(context.Context) IdentityProfilePtrOutput
}

type identityProfilePtrType IdentityProfileArgs

func IdentityProfilePtr(v *IdentityProfileArgs) IdentityProfilePtrInput {
	return (*identityProfilePtrType)(v)
}

func (*identityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProfile)(nil)).Elem()
}

func (i *identityProfilePtrType) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return i.ToIdentityProfilePtrOutputWithContext(context.Background())
}

func (i *identityProfilePtrType) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityProfilePtrOutput)
}

// Identity Profile with details of an MSI.
type IdentityProfileOutput struct{ *pulumi.OutputState }

func (IdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProfile)(nil)).Elem()
}

func (o IdentityProfileOutput) ToIdentityProfileOutput() IdentityProfileOutput {
	return o
}

func (o IdentityProfileOutput) ToIdentityProfileOutputWithContext(ctx context.Context) IdentityProfileOutput {
	return o
}

func (o IdentityProfileOutput) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return o.ToIdentityProfilePtrOutputWithContext(context.Background())
}

func (o IdentityProfileOutput) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProfile) *IdentityProfile {
		return &v
	}).(IdentityProfilePtrOutput)
}

// ClientId of the MSI.
func (o IdentityProfileOutput) MsiClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfile) string { return v.MsiClientId }).(pulumi.StringOutput)
}

// ObjectId of the MSI.
func (o IdentityProfileOutput) MsiObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfile) string { return v.MsiObjectId }).(pulumi.StringOutput)
}

// ResourceId of the MSI.
func (o IdentityProfileOutput) MsiResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfile) string { return v.MsiResourceId }).(pulumi.StringOutput)
}

type IdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (IdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProfile)(nil)).Elem()
}

func (o IdentityProfilePtrOutput) ToIdentityProfilePtrOutput() IdentityProfilePtrOutput {
	return o
}

func (o IdentityProfilePtrOutput) ToIdentityProfilePtrOutputWithContext(ctx context.Context) IdentityProfilePtrOutput {
	return o
}

func (o IdentityProfilePtrOutput) Elem() IdentityProfileOutput {
	return o.ApplyT(func(v *IdentityProfile) IdentityProfile {
		if v != nil {
			return *v
		}
		var ret IdentityProfile
		return ret
	}).(IdentityProfileOutput)
}

// ClientId of the MSI.
func (o IdentityProfilePtrOutput) MsiClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiClientId
	}).(pulumi.StringPtrOutput)
}

// ObjectId of the MSI.
func (o IdentityProfilePtrOutput) MsiObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiObjectId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the MSI.
func (o IdentityProfilePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfile) *string {
		if v == nil {
			return nil
		}
		return &v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Identity Profile with details of an MSI.
type IdentityProfileResponse struct {
	// ClientId of the MSI.
	MsiClientId string `pulumi:"msiClientId"`
	// ObjectId of the MSI.
	MsiObjectId string `pulumi:"msiObjectId"`
	// ResourceId of the MSI.
	MsiResourceId string `pulumi:"msiResourceId"`
}

// Identity Profile with details of an MSI.
type IdentityProfileResponseOutput struct{ *pulumi.OutputState }

func (IdentityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProfileResponse)(nil)).Elem()
}

func (o IdentityProfileResponseOutput) ToIdentityProfileResponseOutput() IdentityProfileResponseOutput {
	return o
}

func (o IdentityProfileResponseOutput) ToIdentityProfileResponseOutputWithContext(ctx context.Context) IdentityProfileResponseOutput {
	return o
}

// ClientId of the MSI.
func (o IdentityProfileResponseOutput) MsiClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfileResponse) string { return v.MsiClientId }).(pulumi.StringOutput)
}

// ObjectId of the MSI.
func (o IdentityProfileResponseOutput) MsiObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfileResponse) string { return v.MsiObjectId }).(pulumi.StringOutput)
}

// ResourceId of the MSI.
func (o IdentityProfileResponseOutput) MsiResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityProfileResponse) string { return v.MsiResourceId }).(pulumi.StringOutput)
}

type IdentityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProfileResponse)(nil)).Elem()
}

func (o IdentityProfileResponsePtrOutput) ToIdentityProfileResponsePtrOutput() IdentityProfileResponsePtrOutput {
	return o
}

func (o IdentityProfileResponsePtrOutput) ToIdentityProfileResponsePtrOutputWithContext(ctx context.Context) IdentityProfileResponsePtrOutput {
	return o
}

func (o IdentityProfileResponsePtrOutput) Elem() IdentityProfileResponseOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) IdentityProfileResponse {
		if v != nil {
			return *v
		}
		var ret IdentityProfileResponse
		return ret
	}).(IdentityProfileResponseOutput)
}

// ClientId of the MSI.
func (o IdentityProfileResponsePtrOutput) MsiClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MsiClientId
	}).(pulumi.StringPtrOutput)
}

// ObjectId of the MSI.
func (o IdentityProfileResponsePtrOutput) MsiObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MsiObjectId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the MSI.
func (o IdentityProfileResponsePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// Contains the IpTag associated with the public IP address
type IpTag struct {
	// Gets or sets the ipTag type: Example FirstPartyUsage.
	IpTagType string `pulumi:"ipTagType"`
	// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
	Tag string `pulumi:"tag"`
}

// IpTagInput is an input type that accepts IpTagArgs and IpTagOutput values.
// You can construct a concrete instance of `IpTagInput` via:
//
//	IpTagArgs{...}
type IpTagInput interface {
	pulumi.Input

	ToIpTagOutput() IpTagOutput
	ToIpTagOutputWithContext(context.Context) IpTagOutput
}

// Contains the IpTag associated with the public IP address
type IpTagArgs struct {
	// Gets or sets the ipTag type: Example FirstPartyUsage.
	IpTagType pulumi.StringInput `pulumi:"ipTagType"`
	// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (IpTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpTag)(nil)).Elem()
}

func (i IpTagArgs) ToIpTagOutput() IpTagOutput {
	return i.ToIpTagOutputWithContext(context.Background())
}

func (i IpTagArgs) ToIpTagOutputWithContext(ctx context.Context) IpTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpTagOutput)
}

func (i IpTagArgs) ToIpTagPtrOutput() IpTagPtrOutput {
	return i.ToIpTagPtrOutputWithContext(context.Background())
}

func (i IpTagArgs) ToIpTagPtrOutputWithContext(ctx context.Context) IpTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpTagOutput).ToIpTagPtrOutputWithContext(ctx)
}

// IpTagPtrInput is an input type that accepts IpTagArgs, IpTagPtr and IpTagPtrOutput values.
// You can construct a concrete instance of `IpTagPtrInput` via:
//
//	        IpTagArgs{...}
//
//	or:
//
//	        nil
type IpTagPtrInput interface {
	pulumi.Input

	ToIpTagPtrOutput() IpTagPtrOutput
	ToIpTagPtrOutputWithContext(context.Context) IpTagPtrOutput
}

type ipTagPtrType IpTagArgs

func IpTagPtr(v *IpTagArgs) IpTagPtrInput {
	return (*ipTagPtrType)(v)
}

func (*ipTagPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpTag)(nil)).Elem()
}

func (i *ipTagPtrType) ToIpTagPtrOutput() IpTagPtrOutput {
	return i.ToIpTagPtrOutputWithContext(context.Background())
}

func (i *ipTagPtrType) ToIpTagPtrOutputWithContext(ctx context.Context) IpTagPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpTagPtrOutput)
}

// Contains the IpTag associated with the public IP address
type IpTagOutput struct{ *pulumi.OutputState }

func (IpTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpTag)(nil)).Elem()
}

func (o IpTagOutput) ToIpTagOutput() IpTagOutput {
	return o
}

func (o IpTagOutput) ToIpTagOutputWithContext(ctx context.Context) IpTagOutput {
	return o
}

func (o IpTagOutput) ToIpTagPtrOutput() IpTagPtrOutput {
	return o.ToIpTagPtrOutputWithContext(context.Background())
}

func (o IpTagOutput) ToIpTagPtrOutputWithContext(ctx context.Context) IpTagPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpTag) *IpTag {
		return &v
	}).(IpTagPtrOutput)
}

// Gets or sets the ipTag type: Example FirstPartyUsage.
func (o IpTagOutput) IpTagType() pulumi.StringOutput {
	return o.ApplyT(func(v IpTag) string { return v.IpTagType }).(pulumi.StringOutput)
}

// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
func (o IpTagOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v IpTag) string { return v.Tag }).(pulumi.StringOutput)
}

type IpTagPtrOutput struct{ *pulumi.OutputState }

func (IpTagPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpTag)(nil)).Elem()
}

func (o IpTagPtrOutput) ToIpTagPtrOutput() IpTagPtrOutput {
	return o
}

func (o IpTagPtrOutput) ToIpTagPtrOutputWithContext(ctx context.Context) IpTagPtrOutput {
	return o
}

func (o IpTagPtrOutput) Elem() IpTagOutput {
	return o.ApplyT(func(v *IpTag) IpTag {
		if v != nil {
			return *v
		}
		var ret IpTag
		return ret
	}).(IpTagOutput)
}

// Gets or sets the ipTag type: Example FirstPartyUsage.
func (o IpTagPtrOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpTag) *string {
		if v == nil {
			return nil
		}
		return &v.IpTagType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
func (o IpTagPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpTag) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// Contains the IpTag associated with the public IP address
type IpTagResponse struct {
	// Gets or sets the ipTag type: Example FirstPartyUsage.
	IpTagType string `pulumi:"ipTagType"`
	// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
	Tag string `pulumi:"tag"`
}

// Contains the IpTag associated with the public IP address
type IpTagResponseOutput struct{ *pulumi.OutputState }

func (IpTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpTagResponse)(nil)).Elem()
}

func (o IpTagResponseOutput) ToIpTagResponseOutput() IpTagResponseOutput {
	return o
}

func (o IpTagResponseOutput) ToIpTagResponseOutputWithContext(ctx context.Context) IpTagResponseOutput {
	return o
}

// Gets or sets the ipTag type: Example FirstPartyUsage.
func (o IpTagResponseOutput) IpTagType() pulumi.StringOutput {
	return o.ApplyT(func(v IpTagResponse) string { return v.IpTagType }).(pulumi.StringOutput)
}

// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
func (o IpTagResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v IpTagResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type IpTagResponsePtrOutput struct{ *pulumi.OutputState }

func (IpTagResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpTagResponse)(nil)).Elem()
}

func (o IpTagResponsePtrOutput) ToIpTagResponsePtrOutput() IpTagResponsePtrOutput {
	return o
}

func (o IpTagResponsePtrOutput) ToIpTagResponsePtrOutputWithContext(ctx context.Context) IpTagResponsePtrOutput {
	return o
}

func (o IpTagResponsePtrOutput) Elem() IpTagResponseOutput {
	return o.ApplyT(func(v *IpTagResponse) IpTagResponse {
		if v != nil {
			return *v
		}
		var ret IpTagResponse
		return ret
	}).(IpTagResponseOutput)
}

// Gets or sets the ipTag type: Example FirstPartyUsage.
func (o IpTagResponsePtrOutput) IpTagType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpTagResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpTagType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets value of the IpTag associated with the public IP. Example HDInsight, SQL, Storage etc
func (o IpTagResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpTagResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// Kafka bootstrap server and broker related connectivity endpoints.
type KafkaConnectivityEndpointsResponse struct {
	// bootstrap server connectivity endpoint.
	BootstrapServerEndpoint *string `pulumi:"bootstrapServerEndpoint"`
	// Kafka broker endpoint list.
	BrokerEndpoints []string `pulumi:"brokerEndpoints"`
}

// Kafka bootstrap server and broker related connectivity endpoints.
type KafkaConnectivityEndpointsResponseOutput struct{ *pulumi.OutputState }

func (KafkaConnectivityEndpointsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaConnectivityEndpointsResponse)(nil)).Elem()
}

func (o KafkaConnectivityEndpointsResponseOutput) ToKafkaConnectivityEndpointsResponseOutput() KafkaConnectivityEndpointsResponseOutput {
	return o
}

func (o KafkaConnectivityEndpointsResponseOutput) ToKafkaConnectivityEndpointsResponseOutputWithContext(ctx context.Context) KafkaConnectivityEndpointsResponseOutput {
	return o
}

// bootstrap server connectivity endpoint.
func (o KafkaConnectivityEndpointsResponseOutput) BootstrapServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaConnectivityEndpointsResponse) *string { return v.BootstrapServerEndpoint }).(pulumi.StringPtrOutput)
}

// Kafka broker endpoint list.
func (o KafkaConnectivityEndpointsResponseOutput) BrokerEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaConnectivityEndpointsResponse) []string { return v.BrokerEndpoints }).(pulumi.StringArrayOutput)
}

type KafkaConnectivityEndpointsResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaConnectivityEndpointsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectivityEndpointsResponse)(nil)).Elem()
}

func (o KafkaConnectivityEndpointsResponsePtrOutput) ToKafkaConnectivityEndpointsResponsePtrOutput() KafkaConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o KafkaConnectivityEndpointsResponsePtrOutput) ToKafkaConnectivityEndpointsResponsePtrOutputWithContext(ctx context.Context) KafkaConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o KafkaConnectivityEndpointsResponsePtrOutput) Elem() KafkaConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v *KafkaConnectivityEndpointsResponse) KafkaConnectivityEndpointsResponse {
		if v != nil {
			return *v
		}
		var ret KafkaConnectivityEndpointsResponse
		return ret
	}).(KafkaConnectivityEndpointsResponseOutput)
}

// bootstrap server connectivity endpoint.
func (o KafkaConnectivityEndpointsResponsePtrOutput) BootstrapServerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectivityEndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return v.BootstrapServerEndpoint
	}).(pulumi.StringPtrOutput)
}

// Kafka broker endpoint list.
func (o KafkaConnectivityEndpointsResponsePtrOutput) BrokerEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KafkaConnectivityEndpointsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BrokerEndpoints
	}).(pulumi.StringArrayOutput)
}

// The Kafka cluster profile.
type KafkaProfile struct {
	// Kafka disk storage profile.
	DiskStorage DiskStorageProfile `pulumi:"diskStorage"`
	// Expose Kafka cluster in KRaft mode.
	EnableKRaft *bool `pulumi:"enableKRaft"`
	// Expose worker nodes as public endpoints.
	EnablePublicEndpoints *bool `pulumi:"enablePublicEndpoints"`
	// Fully qualified path of Azure Storage container used for Tiered Storage.
	RemoteStorageUri *string `pulumi:"remoteStorageUri"`
}

// Defaults sets the appropriate defaults for KafkaProfile
func (val *KafkaProfile) Defaults() *KafkaProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableKRaft == nil {
		enableKRaft_ := true
		tmp.EnableKRaft = &enableKRaft_
	}
	if tmp.EnablePublicEndpoints == nil {
		enablePublicEndpoints_ := false
		tmp.EnablePublicEndpoints = &enablePublicEndpoints_
	}
	return &tmp
}

// KafkaProfileInput is an input type that accepts KafkaProfileArgs and KafkaProfileOutput values.
// You can construct a concrete instance of `KafkaProfileInput` via:
//
//	KafkaProfileArgs{...}
type KafkaProfileInput interface {
	pulumi.Input

	ToKafkaProfileOutput() KafkaProfileOutput
	ToKafkaProfileOutputWithContext(context.Context) KafkaProfileOutput
}

// The Kafka cluster profile.
type KafkaProfileArgs struct {
	// Kafka disk storage profile.
	DiskStorage DiskStorageProfileInput `pulumi:"diskStorage"`
	// Expose Kafka cluster in KRaft mode.
	EnableKRaft pulumi.BoolPtrInput `pulumi:"enableKRaft"`
	// Expose worker nodes as public endpoints.
	EnablePublicEndpoints pulumi.BoolPtrInput `pulumi:"enablePublicEndpoints"`
	// Fully qualified path of Azure Storage container used for Tiered Storage.
	RemoteStorageUri pulumi.StringPtrInput `pulumi:"remoteStorageUri"`
}

// Defaults sets the appropriate defaults for KafkaProfileArgs
func (val *KafkaProfileArgs) Defaults() *KafkaProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableKRaft == nil {
		tmp.EnableKRaft = pulumi.BoolPtr(true)
	}
	if tmp.EnablePublicEndpoints == nil {
		tmp.EnablePublicEndpoints = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (KafkaProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaProfile)(nil)).Elem()
}

func (i KafkaProfileArgs) ToKafkaProfileOutput() KafkaProfileOutput {
	return i.ToKafkaProfileOutputWithContext(context.Background())
}

func (i KafkaProfileArgs) ToKafkaProfileOutputWithContext(ctx context.Context) KafkaProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaProfileOutput)
}

func (i KafkaProfileArgs) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return i.ToKafkaProfilePtrOutputWithContext(context.Background())
}

func (i KafkaProfileArgs) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaProfileOutput).ToKafkaProfilePtrOutputWithContext(ctx)
}

// KafkaProfilePtrInput is an input type that accepts KafkaProfileArgs, KafkaProfilePtr and KafkaProfilePtrOutput values.
// You can construct a concrete instance of `KafkaProfilePtrInput` via:
//
//	        KafkaProfileArgs{...}
//
//	or:
//
//	        nil
type KafkaProfilePtrInput interface {
	pulumi.Input

	ToKafkaProfilePtrOutput() KafkaProfilePtrOutput
	ToKafkaProfilePtrOutputWithContext(context.Context) KafkaProfilePtrOutput
}

type kafkaProfilePtrType KafkaProfileArgs

func KafkaProfilePtr(v *KafkaProfileArgs) KafkaProfilePtrInput {
	return (*kafkaProfilePtrType)(v)
}

func (*kafkaProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaProfile)(nil)).Elem()
}

func (i *kafkaProfilePtrType) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return i.ToKafkaProfilePtrOutputWithContext(context.Background())
}

func (i *kafkaProfilePtrType) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaProfilePtrOutput)
}

// The Kafka cluster profile.
type KafkaProfileOutput struct{ *pulumi.OutputState }

func (KafkaProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaProfile)(nil)).Elem()
}

func (o KafkaProfileOutput) ToKafkaProfileOutput() KafkaProfileOutput {
	return o
}

func (o KafkaProfileOutput) ToKafkaProfileOutputWithContext(ctx context.Context) KafkaProfileOutput {
	return o
}

func (o KafkaProfileOutput) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return o.ToKafkaProfilePtrOutputWithContext(context.Background())
}

func (o KafkaProfileOutput) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaProfile) *KafkaProfile {
		return &v
	}).(KafkaProfilePtrOutput)
}

// Kafka disk storage profile.
func (o KafkaProfileOutput) DiskStorage() DiskStorageProfileOutput {
	return o.ApplyT(func(v KafkaProfile) DiskStorageProfile { return v.DiskStorage }).(DiskStorageProfileOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfileOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfile) *bool { return v.EnableKRaft }).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfileOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfile) *bool { return v.EnablePublicEndpoints }).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfileOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaProfile) *string { return v.RemoteStorageUri }).(pulumi.StringPtrOutput)
}

type KafkaProfilePtrOutput struct{ *pulumi.OutputState }

func (KafkaProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaProfile)(nil)).Elem()
}

func (o KafkaProfilePtrOutput) ToKafkaProfilePtrOutput() KafkaProfilePtrOutput {
	return o
}

func (o KafkaProfilePtrOutput) ToKafkaProfilePtrOutputWithContext(ctx context.Context) KafkaProfilePtrOutput {
	return o
}

func (o KafkaProfilePtrOutput) Elem() KafkaProfileOutput {
	return o.ApplyT(func(v *KafkaProfile) KafkaProfile {
		if v != nil {
			return *v
		}
		var ret KafkaProfile
		return ret
	}).(KafkaProfileOutput)
}

// Kafka disk storage profile.
func (o KafkaProfilePtrOutput) DiskStorage() DiskStorageProfilePtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *DiskStorageProfile {
		if v == nil {
			return nil
		}
		return &v.DiskStorage
	}).(DiskStorageProfilePtrOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfilePtrOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKRaft
	}).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfilePtrOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePublicEndpoints
	}).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfilePtrOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaProfile) *string {
		if v == nil {
			return nil
		}
		return v.RemoteStorageUri
	}).(pulumi.StringPtrOutput)
}

// The Kafka cluster profile.
type KafkaProfileResponse struct {
	// Kafka bootstrap server and brokers related connectivity endpoints.
	ConnectivityEndpoints KafkaConnectivityEndpointsResponse `pulumi:"connectivityEndpoints"`
	// Kafka disk storage profile.
	DiskStorage DiskStorageProfileResponse `pulumi:"diskStorage"`
	// Expose Kafka cluster in KRaft mode.
	EnableKRaft *bool `pulumi:"enableKRaft"`
	// Expose worker nodes as public endpoints.
	EnablePublicEndpoints *bool `pulumi:"enablePublicEndpoints"`
	// Fully qualified path of Azure Storage container used for Tiered Storage.
	RemoteStorageUri *string `pulumi:"remoteStorageUri"`
}

// Defaults sets the appropriate defaults for KafkaProfileResponse
func (val *KafkaProfileResponse) Defaults() *KafkaProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableKRaft == nil {
		enableKRaft_ := true
		tmp.EnableKRaft = &enableKRaft_
	}
	if tmp.EnablePublicEndpoints == nil {
		enablePublicEndpoints_ := false
		tmp.EnablePublicEndpoints = &enablePublicEndpoints_
	}
	return &tmp
}

// The Kafka cluster profile.
type KafkaProfileResponseOutput struct{ *pulumi.OutputState }

func (KafkaProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaProfileResponse)(nil)).Elem()
}

func (o KafkaProfileResponseOutput) ToKafkaProfileResponseOutput() KafkaProfileResponseOutput {
	return o
}

func (o KafkaProfileResponseOutput) ToKafkaProfileResponseOutputWithContext(ctx context.Context) KafkaProfileResponseOutput {
	return o
}

// Kafka bootstrap server and brokers related connectivity endpoints.
func (o KafkaProfileResponseOutput) ConnectivityEndpoints() KafkaConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v KafkaProfileResponse) KafkaConnectivityEndpointsResponse { return v.ConnectivityEndpoints }).(KafkaConnectivityEndpointsResponseOutput)
}

// Kafka disk storage profile.
func (o KafkaProfileResponseOutput) DiskStorage() DiskStorageProfileResponseOutput {
	return o.ApplyT(func(v KafkaProfileResponse) DiskStorageProfileResponse { return v.DiskStorage }).(DiskStorageProfileResponseOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfileResponseOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfileResponse) *bool { return v.EnableKRaft }).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfileResponseOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaProfileResponse) *bool { return v.EnablePublicEndpoints }).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfileResponseOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaProfileResponse) *string { return v.RemoteStorageUri }).(pulumi.StringPtrOutput)
}

type KafkaProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaProfileResponse)(nil)).Elem()
}

func (o KafkaProfileResponsePtrOutput) ToKafkaProfileResponsePtrOutput() KafkaProfileResponsePtrOutput {
	return o
}

func (o KafkaProfileResponsePtrOutput) ToKafkaProfileResponsePtrOutputWithContext(ctx context.Context) KafkaProfileResponsePtrOutput {
	return o
}

func (o KafkaProfileResponsePtrOutput) Elem() KafkaProfileResponseOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) KafkaProfileResponse {
		if v != nil {
			return *v
		}
		var ret KafkaProfileResponse
		return ret
	}).(KafkaProfileResponseOutput)
}

// Kafka bootstrap server and brokers related connectivity endpoints.
func (o KafkaProfileResponsePtrOutput) ConnectivityEndpoints() KafkaConnectivityEndpointsResponsePtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *KafkaConnectivityEndpointsResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectivityEndpoints
	}).(KafkaConnectivityEndpointsResponsePtrOutput)
}

// Kafka disk storage profile.
func (o KafkaProfileResponsePtrOutput) DiskStorage() DiskStorageProfileResponsePtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *DiskStorageProfileResponse {
		if v == nil {
			return nil
		}
		return &v.DiskStorage
	}).(DiskStorageProfileResponsePtrOutput)
}

// Expose Kafka cluster in KRaft mode.
func (o KafkaProfileResponsePtrOutput) EnableKRaft() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableKRaft
	}).(pulumi.BoolPtrOutput)
}

// Expose worker nodes as public endpoints.
func (o KafkaProfileResponsePtrOutput) EnablePublicEndpoints() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePublicEndpoints
	}).(pulumi.BoolPtrOutput)
}

// Fully qualified path of Azure Storage container used for Tiered Storage.
func (o KafkaProfileResponsePtrOutput) RemoteStorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteStorageUri
	}).(pulumi.StringPtrOutput)
}

// The kafka rest proxy configuration which contains AAD security group information.
type KafkaRestProperties struct {
	// The information of AAD security group.
	ClientGroupInfo *ClientGroupInfo `pulumi:"clientGroupInfo"`
	// The configurations that need to be overriden.
	ConfigurationOverride map[string]string `pulumi:"configurationOverride"`
}

// KafkaRestPropertiesInput is an input type that accepts KafkaRestPropertiesArgs and KafkaRestPropertiesOutput values.
// You can construct a concrete instance of `KafkaRestPropertiesInput` via:
//
//	KafkaRestPropertiesArgs{...}
type KafkaRestPropertiesInput interface {
	pulumi.Input

	ToKafkaRestPropertiesOutput() KafkaRestPropertiesOutput
	ToKafkaRestPropertiesOutputWithContext(context.Context) KafkaRestPropertiesOutput
}

// The kafka rest proxy configuration which contains AAD security group information.
type KafkaRestPropertiesArgs struct {
	// The information of AAD security group.
	ClientGroupInfo ClientGroupInfoPtrInput `pulumi:"clientGroupInfo"`
	// The configurations that need to be overriden.
	ConfigurationOverride pulumi.StringMapInput `pulumi:"configurationOverride"`
}

func (KafkaRestPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRestProperties)(nil)).Elem()
}

func (i KafkaRestPropertiesArgs) ToKafkaRestPropertiesOutput() KafkaRestPropertiesOutput {
	return i.ToKafkaRestPropertiesOutputWithContext(context.Background())
}

func (i KafkaRestPropertiesArgs) ToKafkaRestPropertiesOutputWithContext(ctx context.Context) KafkaRestPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRestPropertiesOutput)
}

func (i KafkaRestPropertiesArgs) ToKafkaRestPropertiesPtrOutput() KafkaRestPropertiesPtrOutput {
	return i.ToKafkaRestPropertiesPtrOutputWithContext(context.Background())
}

func (i KafkaRestPropertiesArgs) ToKafkaRestPropertiesPtrOutputWithContext(ctx context.Context) KafkaRestPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRestPropertiesOutput).ToKafkaRestPropertiesPtrOutputWithContext(ctx)
}

// KafkaRestPropertiesPtrInput is an input type that accepts KafkaRestPropertiesArgs, KafkaRestPropertiesPtr and KafkaRestPropertiesPtrOutput values.
// You can construct a concrete instance of `KafkaRestPropertiesPtrInput` via:
//
//	        KafkaRestPropertiesArgs{...}
//
//	or:
//
//	        nil
type KafkaRestPropertiesPtrInput interface {
	pulumi.Input

	ToKafkaRestPropertiesPtrOutput() KafkaRestPropertiesPtrOutput
	ToKafkaRestPropertiesPtrOutputWithContext(context.Context) KafkaRestPropertiesPtrOutput
}

type kafkaRestPropertiesPtrType KafkaRestPropertiesArgs

func KafkaRestPropertiesPtr(v *KafkaRestPropertiesArgs) KafkaRestPropertiesPtrInput {
	return (*kafkaRestPropertiesPtrType)(v)
}

func (*kafkaRestPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRestProperties)(nil)).Elem()
}

func (i *kafkaRestPropertiesPtrType) ToKafkaRestPropertiesPtrOutput() KafkaRestPropertiesPtrOutput {
	return i.ToKafkaRestPropertiesPtrOutputWithContext(context.Background())
}

func (i *kafkaRestPropertiesPtrType) ToKafkaRestPropertiesPtrOutputWithContext(ctx context.Context) KafkaRestPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRestPropertiesPtrOutput)
}

// The kafka rest proxy configuration which contains AAD security group information.
type KafkaRestPropertiesOutput struct{ *pulumi.OutputState }

func (KafkaRestPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRestProperties)(nil)).Elem()
}

func (o KafkaRestPropertiesOutput) ToKafkaRestPropertiesOutput() KafkaRestPropertiesOutput {
	return o
}

func (o KafkaRestPropertiesOutput) ToKafkaRestPropertiesOutputWithContext(ctx context.Context) KafkaRestPropertiesOutput {
	return o
}

func (o KafkaRestPropertiesOutput) ToKafkaRestPropertiesPtrOutput() KafkaRestPropertiesPtrOutput {
	return o.ToKafkaRestPropertiesPtrOutputWithContext(context.Background())
}

func (o KafkaRestPropertiesOutput) ToKafkaRestPropertiesPtrOutputWithContext(ctx context.Context) KafkaRestPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaRestProperties) *KafkaRestProperties {
		return &v
	}).(KafkaRestPropertiesPtrOutput)
}

// The information of AAD security group.
func (o KafkaRestPropertiesOutput) ClientGroupInfo() ClientGroupInfoPtrOutput {
	return o.ApplyT(func(v KafkaRestProperties) *ClientGroupInfo { return v.ClientGroupInfo }).(ClientGroupInfoPtrOutput)
}

// The configurations that need to be overriden.
func (o KafkaRestPropertiesOutput) ConfigurationOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaRestProperties) map[string]string { return v.ConfigurationOverride }).(pulumi.StringMapOutput)
}

type KafkaRestPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KafkaRestPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRestProperties)(nil)).Elem()
}

func (o KafkaRestPropertiesPtrOutput) ToKafkaRestPropertiesPtrOutput() KafkaRestPropertiesPtrOutput {
	return o
}

func (o KafkaRestPropertiesPtrOutput) ToKafkaRestPropertiesPtrOutputWithContext(ctx context.Context) KafkaRestPropertiesPtrOutput {
	return o
}

func (o KafkaRestPropertiesPtrOutput) Elem() KafkaRestPropertiesOutput {
	return o.ApplyT(func(v *KafkaRestProperties) KafkaRestProperties {
		if v != nil {
			return *v
		}
		var ret KafkaRestProperties
		return ret
	}).(KafkaRestPropertiesOutput)
}

// The information of AAD security group.
func (o KafkaRestPropertiesPtrOutput) ClientGroupInfo() ClientGroupInfoPtrOutput {
	return o.ApplyT(func(v *KafkaRestProperties) *ClientGroupInfo {
		if v == nil {
			return nil
		}
		return v.ClientGroupInfo
	}).(ClientGroupInfoPtrOutput)
}

// The configurations that need to be overriden.
func (o KafkaRestPropertiesPtrOutput) ConfigurationOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaRestProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConfigurationOverride
	}).(pulumi.StringMapOutput)
}

// The kafka rest proxy configuration which contains AAD security group information.
type KafkaRestPropertiesResponse struct {
	// The information of AAD security group.
	ClientGroupInfo *ClientGroupInfoResponse `pulumi:"clientGroupInfo"`
	// The configurations that need to be overriden.
	ConfigurationOverride map[string]string `pulumi:"configurationOverride"`
}

// The kafka rest proxy configuration which contains AAD security group information.
type KafkaRestPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KafkaRestPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaRestPropertiesResponse)(nil)).Elem()
}

func (o KafkaRestPropertiesResponseOutput) ToKafkaRestPropertiesResponseOutput() KafkaRestPropertiesResponseOutput {
	return o
}

func (o KafkaRestPropertiesResponseOutput) ToKafkaRestPropertiesResponseOutputWithContext(ctx context.Context) KafkaRestPropertiesResponseOutput {
	return o
}

// The information of AAD security group.
func (o KafkaRestPropertiesResponseOutput) ClientGroupInfo() ClientGroupInfoResponsePtrOutput {
	return o.ApplyT(func(v KafkaRestPropertiesResponse) *ClientGroupInfoResponse { return v.ClientGroupInfo }).(ClientGroupInfoResponsePtrOutput)
}

// The configurations that need to be overriden.
func (o KafkaRestPropertiesResponseOutput) ConfigurationOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaRestPropertiesResponse) map[string]string { return v.ConfigurationOverride }).(pulumi.StringMapOutput)
}

type KafkaRestPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KafkaRestPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRestPropertiesResponse)(nil)).Elem()
}

func (o KafkaRestPropertiesResponsePtrOutput) ToKafkaRestPropertiesResponsePtrOutput() KafkaRestPropertiesResponsePtrOutput {
	return o
}

func (o KafkaRestPropertiesResponsePtrOutput) ToKafkaRestPropertiesResponsePtrOutputWithContext(ctx context.Context) KafkaRestPropertiesResponsePtrOutput {
	return o
}

func (o KafkaRestPropertiesResponsePtrOutput) Elem() KafkaRestPropertiesResponseOutput {
	return o.ApplyT(func(v *KafkaRestPropertiesResponse) KafkaRestPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KafkaRestPropertiesResponse
		return ret
	}).(KafkaRestPropertiesResponseOutput)
}

// The information of AAD security group.
func (o KafkaRestPropertiesResponsePtrOutput) ClientGroupInfo() ClientGroupInfoResponsePtrOutput {
	return o.ApplyT(func(v *KafkaRestPropertiesResponse) *ClientGroupInfoResponse {
		if v == nil {
			return nil
		}
		return v.ClientGroupInfo
	}).(ClientGroupInfoResponsePtrOutput)
}

// The configurations that need to be overriden.
func (o KafkaRestPropertiesResponsePtrOutput) ConfigurationOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaRestPropertiesResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConfigurationOverride
	}).(pulumi.StringMapOutput)
}

// The ssh username, password, and ssh public key.
type LinuxOperatingSystemProfile struct {
	// The password.
	Password *string `pulumi:"password"`
	// The SSH profile.
	SshProfile *SshProfile `pulumi:"sshProfile"`
	// The username.
	Username *string `pulumi:"username"`
}

// LinuxOperatingSystemProfileInput is an input type that accepts LinuxOperatingSystemProfileArgs and LinuxOperatingSystemProfileOutput values.
// You can construct a concrete instance of `LinuxOperatingSystemProfileInput` via:
//
//	LinuxOperatingSystemProfileArgs{...}
type LinuxOperatingSystemProfileInput interface {
	pulumi.Input

	ToLinuxOperatingSystemProfileOutput() LinuxOperatingSystemProfileOutput
	ToLinuxOperatingSystemProfileOutputWithContext(context.Context) LinuxOperatingSystemProfileOutput
}

// The ssh username, password, and ssh public key.
type LinuxOperatingSystemProfileArgs struct {
	// The password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The SSH profile.
	SshProfile SshProfilePtrInput `pulumi:"sshProfile"`
	// The username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (LinuxOperatingSystemProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOperatingSystemProfile)(nil)).Elem()
}

func (i LinuxOperatingSystemProfileArgs) ToLinuxOperatingSystemProfileOutput() LinuxOperatingSystemProfileOutput {
	return i.ToLinuxOperatingSystemProfileOutputWithContext(context.Background())
}

func (i LinuxOperatingSystemProfileArgs) ToLinuxOperatingSystemProfileOutputWithContext(ctx context.Context) LinuxOperatingSystemProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOperatingSystemProfileOutput)
}

func (i LinuxOperatingSystemProfileArgs) ToLinuxOperatingSystemProfilePtrOutput() LinuxOperatingSystemProfilePtrOutput {
	return i.ToLinuxOperatingSystemProfilePtrOutputWithContext(context.Background())
}

func (i LinuxOperatingSystemProfileArgs) ToLinuxOperatingSystemProfilePtrOutputWithContext(ctx context.Context) LinuxOperatingSystemProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOperatingSystemProfileOutput).ToLinuxOperatingSystemProfilePtrOutputWithContext(ctx)
}

// LinuxOperatingSystemProfilePtrInput is an input type that accepts LinuxOperatingSystemProfileArgs, LinuxOperatingSystemProfilePtr and LinuxOperatingSystemProfilePtrOutput values.
// You can construct a concrete instance of `LinuxOperatingSystemProfilePtrInput` via:
//
//	        LinuxOperatingSystemProfileArgs{...}
//
//	or:
//
//	        nil
type LinuxOperatingSystemProfilePtrInput interface {
	pulumi.Input

	ToLinuxOperatingSystemProfilePtrOutput() LinuxOperatingSystemProfilePtrOutput
	ToLinuxOperatingSystemProfilePtrOutputWithContext(context.Context) LinuxOperatingSystemProfilePtrOutput
}

type linuxOperatingSystemProfilePtrType LinuxOperatingSystemProfileArgs

func LinuxOperatingSystemProfilePtr(v *LinuxOperatingSystemProfileArgs) LinuxOperatingSystemProfilePtrInput {
	return (*linuxOperatingSystemProfilePtrType)(v)
}

func (*linuxOperatingSystemProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOperatingSystemProfile)(nil)).Elem()
}

func (i *linuxOperatingSystemProfilePtrType) ToLinuxOperatingSystemProfilePtrOutput() LinuxOperatingSystemProfilePtrOutput {
	return i.ToLinuxOperatingSystemProfilePtrOutputWithContext(context.Background())
}

func (i *linuxOperatingSystemProfilePtrType) ToLinuxOperatingSystemProfilePtrOutputWithContext(ctx context.Context) LinuxOperatingSystemProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxOperatingSystemProfilePtrOutput)
}

// The ssh username, password, and ssh public key.
type LinuxOperatingSystemProfileOutput struct{ *pulumi.OutputState }

func (LinuxOperatingSystemProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOperatingSystemProfile)(nil)).Elem()
}

func (o LinuxOperatingSystemProfileOutput) ToLinuxOperatingSystemProfileOutput() LinuxOperatingSystemProfileOutput {
	return o
}

func (o LinuxOperatingSystemProfileOutput) ToLinuxOperatingSystemProfileOutputWithContext(ctx context.Context) LinuxOperatingSystemProfileOutput {
	return o
}

func (o LinuxOperatingSystemProfileOutput) ToLinuxOperatingSystemProfilePtrOutput() LinuxOperatingSystemProfilePtrOutput {
	return o.ToLinuxOperatingSystemProfilePtrOutputWithContext(context.Background())
}

func (o LinuxOperatingSystemProfileOutput) ToLinuxOperatingSystemProfilePtrOutputWithContext(ctx context.Context) LinuxOperatingSystemProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxOperatingSystemProfile) *LinuxOperatingSystemProfile {
		return &v
	}).(LinuxOperatingSystemProfilePtrOutput)
}

// The password.
func (o LinuxOperatingSystemProfileOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOperatingSystemProfile) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The SSH profile.
func (o LinuxOperatingSystemProfileOutput) SshProfile() SshProfilePtrOutput {
	return o.ApplyT(func(v LinuxOperatingSystemProfile) *SshProfile { return v.SshProfile }).(SshProfilePtrOutput)
}

// The username.
func (o LinuxOperatingSystemProfileOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOperatingSystemProfile) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type LinuxOperatingSystemProfilePtrOutput struct{ *pulumi.OutputState }

func (LinuxOperatingSystemProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOperatingSystemProfile)(nil)).Elem()
}

func (o LinuxOperatingSystemProfilePtrOutput) ToLinuxOperatingSystemProfilePtrOutput() LinuxOperatingSystemProfilePtrOutput {
	return o
}

func (o LinuxOperatingSystemProfilePtrOutput) ToLinuxOperatingSystemProfilePtrOutputWithContext(ctx context.Context) LinuxOperatingSystemProfilePtrOutput {
	return o
}

func (o LinuxOperatingSystemProfilePtrOutput) Elem() LinuxOperatingSystemProfileOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfile) LinuxOperatingSystemProfile {
		if v != nil {
			return *v
		}
		var ret LinuxOperatingSystemProfile
		return ret
	}).(LinuxOperatingSystemProfileOutput)
}

// The password.
func (o LinuxOperatingSystemProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfile) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The SSH profile.
func (o LinuxOperatingSystemProfilePtrOutput) SshProfile() SshProfilePtrOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfile) *SshProfile {
		if v == nil {
			return nil
		}
		return v.SshProfile
	}).(SshProfilePtrOutput)
}

// The username.
func (o LinuxOperatingSystemProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfile) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// The ssh username, password, and ssh public key.
type LinuxOperatingSystemProfileResponse struct {
	// The password.
	Password *string `pulumi:"password"`
	// The SSH profile.
	SshProfile *SshProfileResponse `pulumi:"sshProfile"`
	// The username.
	Username *string `pulumi:"username"`
}

// The ssh username, password, and ssh public key.
type LinuxOperatingSystemProfileResponseOutput struct{ *pulumi.OutputState }

func (LinuxOperatingSystemProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxOperatingSystemProfileResponse)(nil)).Elem()
}

func (o LinuxOperatingSystemProfileResponseOutput) ToLinuxOperatingSystemProfileResponseOutput() LinuxOperatingSystemProfileResponseOutput {
	return o
}

func (o LinuxOperatingSystemProfileResponseOutput) ToLinuxOperatingSystemProfileResponseOutputWithContext(ctx context.Context) LinuxOperatingSystemProfileResponseOutput {
	return o
}

// The password.
func (o LinuxOperatingSystemProfileResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOperatingSystemProfileResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The SSH profile.
func (o LinuxOperatingSystemProfileResponseOutput) SshProfile() SshProfileResponsePtrOutput {
	return o.ApplyT(func(v LinuxOperatingSystemProfileResponse) *SshProfileResponse { return v.SshProfile }).(SshProfileResponsePtrOutput)
}

// The username.
func (o LinuxOperatingSystemProfileResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinuxOperatingSystemProfileResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type LinuxOperatingSystemProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxOperatingSystemProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxOperatingSystemProfileResponse)(nil)).Elem()
}

func (o LinuxOperatingSystemProfileResponsePtrOutput) ToLinuxOperatingSystemProfileResponsePtrOutput() LinuxOperatingSystemProfileResponsePtrOutput {
	return o
}

func (o LinuxOperatingSystemProfileResponsePtrOutput) ToLinuxOperatingSystemProfileResponsePtrOutputWithContext(ctx context.Context) LinuxOperatingSystemProfileResponsePtrOutput {
	return o
}

func (o LinuxOperatingSystemProfileResponsePtrOutput) Elem() LinuxOperatingSystemProfileResponseOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfileResponse) LinuxOperatingSystemProfileResponse {
		if v != nil {
			return *v
		}
		var ret LinuxOperatingSystemProfileResponse
		return ret
	}).(LinuxOperatingSystemProfileResponseOutput)
}

// The password.
func (o LinuxOperatingSystemProfileResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The SSH profile.
func (o LinuxOperatingSystemProfileResponsePtrOutput) SshProfile() SshProfileResponsePtrOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfileResponse) *SshProfileResponse {
		if v == nil {
			return nil
		}
		return v.SshProfile
	}).(SshProfileResponsePtrOutput)
}

// The username.
func (o LinuxOperatingSystemProfileResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxOperatingSystemProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Profile of load based Autoscale.
type LoadBasedConfig struct {
	// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MaxNodes int `pulumi:"maxNodes"`
	// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MinNodes int `pulumi:"minNodes"`
	// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
	PollInterval *int `pulumi:"pollInterval"`
	// The scaling rules.
	ScalingRules []ScalingRule `pulumi:"scalingRules"`
}

// LoadBasedConfigInput is an input type that accepts LoadBasedConfigArgs and LoadBasedConfigOutput values.
// You can construct a concrete instance of `LoadBasedConfigInput` via:
//
//	LoadBasedConfigArgs{...}
type LoadBasedConfigInput interface {
	pulumi.Input

	ToLoadBasedConfigOutput() LoadBasedConfigOutput
	ToLoadBasedConfigOutputWithContext(context.Context) LoadBasedConfigOutput
}

// Profile of load based Autoscale.
type LoadBasedConfigArgs struct {
	// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
	CooldownPeriod pulumi.IntPtrInput `pulumi:"cooldownPeriod"`
	// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MaxNodes pulumi.IntInput `pulumi:"maxNodes"`
	// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MinNodes pulumi.IntInput `pulumi:"minNodes"`
	// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
	PollInterval pulumi.IntPtrInput `pulumi:"pollInterval"`
	// The scaling rules.
	ScalingRules ScalingRuleArrayInput `pulumi:"scalingRules"`
}

func (LoadBasedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBasedConfig)(nil)).Elem()
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigOutput() LoadBasedConfigOutput {
	return i.ToLoadBasedConfigOutputWithContext(context.Background())
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigOutputWithContext(ctx context.Context) LoadBasedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBasedConfigOutput)
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return i.ToLoadBasedConfigPtrOutputWithContext(context.Background())
}

func (i LoadBasedConfigArgs) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBasedConfigOutput).ToLoadBasedConfigPtrOutputWithContext(ctx)
}

// LoadBasedConfigPtrInput is an input type that accepts LoadBasedConfigArgs, LoadBasedConfigPtr and LoadBasedConfigPtrOutput values.
// You can construct a concrete instance of `LoadBasedConfigPtrInput` via:
//
//	        LoadBasedConfigArgs{...}
//
//	or:
//
//	        nil
type LoadBasedConfigPtrInput interface {
	pulumi.Input

	ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput
	ToLoadBasedConfigPtrOutputWithContext(context.Context) LoadBasedConfigPtrOutput
}

type loadBasedConfigPtrType LoadBasedConfigArgs

func LoadBasedConfigPtr(v *LoadBasedConfigArgs) LoadBasedConfigPtrInput {
	return (*loadBasedConfigPtrType)(v)
}

func (*loadBasedConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBasedConfig)(nil)).Elem()
}

func (i *loadBasedConfigPtrType) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return i.ToLoadBasedConfigPtrOutputWithContext(context.Background())
}

func (i *loadBasedConfigPtrType) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBasedConfigPtrOutput)
}

// Profile of load based Autoscale.
type LoadBasedConfigOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBasedConfig)(nil)).Elem()
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigOutput() LoadBasedConfigOutput {
	return o
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigOutputWithContext(ctx context.Context) LoadBasedConfigOutput {
	return o
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return o.ToLoadBasedConfigPtrOutputWithContext(context.Background())
}

func (o LoadBasedConfigOutput) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBasedConfig) *LoadBasedConfig {
		return &v
	}).(LoadBasedConfigPtrOutput)
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfig) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfig) int { return v.MaxNodes }).(pulumi.IntOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfig) int { return v.MinNodes }).(pulumi.IntOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfig) *int { return v.PollInterval }).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigOutput) ScalingRules() ScalingRuleArrayOutput {
	return o.ApplyT(func(v LoadBasedConfig) []ScalingRule { return v.ScalingRules }).(ScalingRuleArrayOutput)
}

type LoadBasedConfigPtrOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBasedConfig)(nil)).Elem()
}

func (o LoadBasedConfigPtrOutput) ToLoadBasedConfigPtrOutput() LoadBasedConfigPtrOutput {
	return o
}

func (o LoadBasedConfigPtrOutput) ToLoadBasedConfigPtrOutputWithContext(ctx context.Context) LoadBasedConfigPtrOutput {
	return o
}

func (o LoadBasedConfigPtrOutput) Elem() LoadBasedConfigOutput {
	return o.ApplyT(func(v *LoadBasedConfig) LoadBasedConfig {
		if v != nil {
			return *v
		}
		var ret LoadBasedConfig
		return ret
	}).(LoadBasedConfigOutput)
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigPtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigPtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigPtrOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfig) *int {
		if v == nil {
			return nil
		}
		return v.PollInterval
	}).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigPtrOutput) ScalingRules() ScalingRuleArrayOutput {
	return o.ApplyT(func(v *LoadBasedConfig) []ScalingRule {
		if v == nil {
			return nil
		}
		return v.ScalingRules
	}).(ScalingRuleArrayOutput)
}

// Profile of load based Autoscale.
type LoadBasedConfigResponse struct {
	// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
	CooldownPeriod *int `pulumi:"cooldownPeriod"`
	// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MaxNodes int `pulumi:"maxNodes"`
	// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
	MinNodes int `pulumi:"minNodes"`
	// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
	PollInterval *int `pulumi:"pollInterval"`
	// The scaling rules.
	ScalingRules []ScalingRuleResponse `pulumi:"scalingRules"`
}

// Profile of load based Autoscale.
type LoadBasedConfigResponseOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBasedConfigResponse)(nil)).Elem()
}

func (o LoadBasedConfigResponseOutput) ToLoadBasedConfigResponseOutput() LoadBasedConfigResponseOutput {
	return o
}

func (o LoadBasedConfigResponseOutput) ToLoadBasedConfigResponseOutputWithContext(ctx context.Context) LoadBasedConfigResponseOutput {
	return o
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigResponseOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) *int { return v.CooldownPeriod }).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponseOutput) MaxNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) int { return v.MaxNodes }).(pulumi.IntOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponseOutput) MinNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) int { return v.MinNodes }).(pulumi.IntOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigResponseOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) *int { return v.PollInterval }).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigResponseOutput) ScalingRules() ScalingRuleResponseArrayOutput {
	return o.ApplyT(func(v LoadBasedConfigResponse) []ScalingRuleResponse { return v.ScalingRules }).(ScalingRuleResponseArrayOutput)
}

type LoadBasedConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (LoadBasedConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBasedConfigResponse)(nil)).Elem()
}

func (o LoadBasedConfigResponsePtrOutput) ToLoadBasedConfigResponsePtrOutput() LoadBasedConfigResponsePtrOutput {
	return o
}

func (o LoadBasedConfigResponsePtrOutput) ToLoadBasedConfigResponsePtrOutputWithContext(ctx context.Context) LoadBasedConfigResponsePtrOutput {
	return o
}

func (o LoadBasedConfigResponsePtrOutput) Elem() LoadBasedConfigResponseOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) LoadBasedConfigResponse {
		if v != nil {
			return *v
		}
		var ret LoadBasedConfigResponse
		return ret
	}).(LoadBasedConfigResponseOutput)
}

// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.
func (o LoadBasedConfigResponsePtrOutput) CooldownPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.CooldownPeriod
	}).(pulumi.IntPtrOutput)
}

// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponsePtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.
func (o LoadBasedConfigResponsePtrOutput) MinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MinNodes
	}).(pulumi.IntPtrOutput)
}

// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.
func (o LoadBasedConfigResponsePtrOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.PollInterval
	}).(pulumi.IntPtrOutput)
}

// The scaling rules.
func (o LoadBasedConfigResponsePtrOutput) ScalingRules() ScalingRuleResponseArrayOutput {
	return o.ApplyT(func(v *LoadBasedConfigResponse) []ScalingRuleResponse {
		if v == nil {
			return nil
		}
		return v.ScalingRules
	}).(ScalingRuleResponseArrayOutput)
}

// The details of managed identity.
type ManagedIdentityProfile struct {
	// The list of managed identity.
	IdentityList []ManagedIdentitySpec `pulumi:"identityList"`
}

// ManagedIdentityProfileInput is an input type that accepts ManagedIdentityProfileArgs and ManagedIdentityProfileOutput values.
// You can construct a concrete instance of `ManagedIdentityProfileInput` via:
//
//	ManagedIdentityProfileArgs{...}
type ManagedIdentityProfileInput interface {
	pulumi.Input

	ToManagedIdentityProfileOutput() ManagedIdentityProfileOutput
	ToManagedIdentityProfileOutputWithContext(context.Context) ManagedIdentityProfileOutput
}

// The details of managed identity.
type ManagedIdentityProfileArgs struct {
	// The list of managed identity.
	IdentityList ManagedIdentitySpecArrayInput `pulumi:"identityList"`
}

func (ManagedIdentityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityProfile)(nil)).Elem()
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfileOutput() ManagedIdentityProfileOutput {
	return i.ToManagedIdentityProfileOutputWithContext(context.Background())
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfileOutputWithContext(ctx context.Context) ManagedIdentityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityProfileOutput)
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return i.ToManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (i ManagedIdentityProfileArgs) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityProfileOutput).ToManagedIdentityProfilePtrOutputWithContext(ctx)
}

// ManagedIdentityProfilePtrInput is an input type that accepts ManagedIdentityProfileArgs, ManagedIdentityProfilePtr and ManagedIdentityProfilePtrOutput values.
// You can construct a concrete instance of `ManagedIdentityProfilePtrInput` via:
//
//	        ManagedIdentityProfileArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityProfilePtrInput interface {
	pulumi.Input

	ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput
	ToManagedIdentityProfilePtrOutputWithContext(context.Context) ManagedIdentityProfilePtrOutput
}

type managedIdentityProfilePtrType ManagedIdentityProfileArgs

func ManagedIdentityProfilePtr(v *ManagedIdentityProfileArgs) ManagedIdentityProfilePtrInput {
	return (*managedIdentityProfilePtrType)(v)
}

func (*managedIdentityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityProfile)(nil)).Elem()
}

func (i *managedIdentityProfilePtrType) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return i.ToManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (i *managedIdentityProfilePtrType) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityProfilePtrOutput)
}

// The details of managed identity.
type ManagedIdentityProfileOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityProfile)(nil)).Elem()
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfileOutput() ManagedIdentityProfileOutput {
	return o
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfileOutputWithContext(ctx context.Context) ManagedIdentityProfileOutput {
	return o
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return o.ToManagedIdentityProfilePtrOutputWithContext(context.Background())
}

func (o ManagedIdentityProfileOutput) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityProfile) *ManagedIdentityProfile {
		return &v
	}).(ManagedIdentityProfilePtrOutput)
}

// The list of managed identity.
func (o ManagedIdentityProfileOutput) IdentityList() ManagedIdentitySpecArrayOutput {
	return o.ApplyT(func(v ManagedIdentityProfile) []ManagedIdentitySpec { return v.IdentityList }).(ManagedIdentitySpecArrayOutput)
}

type ManagedIdentityProfilePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityProfile)(nil)).Elem()
}

func (o ManagedIdentityProfilePtrOutput) ToManagedIdentityProfilePtrOutput() ManagedIdentityProfilePtrOutput {
	return o
}

func (o ManagedIdentityProfilePtrOutput) ToManagedIdentityProfilePtrOutputWithContext(ctx context.Context) ManagedIdentityProfilePtrOutput {
	return o
}

func (o ManagedIdentityProfilePtrOutput) Elem() ManagedIdentityProfileOutput {
	return o.ApplyT(func(v *ManagedIdentityProfile) ManagedIdentityProfile {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityProfile
		return ret
	}).(ManagedIdentityProfileOutput)
}

// The list of managed identity.
func (o ManagedIdentityProfilePtrOutput) IdentityList() ManagedIdentitySpecArrayOutput {
	return o.ApplyT(func(v *ManagedIdentityProfile) []ManagedIdentitySpec {
		if v == nil {
			return nil
		}
		return v.IdentityList
	}).(ManagedIdentitySpecArrayOutput)
}

// The details of managed identity.
type ManagedIdentityProfileResponse struct {
	// The list of managed identity.
	IdentityList []ManagedIdentitySpecResponse `pulumi:"identityList"`
}

// The details of managed identity.
type ManagedIdentityProfileResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityProfileResponse)(nil)).Elem()
}

func (o ManagedIdentityProfileResponseOutput) ToManagedIdentityProfileResponseOutput() ManagedIdentityProfileResponseOutput {
	return o
}

func (o ManagedIdentityProfileResponseOutput) ToManagedIdentityProfileResponseOutputWithContext(ctx context.Context) ManagedIdentityProfileResponseOutput {
	return o
}

// The list of managed identity.
func (o ManagedIdentityProfileResponseOutput) IdentityList() ManagedIdentitySpecResponseArrayOutput {
	return o.ApplyT(func(v ManagedIdentityProfileResponse) []ManagedIdentitySpecResponse { return v.IdentityList }).(ManagedIdentitySpecResponseArrayOutput)
}

type ManagedIdentityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityProfileResponse)(nil)).Elem()
}

func (o ManagedIdentityProfileResponsePtrOutput) ToManagedIdentityProfileResponsePtrOutput() ManagedIdentityProfileResponsePtrOutput {
	return o
}

func (o ManagedIdentityProfileResponsePtrOutput) ToManagedIdentityProfileResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityProfileResponsePtrOutput {
	return o
}

func (o ManagedIdentityProfileResponsePtrOutput) Elem() ManagedIdentityProfileResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityProfileResponse) ManagedIdentityProfileResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityProfileResponse
		return ret
	}).(ManagedIdentityProfileResponseOutput)
}

// The list of managed identity.
func (o ManagedIdentityProfileResponsePtrOutput) IdentityList() ManagedIdentitySpecResponseArrayOutput {
	return o.ApplyT(func(v *ManagedIdentityProfileResponse) []ManagedIdentitySpecResponse {
		if v == nil {
			return nil
		}
		return v.IdentityList
	}).(ManagedIdentitySpecResponseArrayOutput)
}

// The details of a managed identity.
type ManagedIdentitySpec struct {
	// ClientId of the managed identity.
	ClientId string `pulumi:"clientId"`
	// ObjectId of the managed identity.
	ObjectId string `pulumi:"objectId"`
	// ResourceId of the managed identity.
	ResourceId string `pulumi:"resourceId"`
	// The type of managed identity.
	Type string `pulumi:"type"`
}

// ManagedIdentitySpecInput is an input type that accepts ManagedIdentitySpecArgs and ManagedIdentitySpecOutput values.
// You can construct a concrete instance of `ManagedIdentitySpecInput` via:
//
//	ManagedIdentitySpecArgs{...}
type ManagedIdentitySpecInput interface {
	pulumi.Input

	ToManagedIdentitySpecOutput() ManagedIdentitySpecOutput
	ToManagedIdentitySpecOutputWithContext(context.Context) ManagedIdentitySpecOutput
}

// The details of a managed identity.
type ManagedIdentitySpecArgs struct {
	// ClientId of the managed identity.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// ObjectId of the managed identity.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// ResourceId of the managed identity.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The type of managed identity.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedIdentitySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySpec)(nil)).Elem()
}

func (i ManagedIdentitySpecArgs) ToManagedIdentitySpecOutput() ManagedIdentitySpecOutput {
	return i.ToManagedIdentitySpecOutputWithContext(context.Background())
}

func (i ManagedIdentitySpecArgs) ToManagedIdentitySpecOutputWithContext(ctx context.Context) ManagedIdentitySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySpecOutput)
}

// ManagedIdentitySpecArrayInput is an input type that accepts ManagedIdentitySpecArray and ManagedIdentitySpecArrayOutput values.
// You can construct a concrete instance of `ManagedIdentitySpecArrayInput` via:
//
//	ManagedIdentitySpecArray{ ManagedIdentitySpecArgs{...} }
type ManagedIdentitySpecArrayInput interface {
	pulumi.Input

	ToManagedIdentitySpecArrayOutput() ManagedIdentitySpecArrayOutput
	ToManagedIdentitySpecArrayOutputWithContext(context.Context) ManagedIdentitySpecArrayOutput
}

type ManagedIdentitySpecArray []ManagedIdentitySpecInput

func (ManagedIdentitySpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIdentitySpec)(nil)).Elem()
}

func (i ManagedIdentitySpecArray) ToManagedIdentitySpecArrayOutput() ManagedIdentitySpecArrayOutput {
	return i.ToManagedIdentitySpecArrayOutputWithContext(context.Background())
}

func (i ManagedIdentitySpecArray) ToManagedIdentitySpecArrayOutputWithContext(ctx context.Context) ManagedIdentitySpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySpecArrayOutput)
}

// The details of a managed identity.
type ManagedIdentitySpecOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySpec)(nil)).Elem()
}

func (o ManagedIdentitySpecOutput) ToManagedIdentitySpecOutput() ManagedIdentitySpecOutput {
	return o
}

func (o ManagedIdentitySpecOutput) ToManagedIdentitySpecOutputWithContext(ctx context.Context) ManagedIdentitySpecOutput {
	return o
}

// ClientId of the managed identity.
func (o ManagedIdentitySpecOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.ClientId }).(pulumi.StringOutput)
}

// ObjectId of the managed identity.
func (o ManagedIdentitySpecOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.ObjectId }).(pulumi.StringOutput)
}

// ResourceId of the managed identity.
func (o ManagedIdentitySpecOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of managed identity.
func (o ManagedIdentitySpecOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpec) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedIdentitySpecArrayOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIdentitySpec)(nil)).Elem()
}

func (o ManagedIdentitySpecArrayOutput) ToManagedIdentitySpecArrayOutput() ManagedIdentitySpecArrayOutput {
	return o
}

func (o ManagedIdentitySpecArrayOutput) ToManagedIdentitySpecArrayOutputWithContext(ctx context.Context) ManagedIdentitySpecArrayOutput {
	return o
}

func (o ManagedIdentitySpecArrayOutput) Index(i pulumi.IntInput) ManagedIdentitySpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIdentitySpec {
		return vs[0].([]ManagedIdentitySpec)[vs[1].(int)]
	}).(ManagedIdentitySpecOutput)
}

// The details of a managed identity.
type ManagedIdentitySpecResponse struct {
	// ClientId of the managed identity.
	ClientId string `pulumi:"clientId"`
	// ObjectId of the managed identity.
	ObjectId string `pulumi:"objectId"`
	// ResourceId of the managed identity.
	ResourceId string `pulumi:"resourceId"`
	// The type of managed identity.
	Type string `pulumi:"type"`
}

// The details of a managed identity.
type ManagedIdentitySpecResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySpecResponse)(nil)).Elem()
}

func (o ManagedIdentitySpecResponseOutput) ToManagedIdentitySpecResponseOutput() ManagedIdentitySpecResponseOutput {
	return o
}

func (o ManagedIdentitySpecResponseOutput) ToManagedIdentitySpecResponseOutputWithContext(ctx context.Context) ManagedIdentitySpecResponseOutput {
	return o
}

// ClientId of the managed identity.
func (o ManagedIdentitySpecResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// ObjectId of the managed identity.
func (o ManagedIdentitySpecResponseOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.ObjectId }).(pulumi.StringOutput)
}

// ResourceId of the managed identity.
func (o ManagedIdentitySpecResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of managed identity.
func (o ManagedIdentitySpecResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentitySpecResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedIdentitySpecResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedIdentitySpecResponse)(nil)).Elem()
}

func (o ManagedIdentitySpecResponseArrayOutput) ToManagedIdentitySpecResponseArrayOutput() ManagedIdentitySpecResponseArrayOutput {
	return o
}

func (o ManagedIdentitySpecResponseArrayOutput) ToManagedIdentitySpecResponseArrayOutputWithContext(ctx context.Context) ManagedIdentitySpecResponseArrayOutput {
	return o
}

func (o ManagedIdentitySpecResponseArrayOutput) Index(i pulumi.IntInput) ManagedIdentitySpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedIdentitySpecResponse {
		return vs[0].([]ManagedIdentitySpecResponse)[vs[1].(int)]
	}).(ManagedIdentitySpecResponseOutput)
}

// The network properties.
type NetworkProperties struct {
	// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
	OutboundDependenciesManagedType *string `pulumi:"outboundDependenciesManagedType"`
	// Indicates whether or not private link is enabled.
	PrivateLink *string `pulumi:"privateLink"`
	// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
	PublicIpTag *IpTag `pulumi:"publicIpTag"`
	// The direction for the resource provider connection.
	ResourceProviderConnection *string `pulumi:"resourceProviderConnection"`
}

// NetworkPropertiesInput is an input type that accepts NetworkPropertiesArgs and NetworkPropertiesOutput values.
// You can construct a concrete instance of `NetworkPropertiesInput` via:
//
//	NetworkPropertiesArgs{...}
type NetworkPropertiesInput interface {
	pulumi.Input

	ToNetworkPropertiesOutput() NetworkPropertiesOutput
	ToNetworkPropertiesOutputWithContext(context.Context) NetworkPropertiesOutput
}

// The network properties.
type NetworkPropertiesArgs struct {
	// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
	OutboundDependenciesManagedType pulumi.StringPtrInput `pulumi:"outboundDependenciesManagedType"`
	// Indicates whether or not private link is enabled.
	PrivateLink pulumi.StringPtrInput `pulumi:"privateLink"`
	// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
	PublicIpTag IpTagPtrInput `pulumi:"publicIpTag"`
	// The direction for the resource provider connection.
	ResourceProviderConnection pulumi.StringPtrInput `pulumi:"resourceProviderConnection"`
}

func (NetworkPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProperties)(nil)).Elem()
}

func (i NetworkPropertiesArgs) ToNetworkPropertiesOutput() NetworkPropertiesOutput {
	return i.ToNetworkPropertiesOutputWithContext(context.Background())
}

func (i NetworkPropertiesArgs) ToNetworkPropertiesOutputWithContext(ctx context.Context) NetworkPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPropertiesOutput)
}

func (i NetworkPropertiesArgs) ToNetworkPropertiesPtrOutput() NetworkPropertiesPtrOutput {
	return i.ToNetworkPropertiesPtrOutputWithContext(context.Background())
}

func (i NetworkPropertiesArgs) ToNetworkPropertiesPtrOutputWithContext(ctx context.Context) NetworkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPropertiesOutput).ToNetworkPropertiesPtrOutputWithContext(ctx)
}

// NetworkPropertiesPtrInput is an input type that accepts NetworkPropertiesArgs, NetworkPropertiesPtr and NetworkPropertiesPtrOutput values.
// You can construct a concrete instance of `NetworkPropertiesPtrInput` via:
//
//	        NetworkPropertiesArgs{...}
//
//	or:
//
//	        nil
type NetworkPropertiesPtrInput interface {
	pulumi.Input

	ToNetworkPropertiesPtrOutput() NetworkPropertiesPtrOutput
	ToNetworkPropertiesPtrOutputWithContext(context.Context) NetworkPropertiesPtrOutput
}

type networkPropertiesPtrType NetworkPropertiesArgs

func NetworkPropertiesPtr(v *NetworkPropertiesArgs) NetworkPropertiesPtrInput {
	return (*networkPropertiesPtrType)(v)
}

func (*networkPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProperties)(nil)).Elem()
}

func (i *networkPropertiesPtrType) ToNetworkPropertiesPtrOutput() NetworkPropertiesPtrOutput {
	return i.ToNetworkPropertiesPtrOutputWithContext(context.Background())
}

func (i *networkPropertiesPtrType) ToNetworkPropertiesPtrOutputWithContext(ctx context.Context) NetworkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPropertiesPtrOutput)
}

// The network properties.
type NetworkPropertiesOutput struct{ *pulumi.OutputState }

func (NetworkPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProperties)(nil)).Elem()
}

func (o NetworkPropertiesOutput) ToNetworkPropertiesOutput() NetworkPropertiesOutput {
	return o
}

func (o NetworkPropertiesOutput) ToNetworkPropertiesOutputWithContext(ctx context.Context) NetworkPropertiesOutput {
	return o
}

func (o NetworkPropertiesOutput) ToNetworkPropertiesPtrOutput() NetworkPropertiesPtrOutput {
	return o.ToNetworkPropertiesPtrOutputWithContext(context.Background())
}

func (o NetworkPropertiesOutput) ToNetworkPropertiesPtrOutputWithContext(ctx context.Context) NetworkPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkProperties) *NetworkProperties {
		return &v
	}).(NetworkPropertiesPtrOutput)
}

// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
func (o NetworkPropertiesOutput) OutboundDependenciesManagedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProperties) *string { return v.OutboundDependenciesManagedType }).(pulumi.StringPtrOutput)
}

// Indicates whether or not private link is enabled.
func (o NetworkPropertiesOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProperties) *string { return v.PrivateLink }).(pulumi.StringPtrOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
func (o NetworkPropertiesOutput) PublicIpTag() IpTagPtrOutput {
	return o.ApplyT(func(v NetworkProperties) *IpTag { return v.PublicIpTag }).(IpTagPtrOutput)
}

// The direction for the resource provider connection.
func (o NetworkPropertiesOutput) ResourceProviderConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProperties) *string { return v.ResourceProviderConnection }).(pulumi.StringPtrOutput)
}

type NetworkPropertiesPtrOutput struct{ *pulumi.OutputState }

func (NetworkPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProperties)(nil)).Elem()
}

func (o NetworkPropertiesPtrOutput) ToNetworkPropertiesPtrOutput() NetworkPropertiesPtrOutput {
	return o
}

func (o NetworkPropertiesPtrOutput) ToNetworkPropertiesPtrOutputWithContext(ctx context.Context) NetworkPropertiesPtrOutput {
	return o
}

func (o NetworkPropertiesPtrOutput) Elem() NetworkPropertiesOutput {
	return o.ApplyT(func(v *NetworkProperties) NetworkProperties {
		if v != nil {
			return *v
		}
		var ret NetworkProperties
		return ret
	}).(NetworkPropertiesOutput)
}

// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
func (o NetworkPropertiesPtrOutput) OutboundDependenciesManagedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProperties) *string {
		if v == nil {
			return nil
		}
		return v.OutboundDependenciesManagedType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not private link is enabled.
func (o NetworkPropertiesPtrOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLink
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
func (o NetworkPropertiesPtrOutput) PublicIpTag() IpTagPtrOutput {
	return o.ApplyT(func(v *NetworkProperties) *IpTag {
		if v == nil {
			return nil
		}
		return v.PublicIpTag
	}).(IpTagPtrOutput)
}

// The direction for the resource provider connection.
func (o NetworkPropertiesPtrOutput) ResourceProviderConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProperties) *string {
		if v == nil {
			return nil
		}
		return v.ResourceProviderConnection
	}).(pulumi.StringPtrOutput)
}

// The network properties.
type NetworkPropertiesResponse struct {
	// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
	OutboundDependenciesManagedType *string `pulumi:"outboundDependenciesManagedType"`
	// Indicates whether or not private link is enabled.
	PrivateLink *string `pulumi:"privateLink"`
	// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
	PublicIpTag *IpTagResponse `pulumi:"publicIpTag"`
	// The direction for the resource provider connection.
	ResourceProviderConnection *string `pulumi:"resourceProviderConnection"`
}

// The network properties.
type NetworkPropertiesResponseOutput struct{ *pulumi.OutputState }

func (NetworkPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkPropertiesResponse)(nil)).Elem()
}

func (o NetworkPropertiesResponseOutput) ToNetworkPropertiesResponseOutput() NetworkPropertiesResponseOutput {
	return o
}

func (o NetworkPropertiesResponseOutput) ToNetworkPropertiesResponseOutputWithContext(ctx context.Context) NetworkPropertiesResponseOutput {
	return o
}

// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
func (o NetworkPropertiesResponseOutput) OutboundDependenciesManagedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPropertiesResponse) *string { return v.OutboundDependenciesManagedType }).(pulumi.StringPtrOutput)
}

// Indicates whether or not private link is enabled.
func (o NetworkPropertiesResponseOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPropertiesResponse) *string { return v.PrivateLink }).(pulumi.StringPtrOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
func (o NetworkPropertiesResponseOutput) PublicIpTag() IpTagResponsePtrOutput {
	return o.ApplyT(func(v NetworkPropertiesResponse) *IpTagResponse { return v.PublicIpTag }).(IpTagResponsePtrOutput)
}

// The direction for the resource provider connection.
func (o NetworkPropertiesResponseOutput) ResourceProviderConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkPropertiesResponse) *string { return v.ResourceProviderConnection }).(pulumi.StringPtrOutput)
}

type NetworkPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPropertiesResponse)(nil)).Elem()
}

func (o NetworkPropertiesResponsePtrOutput) ToNetworkPropertiesResponsePtrOutput() NetworkPropertiesResponsePtrOutput {
	return o
}

func (o NetworkPropertiesResponsePtrOutput) ToNetworkPropertiesResponsePtrOutputWithContext(ctx context.Context) NetworkPropertiesResponsePtrOutput {
	return o
}

func (o NetworkPropertiesResponsePtrOutput) Elem() NetworkPropertiesResponseOutput {
	return o.ApplyT(func(v *NetworkPropertiesResponse) NetworkPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret NetworkPropertiesResponse
		return ret
	}).(NetworkPropertiesResponseOutput)
}

// A value to describe how the outbound dependencies of a HDInsight cluster are managed. 'Managed' means that the outbound dependencies are managed by the HDInsight service. 'External' means that the outbound dependencies are managed by a customer specific solution.
func (o NetworkPropertiesResponsePtrOutput) OutboundDependenciesManagedType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OutboundDependenciesManagedType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not private link is enabled.
func (o NetworkPropertiesResponsePtrOutput) PrivateLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateLink
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the IP tag for the public IPs created along with the HDInsight Clusters.
func (o NetworkPropertiesResponsePtrOutput) PublicIpTag() IpTagResponsePtrOutput {
	return o.ApplyT(func(v *NetworkPropertiesResponse) *IpTagResponse {
		if v == nil {
			return nil
		}
		return v.PublicIpTag
	}).(IpTagResponsePtrOutput)
}

// The direction for the resource provider connection.
func (o NetworkPropertiesResponsePtrOutput) ResourceProviderConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceProviderConnection
	}).(pulumi.StringPtrOutput)
}

// The node profile.
type NodeProfile struct {
	// The number of virtual machines.
	Count int `pulumi:"count"`
	// The node type.
	Type string `pulumi:"type"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// NodeProfileInput is an input type that accepts NodeProfileArgs and NodeProfileOutput values.
// You can construct a concrete instance of `NodeProfileInput` via:
//
//	NodeProfileArgs{...}
type NodeProfileInput interface {
	pulumi.Input

	ToNodeProfileOutput() NodeProfileOutput
	ToNodeProfileOutputWithContext(context.Context) NodeProfileOutput
}

// The node profile.
type NodeProfileArgs struct {
	// The number of virtual machines.
	Count pulumi.IntInput `pulumi:"count"`
	// The node type.
	Type pulumi.StringInput `pulumi:"type"`
	// The virtual machine SKU.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (NodeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfile)(nil)).Elem()
}

func (i NodeProfileArgs) ToNodeProfileOutput() NodeProfileOutput {
	return i.ToNodeProfileOutputWithContext(context.Background())
}

func (i NodeProfileArgs) ToNodeProfileOutputWithContext(ctx context.Context) NodeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProfileOutput)
}

// NodeProfileArrayInput is an input type that accepts NodeProfileArray and NodeProfileArrayOutput values.
// You can construct a concrete instance of `NodeProfileArrayInput` via:
//
//	NodeProfileArray{ NodeProfileArgs{...} }
type NodeProfileArrayInput interface {
	pulumi.Input

	ToNodeProfileArrayOutput() NodeProfileArrayOutput
	ToNodeProfileArrayOutputWithContext(context.Context) NodeProfileArrayOutput
}

type NodeProfileArray []NodeProfileInput

func (NodeProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProfile)(nil)).Elem()
}

func (i NodeProfileArray) ToNodeProfileArrayOutput() NodeProfileArrayOutput {
	return i.ToNodeProfileArrayOutputWithContext(context.Background())
}

func (i NodeProfileArray) ToNodeProfileArrayOutputWithContext(ctx context.Context) NodeProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProfileArrayOutput)
}

// The node profile.
type NodeProfileOutput struct{ *pulumi.OutputState }

func (NodeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfile)(nil)).Elem()
}

func (o NodeProfileOutput) ToNodeProfileOutput() NodeProfileOutput {
	return o
}

func (o NodeProfileOutput) ToNodeProfileOutputWithContext(ctx context.Context) NodeProfileOutput {
	return o
}

// The number of virtual machines.
func (o NodeProfileOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v NodeProfile) int { return v.Count }).(pulumi.IntOutput)
}

// The node type.
func (o NodeProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfile) string { return v.Type }).(pulumi.StringOutput)
}

// The virtual machine SKU.
func (o NodeProfileOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfile) string { return v.VmSize }).(pulumi.StringOutput)
}

type NodeProfileArrayOutput struct{ *pulumi.OutputState }

func (NodeProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProfile)(nil)).Elem()
}

func (o NodeProfileArrayOutput) ToNodeProfileArrayOutput() NodeProfileArrayOutput {
	return o
}

func (o NodeProfileArrayOutput) ToNodeProfileArrayOutputWithContext(ctx context.Context) NodeProfileArrayOutput {
	return o
}

func (o NodeProfileArrayOutput) Index(i pulumi.IntInput) NodeProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeProfile {
		return vs[0].([]NodeProfile)[vs[1].(int)]
	}).(NodeProfileOutput)
}

// The node profile.
type NodeProfileResponse struct {
	// The number of virtual machines.
	Count int `pulumi:"count"`
	// The node type.
	Type string `pulumi:"type"`
	// The virtual machine SKU.
	VmSize string `pulumi:"vmSize"`
}

// The node profile.
type NodeProfileResponseOutput struct{ *pulumi.OutputState }

func (NodeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfileResponse)(nil)).Elem()
}

func (o NodeProfileResponseOutput) ToNodeProfileResponseOutput() NodeProfileResponseOutput {
	return o
}

func (o NodeProfileResponseOutput) ToNodeProfileResponseOutputWithContext(ctx context.Context) NodeProfileResponseOutput {
	return o
}

// The number of virtual machines.
func (o NodeProfileResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v NodeProfileResponse) int { return v.Count }).(pulumi.IntOutput)
}

// The node type.
func (o NodeProfileResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfileResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The virtual machine SKU.
func (o NodeProfileResponseOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfileResponse) string { return v.VmSize }).(pulumi.StringOutput)
}

type NodeProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeProfileResponse)(nil)).Elem()
}

func (o NodeProfileResponseArrayOutput) ToNodeProfileResponseArrayOutput() NodeProfileResponseArrayOutput {
	return o
}

func (o NodeProfileResponseArrayOutput) ToNodeProfileResponseArrayOutputWithContext(ctx context.Context) NodeProfileResponseArrayOutput {
	return o
}

func (o NodeProfileResponseArrayOutput) Index(i pulumi.IntInput) NodeProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeProfileResponse {
		return vs[0].([]NodeProfileResponse)[vs[1].(int)]
	}).(NodeProfileResponseOutput)
}

// The Linux operation systems profile.
type OsProfile struct {
	// The Linux OS profile.
	LinuxOperatingSystemProfile *LinuxOperatingSystemProfile `pulumi:"linuxOperatingSystemProfile"`
}

// OsProfileInput is an input type that accepts OsProfileArgs and OsProfileOutput values.
// You can construct a concrete instance of `OsProfileInput` via:
//
//	OsProfileArgs{...}
type OsProfileInput interface {
	pulumi.Input

	ToOsProfileOutput() OsProfileOutput
	ToOsProfileOutputWithContext(context.Context) OsProfileOutput
}

// The Linux operation systems profile.
type OsProfileArgs struct {
	// The Linux OS profile.
	LinuxOperatingSystemProfile LinuxOperatingSystemProfilePtrInput `pulumi:"linuxOperatingSystemProfile"`
}

func (OsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfile)(nil)).Elem()
}

func (i OsProfileArgs) ToOsProfileOutput() OsProfileOutput {
	return i.ToOsProfileOutputWithContext(context.Background())
}

func (i OsProfileArgs) ToOsProfileOutputWithContext(ctx context.Context) OsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileOutput)
}

func (i OsProfileArgs) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return i.ToOsProfilePtrOutputWithContext(context.Background())
}

func (i OsProfileArgs) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfileOutput).ToOsProfilePtrOutputWithContext(ctx)
}

// OsProfilePtrInput is an input type that accepts OsProfileArgs, OsProfilePtr and OsProfilePtrOutput values.
// You can construct a concrete instance of `OsProfilePtrInput` via:
//
//	        OsProfileArgs{...}
//
//	or:
//
//	        nil
type OsProfilePtrInput interface {
	pulumi.Input

	ToOsProfilePtrOutput() OsProfilePtrOutput
	ToOsProfilePtrOutputWithContext(context.Context) OsProfilePtrOutput
}

type osProfilePtrType OsProfileArgs

func OsProfilePtr(v *OsProfileArgs) OsProfilePtrInput {
	return (*osProfilePtrType)(v)
}

func (*osProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfile)(nil)).Elem()
}

func (i *osProfilePtrType) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return i.ToOsProfilePtrOutputWithContext(context.Background())
}

func (i *osProfilePtrType) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsProfilePtrOutput)
}

// The Linux operation systems profile.
type OsProfileOutput struct{ *pulumi.OutputState }

func (OsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfile)(nil)).Elem()
}

func (o OsProfileOutput) ToOsProfileOutput() OsProfileOutput {
	return o
}

func (o OsProfileOutput) ToOsProfileOutputWithContext(ctx context.Context) OsProfileOutput {
	return o
}

func (o OsProfileOutput) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return o.ToOsProfilePtrOutputWithContext(context.Background())
}

func (o OsProfileOutput) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OsProfile) *OsProfile {
		return &v
	}).(OsProfilePtrOutput)
}

// The Linux OS profile.
func (o OsProfileOutput) LinuxOperatingSystemProfile() LinuxOperatingSystemProfilePtrOutput {
	return o.ApplyT(func(v OsProfile) *LinuxOperatingSystemProfile { return v.LinuxOperatingSystemProfile }).(LinuxOperatingSystemProfilePtrOutput)
}

type OsProfilePtrOutput struct{ *pulumi.OutputState }

func (OsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfile)(nil)).Elem()
}

func (o OsProfilePtrOutput) ToOsProfilePtrOutput() OsProfilePtrOutput {
	return o
}

func (o OsProfilePtrOutput) ToOsProfilePtrOutputWithContext(ctx context.Context) OsProfilePtrOutput {
	return o
}

func (o OsProfilePtrOutput) Elem() OsProfileOutput {
	return o.ApplyT(func(v *OsProfile) OsProfile {
		if v != nil {
			return *v
		}
		var ret OsProfile
		return ret
	}).(OsProfileOutput)
}

// The Linux OS profile.
func (o OsProfilePtrOutput) LinuxOperatingSystemProfile() LinuxOperatingSystemProfilePtrOutput {
	return o.ApplyT(func(v *OsProfile) *LinuxOperatingSystemProfile {
		if v == nil {
			return nil
		}
		return v.LinuxOperatingSystemProfile
	}).(LinuxOperatingSystemProfilePtrOutput)
}

// The Linux operation systems profile.
type OsProfileResponse struct {
	// The Linux OS profile.
	LinuxOperatingSystemProfile *LinuxOperatingSystemProfileResponse `pulumi:"linuxOperatingSystemProfile"`
}

// The Linux operation systems profile.
type OsProfileResponseOutput struct{ *pulumi.OutputState }

func (OsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsProfileResponse)(nil)).Elem()
}

func (o OsProfileResponseOutput) ToOsProfileResponseOutput() OsProfileResponseOutput {
	return o
}

func (o OsProfileResponseOutput) ToOsProfileResponseOutputWithContext(ctx context.Context) OsProfileResponseOutput {
	return o
}

// The Linux OS profile.
func (o OsProfileResponseOutput) LinuxOperatingSystemProfile() LinuxOperatingSystemProfileResponsePtrOutput {
	return o.ApplyT(func(v OsProfileResponse) *LinuxOperatingSystemProfileResponse { return v.LinuxOperatingSystemProfile }).(LinuxOperatingSystemProfileResponsePtrOutput)
}

type OsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsProfileResponse)(nil)).Elem()
}

func (o OsProfileResponsePtrOutput) ToOsProfileResponsePtrOutput() OsProfileResponsePtrOutput {
	return o
}

func (o OsProfileResponsePtrOutput) ToOsProfileResponsePtrOutputWithContext(ctx context.Context) OsProfileResponsePtrOutput {
	return o
}

func (o OsProfileResponsePtrOutput) Elem() OsProfileResponseOutput {
	return o.ApplyT(func(v *OsProfileResponse) OsProfileResponse {
		if v != nil {
			return *v
		}
		var ret OsProfileResponse
		return ret
	}).(OsProfileResponseOutput)
}

// The Linux OS profile.
func (o OsProfileResponsePtrOutput) LinuxOperatingSystemProfile() LinuxOperatingSystemProfileResponsePtrOutput {
	return o.ApplyT(func(v *OsProfileResponse) *LinuxOperatingSystemProfileResponse {
		if v == nil {
			return nil
		}
		return v.LinuxOperatingSystemProfile
	}).(LinuxOperatingSystemProfileResponsePtrOutput)
}

// The private endpoint connection.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The link identifier.
	LinkIdentifier string `pulumi:"linkIdentifier"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The private endpoint of the private endpoint connection
	PrivateEndpoint PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// The private link service connection state.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The private endpoint connection.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The link identifier.
func (o PrivateEndpointConnectionResponseOutput) LinkIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.LinkIdentifier }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The private endpoint of the private endpoint connection
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponseOutput)
}

// The private link service connection state.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state, which only appears in the response.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The private endpoint.
type PrivateEndpointResponse struct {
	// The private endpoint id.
	Id *string `pulumi:"id"`
}

// The private endpoint.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The private endpoint id.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The private link configuration.
type PrivateLinkConfiguration struct {
	// The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.
	GroupId string `pulumi:"groupId"`
	// The IP configurations for the private link service.
	IpConfigurations []IPConfiguration `pulumi:"ipConfigurations"`
	// The name of private link configuration.
	Name string `pulumi:"name"`
}

// PrivateLinkConfigurationInput is an input type that accepts PrivateLinkConfigurationArgs and PrivateLinkConfigurationOutput values.
// You can construct a concrete instance of `PrivateLinkConfigurationInput` via:
//
//	PrivateLinkConfigurationArgs{...}
type PrivateLinkConfigurationInput interface {
	pulumi.Input

	ToPrivateLinkConfigurationOutput() PrivateLinkConfigurationOutput
	ToPrivateLinkConfigurationOutputWithContext(context.Context) PrivateLinkConfigurationOutput
}

// The private link configuration.
type PrivateLinkConfigurationArgs struct {
	// The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The IP configurations for the private link service.
	IpConfigurations IPConfigurationArrayInput `pulumi:"ipConfigurations"`
	// The name of private link configuration.
	Name pulumi.StringInput `pulumi:"name"`
}

func (PrivateLinkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConfiguration)(nil)).Elem()
}

func (i PrivateLinkConfigurationArgs) ToPrivateLinkConfigurationOutput() PrivateLinkConfigurationOutput {
	return i.ToPrivateLinkConfigurationOutputWithContext(context.Background())
}

func (i PrivateLinkConfigurationArgs) ToPrivateLinkConfigurationOutputWithContext(ctx context.Context) PrivateLinkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConfigurationOutput)
}

// PrivateLinkConfigurationArrayInput is an input type that accepts PrivateLinkConfigurationArray and PrivateLinkConfigurationArrayOutput values.
// You can construct a concrete instance of `PrivateLinkConfigurationArrayInput` via:
//
//	PrivateLinkConfigurationArray{ PrivateLinkConfigurationArgs{...} }
type PrivateLinkConfigurationArrayInput interface {
	pulumi.Input

	ToPrivateLinkConfigurationArrayOutput() PrivateLinkConfigurationArrayOutput
	ToPrivateLinkConfigurationArrayOutputWithContext(context.Context) PrivateLinkConfigurationArrayOutput
}

type PrivateLinkConfigurationArray []PrivateLinkConfigurationInput

func (PrivateLinkConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkConfiguration)(nil)).Elem()
}

func (i PrivateLinkConfigurationArray) ToPrivateLinkConfigurationArrayOutput() PrivateLinkConfigurationArrayOutput {
	return i.ToPrivateLinkConfigurationArrayOutputWithContext(context.Background())
}

func (i PrivateLinkConfigurationArray) ToPrivateLinkConfigurationArrayOutputWithContext(ctx context.Context) PrivateLinkConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkConfigurationArrayOutput)
}

// The private link configuration.
type PrivateLinkConfigurationOutput struct{ *pulumi.OutputState }

func (PrivateLinkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConfiguration)(nil)).Elem()
}

func (o PrivateLinkConfigurationOutput) ToPrivateLinkConfigurationOutput() PrivateLinkConfigurationOutput {
	return o
}

func (o PrivateLinkConfigurationOutput) ToPrivateLinkConfigurationOutputWithContext(ctx context.Context) PrivateLinkConfigurationOutput {
	return o
}

// The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.
func (o PrivateLinkConfigurationOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfiguration) string { return v.GroupId }).(pulumi.StringOutput)
}

// The IP configurations for the private link service.
func (o PrivateLinkConfigurationOutput) IpConfigurations() IPConfigurationArrayOutput {
	return o.ApplyT(func(v PrivateLinkConfiguration) []IPConfiguration { return v.IpConfigurations }).(IPConfigurationArrayOutput)
}

// The name of private link configuration.
func (o PrivateLinkConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type PrivateLinkConfigurationArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkConfiguration)(nil)).Elem()
}

func (o PrivateLinkConfigurationArrayOutput) ToPrivateLinkConfigurationArrayOutput() PrivateLinkConfigurationArrayOutput {
	return o
}

func (o PrivateLinkConfigurationArrayOutput) ToPrivateLinkConfigurationArrayOutputWithContext(ctx context.Context) PrivateLinkConfigurationArrayOutput {
	return o
}

func (o PrivateLinkConfigurationArrayOutput) Index(i pulumi.IntInput) PrivateLinkConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkConfiguration {
		return vs[0].([]PrivateLinkConfiguration)[vs[1].(int)]
	}).(PrivateLinkConfigurationOutput)
}

// The private link configuration.
type PrivateLinkConfigurationResponse struct {
	// The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.
	GroupId string `pulumi:"groupId"`
	// The private link configuration id.
	Id string `pulumi:"id"`
	// The IP configurations for the private link service.
	IpConfigurations []IPConfigurationResponse `pulumi:"ipConfigurations"`
	// The name of private link configuration.
	Name string `pulumi:"name"`
	// The private link configuration provisioning state, which only appears in the response.
	ProvisioningState string `pulumi:"provisioningState"`
	// The type of the private link configuration.
	Type string `pulumi:"type"`
}

// The private link configuration.
type PrivateLinkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConfigurationResponse)(nil)).Elem()
}

func (o PrivateLinkConfigurationResponseOutput) ToPrivateLinkConfigurationResponseOutput() PrivateLinkConfigurationResponseOutput {
	return o
}

func (o PrivateLinkConfigurationResponseOutput) ToPrivateLinkConfigurationResponseOutputWithContext(ctx context.Context) PrivateLinkConfigurationResponseOutput {
	return o
}

// The HDInsight private linkable sub-resource name to apply the private link configuration to. For example, 'headnode', 'gateway', 'edgenode'.
func (o PrivateLinkConfigurationResponseOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfigurationResponse) string { return v.GroupId }).(pulumi.StringOutput)
}

// The private link configuration id.
func (o PrivateLinkConfigurationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfigurationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The IP configurations for the private link service.
func (o PrivateLinkConfigurationResponseOutput) IpConfigurations() IPConfigurationResponseArrayOutput {
	return o.ApplyT(func(v PrivateLinkConfigurationResponse) []IPConfigurationResponse { return v.IpConfigurations }).(IPConfigurationResponseArrayOutput)
}

// The name of private link configuration.
func (o PrivateLinkConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The private link configuration provisioning state, which only appears in the response.
func (o PrivateLinkConfigurationResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfigurationResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The type of the private link configuration.
func (o PrivateLinkConfigurationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConfigurationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateLinkConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkConfigurationResponse)(nil)).Elem()
}

func (o PrivateLinkConfigurationResponseArrayOutput) ToPrivateLinkConfigurationResponseArrayOutput() PrivateLinkConfigurationResponseArrayOutput {
	return o
}

func (o PrivateLinkConfigurationResponseArrayOutput) ToPrivateLinkConfigurationResponseArrayOutputWithContext(ctx context.Context) PrivateLinkConfigurationResponseArrayOutput {
	return o
}

func (o PrivateLinkConfigurationResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkConfigurationResponse {
		return vs[0].([]PrivateLinkConfigurationResponse)[vs[1].(int)]
	}).(PrivateLinkConfigurationResponseOutput)
}

// The private link service connection state.
type PrivateLinkServiceConnectionState struct {
	// Whether there is further actions.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The optional description of the status.
	Description *string `pulumi:"description"`
	// The concrete private link service connection.
	Status string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// The private link service connection state.
type PrivateLinkServiceConnectionStateArgs struct {
	// Whether there is further actions.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The optional description of the status.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The concrete private link service connection.
	Status pulumi.StringInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// The private link service connection state.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// Whether there is further actions.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The optional description of the status.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The concrete private link service connection.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) string { return v.Status }).(pulumi.StringOutput)
}

// The private link service connection state.
type PrivateLinkServiceConnectionStateResponse struct {
	// Whether there is further actions.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The optional description of the status.
	Description *string `pulumi:"description"`
	// The concrete private link service connection.
	Status string `pulumi:"status"`
}

// The private link service connection state.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// Whether there is further actions.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The optional description of the status.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The concrete private link service connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The quota properties for the cluster.
type QuotaInfoResponse struct {
	// The cores used by the cluster.
	CoresUsed *int `pulumi:"coresUsed"`
}

// The quota properties for the cluster.
type QuotaInfoResponseOutput struct{ *pulumi.OutputState }

func (QuotaInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QuotaInfoResponse)(nil)).Elem()
}

func (o QuotaInfoResponseOutput) ToQuotaInfoResponseOutput() QuotaInfoResponseOutput {
	return o
}

func (o QuotaInfoResponseOutput) ToQuotaInfoResponseOutputWithContext(ctx context.Context) QuotaInfoResponseOutput {
	return o
}

// The cores used by the cluster.
func (o QuotaInfoResponseOutput) CoresUsed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QuotaInfoResponse) *int { return v.CoresUsed }).(pulumi.IntPtrOutput)
}

type QuotaInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (QuotaInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QuotaInfoResponse)(nil)).Elem()
}

func (o QuotaInfoResponsePtrOutput) ToQuotaInfoResponsePtrOutput() QuotaInfoResponsePtrOutput {
	return o
}

func (o QuotaInfoResponsePtrOutput) ToQuotaInfoResponsePtrOutputWithContext(ctx context.Context) QuotaInfoResponsePtrOutput {
	return o
}

func (o QuotaInfoResponsePtrOutput) Elem() QuotaInfoResponseOutput {
	return o.ApplyT(func(v *QuotaInfoResponse) QuotaInfoResponse {
		if v != nil {
			return *v
		}
		var ret QuotaInfoResponse
		return ret
	}).(QuotaInfoResponseOutput)
}

// The cores used by the cluster.
func (o QuotaInfoResponsePtrOutput) CoresUsed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QuotaInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.CoresUsed
	}).(pulumi.IntPtrOutput)
}

// Specification for the Ranger Admin service.
type RangerAdminSpec struct {
	// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
	Admins   []string                `pulumi:"admins"`
	Database RangerAdminSpecDatabase `pulumi:"database"`
}

// RangerAdminSpecInput is an input type that accepts RangerAdminSpecArgs and RangerAdminSpecOutput values.
// You can construct a concrete instance of `RangerAdminSpecInput` via:
//
//	RangerAdminSpecArgs{...}
type RangerAdminSpecInput interface {
	pulumi.Input

	ToRangerAdminSpecOutput() RangerAdminSpecOutput
	ToRangerAdminSpecOutputWithContext(context.Context) RangerAdminSpecOutput
}

// Specification for the Ranger Admin service.
type RangerAdminSpecArgs struct {
	// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
	Admins   pulumi.StringArrayInput      `pulumi:"admins"`
	Database RangerAdminSpecDatabaseInput `pulumi:"database"`
}

func (RangerAdminSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpec)(nil)).Elem()
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecOutput() RangerAdminSpecOutput {
	return i.ToRangerAdminSpecOutputWithContext(context.Background())
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecOutputWithContext(ctx context.Context) RangerAdminSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecOutput)
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return i.ToRangerAdminSpecPtrOutputWithContext(context.Background())
}

func (i RangerAdminSpecArgs) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecOutput).ToRangerAdminSpecPtrOutputWithContext(ctx)
}

// RangerAdminSpecPtrInput is an input type that accepts RangerAdminSpecArgs, RangerAdminSpecPtr and RangerAdminSpecPtrOutput values.
// You can construct a concrete instance of `RangerAdminSpecPtrInput` via:
//
//	        RangerAdminSpecArgs{...}
//
//	or:
//
//	        nil
type RangerAdminSpecPtrInput interface {
	pulumi.Input

	ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput
	ToRangerAdminSpecPtrOutputWithContext(context.Context) RangerAdminSpecPtrOutput
}

type rangerAdminSpecPtrType RangerAdminSpecArgs

func RangerAdminSpecPtr(v *RangerAdminSpecArgs) RangerAdminSpecPtrInput {
	return (*rangerAdminSpecPtrType)(v)
}

func (*rangerAdminSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpec)(nil)).Elem()
}

func (i *rangerAdminSpecPtrType) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return i.ToRangerAdminSpecPtrOutputWithContext(context.Background())
}

func (i *rangerAdminSpecPtrType) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecPtrOutput)
}

// Specification for the Ranger Admin service.
type RangerAdminSpecOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpec)(nil)).Elem()
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecOutput() RangerAdminSpecOutput {
	return o
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecOutputWithContext(ctx context.Context) RangerAdminSpecOutput {
	return o
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return o.ToRangerAdminSpecPtrOutputWithContext(context.Background())
}

func (o RangerAdminSpecOutput) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerAdminSpec) *RangerAdminSpec {
		return &v
	}).(RangerAdminSpecPtrOutput)
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerAdminSpec) []string { return v.Admins }).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecOutput) Database() RangerAdminSpecDatabaseOutput {
	return o.ApplyT(func(v RangerAdminSpec) RangerAdminSpecDatabase { return v.Database }).(RangerAdminSpecDatabaseOutput)
}

type RangerAdminSpecPtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpec)(nil)).Elem()
}

func (o RangerAdminSpecPtrOutput) ToRangerAdminSpecPtrOutput() RangerAdminSpecPtrOutput {
	return o
}

func (o RangerAdminSpecPtrOutput) ToRangerAdminSpecPtrOutputWithContext(ctx context.Context) RangerAdminSpecPtrOutput {
	return o
}

func (o RangerAdminSpecPtrOutput) Elem() RangerAdminSpecOutput {
	return o.ApplyT(func(v *RangerAdminSpec) RangerAdminSpec {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpec
		return ret
	}).(RangerAdminSpecOutput)
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecPtrOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerAdminSpec) []string {
		if v == nil {
			return nil
		}
		return v.Admins
	}).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecPtrOutput) Database() RangerAdminSpecDatabasePtrOutput {
	return o.ApplyT(func(v *RangerAdminSpec) *RangerAdminSpecDatabase {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(RangerAdminSpecDatabasePtrOutput)
}

type RangerAdminSpecDatabase struct {
	// The database URL
	Host string `pulumi:"host"`
	// The database name
	Name string `pulumi:"name"`
	// Reference for the database password
	PasswordSecretRef *string `pulumi:"passwordSecretRef"`
	// The name of the database user
	Username *string `pulumi:"username"`
}

// RangerAdminSpecDatabaseInput is an input type that accepts RangerAdminSpecDatabaseArgs and RangerAdminSpecDatabaseOutput values.
// You can construct a concrete instance of `RangerAdminSpecDatabaseInput` via:
//
//	RangerAdminSpecDatabaseArgs{...}
type RangerAdminSpecDatabaseInput interface {
	pulumi.Input

	ToRangerAdminSpecDatabaseOutput() RangerAdminSpecDatabaseOutput
	ToRangerAdminSpecDatabaseOutputWithContext(context.Context) RangerAdminSpecDatabaseOutput
}

type RangerAdminSpecDatabaseArgs struct {
	// The database URL
	Host pulumi.StringInput `pulumi:"host"`
	// The database name
	Name pulumi.StringInput `pulumi:"name"`
	// Reference for the database password
	PasswordSecretRef pulumi.StringPtrInput `pulumi:"passwordSecretRef"`
	// The name of the database user
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (RangerAdminSpecDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecDatabase)(nil)).Elem()
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabaseOutput() RangerAdminSpecDatabaseOutput {
	return i.ToRangerAdminSpecDatabaseOutputWithContext(context.Background())
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabaseOutputWithContext(ctx context.Context) RangerAdminSpecDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecDatabaseOutput)
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return i.ToRangerAdminSpecDatabasePtrOutputWithContext(context.Background())
}

func (i RangerAdminSpecDatabaseArgs) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecDatabaseOutput).ToRangerAdminSpecDatabasePtrOutputWithContext(ctx)
}

// RangerAdminSpecDatabasePtrInput is an input type that accepts RangerAdminSpecDatabaseArgs, RangerAdminSpecDatabasePtr and RangerAdminSpecDatabasePtrOutput values.
// You can construct a concrete instance of `RangerAdminSpecDatabasePtrInput` via:
//
//	        RangerAdminSpecDatabaseArgs{...}
//
//	or:
//
//	        nil
type RangerAdminSpecDatabasePtrInput interface {
	pulumi.Input

	ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput
	ToRangerAdminSpecDatabasePtrOutputWithContext(context.Context) RangerAdminSpecDatabasePtrOutput
}

type rangerAdminSpecDatabasePtrType RangerAdminSpecDatabaseArgs

func RangerAdminSpecDatabasePtr(v *RangerAdminSpecDatabaseArgs) RangerAdminSpecDatabasePtrInput {
	return (*rangerAdminSpecDatabasePtrType)(v)
}

func (*rangerAdminSpecDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecDatabase)(nil)).Elem()
}

func (i *rangerAdminSpecDatabasePtrType) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return i.ToRangerAdminSpecDatabasePtrOutputWithContext(context.Background())
}

func (i *rangerAdminSpecDatabasePtrType) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAdminSpecDatabasePtrOutput)
}

type RangerAdminSpecDatabaseOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecDatabase)(nil)).Elem()
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabaseOutput() RangerAdminSpecDatabaseOutput {
	return o
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabaseOutputWithContext(ctx context.Context) RangerAdminSpecDatabaseOutput {
	return o
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return o.ToRangerAdminSpecDatabasePtrOutputWithContext(context.Background())
}

func (o RangerAdminSpecDatabaseOutput) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerAdminSpecDatabase) *RangerAdminSpecDatabase {
		return &v
	}).(RangerAdminSpecDatabasePtrOutput)
}

// The database URL
func (o RangerAdminSpecDatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) string { return v.Host }).(pulumi.StringOutput)
}

// The database name
func (o RangerAdminSpecDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// Reference for the database password
func (o RangerAdminSpecDatabaseOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) *string { return v.PasswordSecretRef }).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RangerAdminSpecDatabasePtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecDatabase)(nil)).Elem()
}

func (o RangerAdminSpecDatabasePtrOutput) ToRangerAdminSpecDatabasePtrOutput() RangerAdminSpecDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecDatabasePtrOutput) ToRangerAdminSpecDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecDatabasePtrOutput) Elem() RangerAdminSpecDatabaseOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) RangerAdminSpecDatabase {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpecDatabase
		return ret
	}).(RangerAdminSpecDatabaseOutput)
}

// The database URL
func (o RangerAdminSpecDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The database name
func (o RangerAdminSpecDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference for the database password
func (o RangerAdminSpecDatabasePtrOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecretRef
	}).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Specification for the Ranger Admin service.
type RangerAdminSpecResponse struct {
	// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
	Admins   []string                        `pulumi:"admins"`
	Database RangerAdminSpecResponseDatabase `pulumi:"database"`
}

// Specification for the Ranger Admin service.
type RangerAdminSpecResponseOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecResponse)(nil)).Elem()
}

func (o RangerAdminSpecResponseOutput) ToRangerAdminSpecResponseOutput() RangerAdminSpecResponseOutput {
	return o
}

func (o RangerAdminSpecResponseOutput) ToRangerAdminSpecResponseOutputWithContext(ctx context.Context) RangerAdminSpecResponseOutput {
	return o
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecResponseOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerAdminSpecResponse) []string { return v.Admins }).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecResponseOutput) Database() RangerAdminSpecResponseDatabaseOutput {
	return o.ApplyT(func(v RangerAdminSpecResponse) RangerAdminSpecResponseDatabase { return v.Database }).(RangerAdminSpecResponseDatabaseOutput)
}

type RangerAdminSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecResponse)(nil)).Elem()
}

func (o RangerAdminSpecResponsePtrOutput) ToRangerAdminSpecResponsePtrOutput() RangerAdminSpecResponsePtrOutput {
	return o
}

func (o RangerAdminSpecResponsePtrOutput) ToRangerAdminSpecResponsePtrOutputWithContext(ctx context.Context) RangerAdminSpecResponsePtrOutput {
	return o
}

func (o RangerAdminSpecResponsePtrOutput) Elem() RangerAdminSpecResponseOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponse) RangerAdminSpecResponse {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpecResponse
		return ret
	}).(RangerAdminSpecResponseOutput)
}

// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.
func (o RangerAdminSpecResponsePtrOutput) Admins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Admins
	}).(pulumi.StringArrayOutput)
}

func (o RangerAdminSpecResponsePtrOutput) Database() RangerAdminSpecResponseDatabasePtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponse) *RangerAdminSpecResponseDatabase {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(RangerAdminSpecResponseDatabasePtrOutput)
}

type RangerAdminSpecResponseDatabase struct {
	// The database URL
	Host string `pulumi:"host"`
	// The database name
	Name string `pulumi:"name"`
	// Reference for the database password
	PasswordSecretRef *string `pulumi:"passwordSecretRef"`
	// The name of the database user
	Username *string `pulumi:"username"`
}

type RangerAdminSpecResponseDatabaseOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponseDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAdminSpecResponseDatabase)(nil)).Elem()
}

func (o RangerAdminSpecResponseDatabaseOutput) ToRangerAdminSpecResponseDatabaseOutput() RangerAdminSpecResponseDatabaseOutput {
	return o
}

func (o RangerAdminSpecResponseDatabaseOutput) ToRangerAdminSpecResponseDatabaseOutputWithContext(ctx context.Context) RangerAdminSpecResponseDatabaseOutput {
	return o
}

// The database URL
func (o RangerAdminSpecResponseDatabaseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) string { return v.Host }).(pulumi.StringOutput)
}

// The database name
func (o RangerAdminSpecResponseDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// Reference for the database password
func (o RangerAdminSpecResponseDatabaseOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) *string { return v.PasswordSecretRef }).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecResponseDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAdminSpecResponseDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type RangerAdminSpecResponseDatabasePtrOutput struct{ *pulumi.OutputState }

func (RangerAdminSpecResponseDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAdminSpecResponseDatabase)(nil)).Elem()
}

func (o RangerAdminSpecResponseDatabasePtrOutput) ToRangerAdminSpecResponseDatabasePtrOutput() RangerAdminSpecResponseDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecResponseDatabasePtrOutput) ToRangerAdminSpecResponseDatabasePtrOutputWithContext(ctx context.Context) RangerAdminSpecResponseDatabasePtrOutput {
	return o
}

func (o RangerAdminSpecResponseDatabasePtrOutput) Elem() RangerAdminSpecResponseDatabaseOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) RangerAdminSpecResponseDatabase {
		if v != nil {
			return *v
		}
		var ret RangerAdminSpecResponseDatabase
		return ret
	}).(RangerAdminSpecResponseDatabaseOutput)
}

// The database URL
func (o RangerAdminSpecResponseDatabasePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The database name
func (o RangerAdminSpecResponseDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Reference for the database password
func (o RangerAdminSpecResponseDatabasePtrOutput) PasswordSecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.PasswordSecretRef
	}).(pulumi.StringPtrOutput)
}

// The name of the database user
func (o RangerAdminSpecResponseDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAdminSpecResponseDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Properties required to describe audit log storage.
type RangerAuditSpec struct {
	// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
	StorageAccount *string `pulumi:"storageAccount"`
}

// RangerAuditSpecInput is an input type that accepts RangerAuditSpecArgs and RangerAuditSpecOutput values.
// You can construct a concrete instance of `RangerAuditSpecInput` via:
//
//	RangerAuditSpecArgs{...}
type RangerAuditSpecInput interface {
	pulumi.Input

	ToRangerAuditSpecOutput() RangerAuditSpecOutput
	ToRangerAuditSpecOutputWithContext(context.Context) RangerAuditSpecOutput
}

// Properties required to describe audit log storage.
type RangerAuditSpecArgs struct {
	// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
	StorageAccount pulumi.StringPtrInput `pulumi:"storageAccount"`
}

func (RangerAuditSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAuditSpec)(nil)).Elem()
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecOutput() RangerAuditSpecOutput {
	return i.ToRangerAuditSpecOutputWithContext(context.Background())
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecOutputWithContext(ctx context.Context) RangerAuditSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAuditSpecOutput)
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return i.ToRangerAuditSpecPtrOutputWithContext(context.Background())
}

func (i RangerAuditSpecArgs) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAuditSpecOutput).ToRangerAuditSpecPtrOutputWithContext(ctx)
}

// RangerAuditSpecPtrInput is an input type that accepts RangerAuditSpecArgs, RangerAuditSpecPtr and RangerAuditSpecPtrOutput values.
// You can construct a concrete instance of `RangerAuditSpecPtrInput` via:
//
//	        RangerAuditSpecArgs{...}
//
//	or:
//
//	        nil
type RangerAuditSpecPtrInput interface {
	pulumi.Input

	ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput
	ToRangerAuditSpecPtrOutputWithContext(context.Context) RangerAuditSpecPtrOutput
}

type rangerAuditSpecPtrType RangerAuditSpecArgs

func RangerAuditSpecPtr(v *RangerAuditSpecArgs) RangerAuditSpecPtrInput {
	return (*rangerAuditSpecPtrType)(v)
}

func (*rangerAuditSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAuditSpec)(nil)).Elem()
}

func (i *rangerAuditSpecPtrType) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return i.ToRangerAuditSpecPtrOutputWithContext(context.Background())
}

func (i *rangerAuditSpecPtrType) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerAuditSpecPtrOutput)
}

// Properties required to describe audit log storage.
type RangerAuditSpecOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAuditSpec)(nil)).Elem()
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecOutput() RangerAuditSpecOutput {
	return o
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecOutputWithContext(ctx context.Context) RangerAuditSpecOutput {
	return o
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return o.ToRangerAuditSpecPtrOutputWithContext(context.Background())
}

func (o RangerAuditSpecOutput) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerAuditSpec) *RangerAuditSpec {
		return &v
	}).(RangerAuditSpecPtrOutput)
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAuditSpec) *string { return v.StorageAccount }).(pulumi.StringPtrOutput)
}

type RangerAuditSpecPtrOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAuditSpec)(nil)).Elem()
}

func (o RangerAuditSpecPtrOutput) ToRangerAuditSpecPtrOutput() RangerAuditSpecPtrOutput {
	return o
}

func (o RangerAuditSpecPtrOutput) ToRangerAuditSpecPtrOutputWithContext(ctx context.Context) RangerAuditSpecPtrOutput {
	return o
}

func (o RangerAuditSpecPtrOutput) Elem() RangerAuditSpecOutput {
	return o.ApplyT(func(v *RangerAuditSpec) RangerAuditSpec {
		if v != nil {
			return *v
		}
		var ret RangerAuditSpec
		return ret
	}).(RangerAuditSpecOutput)
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecPtrOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAuditSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccount
	}).(pulumi.StringPtrOutput)
}

// Properties required to describe audit log storage.
type RangerAuditSpecResponse struct {
	// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
	StorageAccount *string `pulumi:"storageAccount"`
}

// Properties required to describe audit log storage.
type RangerAuditSpecResponseOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerAuditSpecResponse)(nil)).Elem()
}

func (o RangerAuditSpecResponseOutput) ToRangerAuditSpecResponseOutput() RangerAuditSpecResponseOutput {
	return o
}

func (o RangerAuditSpecResponseOutput) ToRangerAuditSpecResponseOutputWithContext(ctx context.Context) RangerAuditSpecResponseOutput {
	return o
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecResponseOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerAuditSpecResponse) *string { return v.StorageAccount }).(pulumi.StringPtrOutput)
}

type RangerAuditSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerAuditSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerAuditSpecResponse)(nil)).Elem()
}

func (o RangerAuditSpecResponsePtrOutput) ToRangerAuditSpecResponsePtrOutput() RangerAuditSpecResponsePtrOutput {
	return o
}

func (o RangerAuditSpecResponsePtrOutput) ToRangerAuditSpecResponsePtrOutputWithContext(ctx context.Context) RangerAuditSpecResponsePtrOutput {
	return o
}

func (o RangerAuditSpecResponsePtrOutput) Elem() RangerAuditSpecResponseOutput {
	return o.ApplyT(func(v *RangerAuditSpecResponse) RangerAuditSpecResponse {
		if v != nil {
			return *v
		}
		var ret RangerAuditSpecResponse
		return ret
	}).(RangerAuditSpecResponseOutput)
}

// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
func (o RangerAuditSpecResponsePtrOutput) StorageAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerAuditSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccount
	}).(pulumi.StringPtrOutput)
}

// The ranger cluster profile.
type RangerProfile struct {
	// Specification for the Ranger Admin service.
	RangerAdmin RangerAdminSpec `pulumi:"rangerAdmin"`
	// Properties required to describe audit log storage.
	RangerAudit *RangerAuditSpec `pulumi:"rangerAudit"`
	// Specification for the Ranger Usersync service
	RangerUsersync RangerUsersyncSpec `pulumi:"rangerUsersync"`
}

// Defaults sets the appropriate defaults for RangerProfile
func (val *RangerProfile) Defaults() *RangerProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RangerUsersync = *tmp.RangerUsersync.Defaults()

	return &tmp
}

// RangerProfileInput is an input type that accepts RangerProfileArgs and RangerProfileOutput values.
// You can construct a concrete instance of `RangerProfileInput` via:
//
//	RangerProfileArgs{...}
type RangerProfileInput interface {
	pulumi.Input

	ToRangerProfileOutput() RangerProfileOutput
	ToRangerProfileOutputWithContext(context.Context) RangerProfileOutput
}

// The ranger cluster profile.
type RangerProfileArgs struct {
	// Specification for the Ranger Admin service.
	RangerAdmin RangerAdminSpecInput `pulumi:"rangerAdmin"`
	// Properties required to describe audit log storage.
	RangerAudit RangerAuditSpecPtrInput `pulumi:"rangerAudit"`
	// Specification for the Ranger Usersync service
	RangerUsersync RangerUsersyncSpecInput `pulumi:"rangerUsersync"`
}

// Defaults sets the appropriate defaults for RangerProfileArgs
func (val *RangerProfileArgs) Defaults() *RangerProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (RangerProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerProfile)(nil)).Elem()
}

func (i RangerProfileArgs) ToRangerProfileOutput() RangerProfileOutput {
	return i.ToRangerProfileOutputWithContext(context.Background())
}

func (i RangerProfileArgs) ToRangerProfileOutputWithContext(ctx context.Context) RangerProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerProfileOutput)
}

func (i RangerProfileArgs) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return i.ToRangerProfilePtrOutputWithContext(context.Background())
}

func (i RangerProfileArgs) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerProfileOutput).ToRangerProfilePtrOutputWithContext(ctx)
}

// RangerProfilePtrInput is an input type that accepts RangerProfileArgs, RangerProfilePtr and RangerProfilePtrOutput values.
// You can construct a concrete instance of `RangerProfilePtrInput` via:
//
//	        RangerProfileArgs{...}
//
//	or:
//
//	        nil
type RangerProfilePtrInput interface {
	pulumi.Input

	ToRangerProfilePtrOutput() RangerProfilePtrOutput
	ToRangerProfilePtrOutputWithContext(context.Context) RangerProfilePtrOutput
}

type rangerProfilePtrType RangerProfileArgs

func RangerProfilePtr(v *RangerProfileArgs) RangerProfilePtrInput {
	return (*rangerProfilePtrType)(v)
}

func (*rangerProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerProfile)(nil)).Elem()
}

func (i *rangerProfilePtrType) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return i.ToRangerProfilePtrOutputWithContext(context.Background())
}

func (i *rangerProfilePtrType) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerProfilePtrOutput)
}

// The ranger cluster profile.
type RangerProfileOutput struct{ *pulumi.OutputState }

func (RangerProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerProfile)(nil)).Elem()
}

func (o RangerProfileOutput) ToRangerProfileOutput() RangerProfileOutput {
	return o
}

func (o RangerProfileOutput) ToRangerProfileOutputWithContext(ctx context.Context) RangerProfileOutput {
	return o
}

func (o RangerProfileOutput) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return o.ToRangerProfilePtrOutputWithContext(context.Background())
}

func (o RangerProfileOutput) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerProfile) *RangerProfile {
		return &v
	}).(RangerProfilePtrOutput)
}

// Specification for the Ranger Admin service.
func (o RangerProfileOutput) RangerAdmin() RangerAdminSpecOutput {
	return o.ApplyT(func(v RangerProfile) RangerAdminSpec { return v.RangerAdmin }).(RangerAdminSpecOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfileOutput) RangerAudit() RangerAuditSpecPtrOutput {
	return o.ApplyT(func(v RangerProfile) *RangerAuditSpec { return v.RangerAudit }).(RangerAuditSpecPtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfileOutput) RangerUsersync() RangerUsersyncSpecOutput {
	return o.ApplyT(func(v RangerProfile) RangerUsersyncSpec { return v.RangerUsersync }).(RangerUsersyncSpecOutput)
}

type RangerProfilePtrOutput struct{ *pulumi.OutputState }

func (RangerProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerProfile)(nil)).Elem()
}

func (o RangerProfilePtrOutput) ToRangerProfilePtrOutput() RangerProfilePtrOutput {
	return o
}

func (o RangerProfilePtrOutput) ToRangerProfilePtrOutputWithContext(ctx context.Context) RangerProfilePtrOutput {
	return o
}

func (o RangerProfilePtrOutput) Elem() RangerProfileOutput {
	return o.ApplyT(func(v *RangerProfile) RangerProfile {
		if v != nil {
			return *v
		}
		var ret RangerProfile
		return ret
	}).(RangerProfileOutput)
}

// Specification for the Ranger Admin service.
func (o RangerProfilePtrOutput) RangerAdmin() RangerAdminSpecPtrOutput {
	return o.ApplyT(func(v *RangerProfile) *RangerAdminSpec {
		if v == nil {
			return nil
		}
		return &v.RangerAdmin
	}).(RangerAdminSpecPtrOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfilePtrOutput) RangerAudit() RangerAuditSpecPtrOutput {
	return o.ApplyT(func(v *RangerProfile) *RangerAuditSpec {
		if v == nil {
			return nil
		}
		return v.RangerAudit
	}).(RangerAuditSpecPtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfilePtrOutput) RangerUsersync() RangerUsersyncSpecPtrOutput {
	return o.ApplyT(func(v *RangerProfile) *RangerUsersyncSpec {
		if v == nil {
			return nil
		}
		return &v.RangerUsersync
	}).(RangerUsersyncSpecPtrOutput)
}

// The ranger cluster profile.
type RangerProfileResponse struct {
	// Specification for the Ranger Admin service.
	RangerAdmin RangerAdminSpecResponse `pulumi:"rangerAdmin"`
	// Properties required to describe audit log storage.
	RangerAudit *RangerAuditSpecResponse `pulumi:"rangerAudit"`
	// Specification for the Ranger Usersync service
	RangerUsersync RangerUsersyncSpecResponse `pulumi:"rangerUsersync"`
}

// Defaults sets the appropriate defaults for RangerProfileResponse
func (val *RangerProfileResponse) Defaults() *RangerProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RangerUsersync = *tmp.RangerUsersync.Defaults()

	return &tmp
}

// The ranger cluster profile.
type RangerProfileResponseOutput struct{ *pulumi.OutputState }

func (RangerProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerProfileResponse)(nil)).Elem()
}

func (o RangerProfileResponseOutput) ToRangerProfileResponseOutput() RangerProfileResponseOutput {
	return o
}

func (o RangerProfileResponseOutput) ToRangerProfileResponseOutputWithContext(ctx context.Context) RangerProfileResponseOutput {
	return o
}

// Specification for the Ranger Admin service.
func (o RangerProfileResponseOutput) RangerAdmin() RangerAdminSpecResponseOutput {
	return o.ApplyT(func(v RangerProfileResponse) RangerAdminSpecResponse { return v.RangerAdmin }).(RangerAdminSpecResponseOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfileResponseOutput) RangerAudit() RangerAuditSpecResponsePtrOutput {
	return o.ApplyT(func(v RangerProfileResponse) *RangerAuditSpecResponse { return v.RangerAudit }).(RangerAuditSpecResponsePtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfileResponseOutput) RangerUsersync() RangerUsersyncSpecResponseOutput {
	return o.ApplyT(func(v RangerProfileResponse) RangerUsersyncSpecResponse { return v.RangerUsersync }).(RangerUsersyncSpecResponseOutput)
}

type RangerProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerProfileResponse)(nil)).Elem()
}

func (o RangerProfileResponsePtrOutput) ToRangerProfileResponsePtrOutput() RangerProfileResponsePtrOutput {
	return o
}

func (o RangerProfileResponsePtrOutput) ToRangerProfileResponsePtrOutputWithContext(ctx context.Context) RangerProfileResponsePtrOutput {
	return o
}

func (o RangerProfileResponsePtrOutput) Elem() RangerProfileResponseOutput {
	return o.ApplyT(func(v *RangerProfileResponse) RangerProfileResponse {
		if v != nil {
			return *v
		}
		var ret RangerProfileResponse
		return ret
	}).(RangerProfileResponseOutput)
}

// Specification for the Ranger Admin service.
func (o RangerProfileResponsePtrOutput) RangerAdmin() RangerAdminSpecResponsePtrOutput {
	return o.ApplyT(func(v *RangerProfileResponse) *RangerAdminSpecResponse {
		if v == nil {
			return nil
		}
		return &v.RangerAdmin
	}).(RangerAdminSpecResponsePtrOutput)
}

// Properties required to describe audit log storage.
func (o RangerProfileResponsePtrOutput) RangerAudit() RangerAuditSpecResponsePtrOutput {
	return o.ApplyT(func(v *RangerProfileResponse) *RangerAuditSpecResponse {
		if v == nil {
			return nil
		}
		return v.RangerAudit
	}).(RangerAuditSpecResponsePtrOutput)
}

// Specification for the Ranger Usersync service
func (o RangerProfileResponsePtrOutput) RangerUsersync() RangerUsersyncSpecResponsePtrOutput {
	return o.ApplyT(func(v *RangerProfileResponse) *RangerUsersyncSpecResponse {
		if v == nil {
			return nil
		}
		return &v.RangerUsersync
	}).(RangerUsersyncSpecResponsePtrOutput)
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpec struct {
	// Denotes whether usersync service should be enabled
	Enabled *bool `pulumi:"enabled"`
	// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
	Groups []string `pulumi:"groups"`
	// User & groups can be synced automatically or via a static list that's refreshed.
	Mode *string `pulumi:"mode"`
	// Azure storage location of a mapping file that lists user & group associations.
	UserMappingLocation *string `pulumi:"userMappingLocation"`
	// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
	Users []string `pulumi:"users"`
}

// Defaults sets the appropriate defaults for RangerUsersyncSpec
func (val *RangerUsersyncSpec) Defaults() *RangerUsersyncSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := true
		tmp.Enabled = &enabled_
	}
	if tmp.Mode == nil {
		mode_ := "automatic"
		tmp.Mode = &mode_
	}
	return &tmp
}

// RangerUsersyncSpecInput is an input type that accepts RangerUsersyncSpecArgs and RangerUsersyncSpecOutput values.
// You can construct a concrete instance of `RangerUsersyncSpecInput` via:
//
//	RangerUsersyncSpecArgs{...}
type RangerUsersyncSpecInput interface {
	pulumi.Input

	ToRangerUsersyncSpecOutput() RangerUsersyncSpecOutput
	ToRangerUsersyncSpecOutputWithContext(context.Context) RangerUsersyncSpecOutput
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecArgs struct {
	// Denotes whether usersync service should be enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// User & groups can be synced automatically or via a static list that's refreshed.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Azure storage location of a mapping file that lists user & group associations.
	UserMappingLocation pulumi.StringPtrInput `pulumi:"userMappingLocation"`
	// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
	Users pulumi.StringArrayInput `pulumi:"users"`
}

// Defaults sets the appropriate defaults for RangerUsersyncSpecArgs
func (val *RangerUsersyncSpecArgs) Defaults() *RangerUsersyncSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		tmp.Enabled = pulumi.BoolPtr(true)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("automatic")
	}
	return &tmp
}
func (RangerUsersyncSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerUsersyncSpec)(nil)).Elem()
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecOutput() RangerUsersyncSpecOutput {
	return i.ToRangerUsersyncSpecOutputWithContext(context.Background())
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecOutputWithContext(ctx context.Context) RangerUsersyncSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerUsersyncSpecOutput)
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return i.ToRangerUsersyncSpecPtrOutputWithContext(context.Background())
}

func (i RangerUsersyncSpecArgs) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerUsersyncSpecOutput).ToRangerUsersyncSpecPtrOutputWithContext(ctx)
}

// RangerUsersyncSpecPtrInput is an input type that accepts RangerUsersyncSpecArgs, RangerUsersyncSpecPtr and RangerUsersyncSpecPtrOutput values.
// You can construct a concrete instance of `RangerUsersyncSpecPtrInput` via:
//
//	        RangerUsersyncSpecArgs{...}
//
//	or:
//
//	        nil
type RangerUsersyncSpecPtrInput interface {
	pulumi.Input

	ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput
	ToRangerUsersyncSpecPtrOutputWithContext(context.Context) RangerUsersyncSpecPtrOutput
}

type rangerUsersyncSpecPtrType RangerUsersyncSpecArgs

func RangerUsersyncSpecPtr(v *RangerUsersyncSpecArgs) RangerUsersyncSpecPtrInput {
	return (*rangerUsersyncSpecPtrType)(v)
}

func (*rangerUsersyncSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerUsersyncSpec)(nil)).Elem()
}

func (i *rangerUsersyncSpecPtrType) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return i.ToRangerUsersyncSpecPtrOutputWithContext(context.Background())
}

func (i *rangerUsersyncSpecPtrType) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangerUsersyncSpecPtrOutput)
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerUsersyncSpec)(nil)).Elem()
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecOutput() RangerUsersyncSpecOutput {
	return o
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecOutputWithContext(ctx context.Context) RangerUsersyncSpecOutput {
	return o
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return o.ToRangerUsersyncSpecPtrOutputWithContext(context.Background())
}

func (o RangerUsersyncSpecOutput) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangerUsersyncSpec) *RangerUsersyncSpec {
		return &v
	}).(RangerUsersyncSpecPtrOutput)
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) *string { return v.UserMappingLocation }).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpec) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type RangerUsersyncSpecPtrOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerUsersyncSpec)(nil)).Elem()
}

func (o RangerUsersyncSpecPtrOutput) ToRangerUsersyncSpecPtrOutput() RangerUsersyncSpecPtrOutput {
	return o
}

func (o RangerUsersyncSpecPtrOutput) ToRangerUsersyncSpecPtrOutputWithContext(ctx context.Context) RangerUsersyncSpecPtrOutput {
	return o
}

func (o RangerUsersyncSpecPtrOutput) Elem() RangerUsersyncSpecOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) RangerUsersyncSpec {
		if v != nil {
			return *v
		}
		var ret RangerUsersyncSpec
		return ret
	}).(RangerUsersyncSpecOutput)
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecPtrOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) *string {
		if v == nil {
			return nil
		}
		return v.UserMappingLocation
	}).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecPtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpec) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecResponse struct {
	// Denotes whether usersync service should be enabled
	Enabled *bool `pulumi:"enabled"`
	// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
	Groups []string `pulumi:"groups"`
	// User & groups can be synced automatically or via a static list that's refreshed.
	Mode *string `pulumi:"mode"`
	// Azure storage location of a mapping file that lists user & group associations.
	UserMappingLocation *string `pulumi:"userMappingLocation"`
	// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
	Users []string `pulumi:"users"`
}

// Defaults sets the appropriate defaults for RangerUsersyncSpecResponse
func (val *RangerUsersyncSpecResponse) Defaults() *RangerUsersyncSpecResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := true
		tmp.Enabled = &enabled_
	}
	if tmp.Mode == nil {
		mode_ := "automatic"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Specification for the Ranger Usersync service
type RangerUsersyncSpecResponseOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangerUsersyncSpecResponse)(nil)).Elem()
}

func (o RangerUsersyncSpecResponseOutput) ToRangerUsersyncSpecResponseOutput() RangerUsersyncSpecResponseOutput {
	return o
}

func (o RangerUsersyncSpecResponseOutput) ToRangerUsersyncSpecResponseOutputWithContext(ctx context.Context) RangerUsersyncSpecResponseOutput {
	return o
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecResponseOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecResponseOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) *string { return v.UserMappingLocation }).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecResponseOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RangerUsersyncSpecResponse) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type RangerUsersyncSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (RangerUsersyncSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangerUsersyncSpecResponse)(nil)).Elem()
}

func (o RangerUsersyncSpecResponsePtrOutput) ToRangerUsersyncSpecResponsePtrOutput() RangerUsersyncSpecResponsePtrOutput {
	return o
}

func (o RangerUsersyncSpecResponsePtrOutput) ToRangerUsersyncSpecResponsePtrOutputWithContext(ctx context.Context) RangerUsersyncSpecResponsePtrOutput {
	return o
}

func (o RangerUsersyncSpecResponsePtrOutput) Elem() RangerUsersyncSpecResponseOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) RangerUsersyncSpecResponse {
		if v != nil {
			return *v
		}
		var ret RangerUsersyncSpecResponse
		return ret
	}).(RangerUsersyncSpecResponseOutput)
}

// Denotes whether usersync service should be enabled
func (o RangerUsersyncSpecResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
func (o RangerUsersyncSpecResponsePtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

// User & groups can be synced automatically or via a static list that's refreshed.
func (o RangerUsersyncSpecResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Azure storage location of a mapping file that lists user & group associations.
func (o RangerUsersyncSpecResponsePtrOutput) UserMappingLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserMappingLocation
	}).(pulumi.StringPtrOutput)
}

// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
func (o RangerUsersyncSpecResponsePtrOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RangerUsersyncSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Users
	}).(pulumi.StringArrayOutput)
}

// The azure resource id.
type ResourceId struct {
	// The azure resource id.
	Id *string `pulumi:"id"`
}

// ResourceIdInput is an input type that accepts ResourceIdArgs and ResourceIdOutput values.
// You can construct a concrete instance of `ResourceIdInput` via:
//
//	ResourceIdArgs{...}
type ResourceIdInput interface {
	pulumi.Input

	ToResourceIdOutput() ResourceIdOutput
	ToResourceIdOutputWithContext(context.Context) ResourceIdOutput
}

// The azure resource id.
type ResourceIdArgs struct {
	// The azure resource id.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (i ResourceIdArgs) ToResourceIdOutput() ResourceIdOutput {
	return i.ToResourceIdOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput)
}

func (i ResourceIdArgs) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput).ToResourceIdPtrOutputWithContext(ctx)
}

// ResourceIdPtrInput is an input type that accepts ResourceIdArgs, ResourceIdPtr and ResourceIdPtrOutput values.
// You can construct a concrete instance of `ResourceIdPtrInput` via:
//
//	        ResourceIdArgs{...}
//
//	or:
//
//	        nil
type ResourceIdPtrInput interface {
	pulumi.Input

	ToResourceIdPtrOutput() ResourceIdPtrOutput
	ToResourceIdPtrOutputWithContext(context.Context) ResourceIdPtrOutput
}

type resourceIdPtrType ResourceIdArgs

func ResourceIdPtr(v *ResourceIdArgs) ResourceIdPtrInput {
	return (*resourceIdPtrType)(v)
}

func (*resourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (i *resourceIdPtrType) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i *resourceIdPtrType) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdPtrOutput)
}

// The azure resource id.
type ResourceIdOutput struct{ *pulumi.OutputState }

func (ResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (o ResourceIdOutput) ToResourceIdOutput() ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o.ToResourceIdPtrOutputWithContext(context.Background())
}

func (o ResourceIdOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceId) *ResourceId {
		return &v
	}).(ResourceIdPtrOutput)
}

// The azure resource id.
func (o ResourceIdOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceId) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) Elem() ResourceIdOutput {
	return o.ApplyT(func(v *ResourceId) ResourceId {
		if v != nil {
			return *v
		}
		var ret ResourceId
		return ret
	}).(ResourceIdOutput)
}

// The azure resource id.
func (o ResourceIdPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceId) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The azure resource id.
type ResourceIdResponse struct {
	// The azure resource id.
	Id *string `pulumi:"id"`
}

// The azure resource id.
type ResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutput() ResourceIdResponseOutput {
	return o
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutputWithContext(ctx context.Context) ResourceIdResponseOutput {
	return o
}

// The azure resource id.
func (o ResourceIdResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceIdResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) Elem() ResourceIdResponseOutput {
	return o.ApplyT(func(v *ResourceIdResponse) ResourceIdResponse {
		if v != nil {
			return *v
		}
		var ret ResourceIdResponse
		return ret
	}).(ResourceIdResponseOutput)
}

// The azure resource id.
func (o ResourceIdResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Describes a role on the cluster.
type Role struct {
	// The autoscale configurations.
	AutoscaleConfiguration *Autoscale `pulumi:"autoscaleConfiguration"`
	// The data disks groups for the role.
	DataDisksGroups []DataDisksGroups `pulumi:"dataDisksGroups"`
	// Indicates whether encrypt the data disks.
	EncryptDataDisks *bool `pulumi:"encryptDataDisks"`
	// The hardware profile.
	HardwareProfile *HardwareProfile `pulumi:"hardwareProfile"`
	// The minimum instance count of the cluster.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// The operating system profile.
	OsProfile *OsProfile `pulumi:"osProfile"`
	// The list of script actions on the role.
	ScriptActions []ScriptAction `pulumi:"scriptActions"`
	// The instance count of the cluster.
	TargetInstanceCount *int `pulumi:"targetInstanceCount"`
	// The name of the virtual machine group.
	VMGroupName *string `pulumi:"vMGroupName"`
	// The virtual network profile.
	VirtualNetworkProfile *VirtualNetworkProfile `pulumi:"virtualNetworkProfile"`
}

// Defaults sets the appropriate defaults for Role
func (val *Role) Defaults() *Role {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptDataDisks == nil {
		encryptDataDisks_ := false
		tmp.EncryptDataDisks = &encryptDataDisks_
	}
	return &tmp
}

// RoleInput is an input type that accepts RoleArgs and RoleOutput values.
// You can construct a concrete instance of `RoleInput` via:
//
//	RoleArgs{...}
type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(context.Context) RoleOutput
}

// Describes a role on the cluster.
type RoleArgs struct {
	// The autoscale configurations.
	AutoscaleConfiguration AutoscalePtrInput `pulumi:"autoscaleConfiguration"`
	// The data disks groups for the role.
	DataDisksGroups DataDisksGroupsArrayInput `pulumi:"dataDisksGroups"`
	// Indicates whether encrypt the data disks.
	EncryptDataDisks pulumi.BoolPtrInput `pulumi:"encryptDataDisks"`
	// The hardware profile.
	HardwareProfile HardwareProfilePtrInput `pulumi:"hardwareProfile"`
	// The minimum instance count of the cluster.
	MinInstanceCount pulumi.IntPtrInput `pulumi:"minInstanceCount"`
	// The name of the role.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The operating system profile.
	OsProfile OsProfilePtrInput `pulumi:"osProfile"`
	// The list of script actions on the role.
	ScriptActions ScriptActionArrayInput `pulumi:"scriptActions"`
	// The instance count of the cluster.
	TargetInstanceCount pulumi.IntPtrInput `pulumi:"targetInstanceCount"`
	// The name of the virtual machine group.
	VMGroupName pulumi.StringPtrInput `pulumi:"vMGroupName"`
	// The virtual network profile.
	VirtualNetworkProfile VirtualNetworkProfilePtrInput `pulumi:"virtualNetworkProfile"`
}

// Defaults sets the appropriate defaults for RoleArgs
func (val *RoleArgs) Defaults() *RoleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptDataDisks == nil {
		tmp.EncryptDataDisks = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (i RoleArgs) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i RoleArgs) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// Describes a role on the cluster.
type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// The autoscale configurations.
func (o RoleOutput) AutoscaleConfiguration() AutoscalePtrOutput {
	return o.ApplyT(func(v Role) *Autoscale { return v.AutoscaleConfiguration }).(AutoscalePtrOutput)
}

// The data disks groups for the role.
func (o RoleOutput) DataDisksGroups() DataDisksGroupsArrayOutput {
	return o.ApplyT(func(v Role) []DataDisksGroups { return v.DataDisksGroups }).(DataDisksGroupsArrayOutput)
}

// Indicates whether encrypt the data disks.
func (o RoleOutput) EncryptDataDisks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Role) *bool { return v.EncryptDataDisks }).(pulumi.BoolPtrOutput)
}

// The hardware profile.
func (o RoleOutput) HardwareProfile() HardwareProfilePtrOutput {
	return o.ApplyT(func(v Role) *HardwareProfile { return v.HardwareProfile }).(HardwareProfilePtrOutput)
}

// The minimum instance count of the cluster.
func (o RoleOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Role) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The name of the role.
func (o RoleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The operating system profile.
func (o RoleOutput) OsProfile() OsProfilePtrOutput {
	return o.ApplyT(func(v Role) *OsProfile { return v.OsProfile }).(OsProfilePtrOutput)
}

// The list of script actions on the role.
func (o RoleOutput) ScriptActions() ScriptActionArrayOutput {
	return o.ApplyT(func(v Role) []ScriptAction { return v.ScriptActions }).(ScriptActionArrayOutput)
}

// The instance count of the cluster.
func (o RoleOutput) TargetInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Role) *int { return v.TargetInstanceCount }).(pulumi.IntPtrOutput)
}

// The name of the virtual machine group.
func (o RoleOutput) VMGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Role) *string { return v.VMGroupName }).(pulumi.StringPtrOutput)
}

// The virtual network profile.
func (o RoleOutput) VirtualNetworkProfile() VirtualNetworkProfilePtrOutput {
	return o.ApplyT(func(v Role) *VirtualNetworkProfile { return v.VirtualNetworkProfile }).(VirtualNetworkProfilePtrOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Role {
		return vs[0].([]Role)[vs[1].(int)]
	}).(RoleOutput)
}

// Describes a role on the cluster.
type RoleResponse struct {
	// The autoscale configurations.
	AutoscaleConfiguration *AutoscaleResponse `pulumi:"autoscaleConfiguration"`
	// The data disks groups for the role.
	DataDisksGroups []DataDisksGroupsResponse `pulumi:"dataDisksGroups"`
	// Indicates whether encrypt the data disks.
	EncryptDataDisks *bool `pulumi:"encryptDataDisks"`
	// The hardware profile.
	HardwareProfile *HardwareProfileResponse `pulumi:"hardwareProfile"`
	// The minimum instance count of the cluster.
	MinInstanceCount *int `pulumi:"minInstanceCount"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// The operating system profile.
	OsProfile *OsProfileResponse `pulumi:"osProfile"`
	// The list of script actions on the role.
	ScriptActions []ScriptActionResponse `pulumi:"scriptActions"`
	// The instance count of the cluster.
	TargetInstanceCount *int `pulumi:"targetInstanceCount"`
	// The name of the virtual machine group.
	VMGroupName *string `pulumi:"vMGroupName"`
	// The virtual network profile.
	VirtualNetworkProfile *VirtualNetworkProfileResponse `pulumi:"virtualNetworkProfile"`
}

// Defaults sets the appropriate defaults for RoleResponse
func (val *RoleResponse) Defaults() *RoleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EncryptDataDisks == nil {
		encryptDataDisks_ := false
		tmp.EncryptDataDisks = &encryptDataDisks_
	}
	return &tmp
}

// Describes a role on the cluster.
type RoleResponseOutput struct{ *pulumi.OutputState }

func (RoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleResponse)(nil)).Elem()
}

func (o RoleResponseOutput) ToRoleResponseOutput() RoleResponseOutput {
	return o
}

func (o RoleResponseOutput) ToRoleResponseOutputWithContext(ctx context.Context) RoleResponseOutput {
	return o
}

// The autoscale configurations.
func (o RoleResponseOutput) AutoscaleConfiguration() AutoscaleResponsePtrOutput {
	return o.ApplyT(func(v RoleResponse) *AutoscaleResponse { return v.AutoscaleConfiguration }).(AutoscaleResponsePtrOutput)
}

// The data disks groups for the role.
func (o RoleResponseOutput) DataDisksGroups() DataDisksGroupsResponseArrayOutput {
	return o.ApplyT(func(v RoleResponse) []DataDisksGroupsResponse { return v.DataDisksGroups }).(DataDisksGroupsResponseArrayOutput)
}

// Indicates whether encrypt the data disks.
func (o RoleResponseOutput) EncryptDataDisks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RoleResponse) *bool { return v.EncryptDataDisks }).(pulumi.BoolPtrOutput)
}

// The hardware profile.
func (o RoleResponseOutput) HardwareProfile() HardwareProfileResponsePtrOutput {
	return o.ApplyT(func(v RoleResponse) *HardwareProfileResponse { return v.HardwareProfile }).(HardwareProfileResponsePtrOutput)
}

// The minimum instance count of the cluster.
func (o RoleResponseOutput) MinInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RoleResponse) *int { return v.MinInstanceCount }).(pulumi.IntPtrOutput)
}

// The name of the role.
func (o RoleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The operating system profile.
func (o RoleResponseOutput) OsProfile() OsProfileResponsePtrOutput {
	return o.ApplyT(func(v RoleResponse) *OsProfileResponse { return v.OsProfile }).(OsProfileResponsePtrOutput)
}

// The list of script actions on the role.
func (o RoleResponseOutput) ScriptActions() ScriptActionResponseArrayOutput {
	return o.ApplyT(func(v RoleResponse) []ScriptActionResponse { return v.ScriptActions }).(ScriptActionResponseArrayOutput)
}

// The instance count of the cluster.
func (o RoleResponseOutput) TargetInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RoleResponse) *int { return v.TargetInstanceCount }).(pulumi.IntPtrOutput)
}

// The name of the virtual machine group.
func (o RoleResponseOutput) VMGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleResponse) *string { return v.VMGroupName }).(pulumi.StringPtrOutput)
}

// The virtual network profile.
func (o RoleResponseOutput) VirtualNetworkProfile() VirtualNetworkProfileResponsePtrOutput {
	return o.ApplyT(func(v RoleResponse) *VirtualNetworkProfileResponse { return v.VirtualNetworkProfile }).(VirtualNetworkProfileResponsePtrOutput)
}

type RoleResponseArrayOutput struct{ *pulumi.OutputState }

func (RoleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleResponse)(nil)).Elem()
}

func (o RoleResponseArrayOutput) ToRoleResponseArrayOutput() RoleResponseArrayOutput {
	return o
}

func (o RoleResponseArrayOutput) ToRoleResponseArrayOutputWithContext(ctx context.Context) RoleResponseArrayOutput {
	return o
}

func (o RoleResponseArrayOutput) Index(i pulumi.IntInput) RoleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleResponse {
		return vs[0].([]RoleResponse)[vs[1].(int)]
	}).(RoleResponseOutput)
}

// Describes a script action on a running cluster.
type RuntimeScriptAction struct {
	// The name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script
	Parameters *string `pulumi:"parameters"`
	// The list of roles where script will be executed.
	Roles []string `pulumi:"roles"`
	// The URI to the script.
	Uri string `pulumi:"uri"`
}

// RuntimeScriptActionInput is an input type that accepts RuntimeScriptActionArgs and RuntimeScriptActionOutput values.
// You can construct a concrete instance of `RuntimeScriptActionInput` via:
//
//	RuntimeScriptActionArgs{...}
type RuntimeScriptActionInput interface {
	pulumi.Input

	ToRuntimeScriptActionOutput() RuntimeScriptActionOutput
	ToRuntimeScriptActionOutputWithContext(context.Context) RuntimeScriptActionOutput
}

// Describes a script action on a running cluster.
type RuntimeScriptActionArgs struct {
	// The name of the script action.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters for the script
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// The list of roles where script will be executed.
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// The URI to the script.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (RuntimeScriptActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeScriptAction)(nil)).Elem()
}

func (i RuntimeScriptActionArgs) ToRuntimeScriptActionOutput() RuntimeScriptActionOutput {
	return i.ToRuntimeScriptActionOutputWithContext(context.Background())
}

func (i RuntimeScriptActionArgs) ToRuntimeScriptActionOutputWithContext(ctx context.Context) RuntimeScriptActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeScriptActionOutput)
}

// RuntimeScriptActionArrayInput is an input type that accepts RuntimeScriptActionArray and RuntimeScriptActionArrayOutput values.
// You can construct a concrete instance of `RuntimeScriptActionArrayInput` via:
//
//	RuntimeScriptActionArray{ RuntimeScriptActionArgs{...} }
type RuntimeScriptActionArrayInput interface {
	pulumi.Input

	ToRuntimeScriptActionArrayOutput() RuntimeScriptActionArrayOutput
	ToRuntimeScriptActionArrayOutputWithContext(context.Context) RuntimeScriptActionArrayOutput
}

type RuntimeScriptActionArray []RuntimeScriptActionInput

func (RuntimeScriptActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuntimeScriptAction)(nil)).Elem()
}

func (i RuntimeScriptActionArray) ToRuntimeScriptActionArrayOutput() RuntimeScriptActionArrayOutput {
	return i.ToRuntimeScriptActionArrayOutputWithContext(context.Background())
}

func (i RuntimeScriptActionArray) ToRuntimeScriptActionArrayOutputWithContext(ctx context.Context) RuntimeScriptActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeScriptActionArrayOutput)
}

// Describes a script action on a running cluster.
type RuntimeScriptActionOutput struct{ *pulumi.OutputState }

func (RuntimeScriptActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeScriptAction)(nil)).Elem()
}

func (o RuntimeScriptActionOutput) ToRuntimeScriptActionOutput() RuntimeScriptActionOutput {
	return o
}

func (o RuntimeScriptActionOutput) ToRuntimeScriptActionOutputWithContext(ctx context.Context) RuntimeScriptActionOutput {
	return o
}

// The name of the script action.
func (o RuntimeScriptActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeScriptAction) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script
func (o RuntimeScriptActionOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeScriptAction) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The list of roles where script will be executed.
func (o RuntimeScriptActionOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuntimeScriptAction) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The URI to the script.
func (o RuntimeScriptActionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeScriptAction) string { return v.Uri }).(pulumi.StringOutput)
}

type RuntimeScriptActionArrayOutput struct{ *pulumi.OutputState }

func (RuntimeScriptActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuntimeScriptAction)(nil)).Elem()
}

func (o RuntimeScriptActionArrayOutput) ToRuntimeScriptActionArrayOutput() RuntimeScriptActionArrayOutput {
	return o
}

func (o RuntimeScriptActionArrayOutput) ToRuntimeScriptActionArrayOutputWithContext(ctx context.Context) RuntimeScriptActionArrayOutput {
	return o
}

func (o RuntimeScriptActionArrayOutput) Index(i pulumi.IntInput) RuntimeScriptActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuntimeScriptAction {
		return vs[0].([]RuntimeScriptAction)[vs[1].(int)]
	}).(RuntimeScriptActionOutput)
}

// Describes a script action on a running cluster.
type RuntimeScriptActionResponse struct {
	// The application name of the script action, if any.
	ApplicationName string `pulumi:"applicationName"`
	// The name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script
	Parameters *string `pulumi:"parameters"`
	// The list of roles where script will be executed.
	Roles []string `pulumi:"roles"`
	// The URI to the script.
	Uri string `pulumi:"uri"`
}

// Describes a script action on a running cluster.
type RuntimeScriptActionResponseOutput struct{ *pulumi.OutputState }

func (RuntimeScriptActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeScriptActionResponse)(nil)).Elem()
}

func (o RuntimeScriptActionResponseOutput) ToRuntimeScriptActionResponseOutput() RuntimeScriptActionResponseOutput {
	return o
}

func (o RuntimeScriptActionResponseOutput) ToRuntimeScriptActionResponseOutputWithContext(ctx context.Context) RuntimeScriptActionResponseOutput {
	return o
}

// The application name of the script action, if any.
func (o RuntimeScriptActionResponseOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeScriptActionResponse) string { return v.ApplicationName }).(pulumi.StringOutput)
}

// The name of the script action.
func (o RuntimeScriptActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeScriptActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script
func (o RuntimeScriptActionResponseOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeScriptActionResponse) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// The list of roles where script will be executed.
func (o RuntimeScriptActionResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuntimeScriptActionResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// The URI to the script.
func (o RuntimeScriptActionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeScriptActionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type RuntimeScriptActionResponseArrayOutput struct{ *pulumi.OutputState }

func (RuntimeScriptActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuntimeScriptActionResponse)(nil)).Elem()
}

func (o RuntimeScriptActionResponseArrayOutput) ToRuntimeScriptActionResponseArrayOutput() RuntimeScriptActionResponseArrayOutput {
	return o
}

func (o RuntimeScriptActionResponseArrayOutput) ToRuntimeScriptActionResponseArrayOutputWithContext(ctx context.Context) RuntimeScriptActionResponseArrayOutput {
	return o
}

func (o RuntimeScriptActionResponseArrayOutput) Index(i pulumi.IntInput) RuntimeScriptActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuntimeScriptActionResponse {
		return vs[0].([]RuntimeScriptActionResponse)[vs[1].(int)]
	}).(RuntimeScriptActionResponseOutput)
}

// The scaling rule.
type ScalingRule struct {
	// The action type.
	ActionType string `pulumi:"actionType"`
	// The comparison rule.
	ComparisonRule ComparisonRule `pulumi:"comparisonRule"`
	// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
	EvaluationCount int `pulumi:"evaluationCount"`
	// Metrics name for individual workloads. For example: cpu
	ScalingMetric string `pulumi:"scalingMetric"`
}

// ScalingRuleInput is an input type that accepts ScalingRuleArgs and ScalingRuleOutput values.
// You can construct a concrete instance of `ScalingRuleInput` via:
//
//	ScalingRuleArgs{...}
type ScalingRuleInput interface {
	pulumi.Input

	ToScalingRuleOutput() ScalingRuleOutput
	ToScalingRuleOutputWithContext(context.Context) ScalingRuleOutput
}

// The scaling rule.
type ScalingRuleArgs struct {
	// The action type.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// The comparison rule.
	ComparisonRule ComparisonRuleInput `pulumi:"comparisonRule"`
	// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
	EvaluationCount pulumi.IntInput `pulumi:"evaluationCount"`
	// Metrics name for individual workloads. For example: cpu
	ScalingMetric pulumi.StringInput `pulumi:"scalingMetric"`
}

func (ScalingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingRule)(nil)).Elem()
}

func (i ScalingRuleArgs) ToScalingRuleOutput() ScalingRuleOutput {
	return i.ToScalingRuleOutputWithContext(context.Background())
}

func (i ScalingRuleArgs) ToScalingRuleOutputWithContext(ctx context.Context) ScalingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingRuleOutput)
}

// ScalingRuleArrayInput is an input type that accepts ScalingRuleArray and ScalingRuleArrayOutput values.
// You can construct a concrete instance of `ScalingRuleArrayInput` via:
//
//	ScalingRuleArray{ ScalingRuleArgs{...} }
type ScalingRuleArrayInput interface {
	pulumi.Input

	ToScalingRuleArrayOutput() ScalingRuleArrayOutput
	ToScalingRuleArrayOutputWithContext(context.Context) ScalingRuleArrayOutput
}

type ScalingRuleArray []ScalingRuleInput

func (ScalingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingRule)(nil)).Elem()
}

func (i ScalingRuleArray) ToScalingRuleArrayOutput() ScalingRuleArrayOutput {
	return i.ToScalingRuleArrayOutputWithContext(context.Background())
}

func (i ScalingRuleArray) ToScalingRuleArrayOutputWithContext(ctx context.Context) ScalingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingRuleArrayOutput)
}

// The scaling rule.
type ScalingRuleOutput struct{ *pulumi.OutputState }

func (ScalingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingRule)(nil)).Elem()
}

func (o ScalingRuleOutput) ToScalingRuleOutput() ScalingRuleOutput {
	return o
}

func (o ScalingRuleOutput) ToScalingRuleOutputWithContext(ctx context.Context) ScalingRuleOutput {
	return o
}

// The action type.
func (o ScalingRuleOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRule) string { return v.ActionType }).(pulumi.StringOutput)
}

// The comparison rule.
func (o ScalingRuleOutput) ComparisonRule() ComparisonRuleOutput {
	return o.ApplyT(func(v ScalingRule) ComparisonRule { return v.ComparisonRule }).(ComparisonRuleOutput)
}

// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
func (o ScalingRuleOutput) EvaluationCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingRule) int { return v.EvaluationCount }).(pulumi.IntOutput)
}

// Metrics name for individual workloads. For example: cpu
func (o ScalingRuleOutput) ScalingMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRule) string { return v.ScalingMetric }).(pulumi.StringOutput)
}

type ScalingRuleArrayOutput struct{ *pulumi.OutputState }

func (ScalingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingRule)(nil)).Elem()
}

func (o ScalingRuleArrayOutput) ToScalingRuleArrayOutput() ScalingRuleArrayOutput {
	return o
}

func (o ScalingRuleArrayOutput) ToScalingRuleArrayOutputWithContext(ctx context.Context) ScalingRuleArrayOutput {
	return o
}

func (o ScalingRuleArrayOutput) Index(i pulumi.IntInput) ScalingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingRule {
		return vs[0].([]ScalingRule)[vs[1].(int)]
	}).(ScalingRuleOutput)
}

// The scaling rule.
type ScalingRuleResponse struct {
	// The action type.
	ActionType string `pulumi:"actionType"`
	// The comparison rule.
	ComparisonRule ComparisonRuleResponse `pulumi:"comparisonRule"`
	// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
	EvaluationCount int `pulumi:"evaluationCount"`
	// Metrics name for individual workloads. For example: cpu
	ScalingMetric string `pulumi:"scalingMetric"`
}

// The scaling rule.
type ScalingRuleResponseOutput struct{ *pulumi.OutputState }

func (ScalingRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingRuleResponse)(nil)).Elem()
}

func (o ScalingRuleResponseOutput) ToScalingRuleResponseOutput() ScalingRuleResponseOutput {
	return o
}

func (o ScalingRuleResponseOutput) ToScalingRuleResponseOutputWithContext(ctx context.Context) ScalingRuleResponseOutput {
	return o
}

// The action type.
func (o ScalingRuleResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRuleResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// The comparison rule.
func (o ScalingRuleResponseOutput) ComparisonRule() ComparisonRuleResponseOutput {
	return o.ApplyT(func(v ScalingRuleResponse) ComparisonRuleResponse { return v.ComparisonRule }).(ComparisonRuleResponseOutput)
}

// This is an evaluation count for a scaling condition, the number of times a trigger condition should be successful, before scaling activity is triggered.
func (o ScalingRuleResponseOutput) EvaluationCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingRuleResponse) int { return v.EvaluationCount }).(pulumi.IntOutput)
}

// Metrics name for individual workloads. For example: cpu
func (o ScalingRuleResponseOutput) ScalingMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingRuleResponse) string { return v.ScalingMetric }).(pulumi.StringOutput)
}

type ScalingRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingRuleResponse)(nil)).Elem()
}

func (o ScalingRuleResponseArrayOutput) ToScalingRuleResponseArrayOutput() ScalingRuleResponseArrayOutput {
	return o
}

func (o ScalingRuleResponseArrayOutput) ToScalingRuleResponseArrayOutputWithContext(ctx context.Context) ScalingRuleResponseArrayOutput {
	return o
}

func (o ScalingRuleResponseArrayOutput) Index(i pulumi.IntInput) ScalingRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingRuleResponse {
		return vs[0].([]ScalingRuleResponse)[vs[1].(int)]
	}).(ScalingRuleResponseOutput)
}

// Schedule definition.
type Schedule struct {
	// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
	Count int `pulumi:"count"`
	// User has to set the days where schedule has to be set for autoscale operation.
	Days []string `pulumi:"days"`
	// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
	EndTime string `pulumi:"endTime"`
	// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
	StartTime string `pulumi:"startTime"`
}

// ScheduleInput is an input type that accepts ScheduleArgs and ScheduleOutput values.
// You can construct a concrete instance of `ScheduleInput` via:
//
//	ScheduleArgs{...}
type ScheduleInput interface {
	pulumi.Input

	ToScheduleOutput() ScheduleOutput
	ToScheduleOutputWithContext(context.Context) ScheduleOutput
}

// Schedule definition.
type ScheduleArgs struct {
	// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
	Count pulumi.IntInput `pulumi:"count"`
	// User has to set the days where schedule has to be set for autoscale operation.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (i ScheduleArgs) ToScheduleOutput() ScheduleOutput {
	return i.ToScheduleOutputWithContext(context.Background())
}

func (i ScheduleArgs) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleOutput)
}

// ScheduleArrayInput is an input type that accepts ScheduleArray and ScheduleArrayOutput values.
// You can construct a concrete instance of `ScheduleArrayInput` via:
//
//	ScheduleArray{ ScheduleArgs{...} }
type ScheduleArrayInput interface {
	pulumi.Input

	ToScheduleArrayOutput() ScheduleArrayOutput
	ToScheduleArrayOutputWithContext(context.Context) ScheduleArrayOutput
}

type ScheduleArray []ScheduleInput

func (ScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schedule)(nil)).Elem()
}

func (i ScheduleArray) ToScheduleArrayOutput() ScheduleArrayOutput {
	return i.ToScheduleArrayOutputWithContext(context.Background())
}

func (i ScheduleArray) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleArrayOutput)
}

// Schedule definition.
type ScheduleOutput struct{ *pulumi.OutputState }

func (ScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schedule)(nil)).Elem()
}

func (o ScheduleOutput) ToScheduleOutput() ScheduleOutput {
	return o
}

func (o ScheduleOutput) ToScheduleOutputWithContext(ctx context.Context) ScheduleOutput {
	return o
}

// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
func (o ScheduleOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v Schedule) int { return v.Count }).(pulumi.IntOutput)
}

// User has to set the days where schedule has to be set for autoscale operation.
func (o ScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Schedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v Schedule) string { return v.EndTime }).(pulumi.StringOutput)
}

// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v Schedule) string { return v.StartTime }).(pulumi.StringOutput)
}

type ScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schedule)(nil)).Elem()
}

func (o ScheduleArrayOutput) ToScheduleArrayOutput() ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) ToScheduleArrayOutputWithContext(ctx context.Context) ScheduleArrayOutput {
	return o
}

func (o ScheduleArrayOutput) Index(i pulumi.IntInput) ScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Schedule {
		return vs[0].([]Schedule)[vs[1].(int)]
	}).(ScheduleOutput)
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfig struct {
	// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
	DefaultCount int `pulumi:"defaultCount"`
	// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
	Schedules []Schedule `pulumi:"schedules"`
	// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
	TimeZone string `pulumi:"timeZone"`
}

// ScheduleBasedConfigInput is an input type that accepts ScheduleBasedConfigArgs and ScheduleBasedConfigOutput values.
// You can construct a concrete instance of `ScheduleBasedConfigInput` via:
//
//	ScheduleBasedConfigArgs{...}
type ScheduleBasedConfigInput interface {
	pulumi.Input

	ToScheduleBasedConfigOutput() ScheduleBasedConfigOutput
	ToScheduleBasedConfigOutputWithContext(context.Context) ScheduleBasedConfigOutput
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigArgs struct {
	// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
	DefaultCount pulumi.IntInput `pulumi:"defaultCount"`
	// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
	Schedules ScheduleArrayInput `pulumi:"schedules"`
	// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (ScheduleBasedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBasedConfig)(nil)).Elem()
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigOutput() ScheduleBasedConfigOutput {
	return i.ToScheduleBasedConfigOutputWithContext(context.Background())
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigOutputWithContext(ctx context.Context) ScheduleBasedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasedConfigOutput)
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return i.ToScheduleBasedConfigPtrOutputWithContext(context.Background())
}

func (i ScheduleBasedConfigArgs) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasedConfigOutput).ToScheduleBasedConfigPtrOutputWithContext(ctx)
}

// ScheduleBasedConfigPtrInput is an input type that accepts ScheduleBasedConfigArgs, ScheduleBasedConfigPtr and ScheduleBasedConfigPtrOutput values.
// You can construct a concrete instance of `ScheduleBasedConfigPtrInput` via:
//
//	        ScheduleBasedConfigArgs{...}
//
//	or:
//
//	        nil
type ScheduleBasedConfigPtrInput interface {
	pulumi.Input

	ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput
	ToScheduleBasedConfigPtrOutputWithContext(context.Context) ScheduleBasedConfigPtrOutput
}

type scheduleBasedConfigPtrType ScheduleBasedConfigArgs

func ScheduleBasedConfigPtr(v *ScheduleBasedConfigArgs) ScheduleBasedConfigPtrInput {
	return (*scheduleBasedConfigPtrType)(v)
}

func (*scheduleBasedConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBasedConfig)(nil)).Elem()
}

func (i *scheduleBasedConfigPtrType) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return i.ToScheduleBasedConfigPtrOutputWithContext(context.Background())
}

func (i *scheduleBasedConfigPtrType) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasedConfigPtrOutput)
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBasedConfig)(nil)).Elem()
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigOutput() ScheduleBasedConfigOutput {
	return o
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigOutputWithContext(ctx context.Context) ScheduleBasedConfigOutput {
	return o
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return o.ToScheduleBasedConfigPtrOutputWithContext(context.Background())
}

func (o ScheduleBasedConfigOutput) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleBasedConfig) *ScheduleBasedConfig {
		return &v
	}).(ScheduleBasedConfigPtrOutput)
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigOutput) DefaultCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleBasedConfig) int { return v.DefaultCount }).(pulumi.IntOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigOutput) Schedules() ScheduleArrayOutput {
	return o.ApplyT(func(v ScheduleBasedConfig) []Schedule { return v.Schedules }).(ScheduleArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleBasedConfig) string { return v.TimeZone }).(pulumi.StringOutput)
}

type ScheduleBasedConfigPtrOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBasedConfig)(nil)).Elem()
}

func (o ScheduleBasedConfigPtrOutput) ToScheduleBasedConfigPtrOutput() ScheduleBasedConfigPtrOutput {
	return o
}

func (o ScheduleBasedConfigPtrOutput) ToScheduleBasedConfigPtrOutputWithContext(ctx context.Context) ScheduleBasedConfigPtrOutput {
	return o
}

func (o ScheduleBasedConfigPtrOutput) Elem() ScheduleBasedConfigOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) ScheduleBasedConfig {
		if v != nil {
			return *v
		}
		var ret ScheduleBasedConfig
		return ret
	}).(ScheduleBasedConfigOutput)
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigPtrOutput) DefaultCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) *int {
		if v == nil {
			return nil
		}
		return &v.DefaultCount
	}).(pulumi.IntPtrOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigPtrOutput) Schedules() ScheduleArrayOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) []Schedule {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ScheduleArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigResponse struct {
	// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
	DefaultCount int `pulumi:"defaultCount"`
	// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
	Schedules []ScheduleResponse `pulumi:"schedules"`
	// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
	TimeZone string `pulumi:"timeZone"`
}

// Profile of schedule based Autoscale.
type ScheduleBasedConfigResponseOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBasedConfigResponse)(nil)).Elem()
}

func (o ScheduleBasedConfigResponseOutput) ToScheduleBasedConfigResponseOutput() ScheduleBasedConfigResponseOutput {
	return o
}

func (o ScheduleBasedConfigResponseOutput) ToScheduleBasedConfigResponseOutputWithContext(ctx context.Context) ScheduleBasedConfigResponseOutput {
	return o
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigResponseOutput) DefaultCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleBasedConfigResponse) int { return v.DefaultCount }).(pulumi.IntOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigResponseOutput) Schedules() ScheduleResponseArrayOutput {
	return o.ApplyT(func(v ScheduleBasedConfigResponse) []ScheduleResponse { return v.Schedules }).(ScheduleResponseArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigResponseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleBasedConfigResponse) string { return v.TimeZone }).(pulumi.StringOutput)
}

type ScheduleBasedConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleBasedConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBasedConfigResponse)(nil)).Elem()
}

func (o ScheduleBasedConfigResponsePtrOutput) ToScheduleBasedConfigResponsePtrOutput() ScheduleBasedConfigResponsePtrOutput {
	return o
}

func (o ScheduleBasedConfigResponsePtrOutput) ToScheduleBasedConfigResponsePtrOutputWithContext(ctx context.Context) ScheduleBasedConfigResponsePtrOutput {
	return o
}

func (o ScheduleBasedConfigResponsePtrOutput) Elem() ScheduleBasedConfigResponseOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) ScheduleBasedConfigResponse {
		if v != nil {
			return *v
		}
		var ret ScheduleBasedConfigResponse
		return ret
	}).(ScheduleBasedConfigResponseOutput)
}

// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)
func (o ScheduleBasedConfigResponsePtrOutput) DefaultCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.DefaultCount
	}).(pulumi.IntPtrOutput)
}

// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).
func (o ScheduleBasedConfigResponsePtrOutput) Schedules() ScheduleResponseArrayOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) []ScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ScheduleResponseArrayOutput)
}

// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
func (o ScheduleBasedConfigResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBasedConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Schedule definition.
type ScheduleResponse struct {
	// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
	Count int `pulumi:"count"`
	// User has to set the days where schedule has to be set for autoscale operation.
	Days []string `pulumi:"days"`
	// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
	EndTime string `pulumi:"endTime"`
	// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
	StartTime string `pulumi:"startTime"`
}

// Schedule definition.
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// User has to set the node count anticipated at end of the scaling operation of the set current schedule configuration, format is integer.
func (o ScheduleResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleResponse) int { return v.Count }).(pulumi.IntOutput)
}

// User has to set the days where schedule has to be set for autoscale operation.
func (o ScheduleResponseOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScheduleResponse) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// User has to set the end time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// User has to set the start time of current schedule configuration, format like 10:30 (HH:MM).
func (o ScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type ScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseArrayOutput) ToScheduleResponseArrayOutput() ScheduleResponseArrayOutput {
	return o
}

func (o ScheduleResponseArrayOutput) ToScheduleResponseArrayOutputWithContext(ctx context.Context) ScheduleResponseArrayOutput {
	return o
}

func (o ScheduleResponseArrayOutput) Index(i pulumi.IntInput) ScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleResponse {
		return vs[0].([]ScheduleResponse)[vs[1].(int)]
	}).(ScheduleResponseOutput)
}

// Describes a script action on role on the cluster.
type ScriptAction struct {
	// The name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script provided.
	Parameters string `pulumi:"parameters"`
	// The URI to the script.
	Uri string `pulumi:"uri"`
}

// ScriptActionInput is an input type that accepts ScriptActionArgs and ScriptActionOutput values.
// You can construct a concrete instance of `ScriptActionInput` via:
//
//	ScriptActionArgs{...}
type ScriptActionInput interface {
	pulumi.Input

	ToScriptActionOutput() ScriptActionOutput
	ToScriptActionOutputWithContext(context.Context) ScriptActionOutput
}

// Describes a script action on role on the cluster.
type ScriptActionArgs struct {
	// The name of the script action.
	Name pulumi.StringInput `pulumi:"name"`
	// The parameters for the script provided.
	Parameters pulumi.StringInput `pulumi:"parameters"`
	// The URI to the script.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ScriptActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (i ScriptActionArgs) ToScriptActionOutput() ScriptActionOutput {
	return i.ToScriptActionOutputWithContext(context.Background())
}

func (i ScriptActionArgs) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionOutput)
}

// ScriptActionArrayInput is an input type that accepts ScriptActionArray and ScriptActionArrayOutput values.
// You can construct a concrete instance of `ScriptActionArrayInput` via:
//
//	ScriptActionArray{ ScriptActionArgs{...} }
type ScriptActionArrayInput interface {
	pulumi.Input

	ToScriptActionArrayOutput() ScriptActionArrayOutput
	ToScriptActionArrayOutputWithContext(context.Context) ScriptActionArrayOutput
}

type ScriptActionArray []ScriptActionInput

func (ScriptActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (i ScriptActionArray) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return i.ToScriptActionArrayOutputWithContext(context.Background())
}

func (i ScriptActionArray) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionArrayOutput)
}

// Describes a script action on role on the cluster.
type ScriptActionOutput struct{ *pulumi.OutputState }

func (ScriptActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptAction)(nil)).Elem()
}

func (o ScriptActionOutput) ToScriptActionOutput() ScriptActionOutput {
	return o
}

func (o ScriptActionOutput) ToScriptActionOutputWithContext(ctx context.Context) ScriptActionOutput {
	return o
}

// The name of the script action.
func (o ScriptActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script provided.
func (o ScriptActionOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Parameters }).(pulumi.StringOutput)
}

// The URI to the script.
func (o ScriptActionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptAction) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptAction)(nil)).Elem()
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutput() ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) ToScriptActionArrayOutputWithContext(ctx context.Context) ScriptActionArrayOutput {
	return o
}

func (o ScriptActionArrayOutput) Index(i pulumi.IntInput) ScriptActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptAction {
		return vs[0].([]ScriptAction)[vs[1].(int)]
	}).(ScriptActionOutput)
}

// The script action profile.
type ScriptActionProfile struct {
	// Script name.
	Name string `pulumi:"name"`
	// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
	Parameters *string `pulumi:"parameters"`
	// List of services to apply the script action.
	Services []string `pulumi:"services"`
	// Specify if the script should persist on the cluster.
	ShouldPersist *bool `pulumi:"shouldPersist"`
	// Timeout duration for the script action in minutes.
	TimeoutInMinutes *int `pulumi:"timeoutInMinutes"`
	// Type of the script action. Supported type is bash scripts.
	Type string `pulumi:"type"`
	// Url of the script file.
	Url string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for ScriptActionProfile
func (val *ScriptActionProfile) Defaults() *ScriptActionProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShouldPersist == nil {
		shouldPersist_ := true
		tmp.ShouldPersist = &shouldPersist_
	}
	return &tmp
}

// ScriptActionProfileInput is an input type that accepts ScriptActionProfileArgs and ScriptActionProfileOutput values.
// You can construct a concrete instance of `ScriptActionProfileInput` via:
//
//	ScriptActionProfileArgs{...}
type ScriptActionProfileInput interface {
	pulumi.Input

	ToScriptActionProfileOutput() ScriptActionProfileOutput
	ToScriptActionProfileOutputWithContext(context.Context) ScriptActionProfileOutput
}

// The script action profile.
type ScriptActionProfileArgs struct {
	// Script name.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
	Parameters pulumi.StringPtrInput `pulumi:"parameters"`
	// List of services to apply the script action.
	Services pulumi.StringArrayInput `pulumi:"services"`
	// Specify if the script should persist on the cluster.
	ShouldPersist pulumi.BoolPtrInput `pulumi:"shouldPersist"`
	// Timeout duration for the script action in minutes.
	TimeoutInMinutes pulumi.IntPtrInput `pulumi:"timeoutInMinutes"`
	// Type of the script action. Supported type is bash scripts.
	Type pulumi.StringInput `pulumi:"type"`
	// Url of the script file.
	Url pulumi.StringInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for ScriptActionProfileArgs
func (val *ScriptActionProfileArgs) Defaults() *ScriptActionProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShouldPersist == nil {
		tmp.ShouldPersist = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (ScriptActionProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionProfile)(nil)).Elem()
}

func (i ScriptActionProfileArgs) ToScriptActionProfileOutput() ScriptActionProfileOutput {
	return i.ToScriptActionProfileOutputWithContext(context.Background())
}

func (i ScriptActionProfileArgs) ToScriptActionProfileOutputWithContext(ctx context.Context) ScriptActionProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionProfileOutput)
}

// ScriptActionProfileArrayInput is an input type that accepts ScriptActionProfileArray and ScriptActionProfileArrayOutput values.
// You can construct a concrete instance of `ScriptActionProfileArrayInput` via:
//
//	ScriptActionProfileArray{ ScriptActionProfileArgs{...} }
type ScriptActionProfileArrayInput interface {
	pulumi.Input

	ToScriptActionProfileArrayOutput() ScriptActionProfileArrayOutput
	ToScriptActionProfileArrayOutputWithContext(context.Context) ScriptActionProfileArrayOutput
}

type ScriptActionProfileArray []ScriptActionProfileInput

func (ScriptActionProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionProfile)(nil)).Elem()
}

func (i ScriptActionProfileArray) ToScriptActionProfileArrayOutput() ScriptActionProfileArrayOutput {
	return i.ToScriptActionProfileArrayOutputWithContext(context.Background())
}

func (i ScriptActionProfileArray) ToScriptActionProfileArrayOutputWithContext(ctx context.Context) ScriptActionProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptActionProfileArrayOutput)
}

// The script action profile.
type ScriptActionProfileOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionProfile)(nil)).Elem()
}

func (o ScriptActionProfileOutput) ToScriptActionProfileOutput() ScriptActionProfileOutput {
	return o
}

func (o ScriptActionProfileOutput) ToScriptActionProfileOutputWithContext(ctx context.Context) ScriptActionProfileOutput {
	return o
}

// Script name.
func (o ScriptActionProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfile) string { return v.Name }).(pulumi.StringOutput)
}

// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
func (o ScriptActionProfileOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionProfile) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// List of services to apply the script action.
func (o ScriptActionProfileOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScriptActionProfile) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// Specify if the script should persist on the cluster.
func (o ScriptActionProfileOutput) ShouldPersist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScriptActionProfile) *bool { return v.ShouldPersist }).(pulumi.BoolPtrOutput)
}

// Timeout duration for the script action in minutes.
func (o ScriptActionProfileOutput) TimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptActionProfile) *int { return v.TimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Type of the script action. Supported type is bash scripts.
func (o ScriptActionProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfile) string { return v.Type }).(pulumi.StringOutput)
}

// Url of the script file.
func (o ScriptActionProfileOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfile) string { return v.Url }).(pulumi.StringOutput)
}

type ScriptActionProfileArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionProfile)(nil)).Elem()
}

func (o ScriptActionProfileArrayOutput) ToScriptActionProfileArrayOutput() ScriptActionProfileArrayOutput {
	return o
}

func (o ScriptActionProfileArrayOutput) ToScriptActionProfileArrayOutputWithContext(ctx context.Context) ScriptActionProfileArrayOutput {
	return o
}

func (o ScriptActionProfileArrayOutput) Index(i pulumi.IntInput) ScriptActionProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionProfile {
		return vs[0].([]ScriptActionProfile)[vs[1].(int)]
	}).(ScriptActionProfileOutput)
}

// The script action profile.
type ScriptActionProfileResponse struct {
	// Script name.
	Name string `pulumi:"name"`
	// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
	Parameters *string `pulumi:"parameters"`
	// List of services to apply the script action.
	Services []string `pulumi:"services"`
	// Specify if the script should persist on the cluster.
	ShouldPersist *bool `pulumi:"shouldPersist"`
	// Timeout duration for the script action in minutes.
	TimeoutInMinutes *int `pulumi:"timeoutInMinutes"`
	// Type of the script action. Supported type is bash scripts.
	Type string `pulumi:"type"`
	// Url of the script file.
	Url string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for ScriptActionProfileResponse
func (val *ScriptActionProfileResponse) Defaults() *ScriptActionProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShouldPersist == nil {
		shouldPersist_ := true
		tmp.ShouldPersist = &shouldPersist_
	}
	return &tmp
}

// The script action profile.
type ScriptActionProfileResponseOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionProfileResponse)(nil)).Elem()
}

func (o ScriptActionProfileResponseOutput) ToScriptActionProfileResponseOutput() ScriptActionProfileResponseOutput {
	return o
}

func (o ScriptActionProfileResponseOutput) ToScriptActionProfileResponseOutputWithContext(ctx context.Context) ScriptActionProfileResponseOutput {
	return o
}

// Script name.
func (o ScriptActionProfileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
func (o ScriptActionProfileResponseOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) *string { return v.Parameters }).(pulumi.StringPtrOutput)
}

// List of services to apply the script action.
func (o ScriptActionProfileResponseOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// Specify if the script should persist on the cluster.
func (o ScriptActionProfileResponseOutput) ShouldPersist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) *bool { return v.ShouldPersist }).(pulumi.BoolPtrOutput)
}

// Timeout duration for the script action in minutes.
func (o ScriptActionProfileResponseOutput) TimeoutInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) *int { return v.TimeoutInMinutes }).(pulumi.IntPtrOutput)
}

// Type of the script action. Supported type is bash scripts.
func (o ScriptActionProfileResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Url of the script file.
func (o ScriptActionProfileResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionProfileResponse) string { return v.Url }).(pulumi.StringOutput)
}

type ScriptActionProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionProfileResponse)(nil)).Elem()
}

func (o ScriptActionProfileResponseArrayOutput) ToScriptActionProfileResponseArrayOutput() ScriptActionProfileResponseArrayOutput {
	return o
}

func (o ScriptActionProfileResponseArrayOutput) ToScriptActionProfileResponseArrayOutputWithContext(ctx context.Context) ScriptActionProfileResponseArrayOutput {
	return o
}

func (o ScriptActionProfileResponseArrayOutput) Index(i pulumi.IntInput) ScriptActionProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionProfileResponse {
		return vs[0].([]ScriptActionProfileResponse)[vs[1].(int)]
	}).(ScriptActionProfileResponseOutput)
}

// Describes a script action on role on the cluster.
type ScriptActionResponse struct {
	// The name of the script action.
	Name string `pulumi:"name"`
	// The parameters for the script provided.
	Parameters string `pulumi:"parameters"`
	// The URI to the script.
	Uri string `pulumi:"uri"`
}

// Describes a script action on role on the cluster.
type ScriptActionResponseOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutput() ScriptActionResponseOutput {
	return o
}

func (o ScriptActionResponseOutput) ToScriptActionResponseOutputWithContext(ctx context.Context) ScriptActionResponseOutput {
	return o
}

// The name of the script action.
func (o ScriptActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the script provided.
func (o ScriptActionResponseOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Parameters }).(pulumi.StringOutput)
}

// The URI to the script.
func (o ScriptActionResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptActionResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ScriptActionResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptActionResponse)(nil)).Elem()
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutput() ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) ToScriptActionResponseArrayOutputWithContext(ctx context.Context) ScriptActionResponseArrayOutput {
	return o
}

func (o ScriptActionResponseArrayOutput) Index(i pulumi.IntInput) ScriptActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptActionResponse {
		return vs[0].([]ScriptActionResponse)[vs[1].(int)]
	}).(ScriptActionResponseOutput)
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReference struct {
	// Object identifier name of the secret in key vault.
	KeyVaultObjectName string `pulumi:"keyVaultObjectName"`
	// Reference name of the secret to be used in service configs.
	ReferenceName string `pulumi:"referenceName"`
	// Type of key vault object: secret, key or certificate.
	Type string `pulumi:"type"`
	// Version of the secret in key vault.
	Version *string `pulumi:"version"`
}

// SecretReferenceInput is an input type that accepts SecretReferenceArgs and SecretReferenceOutput values.
// You can construct a concrete instance of `SecretReferenceInput` via:
//
//	SecretReferenceArgs{...}
type SecretReferenceInput interface {
	pulumi.Input

	ToSecretReferenceOutput() SecretReferenceOutput
	ToSecretReferenceOutputWithContext(context.Context) SecretReferenceOutput
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceArgs struct {
	// Object identifier name of the secret in key vault.
	KeyVaultObjectName pulumi.StringInput `pulumi:"keyVaultObjectName"`
	// Reference name of the secret to be used in service configs.
	ReferenceName pulumi.StringInput `pulumi:"referenceName"`
	// Type of key vault object: secret, key or certificate.
	Type pulumi.StringInput `pulumi:"type"`
	// Version of the secret in key vault.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (SecretReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReference)(nil)).Elem()
}

func (i SecretReferenceArgs) ToSecretReferenceOutput() SecretReferenceOutput {
	return i.ToSecretReferenceOutputWithContext(context.Background())
}

func (i SecretReferenceArgs) ToSecretReferenceOutputWithContext(ctx context.Context) SecretReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferenceOutput)
}

// SecretReferenceArrayInput is an input type that accepts SecretReferenceArray and SecretReferenceArrayOutput values.
// You can construct a concrete instance of `SecretReferenceArrayInput` via:
//
//	SecretReferenceArray{ SecretReferenceArgs{...} }
type SecretReferenceArrayInput interface {
	pulumi.Input

	ToSecretReferenceArrayOutput() SecretReferenceArrayOutput
	ToSecretReferenceArrayOutputWithContext(context.Context) SecretReferenceArrayOutput
}

type SecretReferenceArray []SecretReferenceInput

func (SecretReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReference)(nil)).Elem()
}

func (i SecretReferenceArray) ToSecretReferenceArrayOutput() SecretReferenceArrayOutput {
	return i.ToSecretReferenceArrayOutputWithContext(context.Background())
}

func (i SecretReferenceArray) ToSecretReferenceArrayOutputWithContext(ctx context.Context) SecretReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretReferenceArrayOutput)
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceOutput struct{ *pulumi.OutputState }

func (SecretReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReference)(nil)).Elem()
}

func (o SecretReferenceOutput) ToSecretReferenceOutput() SecretReferenceOutput {
	return o
}

func (o SecretReferenceOutput) ToSecretReferenceOutputWithContext(ctx context.Context) SecretReferenceOutput {
	return o
}

// Object identifier name of the secret in key vault.
func (o SecretReferenceOutput) KeyVaultObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReference) string { return v.KeyVaultObjectName }).(pulumi.StringOutput)
}

// Reference name of the secret to be used in service configs.
func (o SecretReferenceOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReference) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of key vault object: secret, key or certificate.
func (o SecretReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReference) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the secret in key vault.
func (o SecretReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SecretReferenceArrayOutput struct{ *pulumi.OutputState }

func (SecretReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReference)(nil)).Elem()
}

func (o SecretReferenceArrayOutput) ToSecretReferenceArrayOutput() SecretReferenceArrayOutput {
	return o
}

func (o SecretReferenceArrayOutput) ToSecretReferenceArrayOutputWithContext(ctx context.Context) SecretReferenceArrayOutput {
	return o
}

func (o SecretReferenceArrayOutput) Index(i pulumi.IntInput) SecretReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretReference {
		return vs[0].([]SecretReference)[vs[1].(int)]
	}).(SecretReferenceOutput)
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceResponse struct {
	// Object identifier name of the secret in key vault.
	KeyVaultObjectName string `pulumi:"keyVaultObjectName"`
	// Reference name of the secret to be used in service configs.
	ReferenceName string `pulumi:"referenceName"`
	// Type of key vault object: secret, key or certificate.
	Type string `pulumi:"type"`
	// Version of the secret in key vault.
	Version *string `pulumi:"version"`
}

// Secret reference and corresponding properties of a key vault secret.
type SecretReferenceResponseOutput struct{ *pulumi.OutputState }

func (SecretReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretReferenceResponse)(nil)).Elem()
}

func (o SecretReferenceResponseOutput) ToSecretReferenceResponseOutput() SecretReferenceResponseOutput {
	return o
}

func (o SecretReferenceResponseOutput) ToSecretReferenceResponseOutputWithContext(ctx context.Context) SecretReferenceResponseOutput {
	return o
}

// Object identifier name of the secret in key vault.
func (o SecretReferenceResponseOutput) KeyVaultObjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReferenceResponse) string { return v.KeyVaultObjectName }).(pulumi.StringOutput)
}

// Reference name of the secret to be used in service configs.
func (o SecretReferenceResponseOutput) ReferenceName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReferenceResponse) string { return v.ReferenceName }).(pulumi.StringOutput)
}

// Type of key vault object: secret, key or certificate.
func (o SecretReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SecretReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Version of the secret in key vault.
func (o SecretReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SecretReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretReferenceResponse)(nil)).Elem()
}

func (o SecretReferenceResponseArrayOutput) ToSecretReferenceResponseArrayOutput() SecretReferenceResponseArrayOutput {
	return o
}

func (o SecretReferenceResponseArrayOutput) ToSecretReferenceResponseArrayOutputWithContext(ctx context.Context) SecretReferenceResponseArrayOutput {
	return o
}

func (o SecretReferenceResponseArrayOutput) Index(i pulumi.IntInput) SecretReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretReferenceResponse {
		return vs[0].([]SecretReferenceResponse)[vs[1].(int)]
	}).(SecretReferenceResponseOutput)
}

// The cluster secret profile.
type SecretsProfile struct {
	// Name of the user Key Vault where all the cluster specific user secrets are stored.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// Properties of Key Vault secret.
	Secrets []SecretReference `pulumi:"secrets"`
}

// SecretsProfileInput is an input type that accepts SecretsProfileArgs and SecretsProfileOutput values.
// You can construct a concrete instance of `SecretsProfileInput` via:
//
//	SecretsProfileArgs{...}
type SecretsProfileInput interface {
	pulumi.Input

	ToSecretsProfileOutput() SecretsProfileOutput
	ToSecretsProfileOutputWithContext(context.Context) SecretsProfileOutput
}

// The cluster secret profile.
type SecretsProfileArgs struct {
	// Name of the user Key Vault where all the cluster specific user secrets are stored.
	KeyVaultResourceId pulumi.StringInput `pulumi:"keyVaultResourceId"`
	// Properties of Key Vault secret.
	Secrets SecretReferenceArrayInput `pulumi:"secrets"`
}

func (SecretsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsProfile)(nil)).Elem()
}

func (i SecretsProfileArgs) ToSecretsProfileOutput() SecretsProfileOutput {
	return i.ToSecretsProfileOutputWithContext(context.Background())
}

func (i SecretsProfileArgs) ToSecretsProfileOutputWithContext(ctx context.Context) SecretsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsProfileOutput)
}

func (i SecretsProfileArgs) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return i.ToSecretsProfilePtrOutputWithContext(context.Background())
}

func (i SecretsProfileArgs) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsProfileOutput).ToSecretsProfilePtrOutputWithContext(ctx)
}

// SecretsProfilePtrInput is an input type that accepts SecretsProfileArgs, SecretsProfilePtr and SecretsProfilePtrOutput values.
// You can construct a concrete instance of `SecretsProfilePtrInput` via:
//
//	        SecretsProfileArgs{...}
//
//	or:
//
//	        nil
type SecretsProfilePtrInput interface {
	pulumi.Input

	ToSecretsProfilePtrOutput() SecretsProfilePtrOutput
	ToSecretsProfilePtrOutputWithContext(context.Context) SecretsProfilePtrOutput
}

type secretsProfilePtrType SecretsProfileArgs

func SecretsProfilePtr(v *SecretsProfileArgs) SecretsProfilePtrInput {
	return (*secretsProfilePtrType)(v)
}

func (*secretsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsProfile)(nil)).Elem()
}

func (i *secretsProfilePtrType) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return i.ToSecretsProfilePtrOutputWithContext(context.Background())
}

func (i *secretsProfilePtrType) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsProfilePtrOutput)
}

// The cluster secret profile.
type SecretsProfileOutput struct{ *pulumi.OutputState }

func (SecretsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsProfile)(nil)).Elem()
}

func (o SecretsProfileOutput) ToSecretsProfileOutput() SecretsProfileOutput {
	return o
}

func (o SecretsProfileOutput) ToSecretsProfileOutputWithContext(ctx context.Context) SecretsProfileOutput {
	return o
}

func (o SecretsProfileOutput) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return o.ToSecretsProfilePtrOutputWithContext(context.Background())
}

func (o SecretsProfileOutput) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretsProfile) *SecretsProfile {
		return &v
	}).(SecretsProfilePtrOutput)
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfileOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsProfile) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfileOutput) Secrets() SecretReferenceArrayOutput {
	return o.ApplyT(func(v SecretsProfile) []SecretReference { return v.Secrets }).(SecretReferenceArrayOutput)
}

type SecretsProfilePtrOutput struct{ *pulumi.OutputState }

func (SecretsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsProfile)(nil)).Elem()
}

func (o SecretsProfilePtrOutput) ToSecretsProfilePtrOutput() SecretsProfilePtrOutput {
	return o
}

func (o SecretsProfilePtrOutput) ToSecretsProfilePtrOutputWithContext(ctx context.Context) SecretsProfilePtrOutput {
	return o
}

func (o SecretsProfilePtrOutput) Elem() SecretsProfileOutput {
	return o.ApplyT(func(v *SecretsProfile) SecretsProfile {
		if v != nil {
			return *v
		}
		var ret SecretsProfile
		return ret
	}).(SecretsProfileOutput)
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfilePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfilePtrOutput) Secrets() SecretReferenceArrayOutput {
	return o.ApplyT(func(v *SecretsProfile) []SecretReference {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretReferenceArrayOutput)
}

// The cluster secret profile.
type SecretsProfileResponse struct {
	// Name of the user Key Vault where all the cluster specific user secrets are stored.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// Properties of Key Vault secret.
	Secrets []SecretReferenceResponse `pulumi:"secrets"`
}

// The cluster secret profile.
type SecretsProfileResponseOutput struct{ *pulumi.OutputState }

func (SecretsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsProfileResponse)(nil)).Elem()
}

func (o SecretsProfileResponseOutput) ToSecretsProfileResponseOutput() SecretsProfileResponseOutput {
	return o
}

func (o SecretsProfileResponseOutput) ToSecretsProfileResponseOutputWithContext(ctx context.Context) SecretsProfileResponseOutput {
	return o
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfileResponseOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsProfileResponse) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfileResponseOutput) Secrets() SecretReferenceResponseArrayOutput {
	return o.ApplyT(func(v SecretsProfileResponse) []SecretReferenceResponse { return v.Secrets }).(SecretReferenceResponseArrayOutput)
}

type SecretsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretsProfileResponse)(nil)).Elem()
}

func (o SecretsProfileResponsePtrOutput) ToSecretsProfileResponsePtrOutput() SecretsProfileResponsePtrOutput {
	return o
}

func (o SecretsProfileResponsePtrOutput) ToSecretsProfileResponsePtrOutputWithContext(ctx context.Context) SecretsProfileResponsePtrOutput {
	return o
}

func (o SecretsProfileResponsePtrOutput) Elem() SecretsProfileResponseOutput {
	return o.ApplyT(func(v *SecretsProfileResponse) SecretsProfileResponse {
		if v != nil {
			return *v
		}
		var ret SecretsProfileResponse
		return ret
	}).(SecretsProfileResponseOutput)
}

// Name of the user Key Vault where all the cluster specific user secrets are stored.
func (o SecretsProfileResponsePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of Key Vault secret.
func (o SecretsProfileResponsePtrOutput) Secrets() SecretReferenceResponseArrayOutput {
	return o.ApplyT(func(v *SecretsProfileResponse) []SecretReferenceResponse {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretReferenceResponseArrayOutput)
}

// The security profile which contains Ssh public key for the HDInsight cluster.
type SecurityProfile struct {
	// The resource ID of the user's Azure Active Directory Domain Service.
	AaddsResourceId *string `pulumi:"aaddsResourceId"`
	// Optional. The Distinguished Names for cluster user groups
	ClusterUsersGroupDNs []string `pulumi:"clusterUsersGroupDNs"`
	// The directory type.
	DirectoryType *string `pulumi:"directoryType"`
	// The organization's active directory domain.
	Domain *string `pulumi:"domain"`
	// The domain admin password.
	DomainUserPassword *string `pulumi:"domainUserPassword"`
	// The domain user account that will have admin privileges on the cluster.
	DomainUsername *string `pulumi:"domainUsername"`
	// The LDAPS protocol URLs to communicate with the Active Directory.
	LdapsUrls []string `pulumi:"ldapsUrls"`
	// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
	MsiResourceId *string `pulumi:"msiResourceId"`
	// The organizational unit within the Active Directory to place the cluster and service accounts.
	OrganizationalUnitDN *string `pulumi:"organizationalUnitDN"`
}

// SecurityProfileInput is an input type that accepts SecurityProfileArgs and SecurityProfileOutput values.
// You can construct a concrete instance of `SecurityProfileInput` via:
//
//	SecurityProfileArgs{...}
type SecurityProfileInput interface {
	pulumi.Input

	ToSecurityProfileOutput() SecurityProfileOutput
	ToSecurityProfileOutputWithContext(context.Context) SecurityProfileOutput
}

// The security profile which contains Ssh public key for the HDInsight cluster.
type SecurityProfileArgs struct {
	// The resource ID of the user's Azure Active Directory Domain Service.
	AaddsResourceId pulumi.StringPtrInput `pulumi:"aaddsResourceId"`
	// Optional. The Distinguished Names for cluster user groups
	ClusterUsersGroupDNs pulumi.StringArrayInput `pulumi:"clusterUsersGroupDNs"`
	// The directory type.
	DirectoryType pulumi.StringPtrInput `pulumi:"directoryType"`
	// The organization's active directory domain.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The domain admin password.
	DomainUserPassword pulumi.StringPtrInput `pulumi:"domainUserPassword"`
	// The domain user account that will have admin privileges on the cluster.
	DomainUsername pulumi.StringPtrInput `pulumi:"domainUsername"`
	// The LDAPS protocol URLs to communicate with the Active Directory.
	LdapsUrls pulumi.StringArrayInput `pulumi:"ldapsUrls"`
	// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
	MsiResourceId pulumi.StringPtrInput `pulumi:"msiResourceId"`
	// The organizational unit within the Active Directory to place the cluster and service accounts.
	OrganizationalUnitDN pulumi.StringPtrInput `pulumi:"organizationalUnitDN"`
}

func (SecurityProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfile)(nil)).Elem()
}

func (i SecurityProfileArgs) ToSecurityProfileOutput() SecurityProfileOutput {
	return i.ToSecurityProfileOutputWithContext(context.Background())
}

func (i SecurityProfileArgs) ToSecurityProfileOutputWithContext(ctx context.Context) SecurityProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileOutput)
}

func (i SecurityProfileArgs) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return i.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (i SecurityProfileArgs) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfileOutput).ToSecurityProfilePtrOutputWithContext(ctx)
}

// SecurityProfilePtrInput is an input type that accepts SecurityProfileArgs, SecurityProfilePtr and SecurityProfilePtrOutput values.
// You can construct a concrete instance of `SecurityProfilePtrInput` via:
//
//	        SecurityProfileArgs{...}
//
//	or:
//
//	        nil
type SecurityProfilePtrInput interface {
	pulumi.Input

	ToSecurityProfilePtrOutput() SecurityProfilePtrOutput
	ToSecurityProfilePtrOutputWithContext(context.Context) SecurityProfilePtrOutput
}

type securityProfilePtrType SecurityProfileArgs

func SecurityProfilePtr(v *SecurityProfileArgs) SecurityProfilePtrInput {
	return (*securityProfilePtrType)(v)
}

func (*securityProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfile)(nil)).Elem()
}

func (i *securityProfilePtrType) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return i.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (i *securityProfilePtrType) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityProfilePtrOutput)
}

// The security profile which contains Ssh public key for the HDInsight cluster.
type SecurityProfileOutput struct{ *pulumi.OutputState }

func (SecurityProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfile)(nil)).Elem()
}

func (o SecurityProfileOutput) ToSecurityProfileOutput() SecurityProfileOutput {
	return o
}

func (o SecurityProfileOutput) ToSecurityProfileOutputWithContext(ctx context.Context) SecurityProfileOutput {
	return o
}

func (o SecurityProfileOutput) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return o.ToSecurityProfilePtrOutputWithContext(context.Background())
}

func (o SecurityProfileOutput) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityProfile) *SecurityProfile {
		return &v
	}).(SecurityProfilePtrOutput)
}

// The resource ID of the user's Azure Active Directory Domain Service.
func (o SecurityProfileOutput) AaddsResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.AaddsResourceId }).(pulumi.StringPtrOutput)
}

// Optional. The Distinguished Names for cluster user groups
func (o SecurityProfileOutput) ClusterUsersGroupDNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityProfile) []string { return v.ClusterUsersGroupDNs }).(pulumi.StringArrayOutput)
}

// The directory type.
func (o SecurityProfileOutput) DirectoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.DirectoryType }).(pulumi.StringPtrOutput)
}

// The organization's active directory domain.
func (o SecurityProfileOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The domain admin password.
func (o SecurityProfileOutput) DomainUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.DomainUserPassword }).(pulumi.StringPtrOutput)
}

// The domain user account that will have admin privileges on the cluster.
func (o SecurityProfileOutput) DomainUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.DomainUsername }).(pulumi.StringPtrOutput)
}

// The LDAPS protocol URLs to communicate with the Active Directory.
func (o SecurityProfileOutput) LdapsUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityProfile) []string { return v.LdapsUrls }).(pulumi.StringArrayOutput)
}

// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
func (o SecurityProfileOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.MsiResourceId }).(pulumi.StringPtrOutput)
}

// The organizational unit within the Active Directory to place the cluster and service accounts.
func (o SecurityProfileOutput) OrganizationalUnitDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfile) *string { return v.OrganizationalUnitDN }).(pulumi.StringPtrOutput)
}

type SecurityProfilePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfile)(nil)).Elem()
}

func (o SecurityProfilePtrOutput) ToSecurityProfilePtrOutput() SecurityProfilePtrOutput {
	return o
}

func (o SecurityProfilePtrOutput) ToSecurityProfilePtrOutputWithContext(ctx context.Context) SecurityProfilePtrOutput {
	return o
}

func (o SecurityProfilePtrOutput) Elem() SecurityProfileOutput {
	return o.ApplyT(func(v *SecurityProfile) SecurityProfile {
		if v != nil {
			return *v
		}
		var ret SecurityProfile
		return ret
	}).(SecurityProfileOutput)
}

// The resource ID of the user's Azure Active Directory Domain Service.
func (o SecurityProfilePtrOutput) AaddsResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.AaddsResourceId
	}).(pulumi.StringPtrOutput)
}

// Optional. The Distinguished Names for cluster user groups
func (o SecurityProfilePtrOutput) ClusterUsersGroupDNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityProfile) []string {
		if v == nil {
			return nil
		}
		return v.ClusterUsersGroupDNs
	}).(pulumi.StringArrayOutput)
}

// The directory type.
func (o SecurityProfilePtrOutput) DirectoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.DirectoryType
	}).(pulumi.StringPtrOutput)
}

// The organization's active directory domain.
func (o SecurityProfilePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// The domain admin password.
func (o SecurityProfilePtrOutput) DomainUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.DomainUserPassword
	}).(pulumi.StringPtrOutput)
}

// The domain user account that will have admin privileges on the cluster.
func (o SecurityProfilePtrOutput) DomainUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.DomainUsername
	}).(pulumi.StringPtrOutput)
}

// The LDAPS protocol URLs to communicate with the Active Directory.
func (o SecurityProfilePtrOutput) LdapsUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityProfile) []string {
		if v == nil {
			return nil
		}
		return v.LdapsUrls
	}).(pulumi.StringArrayOutput)
}

// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
func (o SecurityProfilePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// The organizational unit within the Active Directory to place the cluster and service accounts.
func (o SecurityProfilePtrOutput) OrganizationalUnitDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfile) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitDN
	}).(pulumi.StringPtrOutput)
}

// The security profile which contains Ssh public key for the HDInsight cluster.
type SecurityProfileResponse struct {
	// The resource ID of the user's Azure Active Directory Domain Service.
	AaddsResourceId *string `pulumi:"aaddsResourceId"`
	// Optional. The Distinguished Names for cluster user groups
	ClusterUsersGroupDNs []string `pulumi:"clusterUsersGroupDNs"`
	// The directory type.
	DirectoryType *string `pulumi:"directoryType"`
	// The organization's active directory domain.
	Domain *string `pulumi:"domain"`
	// The domain admin password.
	DomainUserPassword *string `pulumi:"domainUserPassword"`
	// The domain user account that will have admin privileges on the cluster.
	DomainUsername *string `pulumi:"domainUsername"`
	// The LDAPS protocol URLs to communicate with the Active Directory.
	LdapsUrls []string `pulumi:"ldapsUrls"`
	// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
	MsiResourceId *string `pulumi:"msiResourceId"`
	// The organizational unit within the Active Directory to place the cluster and service accounts.
	OrganizationalUnitDN *string `pulumi:"organizationalUnitDN"`
}

// The security profile which contains Ssh public key for the HDInsight cluster.
type SecurityProfileResponseOutput struct{ *pulumi.OutputState }

func (SecurityProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityProfileResponse)(nil)).Elem()
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponseOutput() SecurityProfileResponseOutput {
	return o
}

func (o SecurityProfileResponseOutput) ToSecurityProfileResponseOutputWithContext(ctx context.Context) SecurityProfileResponseOutput {
	return o
}

// The resource ID of the user's Azure Active Directory Domain Service.
func (o SecurityProfileResponseOutput) AaddsResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.AaddsResourceId }).(pulumi.StringPtrOutput)
}

// Optional. The Distinguished Names for cluster user groups
func (o SecurityProfileResponseOutput) ClusterUsersGroupDNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityProfileResponse) []string { return v.ClusterUsersGroupDNs }).(pulumi.StringArrayOutput)
}

// The directory type.
func (o SecurityProfileResponseOutput) DirectoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.DirectoryType }).(pulumi.StringPtrOutput)
}

// The organization's active directory domain.
func (o SecurityProfileResponseOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The domain admin password.
func (o SecurityProfileResponseOutput) DomainUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.DomainUserPassword }).(pulumi.StringPtrOutput)
}

// The domain user account that will have admin privileges on the cluster.
func (o SecurityProfileResponseOutput) DomainUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.DomainUsername }).(pulumi.StringPtrOutput)
}

// The LDAPS protocol URLs to communicate with the Active Directory.
func (o SecurityProfileResponseOutput) LdapsUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityProfileResponse) []string { return v.LdapsUrls }).(pulumi.StringArrayOutput)
}

// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
func (o SecurityProfileResponseOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.MsiResourceId }).(pulumi.StringPtrOutput)
}

// The organizational unit within the Active Directory to place the cluster and service accounts.
func (o SecurityProfileResponseOutput) OrganizationalUnitDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityProfileResponse) *string { return v.OrganizationalUnitDN }).(pulumi.StringPtrOutput)
}

type SecurityProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityProfileResponse)(nil)).Elem()
}

func (o SecurityProfileResponsePtrOutput) ToSecurityProfileResponsePtrOutput() SecurityProfileResponsePtrOutput {
	return o
}

func (o SecurityProfileResponsePtrOutput) ToSecurityProfileResponsePtrOutputWithContext(ctx context.Context) SecurityProfileResponsePtrOutput {
	return o
}

func (o SecurityProfileResponsePtrOutput) Elem() SecurityProfileResponseOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) SecurityProfileResponse {
		if v != nil {
			return *v
		}
		var ret SecurityProfileResponse
		return ret
	}).(SecurityProfileResponseOutput)
}

// The resource ID of the user's Azure Active Directory Domain Service.
func (o SecurityProfileResponsePtrOutput) AaddsResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AaddsResourceId
	}).(pulumi.StringPtrOutput)
}

// Optional. The Distinguished Names for cluster user groups
func (o SecurityProfileResponsePtrOutput) ClusterUsersGroupDNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.ClusterUsersGroupDNs
	}).(pulumi.StringArrayOutput)
}

// The directory type.
func (o SecurityProfileResponsePtrOutput) DirectoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DirectoryType
	}).(pulumi.StringPtrOutput)
}

// The organization's active directory domain.
func (o SecurityProfileResponsePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// The domain admin password.
func (o SecurityProfileResponsePtrOutput) DomainUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DomainUserPassword
	}).(pulumi.StringPtrOutput)
}

// The domain user account that will have admin privileges on the cluster.
func (o SecurityProfileResponsePtrOutput) DomainUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DomainUsername
	}).(pulumi.StringPtrOutput)
}

// The LDAPS protocol URLs to communicate with the Active Directory.
func (o SecurityProfileResponsePtrOutput) LdapsUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.LdapsUrls
	}).(pulumi.StringArrayOutput)
}

// User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
func (o SecurityProfileResponsePtrOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.MsiResourceId
	}).(pulumi.StringPtrOutput)
}

// The organizational unit within the Active Directory to place the cluster and service accounts.
func (o SecurityProfileResponsePtrOutput) OrganizationalUnitDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.OrganizationalUnitDN
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpec struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	DbConnectionAuthenticationMode *string `pulumi:"dbConnectionAuthenticationMode"`
	// The database name.
	DbName string `pulumi:"dbName"`
	// The secret name which contains the database user password.
	DbPasswordSecretName *string `pulumi:"dbPasswordSecretName"`
	// The database server host.
	DbServerHost string `pulumi:"dbServerHost"`
	// The database user name.
	DbUserName *string `pulumi:"dbUserName"`
	// The key vault resource id.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The thrift url.
	ThriftUrl *string `pulumi:"thriftUrl"`
}

// Defaults sets the appropriate defaults for SparkMetastoreSpec
func (val *SparkMetastoreSpec) Defaults() *SparkMetastoreSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DbConnectionAuthenticationMode == nil {
		dbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.DbConnectionAuthenticationMode = &dbConnectionAuthenticationMode_
	}
	return &tmp
}

// SparkMetastoreSpecInput is an input type that accepts SparkMetastoreSpecArgs and SparkMetastoreSpecOutput values.
// You can construct a concrete instance of `SparkMetastoreSpecInput` via:
//
//	SparkMetastoreSpecArgs{...}
type SparkMetastoreSpecInput interface {
	pulumi.Input

	ToSparkMetastoreSpecOutput() SparkMetastoreSpecOutput
	ToSparkMetastoreSpecOutputWithContext(context.Context) SparkMetastoreSpecOutput
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecArgs struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	DbConnectionAuthenticationMode pulumi.StringPtrInput `pulumi:"dbConnectionAuthenticationMode"`
	// The database name.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// The secret name which contains the database user password.
	DbPasswordSecretName pulumi.StringPtrInput `pulumi:"dbPasswordSecretName"`
	// The database server host.
	DbServerHost pulumi.StringInput `pulumi:"dbServerHost"`
	// The database user name.
	DbUserName pulumi.StringPtrInput `pulumi:"dbUserName"`
	// The key vault resource id.
	KeyVaultId pulumi.StringPtrInput `pulumi:"keyVaultId"`
	// The thrift url.
	ThriftUrl pulumi.StringPtrInput `pulumi:"thriftUrl"`
}

// Defaults sets the appropriate defaults for SparkMetastoreSpecArgs
func (val *SparkMetastoreSpecArgs) Defaults() *SparkMetastoreSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DbConnectionAuthenticationMode == nil {
		tmp.DbConnectionAuthenticationMode = pulumi.StringPtr("IdentityAuth")
	}
	return &tmp
}
func (SparkMetastoreSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkMetastoreSpec)(nil)).Elem()
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecOutput() SparkMetastoreSpecOutput {
	return i.ToSparkMetastoreSpecOutputWithContext(context.Background())
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecOutputWithContext(ctx context.Context) SparkMetastoreSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkMetastoreSpecOutput)
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return i.ToSparkMetastoreSpecPtrOutputWithContext(context.Background())
}

func (i SparkMetastoreSpecArgs) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkMetastoreSpecOutput).ToSparkMetastoreSpecPtrOutputWithContext(ctx)
}

// SparkMetastoreSpecPtrInput is an input type that accepts SparkMetastoreSpecArgs, SparkMetastoreSpecPtr and SparkMetastoreSpecPtrOutput values.
// You can construct a concrete instance of `SparkMetastoreSpecPtrInput` via:
//
//	        SparkMetastoreSpecArgs{...}
//
//	or:
//
//	        nil
type SparkMetastoreSpecPtrInput interface {
	pulumi.Input

	ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput
	ToSparkMetastoreSpecPtrOutputWithContext(context.Context) SparkMetastoreSpecPtrOutput
}

type sparkMetastoreSpecPtrType SparkMetastoreSpecArgs

func SparkMetastoreSpecPtr(v *SparkMetastoreSpecArgs) SparkMetastoreSpecPtrInput {
	return (*sparkMetastoreSpecPtrType)(v)
}

func (*sparkMetastoreSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkMetastoreSpec)(nil)).Elem()
}

func (i *sparkMetastoreSpecPtrType) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return i.ToSparkMetastoreSpecPtrOutputWithContext(context.Background())
}

func (i *sparkMetastoreSpecPtrType) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkMetastoreSpecPtrOutput)
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkMetastoreSpec)(nil)).Elem()
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecOutput() SparkMetastoreSpecOutput {
	return o
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecOutputWithContext(ctx context.Context) SparkMetastoreSpecOutput {
	return o
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return o.ToSparkMetastoreSpecPtrOutputWithContext(context.Background())
}

func (o SparkMetastoreSpecOutput) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkMetastoreSpec) *SparkMetastoreSpec {
		return &v
	}).(SparkMetastoreSpecPtrOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.DbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) string { return v.DbName }).(pulumi.StringOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.DbPasswordSecretName }).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecOutput) DbServerHost() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) string { return v.DbServerHost }).(pulumi.StringOutput)
}

// The database user name.
func (o SparkMetastoreSpecOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.DbUserName }).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpec) *string { return v.ThriftUrl }).(pulumi.StringPtrOutput)
}

type SparkMetastoreSpecPtrOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkMetastoreSpec)(nil)).Elem()
}

func (o SparkMetastoreSpecPtrOutput) ToSparkMetastoreSpecPtrOutput() SparkMetastoreSpecPtrOutput {
	return o
}

func (o SparkMetastoreSpecPtrOutput) ToSparkMetastoreSpecPtrOutputWithContext(ctx context.Context) SparkMetastoreSpecPtrOutput {
	return o
}

func (o SparkMetastoreSpecPtrOutput) Elem() SparkMetastoreSpecOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) SparkMetastoreSpec {
		if v != nil {
			return *v
		}
		var ret SparkMetastoreSpec
		return ret
	}).(SparkMetastoreSpecOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecPtrOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.DbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecPtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.DbName
	}).(pulumi.StringPtrOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecPtrOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecPtrOutput) DbServerHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return &v.DbServerHost
	}).(pulumi.StringPtrOutput)
}

// The database user name.
func (o SparkMetastoreSpecPtrOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.DbUserName
	}).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecPtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecPtrOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpec) *string {
		if v == nil {
			return nil
		}
		return v.ThriftUrl
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecResponse struct {
	// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
	DbConnectionAuthenticationMode *string `pulumi:"dbConnectionAuthenticationMode"`
	// The database name.
	DbName string `pulumi:"dbName"`
	// The secret name which contains the database user password.
	DbPasswordSecretName *string `pulumi:"dbPasswordSecretName"`
	// The database server host.
	DbServerHost string `pulumi:"dbServerHost"`
	// The database user name.
	DbUserName *string `pulumi:"dbUserName"`
	// The key vault resource id.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The thrift url.
	ThriftUrl *string `pulumi:"thriftUrl"`
}

// Defaults sets the appropriate defaults for SparkMetastoreSpecResponse
func (val *SparkMetastoreSpecResponse) Defaults() *SparkMetastoreSpecResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DbConnectionAuthenticationMode == nil {
		dbConnectionAuthenticationMode_ := "IdentityAuth"
		tmp.DbConnectionAuthenticationMode = &dbConnectionAuthenticationMode_
	}
	return &tmp
}

// The metastore specification for Spark cluster.
type SparkMetastoreSpecResponseOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkMetastoreSpecResponse)(nil)).Elem()
}

func (o SparkMetastoreSpecResponseOutput) ToSparkMetastoreSpecResponseOutput() SparkMetastoreSpecResponseOutput {
	return o
}

func (o SparkMetastoreSpecResponseOutput) ToSparkMetastoreSpecResponseOutputWithContext(ctx context.Context) SparkMetastoreSpecResponseOutput {
	return o
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecResponseOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.DbConnectionAuthenticationMode }).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecResponseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) string { return v.DbName }).(pulumi.StringOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecResponseOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.DbPasswordSecretName }).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecResponseOutput) DbServerHost() pulumi.StringOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) string { return v.DbServerHost }).(pulumi.StringOutput)
}

// The database user name.
func (o SparkMetastoreSpecResponseOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.DbUserName }).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecResponseOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecResponseOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkMetastoreSpecResponse) *string { return v.ThriftUrl }).(pulumi.StringPtrOutput)
}

type SparkMetastoreSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkMetastoreSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkMetastoreSpecResponse)(nil)).Elem()
}

func (o SparkMetastoreSpecResponsePtrOutput) ToSparkMetastoreSpecResponsePtrOutput() SparkMetastoreSpecResponsePtrOutput {
	return o
}

func (o SparkMetastoreSpecResponsePtrOutput) ToSparkMetastoreSpecResponsePtrOutputWithContext(ctx context.Context) SparkMetastoreSpecResponsePtrOutput {
	return o
}

func (o SparkMetastoreSpecResponsePtrOutput) Elem() SparkMetastoreSpecResponseOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) SparkMetastoreSpecResponse {
		if v != nil {
			return *v
		}
		var ret SparkMetastoreSpecResponse
		return ret
	}).(SparkMetastoreSpecResponseOutput)
}

// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
func (o SparkMetastoreSpecResponsePtrOutput) DbConnectionAuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbConnectionAuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The database name.
func (o SparkMetastoreSpecResponsePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DbName
	}).(pulumi.StringPtrOutput)
}

// The secret name which contains the database user password.
func (o SparkMetastoreSpecResponsePtrOutput) DbPasswordSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordSecretName
	}).(pulumi.StringPtrOutput)
}

// The database server host.
func (o SparkMetastoreSpecResponsePtrOutput) DbServerHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DbServerHost
	}).(pulumi.StringPtrOutput)
}

// The database user name.
func (o SparkMetastoreSpecResponsePtrOutput) DbUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUserName
	}).(pulumi.StringPtrOutput)
}

// The key vault resource id.
func (o SparkMetastoreSpecResponsePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The thrift url.
func (o SparkMetastoreSpecResponsePtrOutput) ThriftUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkMetastoreSpecResponse) *string {
		if v == nil {
			return nil
		}
		return v.ThriftUrl
	}).(pulumi.StringPtrOutput)
}

// The spark cluster profile.
type SparkProfile struct {
	// The default storage URL.
	DefaultStorageUrl *string `pulumi:"defaultStorageUrl"`
	// The metastore specification for Spark cluster.
	MetastoreSpec *SparkMetastoreSpec `pulumi:"metastoreSpec"`
	// Spark user plugins spec
	UserPluginsSpec *SparkUserPlugins `pulumi:"userPluginsSpec"`
}

// Defaults sets the appropriate defaults for SparkProfile
func (val *SparkProfile) Defaults() *SparkProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.MetastoreSpec = tmp.MetastoreSpec.Defaults()

	return &tmp
}

// SparkProfileInput is an input type that accepts SparkProfileArgs and SparkProfileOutput values.
// You can construct a concrete instance of `SparkProfileInput` via:
//
//	SparkProfileArgs{...}
type SparkProfileInput interface {
	pulumi.Input

	ToSparkProfileOutput() SparkProfileOutput
	ToSparkProfileOutputWithContext(context.Context) SparkProfileOutput
}

// The spark cluster profile.
type SparkProfileArgs struct {
	// The default storage URL.
	DefaultStorageUrl pulumi.StringPtrInput `pulumi:"defaultStorageUrl"`
	// The metastore specification for Spark cluster.
	MetastoreSpec SparkMetastoreSpecPtrInput `pulumi:"metastoreSpec"`
	// Spark user plugins spec
	UserPluginsSpec SparkUserPluginsPtrInput `pulumi:"userPluginsSpec"`
}

// Defaults sets the appropriate defaults for SparkProfileArgs
func (val *SparkProfileArgs) Defaults() *SparkProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (SparkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProfile)(nil)).Elem()
}

func (i SparkProfileArgs) ToSparkProfileOutput() SparkProfileOutput {
	return i.ToSparkProfileOutputWithContext(context.Background())
}

func (i SparkProfileArgs) ToSparkProfileOutputWithContext(ctx context.Context) SparkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkProfileOutput)
}

func (i SparkProfileArgs) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return i.ToSparkProfilePtrOutputWithContext(context.Background())
}

func (i SparkProfileArgs) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkProfileOutput).ToSparkProfilePtrOutputWithContext(ctx)
}

// SparkProfilePtrInput is an input type that accepts SparkProfileArgs, SparkProfilePtr and SparkProfilePtrOutput values.
// You can construct a concrete instance of `SparkProfilePtrInput` via:
//
//	        SparkProfileArgs{...}
//
//	or:
//
//	        nil
type SparkProfilePtrInput interface {
	pulumi.Input

	ToSparkProfilePtrOutput() SparkProfilePtrOutput
	ToSparkProfilePtrOutputWithContext(context.Context) SparkProfilePtrOutput
}

type sparkProfilePtrType SparkProfileArgs

func SparkProfilePtr(v *SparkProfileArgs) SparkProfilePtrInput {
	return (*sparkProfilePtrType)(v)
}

func (*sparkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProfile)(nil)).Elem()
}

func (i *sparkProfilePtrType) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return i.ToSparkProfilePtrOutputWithContext(context.Background())
}

func (i *sparkProfilePtrType) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkProfilePtrOutput)
}

// The spark cluster profile.
type SparkProfileOutput struct{ *pulumi.OutputState }

func (SparkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProfile)(nil)).Elem()
}

func (o SparkProfileOutput) ToSparkProfileOutput() SparkProfileOutput {
	return o
}

func (o SparkProfileOutput) ToSparkProfileOutputWithContext(ctx context.Context) SparkProfileOutput {
	return o
}

func (o SparkProfileOutput) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return o.ToSparkProfilePtrOutputWithContext(context.Background())
}

func (o SparkProfileOutput) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkProfile) *SparkProfile {
		return &v
	}).(SparkProfilePtrOutput)
}

// The default storage URL.
func (o SparkProfileOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkProfile) *string { return v.DefaultStorageUrl }).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfileOutput) MetastoreSpec() SparkMetastoreSpecPtrOutput {
	return o.ApplyT(func(v SparkProfile) *SparkMetastoreSpec { return v.MetastoreSpec }).(SparkMetastoreSpecPtrOutput)
}

// Spark user plugins spec
func (o SparkProfileOutput) UserPluginsSpec() SparkUserPluginsPtrOutput {
	return o.ApplyT(func(v SparkProfile) *SparkUserPlugins { return v.UserPluginsSpec }).(SparkUserPluginsPtrOutput)
}

type SparkProfilePtrOutput struct{ *pulumi.OutputState }

func (SparkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProfile)(nil)).Elem()
}

func (o SparkProfilePtrOutput) ToSparkProfilePtrOutput() SparkProfilePtrOutput {
	return o
}

func (o SparkProfilePtrOutput) ToSparkProfilePtrOutputWithContext(ctx context.Context) SparkProfilePtrOutput {
	return o
}

func (o SparkProfilePtrOutput) Elem() SparkProfileOutput {
	return o.ApplyT(func(v *SparkProfile) SparkProfile {
		if v != nil {
			return *v
		}
		var ret SparkProfile
		return ret
	}).(SparkProfileOutput)
}

// The default storage URL.
func (o SparkProfilePtrOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkProfile) *string {
		if v == nil {
			return nil
		}
		return v.DefaultStorageUrl
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfilePtrOutput) MetastoreSpec() SparkMetastoreSpecPtrOutput {
	return o.ApplyT(func(v *SparkProfile) *SparkMetastoreSpec {
		if v == nil {
			return nil
		}
		return v.MetastoreSpec
	}).(SparkMetastoreSpecPtrOutput)
}

// Spark user plugins spec
func (o SparkProfilePtrOutput) UserPluginsSpec() SparkUserPluginsPtrOutput {
	return o.ApplyT(func(v *SparkProfile) *SparkUserPlugins {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(SparkUserPluginsPtrOutput)
}

// The spark cluster profile.
type SparkProfileResponse struct {
	// The default storage URL.
	DefaultStorageUrl *string `pulumi:"defaultStorageUrl"`
	// The metastore specification for Spark cluster.
	MetastoreSpec *SparkMetastoreSpecResponse `pulumi:"metastoreSpec"`
	// Spark user plugins spec
	UserPluginsSpec *SparkUserPluginsResponse `pulumi:"userPluginsSpec"`
}

// Defaults sets the appropriate defaults for SparkProfileResponse
func (val *SparkProfileResponse) Defaults() *SparkProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.MetastoreSpec = tmp.MetastoreSpec.Defaults()

	return &tmp
}

// The spark cluster profile.
type SparkProfileResponseOutput struct{ *pulumi.OutputState }

func (SparkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProfileResponse)(nil)).Elem()
}

func (o SparkProfileResponseOutput) ToSparkProfileResponseOutput() SparkProfileResponseOutput {
	return o
}

func (o SparkProfileResponseOutput) ToSparkProfileResponseOutputWithContext(ctx context.Context) SparkProfileResponseOutput {
	return o
}

// The default storage URL.
func (o SparkProfileResponseOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkProfileResponse) *string { return v.DefaultStorageUrl }).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfileResponseOutput) MetastoreSpec() SparkMetastoreSpecResponsePtrOutput {
	return o.ApplyT(func(v SparkProfileResponse) *SparkMetastoreSpecResponse { return v.MetastoreSpec }).(SparkMetastoreSpecResponsePtrOutput)
}

// Spark user plugins spec
func (o SparkProfileResponseOutput) UserPluginsSpec() SparkUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v SparkProfileResponse) *SparkUserPluginsResponse { return v.UserPluginsSpec }).(SparkUserPluginsResponsePtrOutput)
}

type SparkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProfileResponse)(nil)).Elem()
}

func (o SparkProfileResponsePtrOutput) ToSparkProfileResponsePtrOutput() SparkProfileResponsePtrOutput {
	return o
}

func (o SparkProfileResponsePtrOutput) ToSparkProfileResponsePtrOutputWithContext(ctx context.Context) SparkProfileResponsePtrOutput {
	return o
}

func (o SparkProfileResponsePtrOutput) Elem() SparkProfileResponseOutput {
	return o.ApplyT(func(v *SparkProfileResponse) SparkProfileResponse {
		if v != nil {
			return *v
		}
		var ret SparkProfileResponse
		return ret
	}).(SparkProfileResponseOutput)
}

// The default storage URL.
func (o SparkProfileResponsePtrOutput) DefaultStorageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultStorageUrl
	}).(pulumi.StringPtrOutput)
}

// The metastore specification for Spark cluster.
func (o SparkProfileResponsePtrOutput) MetastoreSpec() SparkMetastoreSpecResponsePtrOutput {
	return o.ApplyT(func(v *SparkProfileResponse) *SparkMetastoreSpecResponse {
		if v == nil {
			return nil
		}
		return v.MetastoreSpec
	}).(SparkMetastoreSpecResponsePtrOutput)
}

// Spark user plugins spec
func (o SparkProfileResponsePtrOutput) UserPluginsSpec() SparkUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v *SparkProfileResponse) *SparkUserPluginsResponse {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(SparkUserPluginsResponsePtrOutput)
}

// Spark user plugin.
type SparkUserPlugin struct {
	// Fully qualified path to the folder containing the plugins.
	Path string `pulumi:"path"`
}

// SparkUserPluginInput is an input type that accepts SparkUserPluginArgs and SparkUserPluginOutput values.
// You can construct a concrete instance of `SparkUserPluginInput` via:
//
//	SparkUserPluginArgs{...}
type SparkUserPluginInput interface {
	pulumi.Input

	ToSparkUserPluginOutput() SparkUserPluginOutput
	ToSparkUserPluginOutputWithContext(context.Context) SparkUserPluginOutput
}

// Spark user plugin.
type SparkUserPluginArgs struct {
	// Fully qualified path to the folder containing the plugins.
	Path pulumi.StringInput `pulumi:"path"`
}

func (SparkUserPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugin)(nil)).Elem()
}

func (i SparkUserPluginArgs) ToSparkUserPluginOutput() SparkUserPluginOutput {
	return i.ToSparkUserPluginOutputWithContext(context.Background())
}

func (i SparkUserPluginArgs) ToSparkUserPluginOutputWithContext(ctx context.Context) SparkUserPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginOutput)
}

// SparkUserPluginArrayInput is an input type that accepts SparkUserPluginArray and SparkUserPluginArrayOutput values.
// You can construct a concrete instance of `SparkUserPluginArrayInput` via:
//
//	SparkUserPluginArray{ SparkUserPluginArgs{...} }
type SparkUserPluginArrayInput interface {
	pulumi.Input

	ToSparkUserPluginArrayOutput() SparkUserPluginArrayOutput
	ToSparkUserPluginArrayOutputWithContext(context.Context) SparkUserPluginArrayOutput
}

type SparkUserPluginArray []SparkUserPluginInput

func (SparkUserPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkUserPlugin)(nil)).Elem()
}

func (i SparkUserPluginArray) ToSparkUserPluginArrayOutput() SparkUserPluginArrayOutput {
	return i.ToSparkUserPluginArrayOutputWithContext(context.Background())
}

func (i SparkUserPluginArray) ToSparkUserPluginArrayOutputWithContext(ctx context.Context) SparkUserPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginArrayOutput)
}

// Spark user plugin.
type SparkUserPluginOutput struct{ *pulumi.OutputState }

func (SparkUserPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugin)(nil)).Elem()
}

func (o SparkUserPluginOutput) ToSparkUserPluginOutput() SparkUserPluginOutput {
	return o
}

func (o SparkUserPluginOutput) ToSparkUserPluginOutputWithContext(ctx context.Context) SparkUserPluginOutput {
	return o
}

// Fully qualified path to the folder containing the plugins.
func (o SparkUserPluginOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v SparkUserPlugin) string { return v.Path }).(pulumi.StringOutput)
}

type SparkUserPluginArrayOutput struct{ *pulumi.OutputState }

func (SparkUserPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkUserPlugin)(nil)).Elem()
}

func (o SparkUserPluginArrayOutput) ToSparkUserPluginArrayOutput() SparkUserPluginArrayOutput {
	return o
}

func (o SparkUserPluginArrayOutput) ToSparkUserPluginArrayOutputWithContext(ctx context.Context) SparkUserPluginArrayOutput {
	return o
}

func (o SparkUserPluginArrayOutput) Index(i pulumi.IntInput) SparkUserPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkUserPlugin {
		return vs[0].([]SparkUserPlugin)[vs[1].(int)]
	}).(SparkUserPluginOutput)
}

// Spark user plugin.
type SparkUserPluginResponse struct {
	// Fully qualified path to the folder containing the plugins.
	Path string `pulumi:"path"`
}

// Spark user plugin.
type SparkUserPluginResponseOutput struct{ *pulumi.OutputState }

func (SparkUserPluginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPluginResponse)(nil)).Elem()
}

func (o SparkUserPluginResponseOutput) ToSparkUserPluginResponseOutput() SparkUserPluginResponseOutput {
	return o
}

func (o SparkUserPluginResponseOutput) ToSparkUserPluginResponseOutputWithContext(ctx context.Context) SparkUserPluginResponseOutput {
	return o
}

// Fully qualified path to the folder containing the plugins.
func (o SparkUserPluginResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v SparkUserPluginResponse) string { return v.Path }).(pulumi.StringOutput)
}

type SparkUserPluginResponseArrayOutput struct{ *pulumi.OutputState }

func (SparkUserPluginResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkUserPluginResponse)(nil)).Elem()
}

func (o SparkUserPluginResponseArrayOutput) ToSparkUserPluginResponseArrayOutput() SparkUserPluginResponseArrayOutput {
	return o
}

func (o SparkUserPluginResponseArrayOutput) ToSparkUserPluginResponseArrayOutputWithContext(ctx context.Context) SparkUserPluginResponseArrayOutput {
	return o
}

func (o SparkUserPluginResponseArrayOutput) Index(i pulumi.IntInput) SparkUserPluginResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkUserPluginResponse {
		return vs[0].([]SparkUserPluginResponse)[vs[1].(int)]
	}).(SparkUserPluginResponseOutput)
}

// Spark user plugins spec
type SparkUserPlugins struct {
	// Spark user plugins.
	Plugins []SparkUserPlugin `pulumi:"plugins"`
}

// SparkUserPluginsInput is an input type that accepts SparkUserPluginsArgs and SparkUserPluginsOutput values.
// You can construct a concrete instance of `SparkUserPluginsInput` via:
//
//	SparkUserPluginsArgs{...}
type SparkUserPluginsInput interface {
	pulumi.Input

	ToSparkUserPluginsOutput() SparkUserPluginsOutput
	ToSparkUserPluginsOutputWithContext(context.Context) SparkUserPluginsOutput
}

// Spark user plugins spec
type SparkUserPluginsArgs struct {
	// Spark user plugins.
	Plugins SparkUserPluginArrayInput `pulumi:"plugins"`
}

func (SparkUserPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugins)(nil)).Elem()
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsOutput() SparkUserPluginsOutput {
	return i.ToSparkUserPluginsOutputWithContext(context.Background())
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsOutputWithContext(ctx context.Context) SparkUserPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginsOutput)
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return i.ToSparkUserPluginsPtrOutputWithContext(context.Background())
}

func (i SparkUserPluginsArgs) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginsOutput).ToSparkUserPluginsPtrOutputWithContext(ctx)
}

// SparkUserPluginsPtrInput is an input type that accepts SparkUserPluginsArgs, SparkUserPluginsPtr and SparkUserPluginsPtrOutput values.
// You can construct a concrete instance of `SparkUserPluginsPtrInput` via:
//
//	        SparkUserPluginsArgs{...}
//
//	or:
//
//	        nil
type SparkUserPluginsPtrInput interface {
	pulumi.Input

	ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput
	ToSparkUserPluginsPtrOutputWithContext(context.Context) SparkUserPluginsPtrOutput
}

type sparkUserPluginsPtrType SparkUserPluginsArgs

func SparkUserPluginsPtr(v *SparkUserPluginsArgs) SparkUserPluginsPtrInput {
	return (*sparkUserPluginsPtrType)(v)
}

func (*sparkUserPluginsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkUserPlugins)(nil)).Elem()
}

func (i *sparkUserPluginsPtrType) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return i.ToSparkUserPluginsPtrOutputWithContext(context.Background())
}

func (i *sparkUserPluginsPtrType) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkUserPluginsPtrOutput)
}

// Spark user plugins spec
type SparkUserPluginsOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPlugins)(nil)).Elem()
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsOutput() SparkUserPluginsOutput {
	return o
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsOutputWithContext(ctx context.Context) SparkUserPluginsOutput {
	return o
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return o.ToSparkUserPluginsPtrOutputWithContext(context.Background())
}

func (o SparkUserPluginsOutput) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkUserPlugins) *SparkUserPlugins {
		return &v
	}).(SparkUserPluginsPtrOutput)
}

// Spark user plugins.
func (o SparkUserPluginsOutput) Plugins() SparkUserPluginArrayOutput {
	return o.ApplyT(func(v SparkUserPlugins) []SparkUserPlugin { return v.Plugins }).(SparkUserPluginArrayOutput)
}

type SparkUserPluginsPtrOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkUserPlugins)(nil)).Elem()
}

func (o SparkUserPluginsPtrOutput) ToSparkUserPluginsPtrOutput() SparkUserPluginsPtrOutput {
	return o
}

func (o SparkUserPluginsPtrOutput) ToSparkUserPluginsPtrOutputWithContext(ctx context.Context) SparkUserPluginsPtrOutput {
	return o
}

func (o SparkUserPluginsPtrOutput) Elem() SparkUserPluginsOutput {
	return o.ApplyT(func(v *SparkUserPlugins) SparkUserPlugins {
		if v != nil {
			return *v
		}
		var ret SparkUserPlugins
		return ret
	}).(SparkUserPluginsOutput)
}

// Spark user plugins.
func (o SparkUserPluginsPtrOutput) Plugins() SparkUserPluginArrayOutput {
	return o.ApplyT(func(v *SparkUserPlugins) []SparkUserPlugin {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(SparkUserPluginArrayOutput)
}

// Spark user plugins spec
type SparkUserPluginsResponse struct {
	// Spark user plugins.
	Plugins []SparkUserPluginResponse `pulumi:"plugins"`
}

// Spark user plugins spec
type SparkUserPluginsResponseOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkUserPluginsResponse)(nil)).Elem()
}

func (o SparkUserPluginsResponseOutput) ToSparkUserPluginsResponseOutput() SparkUserPluginsResponseOutput {
	return o
}

func (o SparkUserPluginsResponseOutput) ToSparkUserPluginsResponseOutputWithContext(ctx context.Context) SparkUserPluginsResponseOutput {
	return o
}

// Spark user plugins.
func (o SparkUserPluginsResponseOutput) Plugins() SparkUserPluginResponseArrayOutput {
	return o.ApplyT(func(v SparkUserPluginsResponse) []SparkUserPluginResponse { return v.Plugins }).(SparkUserPluginResponseArrayOutput)
}

type SparkUserPluginsResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkUserPluginsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkUserPluginsResponse)(nil)).Elem()
}

func (o SparkUserPluginsResponsePtrOutput) ToSparkUserPluginsResponsePtrOutput() SparkUserPluginsResponsePtrOutput {
	return o
}

func (o SparkUserPluginsResponsePtrOutput) ToSparkUserPluginsResponsePtrOutputWithContext(ctx context.Context) SparkUserPluginsResponsePtrOutput {
	return o
}

func (o SparkUserPluginsResponsePtrOutput) Elem() SparkUserPluginsResponseOutput {
	return o.ApplyT(func(v *SparkUserPluginsResponse) SparkUserPluginsResponse {
		if v != nil {
			return *v
		}
		var ret SparkUserPluginsResponse
		return ret
	}).(SparkUserPluginsResponseOutput)
}

// Spark user plugins.
func (o SparkUserPluginsResponsePtrOutput) Plugins() SparkUserPluginResponseArrayOutput {
	return o.ApplyT(func(v *SparkUserPluginsResponse) []SparkUserPluginResponse {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(SparkUserPluginResponseArrayOutput)
}

// SSH connectivity endpoint details.
type SshConnectivityEndpointResponse struct {
	// SSH connectivity endpoint.
	Endpoint string `pulumi:"endpoint"`
	// Private SSH connectivity endpoint. This property will only be returned when enableInternalIngress is true.
	PrivateSshEndpoint *string `pulumi:"privateSshEndpoint"`
}

// SSH connectivity endpoint details.
type SshConnectivityEndpointResponseOutput struct{ *pulumi.OutputState }

func (SshConnectivityEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConnectivityEndpointResponse)(nil)).Elem()
}

func (o SshConnectivityEndpointResponseOutput) ToSshConnectivityEndpointResponseOutput() SshConnectivityEndpointResponseOutput {
	return o
}

func (o SshConnectivityEndpointResponseOutput) ToSshConnectivityEndpointResponseOutputWithContext(ctx context.Context) SshConnectivityEndpointResponseOutput {
	return o
}

// SSH connectivity endpoint.
func (o SshConnectivityEndpointResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SshConnectivityEndpointResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Private SSH connectivity endpoint. This property will only be returned when enableInternalIngress is true.
func (o SshConnectivityEndpointResponseOutput) PrivateSshEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshConnectivityEndpointResponse) *string { return v.PrivateSshEndpoint }).(pulumi.StringPtrOutput)
}

type SshConnectivityEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (SshConnectivityEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshConnectivityEndpointResponse)(nil)).Elem()
}

func (o SshConnectivityEndpointResponseArrayOutput) ToSshConnectivityEndpointResponseArrayOutput() SshConnectivityEndpointResponseArrayOutput {
	return o
}

func (o SshConnectivityEndpointResponseArrayOutput) ToSshConnectivityEndpointResponseArrayOutputWithContext(ctx context.Context) SshConnectivityEndpointResponseArrayOutput {
	return o
}

func (o SshConnectivityEndpointResponseArrayOutput) Index(i pulumi.IntInput) SshConnectivityEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshConnectivityEndpointResponse {
		return vs[0].([]SshConnectivityEndpointResponse)[vs[1].(int)]
	}).(SshConnectivityEndpointResponseOutput)
}

// The list of SSH public keys.
type SshProfile struct {
	// The list of SSH public keys.
	PublicKeys []SshPublicKey `pulumi:"publicKeys"`
}

// SshProfileInput is an input type that accepts SshProfileArgs and SshProfileOutput values.
// You can construct a concrete instance of `SshProfileInput` via:
//
//	SshProfileArgs{...}
type SshProfileInput interface {
	pulumi.Input

	ToSshProfileOutput() SshProfileOutput
	ToSshProfileOutputWithContext(context.Context) SshProfileOutput
}

// The list of SSH public keys.
type SshProfileArgs struct {
	// The list of SSH public keys.
	PublicKeys SshPublicKeyArrayInput `pulumi:"publicKeys"`
}

func (SshProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshProfile)(nil)).Elem()
}

func (i SshProfileArgs) ToSshProfileOutput() SshProfileOutput {
	return i.ToSshProfileOutputWithContext(context.Background())
}

func (i SshProfileArgs) ToSshProfileOutputWithContext(ctx context.Context) SshProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshProfileOutput)
}

func (i SshProfileArgs) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return i.ToSshProfilePtrOutputWithContext(context.Background())
}

func (i SshProfileArgs) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshProfileOutput).ToSshProfilePtrOutputWithContext(ctx)
}

// SshProfilePtrInput is an input type that accepts SshProfileArgs, SshProfilePtr and SshProfilePtrOutput values.
// You can construct a concrete instance of `SshProfilePtrInput` via:
//
//	        SshProfileArgs{...}
//
//	or:
//
//	        nil
type SshProfilePtrInput interface {
	pulumi.Input

	ToSshProfilePtrOutput() SshProfilePtrOutput
	ToSshProfilePtrOutputWithContext(context.Context) SshProfilePtrOutput
}

type sshProfilePtrType SshProfileArgs

func SshProfilePtr(v *SshProfileArgs) SshProfilePtrInput {
	return (*sshProfilePtrType)(v)
}

func (*sshProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshProfile)(nil)).Elem()
}

func (i *sshProfilePtrType) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return i.ToSshProfilePtrOutputWithContext(context.Background())
}

func (i *sshProfilePtrType) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshProfilePtrOutput)
}

// The list of SSH public keys.
type SshProfileOutput struct{ *pulumi.OutputState }

func (SshProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshProfile)(nil)).Elem()
}

func (o SshProfileOutput) ToSshProfileOutput() SshProfileOutput {
	return o
}

func (o SshProfileOutput) ToSshProfileOutputWithContext(ctx context.Context) SshProfileOutput {
	return o
}

func (o SshProfileOutput) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return o.ToSshProfilePtrOutputWithContext(context.Background())
}

func (o SshProfileOutput) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshProfile) *SshProfile {
		return &v
	}).(SshProfilePtrOutput)
}

// The list of SSH public keys.
func (o SshProfileOutput) PublicKeys() SshPublicKeyArrayOutput {
	return o.ApplyT(func(v SshProfile) []SshPublicKey { return v.PublicKeys }).(SshPublicKeyArrayOutput)
}

type SshProfilePtrOutput struct{ *pulumi.OutputState }

func (SshProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshProfile)(nil)).Elem()
}

func (o SshProfilePtrOutput) ToSshProfilePtrOutput() SshProfilePtrOutput {
	return o
}

func (o SshProfilePtrOutput) ToSshProfilePtrOutputWithContext(ctx context.Context) SshProfilePtrOutput {
	return o
}

func (o SshProfilePtrOutput) Elem() SshProfileOutput {
	return o.ApplyT(func(v *SshProfile) SshProfile {
		if v != nil {
			return *v
		}
		var ret SshProfile
		return ret
	}).(SshProfileOutput)
}

// The list of SSH public keys.
func (o SshProfilePtrOutput) PublicKeys() SshPublicKeyArrayOutput {
	return o.ApplyT(func(v *SshProfile) []SshPublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyArrayOutput)
}

// The list of SSH public keys.
type SshProfileResponse struct {
	// The list of SSH public keys.
	PublicKeys []SshPublicKeyResponse `pulumi:"publicKeys"`
}

// The list of SSH public keys.
type SshProfileResponseOutput struct{ *pulumi.OutputState }

func (SshProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshProfileResponse)(nil)).Elem()
}

func (o SshProfileResponseOutput) ToSshProfileResponseOutput() SshProfileResponseOutput {
	return o
}

func (o SshProfileResponseOutput) ToSshProfileResponseOutputWithContext(ctx context.Context) SshProfileResponseOutput {
	return o
}

// The list of SSH public keys.
func (o SshProfileResponseOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v SshProfileResponse) []SshPublicKeyResponse { return v.PublicKeys }).(SshPublicKeyResponseArrayOutput)
}

type SshProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SshProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshProfileResponse)(nil)).Elem()
}

func (o SshProfileResponsePtrOutput) ToSshProfileResponsePtrOutput() SshProfileResponsePtrOutput {
	return o
}

func (o SshProfileResponsePtrOutput) ToSshProfileResponsePtrOutputWithContext(ctx context.Context) SshProfileResponsePtrOutput {
	return o
}

func (o SshProfileResponsePtrOutput) Elem() SshProfileResponseOutput {
	return o.ApplyT(func(v *SshProfileResponse) SshProfileResponse {
		if v != nil {
			return *v
		}
		var ret SshProfileResponse
		return ret
	}).(SshProfileResponseOutput)
}

// The list of SSH public keys.
func (o SshProfileResponsePtrOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v *SshProfileResponse) []SshPublicKeyResponse {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyResponseArrayOutput)
}

// The SSH public key for the cluster nodes.
type SshPublicKey struct {
	// The certificate for SSH.
	CertificateData *string `pulumi:"certificateData"`
}

// SshPublicKeyInput is an input type that accepts SshPublicKeyArgs and SshPublicKeyOutput values.
// You can construct a concrete instance of `SshPublicKeyInput` via:
//
//	SshPublicKeyArgs{...}
type SshPublicKeyInput interface {
	pulumi.Input

	ToSshPublicKeyOutput() SshPublicKeyOutput
	ToSshPublicKeyOutputWithContext(context.Context) SshPublicKeyOutput
}

// The SSH public key for the cluster nodes.
type SshPublicKeyArgs struct {
	// The certificate for SSH.
	CertificateData pulumi.StringPtrInput `pulumi:"certificateData"`
}

func (SshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return i.ToSshPublicKeyOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput)
}

// SshPublicKeyArrayInput is an input type that accepts SshPublicKeyArray and SshPublicKeyArrayOutput values.
// You can construct a concrete instance of `SshPublicKeyArrayInput` via:
//
//	SshPublicKeyArray{ SshPublicKeyArgs{...} }
type SshPublicKeyArrayInput interface {
	pulumi.Input

	ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput
	ToSshPublicKeyArrayOutputWithContext(context.Context) SshPublicKeyArrayOutput
}

type SshPublicKeyArray []SshPublicKeyInput

func (SshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArray) ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput {
	return i.ToSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i SshPublicKeyArray) ToSshPublicKeyArrayOutputWithContext(ctx context.Context) SshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyArrayOutput)
}

// The SSH public key for the cluster nodes.
type SshPublicKeyOutput struct{ *pulumi.OutputState }

func (SshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return o
}

// The certificate for SSH.
func (o SshPublicKeyOutput) CertificateData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *string { return v.CertificateData }).(pulumi.StringPtrOutput)
}

type SshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyArrayOutput) ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput {
	return o
}

func (o SshPublicKeyArrayOutput) ToSshPublicKeyArrayOutputWithContext(ctx context.Context) SshPublicKeyArrayOutput {
	return o
}

func (o SshPublicKeyArrayOutput) Index(i pulumi.IntInput) SshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKey {
		return vs[0].([]SshPublicKey)[vs[1].(int)]
	}).(SshPublicKeyOutput)
}

// The SSH public key for the cluster nodes.
type SshPublicKeyResponse struct {
	// The certificate for SSH.
	CertificateData *string `pulumi:"certificateData"`
}

// The SSH public key for the cluster nodes.
type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

// The certificate for SSH.
func (o SshPublicKeyResponseOutput) CertificateData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) *string { return v.CertificateData }).(pulumi.StringPtrOutput)
}

type SshPublicKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutput() SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutputWithContext(ctx context.Context) SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) Index(i pulumi.IntInput) SshPublicKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKeyResponse {
		return vs[0].([]SshPublicKeyResponse)[vs[1].(int)]
	}).(SshPublicKeyResponseOutput)
}

// The storage Account.
type StorageAccount struct {
	// The container in the storage account, only to be specified for WASB storage accounts.
	Container *string `pulumi:"container"`
	// Enable secure channel or not, it's an optional field. Default value is false when cluster version < 5.1 and true when cluster version >= 5.1 ,
	EnableSecureChannel *bool `pulumi:"enableSecureChannel"`
	// The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
	FileSystem *string `pulumi:"fileSystem"`
	// The file share name.
	Fileshare *string `pulumi:"fileshare"`
	// Whether or not the storage account is the default storage account.
	IsDefault *bool `pulumi:"isDefault"`
	// The storage account access key.
	Key *string `pulumi:"key"`
	// The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
	MsiResourceId *string `pulumi:"msiResourceId"`
	// The name of the storage account.
	Name *string `pulumi:"name"`
	// The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
	ResourceId *string `pulumi:"resourceId"`
	// The shared access signature key.
	Saskey *string `pulumi:"saskey"`
}

// StorageAccountInput is an input type that accepts StorageAccountArgs and StorageAccountOutput values.
// You can construct a concrete instance of `StorageAccountInput` via:
//
//	StorageAccountArgs{...}
type StorageAccountInput interface {
	pulumi.Input

	ToStorageAccountOutput() StorageAccountOutput
	ToStorageAccountOutputWithContext(context.Context) StorageAccountOutput
}

// The storage Account.
type StorageAccountArgs struct {
	// The container in the storage account, only to be specified for WASB storage accounts.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// Enable secure channel or not, it's an optional field. Default value is false when cluster version < 5.1 and true when cluster version >= 5.1 ,
	EnableSecureChannel pulumi.BoolPtrInput `pulumi:"enableSecureChannel"`
	// The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
	FileSystem pulumi.StringPtrInput `pulumi:"fileSystem"`
	// The file share name.
	Fileshare pulumi.StringPtrInput `pulumi:"fileshare"`
	// Whether or not the storage account is the default storage account.
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// The storage account access key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
	MsiResourceId pulumi.StringPtrInput `pulumi:"msiResourceId"`
	// The name of the storage account.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The shared access signature key.
	Saskey pulumi.StringPtrInput `pulumi:"saskey"`
}

func (StorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (i StorageAccountArgs) ToStorageAccountOutput() StorageAccountOutput {
	return i.ToStorageAccountOutputWithContext(context.Background())
}

func (i StorageAccountArgs) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountOutput)
}

// StorageAccountArrayInput is an input type that accepts StorageAccountArray and StorageAccountArrayOutput values.
// You can construct a concrete instance of `StorageAccountArrayInput` via:
//
//	StorageAccountArray{ StorageAccountArgs{...} }
type StorageAccountArrayInput interface {
	pulumi.Input

	ToStorageAccountArrayOutput() StorageAccountArrayOutput
	ToStorageAccountArrayOutputWithContext(context.Context) StorageAccountArrayOutput
}

type StorageAccountArray []StorageAccountInput

func (StorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (i StorageAccountArray) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return i.ToStorageAccountArrayOutputWithContext(context.Background())
}

func (i StorageAccountArray) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountArrayOutput)
}

// The storage Account.
type StorageAccountOutput struct{ *pulumi.OutputState }

func (StorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (o StorageAccountOutput) ToStorageAccountOutput() StorageAccountOutput {
	return o
}

func (o StorageAccountOutput) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return o
}

// The container in the storage account, only to be specified for WASB storage accounts.
func (o StorageAccountOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// Enable secure channel or not, it's an optional field. Default value is false when cluster version < 5.1 and true when cluster version >= 5.1 ,
func (o StorageAccountOutput) EnableSecureChannel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageAccount) *bool { return v.EnableSecureChannel }).(pulumi.BoolPtrOutput)
}

// The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
func (o StorageAccountOutput) FileSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.FileSystem }).(pulumi.StringPtrOutput)
}

// The file share name.
func (o StorageAccountOutput) Fileshare() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Fileshare }).(pulumi.StringPtrOutput)
}

// Whether or not the storage account is the default storage account.
func (o StorageAccountOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageAccount) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The storage account access key.
func (o StorageAccountOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
func (o StorageAccountOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.MsiResourceId }).(pulumi.StringPtrOutput)
}

// The name of the storage account.
func (o StorageAccountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
func (o StorageAccountOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The shared access signature key.
func (o StorageAccountOutput) Saskey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.Saskey }).(pulumi.StringPtrOutput)
}

type StorageAccountArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) Index(i pulumi.IntInput) StorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccount {
		return vs[0].([]StorageAccount)[vs[1].(int)]
	}).(StorageAccountOutput)
}

// The storage Account.
type StorageAccountResponse struct {
	// The container in the storage account, only to be specified for WASB storage accounts.
	Container *string `pulumi:"container"`
	// Enable secure channel or not, it's an optional field. Default value is false when cluster version < 5.1 and true when cluster version >= 5.1 ,
	EnableSecureChannel *bool `pulumi:"enableSecureChannel"`
	// The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
	FileSystem *string `pulumi:"fileSystem"`
	// The file share name.
	Fileshare *string `pulumi:"fileshare"`
	// Whether or not the storage account is the default storage account.
	IsDefault *bool `pulumi:"isDefault"`
	// The storage account access key.
	Key *string `pulumi:"key"`
	// The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
	MsiResourceId *string `pulumi:"msiResourceId"`
	// The name of the storage account.
	Name *string `pulumi:"name"`
	// The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
	ResourceId *string `pulumi:"resourceId"`
	// The shared access signature key.
	Saskey *string `pulumi:"saskey"`
}

// The storage Account.
type StorageAccountResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return o
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return o
}

// The container in the storage account, only to be specified for WASB storage accounts.
func (o StorageAccountResponseOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// Enable secure channel or not, it's an optional field. Default value is false when cluster version < 5.1 and true when cluster version >= 5.1 ,
func (o StorageAccountResponseOutput) EnableSecureChannel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *bool { return v.EnableSecureChannel }).(pulumi.BoolPtrOutput)
}

// The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
func (o StorageAccountResponseOutput) FileSystem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.FileSystem }).(pulumi.StringPtrOutput)
}

// The file share name.
func (o StorageAccountResponseOutput) Fileshare() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Fileshare }).(pulumi.StringPtrOutput)
}

// Whether or not the storage account is the default storage account.
func (o StorageAccountResponseOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The storage account access key.
func (o StorageAccountResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
func (o StorageAccountResponseOutput) MsiResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.MsiResourceId }).(pulumi.StringPtrOutput)
}

// The name of the storage account.
func (o StorageAccountResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
func (o StorageAccountResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The shared access signature key.
func (o StorageAccountResponseOutput) Saskey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.Saskey }).(pulumi.StringPtrOutput)
}

type StorageAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountResponse {
		return vs[0].([]StorageAccountResponse)[vs[1].(int)]
	}).(StorageAccountResponseOutput)
}

// The storage profile.
type StorageProfile struct {
	// The list of storage accounts in the cluster.
	Storageaccounts []StorageAccount `pulumi:"storageaccounts"`
}

// StorageProfileInput is an input type that accepts StorageProfileArgs and StorageProfileOutput values.
// You can construct a concrete instance of `StorageProfileInput` via:
//
//	StorageProfileArgs{...}
type StorageProfileInput interface {
	pulumi.Input

	ToStorageProfileOutput() StorageProfileOutput
	ToStorageProfileOutputWithContext(context.Context) StorageProfileOutput
}

// The storage profile.
type StorageProfileArgs struct {
	// The list of storage accounts in the cluster.
	Storageaccounts StorageAccountArrayInput `pulumi:"storageaccounts"`
}

func (StorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (i StorageProfileArgs) ToStorageProfileOutput() StorageProfileOutput {
	return i.ToStorageProfileOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput)
}

func (i StorageProfileArgs) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput).ToStorageProfilePtrOutputWithContext(ctx)
}

// StorageProfilePtrInput is an input type that accepts StorageProfileArgs, StorageProfilePtr and StorageProfilePtrOutput values.
// You can construct a concrete instance of `StorageProfilePtrInput` via:
//
//	        StorageProfileArgs{...}
//
//	or:
//
//	        nil
type StorageProfilePtrInput interface {
	pulumi.Input

	ToStorageProfilePtrOutput() StorageProfilePtrOutput
	ToStorageProfilePtrOutputWithContext(context.Context) StorageProfilePtrOutput
}

type storageProfilePtrType StorageProfileArgs

func StorageProfilePtr(v *StorageProfileArgs) StorageProfilePtrInput {
	return (*storageProfilePtrType)(v)
}

func (*storageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return i.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (i *storageProfilePtrType) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfilePtrOutput)
}

// The storage profile.
type StorageProfileOutput struct{ *pulumi.OutputState }

func (StorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (o StorageProfileOutput) ToStorageProfileOutput() StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return o.ToStorageProfilePtrOutputWithContext(context.Background())
}

func (o StorageProfileOutput) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageProfile) *StorageProfile {
		return &v
	}).(StorageProfilePtrOutput)
}

// The list of storage accounts in the cluster.
func (o StorageProfileOutput) Storageaccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v StorageProfile) []StorageAccount { return v.Storageaccounts }).(StorageAccountArrayOutput)
}

type StorageProfilePtrOutput struct{ *pulumi.OutputState }

func (StorageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfile)(nil)).Elem()
}

func (o StorageProfilePtrOutput) ToStorageProfilePtrOutput() StorageProfilePtrOutput {
	return o
}

func (o StorageProfilePtrOutput) ToStorageProfilePtrOutputWithContext(ctx context.Context) StorageProfilePtrOutput {
	return o
}

func (o StorageProfilePtrOutput) Elem() StorageProfileOutput {
	return o.ApplyT(func(v *StorageProfile) StorageProfile {
		if v != nil {
			return *v
		}
		var ret StorageProfile
		return ret
	}).(StorageProfileOutput)
}

// The list of storage accounts in the cluster.
func (o StorageProfilePtrOutput) Storageaccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v *StorageProfile) []StorageAccount {
		if v == nil {
			return nil
		}
		return v.Storageaccounts
	}).(StorageAccountArrayOutput)
}

// The storage profile.
type StorageProfileResponse struct {
	// The list of storage accounts in the cluster.
	Storageaccounts []StorageAccountResponse `pulumi:"storageaccounts"`
}

// The storage profile.
type StorageProfileResponseOutput struct{ *pulumi.OutputState }

func (StorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutput() StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutputWithContext(ctx context.Context) StorageProfileResponseOutput {
	return o
}

// The list of storage accounts in the cluster.
func (o StorageProfileResponseOutput) Storageaccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v StorageProfileResponse) []StorageAccountResponse { return v.Storageaccounts }).(StorageAccountResponseArrayOutput)
}

type StorageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutput() StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) ToStorageProfileResponsePtrOutputWithContext(ctx context.Context) StorageProfileResponsePtrOutput {
	return o
}

func (o StorageProfileResponsePtrOutput) Elem() StorageProfileResponseOutput {
	return o.ApplyT(func(v *StorageProfileResponse) StorageProfileResponse {
		if v != nil {
			return *v
		}
		var ret StorageProfileResponse
		return ret
	}).(StorageProfileResponseOutput)
}

// The list of storage accounts in the cluster.
func (o StorageProfileResponsePtrOutput) Storageaccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v *StorageProfileResponse) []StorageAccountResponse {
		if v == nil {
			return nil
		}
		return v.Storageaccounts
	}).(StorageAccountResponseArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Trino Coordinator.
type TrinoCoordinator struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
	HighAvailabilityEnabled *bool `pulumi:"highAvailabilityEnabled"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoCoordinator
func (val *TrinoCoordinator) Defaults() *TrinoCoordinator {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.HighAvailabilityEnabled == nil {
		highAvailabilityEnabled_ := true
		tmp.HighAvailabilityEnabled = &highAvailabilityEnabled_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// TrinoCoordinatorInput is an input type that accepts TrinoCoordinatorArgs and TrinoCoordinatorOutput values.
// You can construct a concrete instance of `TrinoCoordinatorInput` via:
//
//	TrinoCoordinatorArgs{...}
type TrinoCoordinatorInput interface {
	pulumi.Input

	ToTrinoCoordinatorOutput() TrinoCoordinatorOutput
	ToTrinoCoordinatorOutputWithContext(context.Context) TrinoCoordinatorOutput
}

// Trino Coordinator.
type TrinoCoordinatorArgs struct {
	// The flag that if enable debug or not.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
	HighAvailabilityEnabled pulumi.BoolPtrInput `pulumi:"highAvailabilityEnabled"`
	// The debug port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoCoordinatorArgs
func (val *TrinoCoordinatorArgs) Defaults() *TrinoCoordinatorArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		tmp.Enable = pulumi.BoolPtr(false)
	}
	if tmp.HighAvailabilityEnabled == nil {
		tmp.HighAvailabilityEnabled = pulumi.BoolPtr(true)
	}
	if tmp.Port == nil {
		tmp.Port = pulumi.IntPtr(8008)
	}
	if tmp.Suspend == nil {
		tmp.Suspend = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TrinoCoordinatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoCoordinator)(nil)).Elem()
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorOutput() TrinoCoordinatorOutput {
	return i.ToTrinoCoordinatorOutputWithContext(context.Background())
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorOutputWithContext(ctx context.Context) TrinoCoordinatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoCoordinatorOutput)
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return i.ToTrinoCoordinatorPtrOutputWithContext(context.Background())
}

func (i TrinoCoordinatorArgs) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoCoordinatorOutput).ToTrinoCoordinatorPtrOutputWithContext(ctx)
}

// TrinoCoordinatorPtrInput is an input type that accepts TrinoCoordinatorArgs, TrinoCoordinatorPtr and TrinoCoordinatorPtrOutput values.
// You can construct a concrete instance of `TrinoCoordinatorPtrInput` via:
//
//	        TrinoCoordinatorArgs{...}
//
//	or:
//
//	        nil
type TrinoCoordinatorPtrInput interface {
	pulumi.Input

	ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput
	ToTrinoCoordinatorPtrOutputWithContext(context.Context) TrinoCoordinatorPtrOutput
}

type trinoCoordinatorPtrType TrinoCoordinatorArgs

func TrinoCoordinatorPtr(v *TrinoCoordinatorArgs) TrinoCoordinatorPtrInput {
	return (*trinoCoordinatorPtrType)(v)
}

func (*trinoCoordinatorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoCoordinator)(nil)).Elem()
}

func (i *trinoCoordinatorPtrType) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return i.ToTrinoCoordinatorPtrOutputWithContext(context.Background())
}

func (i *trinoCoordinatorPtrType) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoCoordinatorPtrOutput)
}

// Trino Coordinator.
type TrinoCoordinatorOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoCoordinator)(nil)).Elem()
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorOutput() TrinoCoordinatorOutput {
	return o
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorOutputWithContext(ctx context.Context) TrinoCoordinatorOutput {
	return o
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return o.ToTrinoCoordinatorPtrOutputWithContext(context.Background())
}

func (o TrinoCoordinatorOutput) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoCoordinator) *TrinoCoordinator {
		return &v
	}).(TrinoCoordinatorPtrOutput)
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *bool { return v.HighAvailabilityEnabled }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinator) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoCoordinatorPtrOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoCoordinator)(nil)).Elem()
}

func (o TrinoCoordinatorPtrOutput) ToTrinoCoordinatorPtrOutput() TrinoCoordinatorPtrOutput {
	return o
}

func (o TrinoCoordinatorPtrOutput) ToTrinoCoordinatorPtrOutputWithContext(ctx context.Context) TrinoCoordinatorPtrOutput {
	return o
}

func (o TrinoCoordinatorPtrOutput) Elem() TrinoCoordinatorOutput {
	return o.ApplyT(func(v *TrinoCoordinator) TrinoCoordinator {
		if v != nil {
			return *v
		}
		var ret TrinoCoordinator
		return ret
	}).(TrinoCoordinatorOutput)
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorPtrOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *bool {
		if v == nil {
			return nil
		}
		return v.HighAvailabilityEnabled
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinator) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Trino Coordinator.
type TrinoCoordinatorResponse struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
	HighAvailabilityEnabled *bool `pulumi:"highAvailabilityEnabled"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoCoordinatorResponse
func (val *TrinoCoordinatorResponse) Defaults() *TrinoCoordinatorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.HighAvailabilityEnabled == nil {
		highAvailabilityEnabled_ := true
		tmp.HighAvailabilityEnabled = &highAvailabilityEnabled_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// Trino Coordinator.
type TrinoCoordinatorResponseOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoCoordinatorResponse)(nil)).Elem()
}

func (o TrinoCoordinatorResponseOutput) ToTrinoCoordinatorResponseOutput() TrinoCoordinatorResponseOutput {
	return o
}

func (o TrinoCoordinatorResponseOutput) ToTrinoCoordinatorResponseOutputWithContext(ctx context.Context) TrinoCoordinatorResponseOutput {
	return o
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorResponseOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *bool { return v.HighAvailabilityEnabled }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorResponseOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoCoordinatorResponse) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoCoordinatorResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoCoordinatorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoCoordinatorResponse)(nil)).Elem()
}

func (o TrinoCoordinatorResponsePtrOutput) ToTrinoCoordinatorResponsePtrOutput() TrinoCoordinatorResponsePtrOutput {
	return o
}

func (o TrinoCoordinatorResponsePtrOutput) ToTrinoCoordinatorResponsePtrOutputWithContext(ctx context.Context) TrinoCoordinatorResponsePtrOutput {
	return o
}

func (o TrinoCoordinatorResponsePtrOutput) Elem() TrinoCoordinatorResponseOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) TrinoCoordinatorResponse {
		if v != nil {
			return *v
		}
		var ret TrinoCoordinatorResponse
		return ret
	}).(TrinoCoordinatorResponseOutput)
}

// The flag that if enable debug or not.
func (o TrinoCoordinatorResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.
func (o TrinoCoordinatorResponsePtrOutput) HighAvailabilityEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.HighAvailabilityEnabled
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoCoordinatorResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoCoordinatorResponsePtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoCoordinatorResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Trino Cluster profile.
type TrinoProfile struct {
	// Trino cluster catalog options.
	CatalogOptions *CatalogOptions `pulumi:"catalogOptions"`
	// Trino Coordinator.
	Coordinator *TrinoCoordinator `pulumi:"coordinator"`
	// Trino user plugins spec
	UserPluginsSpec *TrinoUserPlugins `pulumi:"userPluginsSpec"`
	// User telemetry
	UserTelemetrySpec *TrinoUserTelemetry `pulumi:"userTelemetrySpec"`
	// Trino worker.
	Worker *TrinoWorker `pulumi:"worker"`
}

// Defaults sets the appropriate defaults for TrinoProfile
func (val *TrinoProfile) Defaults() *TrinoProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Coordinator = tmp.Coordinator.Defaults()

	tmp.UserTelemetrySpec = tmp.UserTelemetrySpec.Defaults()

	tmp.Worker = tmp.Worker.Defaults()

	return &tmp
}

// TrinoProfileInput is an input type that accepts TrinoProfileArgs and TrinoProfileOutput values.
// You can construct a concrete instance of `TrinoProfileInput` via:
//
//	TrinoProfileArgs{...}
type TrinoProfileInput interface {
	pulumi.Input

	ToTrinoProfileOutput() TrinoProfileOutput
	ToTrinoProfileOutputWithContext(context.Context) TrinoProfileOutput
}

// Trino Cluster profile.
type TrinoProfileArgs struct {
	// Trino cluster catalog options.
	CatalogOptions CatalogOptionsPtrInput `pulumi:"catalogOptions"`
	// Trino Coordinator.
	Coordinator TrinoCoordinatorPtrInput `pulumi:"coordinator"`
	// Trino user plugins spec
	UserPluginsSpec TrinoUserPluginsPtrInput `pulumi:"userPluginsSpec"`
	// User telemetry
	UserTelemetrySpec TrinoUserTelemetryPtrInput `pulumi:"userTelemetrySpec"`
	// Trino worker.
	Worker TrinoWorkerPtrInput `pulumi:"worker"`
}

// Defaults sets the appropriate defaults for TrinoProfileArgs
func (val *TrinoProfileArgs) Defaults() *TrinoProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrinoProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoProfile)(nil)).Elem()
}

func (i TrinoProfileArgs) ToTrinoProfileOutput() TrinoProfileOutput {
	return i.ToTrinoProfileOutputWithContext(context.Background())
}

func (i TrinoProfileArgs) ToTrinoProfileOutputWithContext(ctx context.Context) TrinoProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoProfileOutput)
}

func (i TrinoProfileArgs) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return i.ToTrinoProfilePtrOutputWithContext(context.Background())
}

func (i TrinoProfileArgs) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoProfileOutput).ToTrinoProfilePtrOutputWithContext(ctx)
}

// TrinoProfilePtrInput is an input type that accepts TrinoProfileArgs, TrinoProfilePtr and TrinoProfilePtrOutput values.
// You can construct a concrete instance of `TrinoProfilePtrInput` via:
//
//	        TrinoProfileArgs{...}
//
//	or:
//
//	        nil
type TrinoProfilePtrInput interface {
	pulumi.Input

	ToTrinoProfilePtrOutput() TrinoProfilePtrOutput
	ToTrinoProfilePtrOutputWithContext(context.Context) TrinoProfilePtrOutput
}

type trinoProfilePtrType TrinoProfileArgs

func TrinoProfilePtr(v *TrinoProfileArgs) TrinoProfilePtrInput {
	return (*trinoProfilePtrType)(v)
}

func (*trinoProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoProfile)(nil)).Elem()
}

func (i *trinoProfilePtrType) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return i.ToTrinoProfilePtrOutputWithContext(context.Background())
}

func (i *trinoProfilePtrType) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoProfilePtrOutput)
}

// Trino Cluster profile.
type TrinoProfileOutput struct{ *pulumi.OutputState }

func (TrinoProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoProfile)(nil)).Elem()
}

func (o TrinoProfileOutput) ToTrinoProfileOutput() TrinoProfileOutput {
	return o
}

func (o TrinoProfileOutput) ToTrinoProfileOutputWithContext(ctx context.Context) TrinoProfileOutput {
	return o
}

func (o TrinoProfileOutput) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return o.ToTrinoProfilePtrOutputWithContext(context.Background())
}

func (o TrinoProfileOutput) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoProfile) *TrinoProfile {
		return &v
	}).(TrinoProfilePtrOutput)
}

// Trino cluster catalog options.
func (o TrinoProfileOutput) CatalogOptions() CatalogOptionsPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *CatalogOptions { return v.CatalogOptions }).(CatalogOptionsPtrOutput)
}

// Trino Coordinator.
func (o TrinoProfileOutput) Coordinator() TrinoCoordinatorPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoCoordinator { return v.Coordinator }).(TrinoCoordinatorPtrOutput)
}

// Trino user plugins spec
func (o TrinoProfileOutput) UserPluginsSpec() TrinoUserPluginsPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoUserPlugins { return v.UserPluginsSpec }).(TrinoUserPluginsPtrOutput)
}

// User telemetry
func (o TrinoProfileOutput) UserTelemetrySpec() TrinoUserTelemetryPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoUserTelemetry { return v.UserTelemetrySpec }).(TrinoUserTelemetryPtrOutput)
}

// Trino worker.
func (o TrinoProfileOutput) Worker() TrinoWorkerPtrOutput {
	return o.ApplyT(func(v TrinoProfile) *TrinoWorker { return v.Worker }).(TrinoWorkerPtrOutput)
}

type TrinoProfilePtrOutput struct{ *pulumi.OutputState }

func (TrinoProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoProfile)(nil)).Elem()
}

func (o TrinoProfilePtrOutput) ToTrinoProfilePtrOutput() TrinoProfilePtrOutput {
	return o
}

func (o TrinoProfilePtrOutput) ToTrinoProfilePtrOutputWithContext(ctx context.Context) TrinoProfilePtrOutput {
	return o
}

func (o TrinoProfilePtrOutput) Elem() TrinoProfileOutput {
	return o.ApplyT(func(v *TrinoProfile) TrinoProfile {
		if v != nil {
			return *v
		}
		var ret TrinoProfile
		return ret
	}).(TrinoProfileOutput)
}

// Trino cluster catalog options.
func (o TrinoProfilePtrOutput) CatalogOptions() CatalogOptionsPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *CatalogOptions {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(CatalogOptionsPtrOutput)
}

// Trino Coordinator.
func (o TrinoProfilePtrOutput) Coordinator() TrinoCoordinatorPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoCoordinator {
		if v == nil {
			return nil
		}
		return v.Coordinator
	}).(TrinoCoordinatorPtrOutput)
}

// Trino user plugins spec
func (o TrinoProfilePtrOutput) UserPluginsSpec() TrinoUserPluginsPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoUserPlugins {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(TrinoUserPluginsPtrOutput)
}

// User telemetry
func (o TrinoProfilePtrOutput) UserTelemetrySpec() TrinoUserTelemetryPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoUserTelemetry {
		if v == nil {
			return nil
		}
		return v.UserTelemetrySpec
	}).(TrinoUserTelemetryPtrOutput)
}

// Trino worker.
func (o TrinoProfilePtrOutput) Worker() TrinoWorkerPtrOutput {
	return o.ApplyT(func(v *TrinoProfile) *TrinoWorker {
		if v == nil {
			return nil
		}
		return v.Worker
	}).(TrinoWorkerPtrOutput)
}

// Trino Cluster profile.
type TrinoProfileResponse struct {
	// Trino cluster catalog options.
	CatalogOptions *CatalogOptionsResponse `pulumi:"catalogOptions"`
	// Trino Coordinator.
	Coordinator *TrinoCoordinatorResponse `pulumi:"coordinator"`
	// Trino user plugins spec
	UserPluginsSpec *TrinoUserPluginsResponse `pulumi:"userPluginsSpec"`
	// User telemetry
	UserTelemetrySpec *TrinoUserTelemetryResponse `pulumi:"userTelemetrySpec"`
	// Trino worker.
	Worker *TrinoWorkerResponse `pulumi:"worker"`
}

// Defaults sets the appropriate defaults for TrinoProfileResponse
func (val *TrinoProfileResponse) Defaults() *TrinoProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Coordinator = tmp.Coordinator.Defaults()

	tmp.UserTelemetrySpec = tmp.UserTelemetrySpec.Defaults()

	tmp.Worker = tmp.Worker.Defaults()

	return &tmp
}

// Trino Cluster profile.
type TrinoProfileResponseOutput struct{ *pulumi.OutputState }

func (TrinoProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoProfileResponse)(nil)).Elem()
}

func (o TrinoProfileResponseOutput) ToTrinoProfileResponseOutput() TrinoProfileResponseOutput {
	return o
}

func (o TrinoProfileResponseOutput) ToTrinoProfileResponseOutputWithContext(ctx context.Context) TrinoProfileResponseOutput {
	return o
}

// Trino cluster catalog options.
func (o TrinoProfileResponseOutput) CatalogOptions() CatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *CatalogOptionsResponse { return v.CatalogOptions }).(CatalogOptionsResponsePtrOutput)
}

// Trino Coordinator.
func (o TrinoProfileResponseOutput) Coordinator() TrinoCoordinatorResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoCoordinatorResponse { return v.Coordinator }).(TrinoCoordinatorResponsePtrOutput)
}

// Trino user plugins spec
func (o TrinoProfileResponseOutput) UserPluginsSpec() TrinoUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoUserPluginsResponse { return v.UserPluginsSpec }).(TrinoUserPluginsResponsePtrOutput)
}

// User telemetry
func (o TrinoProfileResponseOutput) UserTelemetrySpec() TrinoUserTelemetryResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoUserTelemetryResponse { return v.UserTelemetrySpec }).(TrinoUserTelemetryResponsePtrOutput)
}

// Trino worker.
func (o TrinoProfileResponseOutput) Worker() TrinoWorkerResponsePtrOutput {
	return o.ApplyT(func(v TrinoProfileResponse) *TrinoWorkerResponse { return v.Worker }).(TrinoWorkerResponsePtrOutput)
}

type TrinoProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoProfileResponse)(nil)).Elem()
}

func (o TrinoProfileResponsePtrOutput) ToTrinoProfileResponsePtrOutput() TrinoProfileResponsePtrOutput {
	return o
}

func (o TrinoProfileResponsePtrOutput) ToTrinoProfileResponsePtrOutputWithContext(ctx context.Context) TrinoProfileResponsePtrOutput {
	return o
}

func (o TrinoProfileResponsePtrOutput) Elem() TrinoProfileResponseOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) TrinoProfileResponse {
		if v != nil {
			return *v
		}
		var ret TrinoProfileResponse
		return ret
	}).(TrinoProfileResponseOutput)
}

// Trino cluster catalog options.
func (o TrinoProfileResponsePtrOutput) CatalogOptions() CatalogOptionsResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *CatalogOptionsResponse {
		if v == nil {
			return nil
		}
		return v.CatalogOptions
	}).(CatalogOptionsResponsePtrOutput)
}

// Trino Coordinator.
func (o TrinoProfileResponsePtrOutput) Coordinator() TrinoCoordinatorResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoCoordinatorResponse {
		if v == nil {
			return nil
		}
		return v.Coordinator
	}).(TrinoCoordinatorResponsePtrOutput)
}

// Trino user plugins spec
func (o TrinoProfileResponsePtrOutput) UserPluginsSpec() TrinoUserPluginsResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoUserPluginsResponse {
		if v == nil {
			return nil
		}
		return v.UserPluginsSpec
	}).(TrinoUserPluginsResponsePtrOutput)
}

// User telemetry
func (o TrinoProfileResponsePtrOutput) UserTelemetrySpec() TrinoUserTelemetryResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoUserTelemetryResponse {
		if v == nil {
			return nil
		}
		return v.UserTelemetrySpec
	}).(TrinoUserTelemetryResponsePtrOutput)
}

// Trino worker.
func (o TrinoProfileResponsePtrOutput) Worker() TrinoWorkerResponsePtrOutput {
	return o.ApplyT(func(v *TrinoProfileResponse) *TrinoWorkerResponse {
		if v == nil {
			return nil
		}
		return v.Worker
	}).(TrinoWorkerResponsePtrOutput)
}

// Trino user telemetry definition.
type TrinoTelemetryConfig struct {
	// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
	HivecatalogName *string `pulumi:"hivecatalogName"`
	// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
	HivecatalogSchema *string `pulumi:"hivecatalogSchema"`
	// Retention period for query log table partitions, this doesn't have any affect on actual data.
	PartitionRetentionInDays *int `pulumi:"partitionRetentionInDays"`
	// Azure storage location of the blobs.
	Path *string `pulumi:"path"`
}

// Defaults sets the appropriate defaults for TrinoTelemetryConfig
func (val *TrinoTelemetryConfig) Defaults() *TrinoTelemetryConfig {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HivecatalogSchema == nil {
		hivecatalogSchema_ := "trinologs"
		tmp.HivecatalogSchema = &hivecatalogSchema_
	}
	if tmp.PartitionRetentionInDays == nil {
		partitionRetentionInDays_ := 365
		tmp.PartitionRetentionInDays = &partitionRetentionInDays_
	}
	return &tmp
}

// TrinoTelemetryConfigInput is an input type that accepts TrinoTelemetryConfigArgs and TrinoTelemetryConfigOutput values.
// You can construct a concrete instance of `TrinoTelemetryConfigInput` via:
//
//	TrinoTelemetryConfigArgs{...}
type TrinoTelemetryConfigInput interface {
	pulumi.Input

	ToTrinoTelemetryConfigOutput() TrinoTelemetryConfigOutput
	ToTrinoTelemetryConfigOutputWithContext(context.Context) TrinoTelemetryConfigOutput
}

// Trino user telemetry definition.
type TrinoTelemetryConfigArgs struct {
	// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
	HivecatalogName pulumi.StringPtrInput `pulumi:"hivecatalogName"`
	// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
	HivecatalogSchema pulumi.StringPtrInput `pulumi:"hivecatalogSchema"`
	// Retention period for query log table partitions, this doesn't have any affect on actual data.
	PartitionRetentionInDays pulumi.IntPtrInput `pulumi:"partitionRetentionInDays"`
	// Azure storage location of the blobs.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

// Defaults sets the appropriate defaults for TrinoTelemetryConfigArgs
func (val *TrinoTelemetryConfigArgs) Defaults() *TrinoTelemetryConfigArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HivecatalogSchema == nil {
		tmp.HivecatalogSchema = pulumi.StringPtr("trinologs")
	}
	if tmp.PartitionRetentionInDays == nil {
		tmp.PartitionRetentionInDays = pulumi.IntPtr(365)
	}
	return &tmp
}
func (TrinoTelemetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoTelemetryConfig)(nil)).Elem()
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigOutput() TrinoTelemetryConfigOutput {
	return i.ToTrinoTelemetryConfigOutputWithContext(context.Background())
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigOutputWithContext(ctx context.Context) TrinoTelemetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoTelemetryConfigOutput)
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return i.ToTrinoTelemetryConfigPtrOutputWithContext(context.Background())
}

func (i TrinoTelemetryConfigArgs) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoTelemetryConfigOutput).ToTrinoTelemetryConfigPtrOutputWithContext(ctx)
}

// TrinoTelemetryConfigPtrInput is an input type that accepts TrinoTelemetryConfigArgs, TrinoTelemetryConfigPtr and TrinoTelemetryConfigPtrOutput values.
// You can construct a concrete instance of `TrinoTelemetryConfigPtrInput` via:
//
//	        TrinoTelemetryConfigArgs{...}
//
//	or:
//
//	        nil
type TrinoTelemetryConfigPtrInput interface {
	pulumi.Input

	ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput
	ToTrinoTelemetryConfigPtrOutputWithContext(context.Context) TrinoTelemetryConfigPtrOutput
}

type trinoTelemetryConfigPtrType TrinoTelemetryConfigArgs

func TrinoTelemetryConfigPtr(v *TrinoTelemetryConfigArgs) TrinoTelemetryConfigPtrInput {
	return (*trinoTelemetryConfigPtrType)(v)
}

func (*trinoTelemetryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoTelemetryConfig)(nil)).Elem()
}

func (i *trinoTelemetryConfigPtrType) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return i.ToTrinoTelemetryConfigPtrOutputWithContext(context.Background())
}

func (i *trinoTelemetryConfigPtrType) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoTelemetryConfigPtrOutput)
}

// Trino user telemetry definition.
type TrinoTelemetryConfigOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoTelemetryConfig)(nil)).Elem()
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigOutput() TrinoTelemetryConfigOutput {
	return o
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigOutputWithContext(ctx context.Context) TrinoTelemetryConfigOutput {
	return o
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return o.ToTrinoTelemetryConfigPtrOutputWithContext(context.Background())
}

func (o TrinoTelemetryConfigOutput) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoTelemetryConfig) *TrinoTelemetryConfig {
		return &v
	}).(TrinoTelemetryConfigPtrOutput)
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *string { return v.HivecatalogName }).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *string { return v.HivecatalogSchema }).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *int { return v.PartitionRetentionInDays }).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoTelemetryConfigPtrOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoTelemetryConfig)(nil)).Elem()
}

func (o TrinoTelemetryConfigPtrOutput) ToTrinoTelemetryConfigPtrOutput() TrinoTelemetryConfigPtrOutput {
	return o
}

func (o TrinoTelemetryConfigPtrOutput) ToTrinoTelemetryConfigPtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigPtrOutput {
	return o
}

func (o TrinoTelemetryConfigPtrOutput) Elem() TrinoTelemetryConfigOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) TrinoTelemetryConfig {
		if v != nil {
			return *v
		}
		var ret TrinoTelemetryConfig
		return ret
	}).(TrinoTelemetryConfigOutput)
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigPtrOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogName
	}).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigPtrOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogSchema
	}).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigPtrOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.PartitionRetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Trino user telemetry definition.
type TrinoTelemetryConfigResponse struct {
	// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
	HivecatalogName *string `pulumi:"hivecatalogName"`
	// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
	HivecatalogSchema *string `pulumi:"hivecatalogSchema"`
	// Retention period for query log table partitions, this doesn't have any affect on actual data.
	PartitionRetentionInDays *int `pulumi:"partitionRetentionInDays"`
	// Azure storage location of the blobs.
	Path *string `pulumi:"path"`
}

// Defaults sets the appropriate defaults for TrinoTelemetryConfigResponse
func (val *TrinoTelemetryConfigResponse) Defaults() *TrinoTelemetryConfigResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HivecatalogSchema == nil {
		hivecatalogSchema_ := "trinologs"
		tmp.HivecatalogSchema = &hivecatalogSchema_
	}
	if tmp.PartitionRetentionInDays == nil {
		partitionRetentionInDays_ := 365
		tmp.PartitionRetentionInDays = &partitionRetentionInDays_
	}
	return &tmp
}

// Trino user telemetry definition.
type TrinoTelemetryConfigResponseOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoTelemetryConfigResponse)(nil)).Elem()
}

func (o TrinoTelemetryConfigResponseOutput) ToTrinoTelemetryConfigResponseOutput() TrinoTelemetryConfigResponseOutput {
	return o
}

func (o TrinoTelemetryConfigResponseOutput) ToTrinoTelemetryConfigResponseOutputWithContext(ctx context.Context) TrinoTelemetryConfigResponseOutput {
	return o
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigResponseOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *string { return v.HivecatalogName }).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigResponseOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *string { return v.HivecatalogSchema }).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigResponseOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *int { return v.PartitionRetentionInDays }).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoTelemetryConfigResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoTelemetryConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoTelemetryConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoTelemetryConfigResponse)(nil)).Elem()
}

func (o TrinoTelemetryConfigResponsePtrOutput) ToTrinoTelemetryConfigResponsePtrOutput() TrinoTelemetryConfigResponsePtrOutput {
	return o
}

func (o TrinoTelemetryConfigResponsePtrOutput) ToTrinoTelemetryConfigResponsePtrOutputWithContext(ctx context.Context) TrinoTelemetryConfigResponsePtrOutput {
	return o
}

func (o TrinoTelemetryConfigResponsePtrOutput) Elem() TrinoTelemetryConfigResponseOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) TrinoTelemetryConfigResponse {
		if v != nil {
			return *v
		}
		var ret TrinoTelemetryConfigResponse
		return ret
	}).(TrinoTelemetryConfigResponseOutput)
}

// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
func (o TrinoTelemetryConfigResponsePtrOutput) HivecatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogName
	}).(pulumi.StringPtrOutput)
}

// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.
func (o TrinoTelemetryConfigResponsePtrOutput) HivecatalogSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.HivecatalogSchema
	}).(pulumi.StringPtrOutput)
}

// Retention period for query log table partitions, this doesn't have any affect on actual data.
func (o TrinoTelemetryConfigResponsePtrOutput) PartitionRetentionInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *int {
		if v == nil {
			return nil
		}
		return v.PartitionRetentionInDays
	}).(pulumi.IntPtrOutput)
}

// Azure storage location of the blobs.
func (o TrinoTelemetryConfigResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrinoTelemetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Trino user plugin.
type TrinoUserPlugin struct {
	// Denotes whether the plugin is active or not.
	Enabled *bool `pulumi:"enabled"`
	// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
	Name *string `pulumi:"name"`
	// Fully qualified path to the folder containing the plugins.
	Path *string `pulumi:"path"`
}

// TrinoUserPluginInput is an input type that accepts TrinoUserPluginArgs and TrinoUserPluginOutput values.
// You can construct a concrete instance of `TrinoUserPluginInput` via:
//
//	TrinoUserPluginArgs{...}
type TrinoUserPluginInput interface {
	pulumi.Input

	ToTrinoUserPluginOutput() TrinoUserPluginOutput
	ToTrinoUserPluginOutputWithContext(context.Context) TrinoUserPluginOutput
}

// Trino user plugin.
type TrinoUserPluginArgs struct {
	// Denotes whether the plugin is active or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Fully qualified path to the folder containing the plugins.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (TrinoUserPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugin)(nil)).Elem()
}

func (i TrinoUserPluginArgs) ToTrinoUserPluginOutput() TrinoUserPluginOutput {
	return i.ToTrinoUserPluginOutputWithContext(context.Background())
}

func (i TrinoUserPluginArgs) ToTrinoUserPluginOutputWithContext(ctx context.Context) TrinoUserPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginOutput)
}

// TrinoUserPluginArrayInput is an input type that accepts TrinoUserPluginArray and TrinoUserPluginArrayOutput values.
// You can construct a concrete instance of `TrinoUserPluginArrayInput` via:
//
//	TrinoUserPluginArray{ TrinoUserPluginArgs{...} }
type TrinoUserPluginArrayInput interface {
	pulumi.Input

	ToTrinoUserPluginArrayOutput() TrinoUserPluginArrayOutput
	ToTrinoUserPluginArrayOutputWithContext(context.Context) TrinoUserPluginArrayOutput
}

type TrinoUserPluginArray []TrinoUserPluginInput

func (TrinoUserPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrinoUserPlugin)(nil)).Elem()
}

func (i TrinoUserPluginArray) ToTrinoUserPluginArrayOutput() TrinoUserPluginArrayOutput {
	return i.ToTrinoUserPluginArrayOutputWithContext(context.Background())
}

func (i TrinoUserPluginArray) ToTrinoUserPluginArrayOutputWithContext(ctx context.Context) TrinoUserPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginArrayOutput)
}

// Trino user plugin.
type TrinoUserPluginOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugin)(nil)).Elem()
}

func (o TrinoUserPluginOutput) ToTrinoUserPluginOutput() TrinoUserPluginOutput {
	return o
}

func (o TrinoUserPluginOutput) ToTrinoUserPluginOutputWithContext(ctx context.Context) TrinoUserPluginOutput {
	return o
}

// Denotes whether the plugin is active or not.
func (o TrinoUserPluginOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoUserPlugin) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
func (o TrinoUserPluginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPlugin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Fully qualified path to the folder containing the plugins.
func (o TrinoUserPluginOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPlugin) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoUserPluginArrayOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrinoUserPlugin)(nil)).Elem()
}

func (o TrinoUserPluginArrayOutput) ToTrinoUserPluginArrayOutput() TrinoUserPluginArrayOutput {
	return o
}

func (o TrinoUserPluginArrayOutput) ToTrinoUserPluginArrayOutputWithContext(ctx context.Context) TrinoUserPluginArrayOutput {
	return o
}

func (o TrinoUserPluginArrayOutput) Index(i pulumi.IntInput) TrinoUserPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrinoUserPlugin {
		return vs[0].([]TrinoUserPlugin)[vs[1].(int)]
	}).(TrinoUserPluginOutput)
}

// Trino user plugin.
type TrinoUserPluginResponse struct {
	// Denotes whether the plugin is active or not.
	Enabled *bool `pulumi:"enabled"`
	// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
	Name *string `pulumi:"name"`
	// Fully qualified path to the folder containing the plugins.
	Path *string `pulumi:"path"`
}

// Trino user plugin.
type TrinoUserPluginResponseOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPluginResponse)(nil)).Elem()
}

func (o TrinoUserPluginResponseOutput) ToTrinoUserPluginResponseOutput() TrinoUserPluginResponseOutput {
	return o
}

func (o TrinoUserPluginResponseOutput) ToTrinoUserPluginResponseOutputWithContext(ctx context.Context) TrinoUserPluginResponseOutput {
	return o
}

// Denotes whether the plugin is active or not.
func (o TrinoUserPluginResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoUserPluginResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// This field maps to the sub-directory in trino plugins location, that will contain all the plugins under path.
func (o TrinoUserPluginResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPluginResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Fully qualified path to the folder containing the plugins.
func (o TrinoUserPluginResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrinoUserPluginResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type TrinoUserPluginResponseArrayOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrinoUserPluginResponse)(nil)).Elem()
}

func (o TrinoUserPluginResponseArrayOutput) ToTrinoUserPluginResponseArrayOutput() TrinoUserPluginResponseArrayOutput {
	return o
}

func (o TrinoUserPluginResponseArrayOutput) ToTrinoUserPluginResponseArrayOutputWithContext(ctx context.Context) TrinoUserPluginResponseArrayOutput {
	return o
}

func (o TrinoUserPluginResponseArrayOutput) Index(i pulumi.IntInput) TrinoUserPluginResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrinoUserPluginResponse {
		return vs[0].([]TrinoUserPluginResponse)[vs[1].(int)]
	}).(TrinoUserPluginResponseOutput)
}

// Trino user plugins spec
type TrinoUserPlugins struct {
	// Trino user plugins.
	Plugins []TrinoUserPlugin `pulumi:"plugins"`
}

// TrinoUserPluginsInput is an input type that accepts TrinoUserPluginsArgs and TrinoUserPluginsOutput values.
// You can construct a concrete instance of `TrinoUserPluginsInput` via:
//
//	TrinoUserPluginsArgs{...}
type TrinoUserPluginsInput interface {
	pulumi.Input

	ToTrinoUserPluginsOutput() TrinoUserPluginsOutput
	ToTrinoUserPluginsOutputWithContext(context.Context) TrinoUserPluginsOutput
}

// Trino user plugins spec
type TrinoUserPluginsArgs struct {
	// Trino user plugins.
	Plugins TrinoUserPluginArrayInput `pulumi:"plugins"`
}

func (TrinoUserPluginsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugins)(nil)).Elem()
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsOutput() TrinoUserPluginsOutput {
	return i.ToTrinoUserPluginsOutputWithContext(context.Background())
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsOutputWithContext(ctx context.Context) TrinoUserPluginsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginsOutput)
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return i.ToTrinoUserPluginsPtrOutputWithContext(context.Background())
}

func (i TrinoUserPluginsArgs) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginsOutput).ToTrinoUserPluginsPtrOutputWithContext(ctx)
}

// TrinoUserPluginsPtrInput is an input type that accepts TrinoUserPluginsArgs, TrinoUserPluginsPtr and TrinoUserPluginsPtrOutput values.
// You can construct a concrete instance of `TrinoUserPluginsPtrInput` via:
//
//	        TrinoUserPluginsArgs{...}
//
//	or:
//
//	        nil
type TrinoUserPluginsPtrInput interface {
	pulumi.Input

	ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput
	ToTrinoUserPluginsPtrOutputWithContext(context.Context) TrinoUserPluginsPtrOutput
}

type trinoUserPluginsPtrType TrinoUserPluginsArgs

func TrinoUserPluginsPtr(v *TrinoUserPluginsArgs) TrinoUserPluginsPtrInput {
	return (*trinoUserPluginsPtrType)(v)
}

func (*trinoUserPluginsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserPlugins)(nil)).Elem()
}

func (i *trinoUserPluginsPtrType) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return i.ToTrinoUserPluginsPtrOutputWithContext(context.Background())
}

func (i *trinoUserPluginsPtrType) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserPluginsPtrOutput)
}

// Trino user plugins spec
type TrinoUserPluginsOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPlugins)(nil)).Elem()
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsOutput() TrinoUserPluginsOutput {
	return o
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsOutputWithContext(ctx context.Context) TrinoUserPluginsOutput {
	return o
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return o.ToTrinoUserPluginsPtrOutputWithContext(context.Background())
}

func (o TrinoUserPluginsOutput) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoUserPlugins) *TrinoUserPlugins {
		return &v
	}).(TrinoUserPluginsPtrOutput)
}

// Trino user plugins.
func (o TrinoUserPluginsOutput) Plugins() TrinoUserPluginArrayOutput {
	return o.ApplyT(func(v TrinoUserPlugins) []TrinoUserPlugin { return v.Plugins }).(TrinoUserPluginArrayOutput)
}

type TrinoUserPluginsPtrOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserPlugins)(nil)).Elem()
}

func (o TrinoUserPluginsPtrOutput) ToTrinoUserPluginsPtrOutput() TrinoUserPluginsPtrOutput {
	return o
}

func (o TrinoUserPluginsPtrOutput) ToTrinoUserPluginsPtrOutputWithContext(ctx context.Context) TrinoUserPluginsPtrOutput {
	return o
}

func (o TrinoUserPluginsPtrOutput) Elem() TrinoUserPluginsOutput {
	return o.ApplyT(func(v *TrinoUserPlugins) TrinoUserPlugins {
		if v != nil {
			return *v
		}
		var ret TrinoUserPlugins
		return ret
	}).(TrinoUserPluginsOutput)
}

// Trino user plugins.
func (o TrinoUserPluginsPtrOutput) Plugins() TrinoUserPluginArrayOutput {
	return o.ApplyT(func(v *TrinoUserPlugins) []TrinoUserPlugin {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(TrinoUserPluginArrayOutput)
}

// Trino user plugins spec
type TrinoUserPluginsResponse struct {
	// Trino user plugins.
	Plugins []TrinoUserPluginResponse `pulumi:"plugins"`
}

// Trino user plugins spec
type TrinoUserPluginsResponseOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserPluginsResponse)(nil)).Elem()
}

func (o TrinoUserPluginsResponseOutput) ToTrinoUserPluginsResponseOutput() TrinoUserPluginsResponseOutput {
	return o
}

func (o TrinoUserPluginsResponseOutput) ToTrinoUserPluginsResponseOutputWithContext(ctx context.Context) TrinoUserPluginsResponseOutput {
	return o
}

// Trino user plugins.
func (o TrinoUserPluginsResponseOutput) Plugins() TrinoUserPluginResponseArrayOutput {
	return o.ApplyT(func(v TrinoUserPluginsResponse) []TrinoUserPluginResponse { return v.Plugins }).(TrinoUserPluginResponseArrayOutput)
}

type TrinoUserPluginsResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoUserPluginsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserPluginsResponse)(nil)).Elem()
}

func (o TrinoUserPluginsResponsePtrOutput) ToTrinoUserPluginsResponsePtrOutput() TrinoUserPluginsResponsePtrOutput {
	return o
}

func (o TrinoUserPluginsResponsePtrOutput) ToTrinoUserPluginsResponsePtrOutputWithContext(ctx context.Context) TrinoUserPluginsResponsePtrOutput {
	return o
}

func (o TrinoUserPluginsResponsePtrOutput) Elem() TrinoUserPluginsResponseOutput {
	return o.ApplyT(func(v *TrinoUserPluginsResponse) TrinoUserPluginsResponse {
		if v != nil {
			return *v
		}
		var ret TrinoUserPluginsResponse
		return ret
	}).(TrinoUserPluginsResponseOutput)
}

// Trino user plugins.
func (o TrinoUserPluginsResponsePtrOutput) Plugins() TrinoUserPluginResponseArrayOutput {
	return o.ApplyT(func(v *TrinoUserPluginsResponse) []TrinoUserPluginResponse {
		if v == nil {
			return nil
		}
		return v.Plugins
	}).(TrinoUserPluginResponseArrayOutput)
}

// User telemetry
type TrinoUserTelemetry struct {
	// Trino user telemetry definition.
	Storage *TrinoTelemetryConfig `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for TrinoUserTelemetry
func (val *TrinoUserTelemetry) Defaults() *TrinoUserTelemetry {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Storage = tmp.Storage.Defaults()

	return &tmp
}

// TrinoUserTelemetryInput is an input type that accepts TrinoUserTelemetryArgs and TrinoUserTelemetryOutput values.
// You can construct a concrete instance of `TrinoUserTelemetryInput` via:
//
//	TrinoUserTelemetryArgs{...}
type TrinoUserTelemetryInput interface {
	pulumi.Input

	ToTrinoUserTelemetryOutput() TrinoUserTelemetryOutput
	ToTrinoUserTelemetryOutputWithContext(context.Context) TrinoUserTelemetryOutput
}

// User telemetry
type TrinoUserTelemetryArgs struct {
	// Trino user telemetry definition.
	Storage TrinoTelemetryConfigPtrInput `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for TrinoUserTelemetryArgs
func (val *TrinoUserTelemetryArgs) Defaults() *TrinoUserTelemetryArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrinoUserTelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserTelemetry)(nil)).Elem()
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryOutput() TrinoUserTelemetryOutput {
	return i.ToTrinoUserTelemetryOutputWithContext(context.Background())
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryOutputWithContext(ctx context.Context) TrinoUserTelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserTelemetryOutput)
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return i.ToTrinoUserTelemetryPtrOutputWithContext(context.Background())
}

func (i TrinoUserTelemetryArgs) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserTelemetryOutput).ToTrinoUserTelemetryPtrOutputWithContext(ctx)
}

// TrinoUserTelemetryPtrInput is an input type that accepts TrinoUserTelemetryArgs, TrinoUserTelemetryPtr and TrinoUserTelemetryPtrOutput values.
// You can construct a concrete instance of `TrinoUserTelemetryPtrInput` via:
//
//	        TrinoUserTelemetryArgs{...}
//
//	or:
//
//	        nil
type TrinoUserTelemetryPtrInput interface {
	pulumi.Input

	ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput
	ToTrinoUserTelemetryPtrOutputWithContext(context.Context) TrinoUserTelemetryPtrOutput
}

type trinoUserTelemetryPtrType TrinoUserTelemetryArgs

func TrinoUserTelemetryPtr(v *TrinoUserTelemetryArgs) TrinoUserTelemetryPtrInput {
	return (*trinoUserTelemetryPtrType)(v)
}

func (*trinoUserTelemetryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserTelemetry)(nil)).Elem()
}

func (i *trinoUserTelemetryPtrType) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return i.ToTrinoUserTelemetryPtrOutputWithContext(context.Background())
}

func (i *trinoUserTelemetryPtrType) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoUserTelemetryPtrOutput)
}

// User telemetry
type TrinoUserTelemetryOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserTelemetry)(nil)).Elem()
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryOutput() TrinoUserTelemetryOutput {
	return o
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryOutputWithContext(ctx context.Context) TrinoUserTelemetryOutput {
	return o
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return o.ToTrinoUserTelemetryPtrOutputWithContext(context.Background())
}

func (o TrinoUserTelemetryOutput) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoUserTelemetry) *TrinoUserTelemetry {
		return &v
	}).(TrinoUserTelemetryPtrOutput)
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryOutput) Storage() TrinoTelemetryConfigPtrOutput {
	return o.ApplyT(func(v TrinoUserTelemetry) *TrinoTelemetryConfig { return v.Storage }).(TrinoTelemetryConfigPtrOutput)
}

type TrinoUserTelemetryPtrOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserTelemetry)(nil)).Elem()
}

func (o TrinoUserTelemetryPtrOutput) ToTrinoUserTelemetryPtrOutput() TrinoUserTelemetryPtrOutput {
	return o
}

func (o TrinoUserTelemetryPtrOutput) ToTrinoUserTelemetryPtrOutputWithContext(ctx context.Context) TrinoUserTelemetryPtrOutput {
	return o
}

func (o TrinoUserTelemetryPtrOutput) Elem() TrinoUserTelemetryOutput {
	return o.ApplyT(func(v *TrinoUserTelemetry) TrinoUserTelemetry {
		if v != nil {
			return *v
		}
		var ret TrinoUserTelemetry
		return ret
	}).(TrinoUserTelemetryOutput)
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryPtrOutput) Storage() TrinoTelemetryConfigPtrOutput {
	return o.ApplyT(func(v *TrinoUserTelemetry) *TrinoTelemetryConfig {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(TrinoTelemetryConfigPtrOutput)
}

// User telemetry
type TrinoUserTelemetryResponse struct {
	// Trino user telemetry definition.
	Storage *TrinoTelemetryConfigResponse `pulumi:"storage"`
}

// Defaults sets the appropriate defaults for TrinoUserTelemetryResponse
func (val *TrinoUserTelemetryResponse) Defaults() *TrinoUserTelemetryResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Storage = tmp.Storage.Defaults()

	return &tmp
}

// User telemetry
type TrinoUserTelemetryResponseOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoUserTelemetryResponse)(nil)).Elem()
}

func (o TrinoUserTelemetryResponseOutput) ToTrinoUserTelemetryResponseOutput() TrinoUserTelemetryResponseOutput {
	return o
}

func (o TrinoUserTelemetryResponseOutput) ToTrinoUserTelemetryResponseOutputWithContext(ctx context.Context) TrinoUserTelemetryResponseOutput {
	return o
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryResponseOutput) Storage() TrinoTelemetryConfigResponsePtrOutput {
	return o.ApplyT(func(v TrinoUserTelemetryResponse) *TrinoTelemetryConfigResponse { return v.Storage }).(TrinoTelemetryConfigResponsePtrOutput)
}

type TrinoUserTelemetryResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoUserTelemetryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoUserTelemetryResponse)(nil)).Elem()
}

func (o TrinoUserTelemetryResponsePtrOutput) ToTrinoUserTelemetryResponsePtrOutput() TrinoUserTelemetryResponsePtrOutput {
	return o
}

func (o TrinoUserTelemetryResponsePtrOutput) ToTrinoUserTelemetryResponsePtrOutputWithContext(ctx context.Context) TrinoUserTelemetryResponsePtrOutput {
	return o
}

func (o TrinoUserTelemetryResponsePtrOutput) Elem() TrinoUserTelemetryResponseOutput {
	return o.ApplyT(func(v *TrinoUserTelemetryResponse) TrinoUserTelemetryResponse {
		if v != nil {
			return *v
		}
		var ret TrinoUserTelemetryResponse
		return ret
	}).(TrinoUserTelemetryResponseOutput)
}

// Trino user telemetry definition.
func (o TrinoUserTelemetryResponsePtrOutput) Storage() TrinoTelemetryConfigResponsePtrOutput {
	return o.ApplyT(func(v *TrinoUserTelemetryResponse) *TrinoTelemetryConfigResponse {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(TrinoTelemetryConfigResponsePtrOutput)
}

// Trino worker.
type TrinoWorker struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoWorker
func (val *TrinoWorker) Defaults() *TrinoWorker {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// TrinoWorkerInput is an input type that accepts TrinoWorkerArgs and TrinoWorkerOutput values.
// You can construct a concrete instance of `TrinoWorkerInput` via:
//
//	TrinoWorkerArgs{...}
type TrinoWorkerInput interface {
	pulumi.Input

	ToTrinoWorkerOutput() TrinoWorkerOutput
	ToTrinoWorkerOutputWithContext(context.Context) TrinoWorkerOutput
}

// Trino worker.
type TrinoWorkerArgs struct {
	// The flag that if enable debug or not.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// The debug port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend pulumi.BoolPtrInput `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoWorkerArgs
func (val *TrinoWorkerArgs) Defaults() *TrinoWorkerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		tmp.Enable = pulumi.BoolPtr(false)
	}
	if tmp.Port == nil {
		tmp.Port = pulumi.IntPtr(8008)
	}
	if tmp.Suspend == nil {
		tmp.Suspend = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TrinoWorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoWorker)(nil)).Elem()
}

func (i TrinoWorkerArgs) ToTrinoWorkerOutput() TrinoWorkerOutput {
	return i.ToTrinoWorkerOutputWithContext(context.Background())
}

func (i TrinoWorkerArgs) ToTrinoWorkerOutputWithContext(ctx context.Context) TrinoWorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoWorkerOutput)
}

func (i TrinoWorkerArgs) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return i.ToTrinoWorkerPtrOutputWithContext(context.Background())
}

func (i TrinoWorkerArgs) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoWorkerOutput).ToTrinoWorkerPtrOutputWithContext(ctx)
}

// TrinoWorkerPtrInput is an input type that accepts TrinoWorkerArgs, TrinoWorkerPtr and TrinoWorkerPtrOutput values.
// You can construct a concrete instance of `TrinoWorkerPtrInput` via:
//
//	        TrinoWorkerArgs{...}
//
//	or:
//
//	        nil
type TrinoWorkerPtrInput interface {
	pulumi.Input

	ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput
	ToTrinoWorkerPtrOutputWithContext(context.Context) TrinoWorkerPtrOutput
}

type trinoWorkerPtrType TrinoWorkerArgs

func TrinoWorkerPtr(v *TrinoWorkerArgs) TrinoWorkerPtrInput {
	return (*trinoWorkerPtrType)(v)
}

func (*trinoWorkerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoWorker)(nil)).Elem()
}

func (i *trinoWorkerPtrType) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return i.ToTrinoWorkerPtrOutputWithContext(context.Background())
}

func (i *trinoWorkerPtrType) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrinoWorkerPtrOutput)
}

// Trino worker.
type TrinoWorkerOutput struct{ *pulumi.OutputState }

func (TrinoWorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoWorker)(nil)).Elem()
}

func (o TrinoWorkerOutput) ToTrinoWorkerOutput() TrinoWorkerOutput {
	return o
}

func (o TrinoWorkerOutput) ToTrinoWorkerOutputWithContext(ctx context.Context) TrinoWorkerOutput {
	return o
}

func (o TrinoWorkerOutput) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return o.ToTrinoWorkerPtrOutputWithContext(context.Background())
}

func (o TrinoWorkerOutput) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrinoWorker) *TrinoWorker {
		return &v
	}).(TrinoWorkerPtrOutput)
}

// The flag that if enable debug or not.
func (o TrinoWorkerOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorker) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoWorker) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorker) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoWorkerPtrOutput struct{ *pulumi.OutputState }

func (TrinoWorkerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoWorker)(nil)).Elem()
}

func (o TrinoWorkerPtrOutput) ToTrinoWorkerPtrOutput() TrinoWorkerPtrOutput {
	return o
}

func (o TrinoWorkerPtrOutput) ToTrinoWorkerPtrOutputWithContext(ctx context.Context) TrinoWorkerPtrOutput {
	return o
}

func (o TrinoWorkerPtrOutput) Elem() TrinoWorkerOutput {
	return o.ApplyT(func(v *TrinoWorker) TrinoWorker {
		if v != nil {
			return *v
		}
		var ret TrinoWorker
		return ret
	}).(TrinoWorkerOutput)
}

// The flag that if enable debug or not.
func (o TrinoWorkerPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorker) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoWorker) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerPtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorker) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// Trino worker.
type TrinoWorkerResponse struct {
	// The flag that if enable debug or not.
	Enable *bool `pulumi:"enable"`
	// The debug port.
	Port *int `pulumi:"port"`
	// The flag that if suspend debug or not.
	Suspend *bool `pulumi:"suspend"`
}

// Defaults sets the appropriate defaults for TrinoWorkerResponse
func (val *TrinoWorkerResponse) Defaults() *TrinoWorkerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enable == nil {
		enable_ := false
		tmp.Enable = &enable_
	}
	if tmp.Port == nil {
		port_ := 8008
		tmp.Port = &port_
	}
	if tmp.Suspend == nil {
		suspend_ := false
		tmp.Suspend = &suspend_
	}
	return &tmp
}

// Trino worker.
type TrinoWorkerResponseOutput struct{ *pulumi.OutputState }

func (TrinoWorkerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrinoWorkerResponse)(nil)).Elem()
}

func (o TrinoWorkerResponseOutput) ToTrinoWorkerResponseOutput() TrinoWorkerResponseOutput {
	return o
}

func (o TrinoWorkerResponseOutput) ToTrinoWorkerResponseOutputWithContext(ctx context.Context) TrinoWorkerResponseOutput {
	return o
}

// The flag that if enable debug or not.
func (o TrinoWorkerResponseOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorkerResponse) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TrinoWorkerResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerResponseOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrinoWorkerResponse) *bool { return v.Suspend }).(pulumi.BoolPtrOutput)
}

type TrinoWorkerResponsePtrOutput struct{ *pulumi.OutputState }

func (TrinoWorkerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrinoWorkerResponse)(nil)).Elem()
}

func (o TrinoWorkerResponsePtrOutput) ToTrinoWorkerResponsePtrOutput() TrinoWorkerResponsePtrOutput {
	return o
}

func (o TrinoWorkerResponsePtrOutput) ToTrinoWorkerResponsePtrOutputWithContext(ctx context.Context) TrinoWorkerResponsePtrOutput {
	return o
}

func (o TrinoWorkerResponsePtrOutput) Elem() TrinoWorkerResponseOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) TrinoWorkerResponse {
		if v != nil {
			return *v
		}
		var ret TrinoWorkerResponse
		return ret
	}).(TrinoWorkerResponseOutput)
}

// The flag that if enable debug or not.
func (o TrinoWorkerResponsePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

// The debug port.
func (o TrinoWorkerResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// The flag that if suspend debug or not.
func (o TrinoWorkerResponsePtrOutput) Suspend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrinoWorkerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.BoolPtrOutput)
}

// The User Assigned Identity
type UserAssignedIdentity struct {
	// The tenant id of user assigned identity.
	TenantId *string `pulumi:"tenantId"`
}

// UserAssignedIdentityInput is an input type that accepts UserAssignedIdentityArgs and UserAssignedIdentityOutput values.
// You can construct a concrete instance of `UserAssignedIdentityInput` via:
//
//	UserAssignedIdentityArgs{...}
type UserAssignedIdentityInput interface {
	pulumi.Input

	ToUserAssignedIdentityOutput() UserAssignedIdentityOutput
	ToUserAssignedIdentityOutputWithContext(context.Context) UserAssignedIdentityOutput
}

// The User Assigned Identity
type UserAssignedIdentityArgs struct {
	// The tenant id of user assigned identity.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (UserAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return i.ToUserAssignedIdentityOutputWithContext(context.Background())
}

func (i UserAssignedIdentityArgs) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityOutput)
}

// UserAssignedIdentityMapInput is an input type that accepts UserAssignedIdentityMap and UserAssignedIdentityMapOutput values.
// You can construct a concrete instance of `UserAssignedIdentityMapInput` via:
//
//	UserAssignedIdentityMap{ "key": UserAssignedIdentityArgs{...} }
type UserAssignedIdentityMapInput interface {
	pulumi.Input

	ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput
	ToUserAssignedIdentityMapOutputWithContext(context.Context) UserAssignedIdentityMapOutput
}

type UserAssignedIdentityMap map[string]UserAssignedIdentityInput

func (UserAssignedIdentityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentity)(nil)).Elem()
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return i.ToUserAssignedIdentityMapOutputWithContext(context.Background())
}

func (i UserAssignedIdentityMap) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityMapOutput)
}

// The User Assigned Identity
type UserAssignedIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutput() UserAssignedIdentityOutput {
	return o
}

func (o UserAssignedIdentityOutput) ToUserAssignedIdentityOutputWithContext(ctx context.Context) UserAssignedIdentityOutput {
	return o
}

// The tenant id of user assigned identity.
func (o UserAssignedIdentityOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentity) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentity)(nil)).Elem()
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutput() UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) ToUserAssignedIdentityMapOutputWithContext(ctx context.Context) UserAssignedIdentityMapOutput {
	return o
}

func (o UserAssignedIdentityMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentity {
		return vs[0].(map[string]UserAssignedIdentity)[vs[1].(string)]
	}).(UserAssignedIdentityOutput)
}

// The User Assigned Identity
type UserAssignedIdentityResponse struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id of user assigned identity.
	TenantId *string `pulumi:"tenantId"`
}

// The User Assigned Identity
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client id of user assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id of user assigned identity.
func (o UserAssignedIdentityResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// The virtual network properties.
type VirtualNetworkProfile struct {
	// The ID of the virtual network.
	Id *string `pulumi:"id"`
	// The name of the subnet.
	Subnet *string `pulumi:"subnet"`
}

// VirtualNetworkProfileInput is an input type that accepts VirtualNetworkProfileArgs and VirtualNetworkProfileOutput values.
// You can construct a concrete instance of `VirtualNetworkProfileInput` via:
//
//	VirtualNetworkProfileArgs{...}
type VirtualNetworkProfileInput interface {
	pulumi.Input

	ToVirtualNetworkProfileOutput() VirtualNetworkProfileOutput
	ToVirtualNetworkProfileOutputWithContext(context.Context) VirtualNetworkProfileOutput
}

// The virtual network properties.
type VirtualNetworkProfileArgs struct {
	// The ID of the virtual network.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the subnet.
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (VirtualNetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkProfile)(nil)).Elem()
}

func (i VirtualNetworkProfileArgs) ToVirtualNetworkProfileOutput() VirtualNetworkProfileOutput {
	return i.ToVirtualNetworkProfileOutputWithContext(context.Background())
}

func (i VirtualNetworkProfileArgs) ToVirtualNetworkProfileOutputWithContext(ctx context.Context) VirtualNetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkProfileOutput)
}

func (i VirtualNetworkProfileArgs) ToVirtualNetworkProfilePtrOutput() VirtualNetworkProfilePtrOutput {
	return i.ToVirtualNetworkProfilePtrOutputWithContext(context.Background())
}

func (i VirtualNetworkProfileArgs) ToVirtualNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkProfileOutput).ToVirtualNetworkProfilePtrOutputWithContext(ctx)
}

// VirtualNetworkProfilePtrInput is an input type that accepts VirtualNetworkProfileArgs, VirtualNetworkProfilePtr and VirtualNetworkProfilePtrOutput values.
// You can construct a concrete instance of `VirtualNetworkProfilePtrInput` via:
//
//	        VirtualNetworkProfileArgs{...}
//
//	or:
//
//	        nil
type VirtualNetworkProfilePtrInput interface {
	pulumi.Input

	ToVirtualNetworkProfilePtrOutput() VirtualNetworkProfilePtrOutput
	ToVirtualNetworkProfilePtrOutputWithContext(context.Context) VirtualNetworkProfilePtrOutput
}

type virtualNetworkProfilePtrType VirtualNetworkProfileArgs

func VirtualNetworkProfilePtr(v *VirtualNetworkProfileArgs) VirtualNetworkProfilePtrInput {
	return (*virtualNetworkProfilePtrType)(v)
}

func (*virtualNetworkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkProfile)(nil)).Elem()
}

func (i *virtualNetworkProfilePtrType) ToVirtualNetworkProfilePtrOutput() VirtualNetworkProfilePtrOutput {
	return i.ToVirtualNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *virtualNetworkProfilePtrType) ToVirtualNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualNetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualNetworkProfilePtrOutput)
}

// The virtual network properties.
type VirtualNetworkProfileOutput struct{ *pulumi.OutputState }

func (VirtualNetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkProfile)(nil)).Elem()
}

func (o VirtualNetworkProfileOutput) ToVirtualNetworkProfileOutput() VirtualNetworkProfileOutput {
	return o
}

func (o VirtualNetworkProfileOutput) ToVirtualNetworkProfileOutputWithContext(ctx context.Context) VirtualNetworkProfileOutput {
	return o
}

func (o VirtualNetworkProfileOutput) ToVirtualNetworkProfilePtrOutput() VirtualNetworkProfilePtrOutput {
	return o.ToVirtualNetworkProfilePtrOutputWithContext(context.Background())
}

func (o VirtualNetworkProfileOutput) ToVirtualNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualNetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualNetworkProfile) *VirtualNetworkProfile {
		return &v
	}).(VirtualNetworkProfilePtrOutput)
}

// The ID of the virtual network.
func (o VirtualNetworkProfileOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkProfile) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the subnet.
func (o VirtualNetworkProfileOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkProfile) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type VirtualNetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkProfile)(nil)).Elem()
}

func (o VirtualNetworkProfilePtrOutput) ToVirtualNetworkProfilePtrOutput() VirtualNetworkProfilePtrOutput {
	return o
}

func (o VirtualNetworkProfilePtrOutput) ToVirtualNetworkProfilePtrOutputWithContext(ctx context.Context) VirtualNetworkProfilePtrOutput {
	return o
}

func (o VirtualNetworkProfilePtrOutput) Elem() VirtualNetworkProfileOutput {
	return o.ApplyT(func(v *VirtualNetworkProfile) VirtualNetworkProfile {
		if v != nil {
			return *v
		}
		var ret VirtualNetworkProfile
		return ret
	}).(VirtualNetworkProfileOutput)
}

// The ID of the virtual network.
func (o VirtualNetworkProfilePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the subnet.
func (o VirtualNetworkProfilePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

// The virtual network properties.
type VirtualNetworkProfileResponse struct {
	// The ID of the virtual network.
	Id *string `pulumi:"id"`
	// The name of the subnet.
	Subnet *string `pulumi:"subnet"`
}

// The virtual network properties.
type VirtualNetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (VirtualNetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualNetworkProfileResponse)(nil)).Elem()
}

func (o VirtualNetworkProfileResponseOutput) ToVirtualNetworkProfileResponseOutput() VirtualNetworkProfileResponseOutput {
	return o
}

func (o VirtualNetworkProfileResponseOutput) ToVirtualNetworkProfileResponseOutputWithContext(ctx context.Context) VirtualNetworkProfileResponseOutput {
	return o
}

// The ID of the virtual network.
func (o VirtualNetworkProfileResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkProfileResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the subnet.
func (o VirtualNetworkProfileResponseOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualNetworkProfileResponse) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type VirtualNetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualNetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualNetworkProfileResponse)(nil)).Elem()
}

func (o VirtualNetworkProfileResponsePtrOutput) ToVirtualNetworkProfileResponsePtrOutput() VirtualNetworkProfileResponsePtrOutput {
	return o
}

func (o VirtualNetworkProfileResponsePtrOutput) ToVirtualNetworkProfileResponsePtrOutputWithContext(ctx context.Context) VirtualNetworkProfileResponsePtrOutput {
	return o
}

func (o VirtualNetworkProfileResponsePtrOutput) Elem() VirtualNetworkProfileResponseOutput {
	return o.ApplyT(func(v *VirtualNetworkProfileResponse) VirtualNetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret VirtualNetworkProfileResponse
		return ret
	}).(VirtualNetworkProfileResponseOutput)
}

// The ID of the virtual network.
func (o VirtualNetworkProfileResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The name of the subnet.
func (o VirtualNetworkProfileResponsePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualNetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AksClusterProfileResponseAksClusterAgentPoolIdentityProfileOutput{})
	pulumi.RegisterOutputType(AksClusterProfileResponseAksClusterAgentPoolIdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(ApplicationGetEndpointOutput{})
	pulumi.RegisterOutputType(ApplicationGetEndpointArrayOutput{})
	pulumi.RegisterOutputType(ApplicationGetEndpointResponseOutput{})
	pulumi.RegisterOutputType(ApplicationGetEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplicationGetHttpsEndpointOutput{})
	pulumi.RegisterOutputType(ApplicationGetHttpsEndpointArrayOutput{})
	pulumi.RegisterOutputType(ApplicationGetHttpsEndpointResponseOutput{})
	pulumi.RegisterOutputType(ApplicationGetHttpsEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplicationPropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AuthorizationProfileOutput{})
	pulumi.RegisterOutputType(AuthorizationProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleOutput{})
	pulumi.RegisterOutputType(AutoscalePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleCapacityOutput{})
	pulumi.RegisterOutputType(AutoscaleCapacityPtrOutput{})
	pulumi.RegisterOutputType(AutoscaleCapacityResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleCapacityResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileOutput{})
	pulumi.RegisterOutputType(AutoscaleProfilePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleRecurrenceOutput{})
	pulumi.RegisterOutputType(AutoscaleRecurrencePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleRecurrenceResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleRecurrenceResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoscaleScheduleOutput{})
	pulumi.RegisterOutputType(AutoscaleScheduleArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleScheduleResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleTimeAndCapacityOutput{})
	pulumi.RegisterOutputType(AutoscaleTimeAndCapacityPtrOutput{})
	pulumi.RegisterOutputType(AutoscaleTimeAndCapacityResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleTimeAndCapacityResponsePtrOutput{})
	pulumi.RegisterOutputType(CatalogOptionsOutput{})
	pulumi.RegisterOutputType(CatalogOptionsPtrOutput{})
	pulumi.RegisterOutputType(CatalogOptionsResponseOutput{})
	pulumi.RegisterOutputType(CatalogOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClientGroupInfoOutput{})
	pulumi.RegisterOutputType(ClientGroupInfoPtrOutput{})
	pulumi.RegisterOutputType(ClientGroupInfoResponseOutput{})
	pulumi.RegisterOutputType(ClientGroupInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfileOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterAccessProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileArrayOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileResponseOutput{})
	pulumi.RegisterOutputType(ClusterConfigFileResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterCreatePropertiesOutput{})
	pulumi.RegisterOutputType(ClusterCreatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ClusterDefinitionOutput{})
	pulumi.RegisterOutputType(ClusterDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ClusterDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ClusterGetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ClusterIdentityOutput{})
	pulumi.RegisterOutputType(ClusterIdentityPtrOutput{})
	pulumi.RegisterOutputType(ClusterIdentityResponseOutput{})
	pulumi.RegisterOutputType(ClusterIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsPtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsResponseOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsApplicationLogsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfileOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterLogAnalyticsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolComputeProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolComputeProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesClusterPoolProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesClusterPoolProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesComputeProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesLogAnalyticsProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesLogAnalyticsProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesNetworkProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseAksClusterProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseClusterPoolProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseClusterPoolProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseComputeProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseLogAnalyticsProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseLogAnalyticsProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseNetworkProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolResourcePropertiesResponseNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolSshProfileOutput{})
	pulumi.RegisterOutputType(ClusterPoolSshProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPoolSshProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterPoolSshProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterProfileOutput{})
	pulumi.RegisterOutputType(ClusterProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterProfileResponseComponentsOutput{})
	pulumi.RegisterOutputType(ClusterProfileResponseComponentsArrayOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfileOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterPrometheusProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfileOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfilePtrOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterRangerPluginProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileArrayOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileResponseOutput{})
	pulumi.RegisterOutputType(ClusterServiceConfigsProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(ComparisonRuleOutput{})
	pulumi.RegisterOutputType(ComparisonRuleResponseOutput{})
	pulumi.RegisterOutputType(ComputeIsolationPropertiesOutput{})
	pulumi.RegisterOutputType(ComputeIsolationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComputeIsolationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ComputeIsolationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeProfileOutput{})
	pulumi.RegisterOutputType(ComputeProfilePtrOutput{})
	pulumi.RegisterOutputType(ComputeProfileResponseOutput{})
	pulumi.RegisterOutputType(ComputeProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ComputeResourceDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectivityEndpointResponseOutput{})
	pulumi.RegisterOutputType(ConnectivityEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectivityProfileResponseOutput{})
	pulumi.RegisterOutputType(ConnectivityProfileResponseWebOutput{})
	pulumi.RegisterOutputType(DataDisksGroupsOutput{})
	pulumi.RegisterOutputType(DataDisksGroupsArrayOutput{})
	pulumi.RegisterOutputType(DataDisksGroupsResponseOutput{})
	pulumi.RegisterOutputType(DataDisksGroupsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskEncryptionPropertiesOutput{})
	pulumi.RegisterOutputType(DiskEncryptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskStorageProfileOutput{})
	pulumi.RegisterOutputType(DiskStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(DiskStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(DiskStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionInTransitPropertiesOutput{})
	pulumi.RegisterOutputType(EncryptionInTransitPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionInTransitPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionInTransitPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorsOutput{})
	pulumi.RegisterOutputType(ErrorsArrayOutput{})
	pulumi.RegisterOutputType(ErrorsResponseOutput{})
	pulumi.RegisterOutputType(ErrorsResponseArrayOutput{})
	pulumi.RegisterOutputType(ExcludedServicesConfigResponseOutput{})
	pulumi.RegisterOutputType(ExcludedServicesConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsPtrOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsResponseOutput{})
	pulumi.RegisterOutputType(FlinkCatalogOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionPtrOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionResponseOutput{})
	pulumi.RegisterOutputType(FlinkHiveCatalogOptionResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkJobProfileOutput{})
	pulumi.RegisterOutputType(FlinkJobProfilePtrOutput{})
	pulumi.RegisterOutputType(FlinkJobProfileResponseOutput{})
	pulumi.RegisterOutputType(FlinkJobProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkProfileOutput{})
	pulumi.RegisterOutputType(FlinkProfilePtrOutput{})
	pulumi.RegisterOutputType(FlinkProfileResponseOutput{})
	pulumi.RegisterOutputType(FlinkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfileOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfilePtrOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfileResponseOutput{})
	pulumi.RegisterOutputType(FlinkStorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(HardwareProfileOutput{})
	pulumi.RegisterOutputType(HardwareProfilePtrOutput{})
	pulumi.RegisterOutputType(HardwareProfileResponseOutput{})
	pulumi.RegisterOutputType(HardwareProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionArrayOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionResponseOutput{})
	pulumi.RegisterOutputType(HiveCatalogOptionResponseArrayOutput{})
	pulumi.RegisterOutputType(IPConfigurationOutput{})
	pulumi.RegisterOutputType(IPConfigurationArrayOutput{})
	pulumi.RegisterOutputType(IPConfigurationResponseOutput{})
	pulumi.RegisterOutputType(IPConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityProfileOutput{})
	pulumi.RegisterOutputType(IdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(IdentityProfileResponseOutput{})
	pulumi.RegisterOutputType(IdentityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(IpTagOutput{})
	pulumi.RegisterOutputType(IpTagPtrOutput{})
	pulumi.RegisterOutputType(IpTagResponseOutput{})
	pulumi.RegisterOutputType(IpTagResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaConnectivityEndpointsResponseOutput{})
	pulumi.RegisterOutputType(KafkaConnectivityEndpointsResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaProfileOutput{})
	pulumi.RegisterOutputType(KafkaProfilePtrOutput{})
	pulumi.RegisterOutputType(KafkaProfileResponseOutput{})
	pulumi.RegisterOutputType(KafkaProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(KafkaRestPropertiesOutput{})
	pulumi.RegisterOutputType(KafkaRestPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KafkaRestPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KafkaRestPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxOperatingSystemProfileOutput{})
	pulumi.RegisterOutputType(LinuxOperatingSystemProfilePtrOutput{})
	pulumi.RegisterOutputType(LinuxOperatingSystemProfileResponseOutput{})
	pulumi.RegisterOutputType(LinuxOperatingSystemProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigPtrOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigResponseOutput{})
	pulumi.RegisterOutputType(LoadBasedConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfileOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfilePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfileResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecArrayOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySpecResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkPropertiesOutput{})
	pulumi.RegisterOutputType(NetworkPropertiesPtrOutput{})
	pulumi.RegisterOutputType(NetworkPropertiesResponseOutput{})
	pulumi.RegisterOutputType(NetworkPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeProfileOutput{})
	pulumi.RegisterOutputType(NodeProfileArrayOutput{})
	pulumi.RegisterOutputType(NodeProfileResponseOutput{})
	pulumi.RegisterOutputType(NodeProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(OsProfileOutput{})
	pulumi.RegisterOutputType(OsProfilePtrOutput{})
	pulumi.RegisterOutputType(OsProfileResponseOutput{})
	pulumi.RegisterOutputType(OsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConfigurationOutput{})
	pulumi.RegisterOutputType(PrivateLinkConfigurationArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(QuotaInfoResponseOutput{})
	pulumi.RegisterOutputType(QuotaInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecPtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecDatabaseOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecDatabasePtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponseOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponseDatabaseOutput{})
	pulumi.RegisterOutputType(RangerAdminSpecResponseDatabasePtrOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecPtrOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecResponseOutput{})
	pulumi.RegisterOutputType(RangerAuditSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerProfileOutput{})
	pulumi.RegisterOutputType(RangerProfilePtrOutput{})
	pulumi.RegisterOutputType(RangerProfileResponseOutput{})
	pulumi.RegisterOutputType(RangerProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecPtrOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecResponseOutput{})
	pulumi.RegisterOutputType(RangerUsersyncSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceIdOutput{})
	pulumi.RegisterOutputType(ResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleResponseOutput{})
	pulumi.RegisterOutputType(RoleResponseArrayOutput{})
	pulumi.RegisterOutputType(RuntimeScriptActionOutput{})
	pulumi.RegisterOutputType(RuntimeScriptActionArrayOutput{})
	pulumi.RegisterOutputType(RuntimeScriptActionResponseOutput{})
	pulumi.RegisterOutputType(RuntimeScriptActionResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingRuleOutput{})
	pulumi.RegisterOutputType(ScalingRuleArrayOutput{})
	pulumi.RegisterOutputType(ScalingRuleResponseOutput{})
	pulumi.RegisterOutputType(ScalingRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(ScheduleOutput{})
	pulumi.RegisterOutputType(ScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigPtrOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigResponseOutput{})
	pulumi.RegisterOutputType(ScheduleBasedConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionOutput{})
	pulumi.RegisterOutputType(ScriptActionArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseOutput{})
	pulumi.RegisterOutputType(ScriptActionResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretReferenceOutput{})
	pulumi.RegisterOutputType(SecretReferenceArrayOutput{})
	pulumi.RegisterOutputType(SecretReferenceResponseOutput{})
	pulumi.RegisterOutputType(SecretReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretsProfileOutput{})
	pulumi.RegisterOutputType(SecretsProfilePtrOutput{})
	pulumi.RegisterOutputType(SecretsProfileResponseOutput{})
	pulumi.RegisterOutputType(SecretsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileOutput{})
	pulumi.RegisterOutputType(SecurityProfilePtrOutput{})
	pulumi.RegisterOutputType(SecurityProfileResponseOutput{})
	pulumi.RegisterOutputType(SecurityProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecPtrOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecResponseOutput{})
	pulumi.RegisterOutputType(SparkMetastoreSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkProfileOutput{})
	pulumi.RegisterOutputType(SparkProfilePtrOutput{})
	pulumi.RegisterOutputType(SparkProfileResponseOutput{})
	pulumi.RegisterOutputType(SparkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkUserPluginOutput{})
	pulumi.RegisterOutputType(SparkUserPluginArrayOutput{})
	pulumi.RegisterOutputType(SparkUserPluginResponseOutput{})
	pulumi.RegisterOutputType(SparkUserPluginResponseArrayOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsPtrOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsResponseOutput{})
	pulumi.RegisterOutputType(SparkUserPluginsResponsePtrOutput{})
	pulumi.RegisterOutputType(SshConnectivityEndpointResponseOutput{})
	pulumi.RegisterOutputType(SshConnectivityEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(SshProfileOutput{})
	pulumi.RegisterOutputType(SshProfilePtrOutput{})
	pulumi.RegisterOutputType(SshProfileResponseOutput{})
	pulumi.RegisterOutputType(SshProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyOutput{})
	pulumi.RegisterOutputType(SshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountOutput{})
	pulumi.RegisterOutputType(StorageAccountArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageProfileOutput{})
	pulumi.RegisterOutputType(StorageProfilePtrOutput{})
	pulumi.RegisterOutputType(StorageProfileResponseOutput{})
	pulumi.RegisterOutputType(StorageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorPtrOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorResponseOutput{})
	pulumi.RegisterOutputType(TrinoCoordinatorResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoProfileOutput{})
	pulumi.RegisterOutputType(TrinoProfilePtrOutput{})
	pulumi.RegisterOutputType(TrinoProfileResponseOutput{})
	pulumi.RegisterOutputType(TrinoProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigPtrOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigResponseOutput{})
	pulumi.RegisterOutputType(TrinoTelemetryConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginArrayOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginResponseOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginResponseArrayOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsPtrOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsResponseOutput{})
	pulumi.RegisterOutputType(TrinoUserPluginsResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryPtrOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryResponseOutput{})
	pulumi.RegisterOutputType(TrinoUserTelemetryResponsePtrOutput{})
	pulumi.RegisterOutputType(TrinoWorkerOutput{})
	pulumi.RegisterOutputType(TrinoWorkerPtrOutput{})
	pulumi.RegisterOutputType(TrinoWorkerResponseOutput{})
	pulumi.RegisterOutputType(TrinoWorkerResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityMapOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(VirtualNetworkProfileOutput{})
	pulumi.RegisterOutputType(VirtualNetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(VirtualNetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(VirtualNetworkProfileResponsePtrOutput{})
}
