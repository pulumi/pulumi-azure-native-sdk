// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
type AutoscaleType string

const (
	AutoscaleTypeScheduleBased = AutoscaleType("ScheduleBased")
	AutoscaleTypeLoadBased     = AutoscaleType("LoadBased")
)

func (AutoscaleType) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleType)(nil)).Elem()
}

func (e AutoscaleType) ToAutoscaleTypeOutput() AutoscaleTypeOutput {
	return pulumi.ToOutput(e).(AutoscaleTypeOutput)
}

func (e AutoscaleType) ToAutoscaleTypeOutputWithContext(ctx context.Context) AutoscaleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AutoscaleTypeOutput)
}

func (e AutoscaleType) ToAutoscaleTypePtrOutput() AutoscaleTypePtrOutput {
	return e.ToAutoscaleTypePtrOutputWithContext(context.Background())
}

func (e AutoscaleType) ToAutoscaleTypePtrOutputWithContext(ctx context.Context) AutoscaleTypePtrOutput {
	return AutoscaleType(e).ToAutoscaleTypeOutputWithContext(ctx).ToAutoscaleTypePtrOutputWithContext(ctx)
}

func (e AutoscaleType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscaleType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscaleType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscaleType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AutoscaleTypeOutput struct{ *pulumi.OutputState }

func (AutoscaleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleType)(nil)).Elem()
}

func (o AutoscaleTypeOutput) ToAutoscaleTypeOutput() AutoscaleTypeOutput {
	return o
}

func (o AutoscaleTypeOutput) ToAutoscaleTypeOutputWithContext(ctx context.Context) AutoscaleTypeOutput {
	return o
}

func (o AutoscaleTypeOutput) ToAutoscaleTypePtrOutput() AutoscaleTypePtrOutput {
	return o.ToAutoscaleTypePtrOutputWithContext(context.Background())
}

func (o AutoscaleTypeOutput) ToAutoscaleTypePtrOutputWithContext(ctx context.Context) AutoscaleTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscaleType) *AutoscaleType {
		return &v
	}).(AutoscaleTypePtrOutput)
}

func (o AutoscaleTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AutoscaleTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AutoscaleType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AutoscaleTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AutoscaleTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AutoscaleType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AutoscaleTypePtrOutput struct{ *pulumi.OutputState }

func (AutoscaleTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscaleType)(nil)).Elem()
}

func (o AutoscaleTypePtrOutput) ToAutoscaleTypePtrOutput() AutoscaleTypePtrOutput {
	return o
}

func (o AutoscaleTypePtrOutput) ToAutoscaleTypePtrOutputWithContext(ctx context.Context) AutoscaleTypePtrOutput {
	return o
}

func (o AutoscaleTypePtrOutput) Elem() AutoscaleTypeOutput {
	return o.ApplyT(func(v *AutoscaleType) AutoscaleType {
		if v != nil {
			return *v
		}
		var ret AutoscaleType
		return ret
	}).(AutoscaleTypeOutput)
}

func (o AutoscaleTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AutoscaleTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AutoscaleType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AutoscaleTypeInput is an input type that accepts values of the AutoscaleType enum
// A concrete instance of `AutoscaleTypeInput` can be one of the following:
//
//	AutoscaleTypeScheduleBased
//	AutoscaleTypeLoadBased
type AutoscaleTypeInput interface {
	pulumi.Input

	ToAutoscaleTypeOutput() AutoscaleTypeOutput
	ToAutoscaleTypeOutputWithContext(context.Context) AutoscaleTypeOutput
}

var autoscaleTypePtrType = reflect.TypeOf((**AutoscaleType)(nil)).Elem()

type AutoscaleTypePtrInput interface {
	pulumi.Input

	ToAutoscaleTypePtrOutput() AutoscaleTypePtrOutput
	ToAutoscaleTypePtrOutputWithContext(context.Context) AutoscaleTypePtrOutput
}

type autoscaleTypePtr string

func AutoscaleTypePtr(v string) AutoscaleTypePtrInput {
	return (*autoscaleTypePtr)(&v)
}

func (*autoscaleTypePtr) ElementType() reflect.Type {
	return autoscaleTypePtrType
}

func (in *autoscaleTypePtr) ToAutoscaleTypePtrOutput() AutoscaleTypePtrOutput {
	return pulumi.ToOutput(in).(AutoscaleTypePtrOutput)
}

func (in *autoscaleTypePtr) ToAutoscaleTypePtrOutputWithContext(ctx context.Context) AutoscaleTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AutoscaleTypePtrOutput)
}

func (in *autoscaleTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AutoscaleType] {
	return pulumix.Output[*AutoscaleType]{
		OutputState: in.ToAutoscaleTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The comparison operator.
type ComparisonOperator string

const (
	ComparisonOperatorGreaterThan        = ComparisonOperator("greaterThan")
	ComparisonOperatorGreaterThanOrEqual = ComparisonOperator("greaterThanOrEqual")
	ComparisonOperatorLessThan           = ComparisonOperator("lessThan")
	ComparisonOperatorLessThanOrEqual    = ComparisonOperator("lessThanOrEqual")
)

func (ComparisonOperator) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonOperator)(nil)).Elem()
}

func (e ComparisonOperator) ToComparisonOperatorOutput() ComparisonOperatorOutput {
	return pulumi.ToOutput(e).(ComparisonOperatorOutput)
}

func (e ComparisonOperator) ToComparisonOperatorOutputWithContext(ctx context.Context) ComparisonOperatorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ComparisonOperatorOutput)
}

func (e ComparisonOperator) ToComparisonOperatorPtrOutput() ComparisonOperatorPtrOutput {
	return e.ToComparisonOperatorPtrOutputWithContext(context.Background())
}

func (e ComparisonOperator) ToComparisonOperatorPtrOutputWithContext(ctx context.Context) ComparisonOperatorPtrOutput {
	return ComparisonOperator(e).ToComparisonOperatorOutputWithContext(ctx).ToComparisonOperatorPtrOutputWithContext(ctx)
}

func (e ComparisonOperator) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComparisonOperator) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ComparisonOperator) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ComparisonOperator) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ComparisonOperatorOutput struct{ *pulumi.OutputState }

func (ComparisonOperatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComparisonOperator)(nil)).Elem()
}

func (o ComparisonOperatorOutput) ToComparisonOperatorOutput() ComparisonOperatorOutput {
	return o
}

func (o ComparisonOperatorOutput) ToComparisonOperatorOutputWithContext(ctx context.Context) ComparisonOperatorOutput {
	return o
}

func (o ComparisonOperatorOutput) ToComparisonOperatorPtrOutput() ComparisonOperatorPtrOutput {
	return o.ToComparisonOperatorPtrOutputWithContext(context.Background())
}

func (o ComparisonOperatorOutput) ToComparisonOperatorPtrOutputWithContext(ctx context.Context) ComparisonOperatorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComparisonOperator) *ComparisonOperator {
		return &v
	}).(ComparisonOperatorPtrOutput)
}

func (o ComparisonOperatorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ComparisonOperatorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComparisonOperator) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ComparisonOperatorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComparisonOperatorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ComparisonOperator) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ComparisonOperatorPtrOutput struct{ *pulumi.OutputState }

func (ComparisonOperatorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComparisonOperator)(nil)).Elem()
}

func (o ComparisonOperatorPtrOutput) ToComparisonOperatorPtrOutput() ComparisonOperatorPtrOutput {
	return o
}

func (o ComparisonOperatorPtrOutput) ToComparisonOperatorPtrOutputWithContext(ctx context.Context) ComparisonOperatorPtrOutput {
	return o
}

func (o ComparisonOperatorPtrOutput) Elem() ComparisonOperatorOutput {
	return o.ApplyT(func(v *ComparisonOperator) ComparisonOperator {
		if v != nil {
			return *v
		}
		var ret ComparisonOperator
		return ret
	}).(ComparisonOperatorOutput)
}

func (o ComparisonOperatorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ComparisonOperatorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ComparisonOperator) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ComparisonOperatorInput is an input type that accepts values of the ComparisonOperator enum
// A concrete instance of `ComparisonOperatorInput` can be one of the following:
//
//	ComparisonOperatorGreaterThan
//	ComparisonOperatorGreaterThanOrEqual
//	ComparisonOperatorLessThan
//	ComparisonOperatorLessThanOrEqual
type ComparisonOperatorInput interface {
	pulumi.Input

	ToComparisonOperatorOutput() ComparisonOperatorOutput
	ToComparisonOperatorOutputWithContext(context.Context) ComparisonOperatorOutput
}

var comparisonOperatorPtrType = reflect.TypeOf((**ComparisonOperator)(nil)).Elem()

type ComparisonOperatorPtrInput interface {
	pulumi.Input

	ToComparisonOperatorPtrOutput() ComparisonOperatorPtrOutput
	ToComparisonOperatorPtrOutputWithContext(context.Context) ComparisonOperatorPtrOutput
}

type comparisonOperatorPtr string

func ComparisonOperatorPtr(v string) ComparisonOperatorPtrInput {
	return (*comparisonOperatorPtr)(&v)
}

func (*comparisonOperatorPtr) ElementType() reflect.Type {
	return comparisonOperatorPtrType
}

func (in *comparisonOperatorPtr) ToComparisonOperatorPtrOutput() ComparisonOperatorPtrOutput {
	return pulumi.ToOutput(in).(ComparisonOperatorPtrOutput)
}

func (in *comparisonOperatorPtr) ToComparisonOperatorPtrOutputWithContext(ctx context.Context) ComparisonOperatorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ComparisonOperatorPtrOutput)
}

func (in *comparisonOperatorPtr) ToOutput(ctx context.Context) pulumix.Output[*ComparisonOperator] {
	return pulumix.Output[*ComparisonOperator]{
		OutputState: in.ToComparisonOperatorPtrOutputWithContext(ctx).OutputState,
	}
}

// This property indicates if the content is encoded and is case-insensitive. Please set the value to base64 if the content is base64 encoded. Set it to none or skip it if the content is plain text.
type ContentEncoding string

const (
	ContentEncodingBase64 = ContentEncoding("Base64")
	ContentEncodingNone   = ContentEncoding("None")
)

func (ContentEncoding) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentEncoding)(nil)).Elem()
}

func (e ContentEncoding) ToContentEncodingOutput() ContentEncodingOutput {
	return pulumi.ToOutput(e).(ContentEncodingOutput)
}

func (e ContentEncoding) ToContentEncodingOutputWithContext(ctx context.Context) ContentEncodingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentEncodingOutput)
}

func (e ContentEncoding) ToContentEncodingPtrOutput() ContentEncodingPtrOutput {
	return e.ToContentEncodingPtrOutputWithContext(context.Background())
}

func (e ContentEncoding) ToContentEncodingPtrOutputWithContext(ctx context.Context) ContentEncodingPtrOutput {
	return ContentEncoding(e).ToContentEncodingOutputWithContext(ctx).ToContentEncodingPtrOutputWithContext(ctx)
}

func (e ContentEncoding) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentEncoding) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentEncoding) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentEncoding) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentEncodingOutput struct{ *pulumi.OutputState }

func (ContentEncodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentEncoding)(nil)).Elem()
}

func (o ContentEncodingOutput) ToContentEncodingOutput() ContentEncodingOutput {
	return o
}

func (o ContentEncodingOutput) ToContentEncodingOutputWithContext(ctx context.Context) ContentEncodingOutput {
	return o
}

func (o ContentEncodingOutput) ToContentEncodingPtrOutput() ContentEncodingPtrOutput {
	return o.ToContentEncodingPtrOutputWithContext(context.Background())
}

func (o ContentEncodingOutput) ToContentEncodingPtrOutputWithContext(ctx context.Context) ContentEncodingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentEncoding) *ContentEncoding {
		return &v
	}).(ContentEncodingPtrOutput)
}

func (o ContentEncodingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentEncodingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentEncoding) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentEncodingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentEncodingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentEncoding) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentEncodingPtrOutput struct{ *pulumi.OutputState }

func (ContentEncodingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentEncoding)(nil)).Elem()
}

func (o ContentEncodingPtrOutput) ToContentEncodingPtrOutput() ContentEncodingPtrOutput {
	return o
}

func (o ContentEncodingPtrOutput) ToContentEncodingPtrOutputWithContext(ctx context.Context) ContentEncodingPtrOutput {
	return o
}

func (o ContentEncodingPtrOutput) Elem() ContentEncodingOutput {
	return o.ApplyT(func(v *ContentEncoding) ContentEncoding {
		if v != nil {
			return *v
		}
		var ret ContentEncoding
		return ret
	}).(ContentEncodingOutput)
}

func (o ContentEncodingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentEncodingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentEncoding) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ContentEncodingInput is an input type that accepts values of the ContentEncoding enum
// A concrete instance of `ContentEncodingInput` can be one of the following:
//
//	ContentEncodingBase64
//	ContentEncodingNone
type ContentEncodingInput interface {
	pulumi.Input

	ToContentEncodingOutput() ContentEncodingOutput
	ToContentEncodingOutputWithContext(context.Context) ContentEncodingOutput
}

var contentEncodingPtrType = reflect.TypeOf((**ContentEncoding)(nil)).Elem()

type ContentEncodingPtrInput interface {
	pulumi.Input

	ToContentEncodingPtrOutput() ContentEncodingPtrOutput
	ToContentEncodingPtrOutputWithContext(context.Context) ContentEncodingPtrOutput
}

type contentEncodingPtr string

func ContentEncodingPtr(v string) ContentEncodingPtrInput {
	return (*contentEncodingPtr)(&v)
}

func (*contentEncodingPtr) ElementType() reflect.Type {
	return contentEncodingPtrType
}

func (in *contentEncodingPtr) ToContentEncodingPtrOutput() ContentEncodingPtrOutput {
	return pulumi.ToOutput(in).(ContentEncodingPtrOutput)
}

func (in *contentEncodingPtr) ToContentEncodingPtrOutputWithContext(ctx context.Context) ContentEncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentEncodingPtrOutput)
}

func (in *contentEncodingPtr) ToOutput(ctx context.Context) pulumix.Output[*ContentEncoding] {
	return pulumix.Output[*ContentEncoding]{
		OutputState: in.ToContentEncodingPtrOutputWithContext(ctx).OutputState,
	}
}

// Type of key vault object: secret, key or certificate.
type KeyVaultObjectType string

const (
	KeyVaultObjectTypeKey         = KeyVaultObjectType("Key")
	KeyVaultObjectTypeSecret      = KeyVaultObjectType("Secret")
	KeyVaultObjectTypeCertificate = KeyVaultObjectType("Certificate")
)

func (KeyVaultObjectType) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultObjectType)(nil)).Elem()
}

func (e KeyVaultObjectType) ToKeyVaultObjectTypeOutput() KeyVaultObjectTypeOutput {
	return pulumi.ToOutput(e).(KeyVaultObjectTypeOutput)
}

func (e KeyVaultObjectType) ToKeyVaultObjectTypeOutputWithContext(ctx context.Context) KeyVaultObjectTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(KeyVaultObjectTypeOutput)
}

func (e KeyVaultObjectType) ToKeyVaultObjectTypePtrOutput() KeyVaultObjectTypePtrOutput {
	return e.ToKeyVaultObjectTypePtrOutputWithContext(context.Background())
}

func (e KeyVaultObjectType) ToKeyVaultObjectTypePtrOutputWithContext(ctx context.Context) KeyVaultObjectTypePtrOutput {
	return KeyVaultObjectType(e).ToKeyVaultObjectTypeOutputWithContext(ctx).ToKeyVaultObjectTypePtrOutputWithContext(ctx)
}

func (e KeyVaultObjectType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVaultObjectType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e KeyVaultObjectType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e KeyVaultObjectType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type KeyVaultObjectTypeOutput struct{ *pulumi.OutputState }

func (KeyVaultObjectTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultObjectType)(nil)).Elem()
}

func (o KeyVaultObjectTypeOutput) ToKeyVaultObjectTypeOutput() KeyVaultObjectTypeOutput {
	return o
}

func (o KeyVaultObjectTypeOutput) ToKeyVaultObjectTypeOutputWithContext(ctx context.Context) KeyVaultObjectTypeOutput {
	return o
}

func (o KeyVaultObjectTypeOutput) ToKeyVaultObjectTypePtrOutput() KeyVaultObjectTypePtrOutput {
	return o.ToKeyVaultObjectTypePtrOutputWithContext(context.Background())
}

func (o KeyVaultObjectTypeOutput) ToKeyVaultObjectTypePtrOutputWithContext(ctx context.Context) KeyVaultObjectTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultObjectType) *KeyVaultObjectType {
		return &v
	}).(KeyVaultObjectTypePtrOutput)
}

func (o KeyVaultObjectTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o KeyVaultObjectTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyVaultObjectType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o KeyVaultObjectTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyVaultObjectTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e KeyVaultObjectType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type KeyVaultObjectTypePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultObjectTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultObjectType)(nil)).Elem()
}

func (o KeyVaultObjectTypePtrOutput) ToKeyVaultObjectTypePtrOutput() KeyVaultObjectTypePtrOutput {
	return o
}

func (o KeyVaultObjectTypePtrOutput) ToKeyVaultObjectTypePtrOutputWithContext(ctx context.Context) KeyVaultObjectTypePtrOutput {
	return o
}

func (o KeyVaultObjectTypePtrOutput) Elem() KeyVaultObjectTypeOutput {
	return o.ApplyT(func(v *KeyVaultObjectType) KeyVaultObjectType {
		if v != nil {
			return *v
		}
		var ret KeyVaultObjectType
		return ret
	}).(KeyVaultObjectTypeOutput)
}

func (o KeyVaultObjectTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o KeyVaultObjectTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *KeyVaultObjectType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// KeyVaultObjectTypeInput is an input type that accepts values of the KeyVaultObjectType enum
// A concrete instance of `KeyVaultObjectTypeInput` can be one of the following:
//
//	KeyVaultObjectTypeKey
//	KeyVaultObjectTypeSecret
//	KeyVaultObjectTypeCertificate
type KeyVaultObjectTypeInput interface {
	pulumi.Input

	ToKeyVaultObjectTypeOutput() KeyVaultObjectTypeOutput
	ToKeyVaultObjectTypeOutputWithContext(context.Context) KeyVaultObjectTypeOutput
}

var keyVaultObjectTypePtrType = reflect.TypeOf((**KeyVaultObjectType)(nil)).Elem()

type KeyVaultObjectTypePtrInput interface {
	pulumi.Input

	ToKeyVaultObjectTypePtrOutput() KeyVaultObjectTypePtrOutput
	ToKeyVaultObjectTypePtrOutputWithContext(context.Context) KeyVaultObjectTypePtrOutput
}

type keyVaultObjectTypePtr string

func KeyVaultObjectTypePtr(v string) KeyVaultObjectTypePtrInput {
	return (*keyVaultObjectTypePtr)(&v)
}

func (*keyVaultObjectTypePtr) ElementType() reflect.Type {
	return keyVaultObjectTypePtrType
}

func (in *keyVaultObjectTypePtr) ToKeyVaultObjectTypePtrOutput() KeyVaultObjectTypePtrOutput {
	return pulumi.ToOutput(in).(KeyVaultObjectTypePtrOutput)
}

func (in *keyVaultObjectTypePtr) ToKeyVaultObjectTypePtrOutputWithContext(ctx context.Context) KeyVaultObjectTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(KeyVaultObjectTypePtrOutput)
}

func (in *keyVaultObjectTypePtr) ToOutput(ctx context.Context) pulumix.Output[*KeyVaultObjectType] {
	return pulumix.Output[*KeyVaultObjectType]{
		OutputState: in.ToKeyVaultObjectTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The action type.
type ScaleActionType string

const (
	ScaleActionTypeScaleup   = ScaleActionType("scaleup")
	ScaleActionTypeScaledown = ScaleActionType("scaledown")
)

func (ScaleActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleActionType)(nil)).Elem()
}

func (e ScaleActionType) ToScaleActionTypeOutput() ScaleActionTypeOutput {
	return pulumi.ToOutput(e).(ScaleActionTypeOutput)
}

func (e ScaleActionType) ToScaleActionTypeOutputWithContext(ctx context.Context) ScaleActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScaleActionTypeOutput)
}

func (e ScaleActionType) ToScaleActionTypePtrOutput() ScaleActionTypePtrOutput {
	return e.ToScaleActionTypePtrOutputWithContext(context.Background())
}

func (e ScaleActionType) ToScaleActionTypePtrOutputWithContext(ctx context.Context) ScaleActionTypePtrOutput {
	return ScaleActionType(e).ToScaleActionTypeOutputWithContext(ctx).ToScaleActionTypePtrOutputWithContext(ctx)
}

func (e ScaleActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScaleActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScaleActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScaleActionTypeOutput struct{ *pulumi.OutputState }

func (ScaleActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleActionType)(nil)).Elem()
}

func (o ScaleActionTypeOutput) ToScaleActionTypeOutput() ScaleActionTypeOutput {
	return o
}

func (o ScaleActionTypeOutput) ToScaleActionTypeOutputWithContext(ctx context.Context) ScaleActionTypeOutput {
	return o
}

func (o ScaleActionTypeOutput) ToScaleActionTypePtrOutput() ScaleActionTypePtrOutput {
	return o.ToScaleActionTypePtrOutputWithContext(context.Background())
}

func (o ScaleActionTypeOutput) ToScaleActionTypePtrOutputWithContext(ctx context.Context) ScaleActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleActionType) *ScaleActionType {
		return &v
	}).(ScaleActionTypePtrOutput)
}

func (o ScaleActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScaleActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScaleActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScaleActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScaleActionTypePtrOutput struct{ *pulumi.OutputState }

func (ScaleActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleActionType)(nil)).Elem()
}

func (o ScaleActionTypePtrOutput) ToScaleActionTypePtrOutput() ScaleActionTypePtrOutput {
	return o
}

func (o ScaleActionTypePtrOutput) ToScaleActionTypePtrOutputWithContext(ctx context.Context) ScaleActionTypePtrOutput {
	return o
}

func (o ScaleActionTypePtrOutput) Elem() ScaleActionTypeOutput {
	return o.ApplyT(func(v *ScaleActionType) ScaleActionType {
		if v != nil {
			return *v
		}
		var ret ScaleActionType
		return ret
	}).(ScaleActionTypeOutput)
}

func (o ScaleActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScaleActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScaleActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScaleActionTypeInput is an input type that accepts values of the ScaleActionType enum
// A concrete instance of `ScaleActionTypeInput` can be one of the following:
//
//	ScaleActionTypeScaleup
//	ScaleActionTypeScaledown
type ScaleActionTypeInput interface {
	pulumi.Input

	ToScaleActionTypeOutput() ScaleActionTypeOutput
	ToScaleActionTypeOutputWithContext(context.Context) ScaleActionTypeOutput
}

var scaleActionTypePtrType = reflect.TypeOf((**ScaleActionType)(nil)).Elem()

type ScaleActionTypePtrInput interface {
	pulumi.Input

	ToScaleActionTypePtrOutput() ScaleActionTypePtrOutput
	ToScaleActionTypePtrOutputWithContext(context.Context) ScaleActionTypePtrOutput
}

type scaleActionTypePtr string

func ScaleActionTypePtr(v string) ScaleActionTypePtrInput {
	return (*scaleActionTypePtr)(&v)
}

func (*scaleActionTypePtr) ElementType() reflect.Type {
	return scaleActionTypePtrType
}

func (in *scaleActionTypePtr) ToScaleActionTypePtrOutput() ScaleActionTypePtrOutput {
	return pulumi.ToOutput(in).(ScaleActionTypePtrOutput)
}

func (in *scaleActionTypePtr) ToScaleActionTypePtrOutputWithContext(ctx context.Context) ScaleActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScaleActionTypePtrOutput)
}

func (in *scaleActionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ScaleActionType] {
	return pulumix.Output[*ScaleActionType]{
		OutputState: in.ToScaleActionTypePtrOutputWithContext(ctx).OutputState,
	}
}

type ScheduleDay string

const (
	ScheduleDaySunday    = ScheduleDay("Sunday")
	ScheduleDayMonday    = ScheduleDay("Monday")
	ScheduleDayTuesday   = ScheduleDay("Tuesday")
	ScheduleDayWednesday = ScheduleDay("Wednesday")
	ScheduleDayThursday  = ScheduleDay("Thursday")
	ScheduleDayFriday    = ScheduleDay("Friday")
	ScheduleDaySaturday  = ScheduleDay("Saturday")
)

func (ScheduleDay) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleDay)(nil)).Elem()
}

func (e ScheduleDay) ToScheduleDayOutput() ScheduleDayOutput {
	return pulumi.ToOutput(e).(ScheduleDayOutput)
}

func (e ScheduleDay) ToScheduleDayOutputWithContext(ctx context.Context) ScheduleDayOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleDayOutput)
}

func (e ScheduleDay) ToScheduleDayPtrOutput() ScheduleDayPtrOutput {
	return e.ToScheduleDayPtrOutputWithContext(context.Background())
}

func (e ScheduleDay) ToScheduleDayPtrOutputWithContext(ctx context.Context) ScheduleDayPtrOutput {
	return ScheduleDay(e).ToScheduleDayOutputWithContext(ctx).ToScheduleDayPtrOutputWithContext(ctx)
}

func (e ScheduleDay) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleDay) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleDay) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleDay) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleDayOutput struct{ *pulumi.OutputState }

func (ScheduleDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleDay)(nil)).Elem()
}

func (o ScheduleDayOutput) ToScheduleDayOutput() ScheduleDayOutput {
	return o
}

func (o ScheduleDayOutput) ToScheduleDayOutputWithContext(ctx context.Context) ScheduleDayOutput {
	return o
}

func (o ScheduleDayOutput) ToScheduleDayPtrOutput() ScheduleDayPtrOutput {
	return o.ToScheduleDayPtrOutputWithContext(context.Background())
}

func (o ScheduleDayOutput) ToScheduleDayPtrOutputWithContext(ctx context.Context) ScheduleDayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleDay) *ScheduleDay {
		return &v
	}).(ScheduleDayPtrOutput)
}

func (o ScheduleDayOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleDayOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleDay) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleDayOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleDayOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleDay) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleDayPtrOutput struct{ *pulumi.OutputState }

func (ScheduleDayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleDay)(nil)).Elem()
}

func (o ScheduleDayPtrOutput) ToScheduleDayPtrOutput() ScheduleDayPtrOutput {
	return o
}

func (o ScheduleDayPtrOutput) ToScheduleDayPtrOutputWithContext(ctx context.Context) ScheduleDayPtrOutput {
	return o
}

func (o ScheduleDayPtrOutput) Elem() ScheduleDayOutput {
	return o.ApplyT(func(v *ScheduleDay) ScheduleDay {
		if v != nil {
			return *v
		}
		var ret ScheduleDay
		return ret
	}).(ScheduleDayOutput)
}

func (o ScheduleDayPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleDayPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleDay) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleDayInput is an input type that accepts values of the ScheduleDay enum
// A concrete instance of `ScheduleDayInput` can be one of the following:
//
//	ScheduleDaySunday
//	ScheduleDayMonday
//	ScheduleDayTuesday
//	ScheduleDayWednesday
//	ScheduleDayThursday
//	ScheduleDayFriday
//	ScheduleDaySaturday
type ScheduleDayInput interface {
	pulumi.Input

	ToScheduleDayOutput() ScheduleDayOutput
	ToScheduleDayOutputWithContext(context.Context) ScheduleDayOutput
}

var scheduleDayPtrType = reflect.TypeOf((**ScheduleDay)(nil)).Elem()

type ScheduleDayPtrInput interface {
	pulumi.Input

	ToScheduleDayPtrOutput() ScheduleDayPtrOutput
	ToScheduleDayPtrOutputWithContext(context.Context) ScheduleDayPtrOutput
}

type scheduleDayPtr string

func ScheduleDayPtr(v string) ScheduleDayPtrInput {
	return (*scheduleDayPtr)(&v)
}

func (*scheduleDayPtr) ElementType() reflect.Type {
	return scheduleDayPtrType
}

func (in *scheduleDayPtr) ToScheduleDayPtrOutput() ScheduleDayPtrOutput {
	return pulumi.ToOutput(in).(ScheduleDayPtrOutput)
}

func (in *scheduleDayPtr) ToScheduleDayPtrOutputWithContext(ctx context.Context) ScheduleDayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleDayPtrOutput)
}

func (in *scheduleDayPtr) ToOutput(ctx context.Context) pulumix.Output[*ScheduleDay] {
	return pulumix.Output[*ScheduleDay]{
		OutputState: in.ToScheduleDayPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AutoscaleTypeOutput{})
	pulumi.RegisterOutputType(AutoscaleTypePtrOutput{})
	pulumi.RegisterOutputType(ComparisonOperatorOutput{})
	pulumi.RegisterOutputType(ComparisonOperatorPtrOutput{})
	pulumi.RegisterOutputType(ContentEncodingOutput{})
	pulumi.RegisterOutputType(ContentEncodingPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultObjectTypeOutput{})
	pulumi.RegisterOutputType(KeyVaultObjectTypePtrOutput{})
	pulumi.RegisterOutputType(ScaleActionTypeOutput{})
	pulumi.RegisterOutputType(ScaleActionTypePtrOutput{})
	pulumi.RegisterOutputType(ScheduleDayOutput{})
	pulumi.RegisterOutputType(ScheduleDayPtrOutput{})
}
